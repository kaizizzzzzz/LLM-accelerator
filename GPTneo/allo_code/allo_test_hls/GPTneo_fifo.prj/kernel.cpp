
//===------------------------------------------------------------*- C++ -*-===//
//
// Automatically generated file for High-level Synthesis (HLS).
//
//===----------------------------------------------------------------------===//
#include <algorithm>
#include <ap_axi_sdata.h>
#include <ap_fixed.h>
#include <ap_int.h>
#include <hls_math.h>
#include <hls_stream.h>
#include <math.h>
#include <stdint.h>
using namespace std;

extern "C" {

void layer_norm(float v0[64][768], float v1[768], float v2[768],
                float v3[64][768]) { // L5
  float mean[64];                    // L7
  for (int v5 = 0; v5 < 64; v5++) {  // L9
    mean[v5] = 0.000000;             // L9
  }
  float mean2[64];                  // L10
  for (int v7 = 0; v7 < 64; v7++) { // L11
    mean2[v7] = 0.000000;           // L11
  }
  float var[64]; // L12
l_sum_i:
  for (int i = 0; i < 64; i++) { // L13
  l_j:
    for (int j = 0; j < 768; j++) { // L14
      float v11 = v0[i][j];         // L15
      float v12 = mean[i];          // L16
      float v13 = v12 + v11;        // L17
      mean[i] = v13;                // L18
      float v14 = v0[i][j];         // L19
      float v15 = v14 * v14;        // L20
      float v16 = mean2[i];         // L21
      float v17 = v16 + v15;        // L22
      mean2[i] = v17;               // L23
    }
  }
l_mean_var_i1:
  for (int i1 = 0; i1 < 64; i1++) { // L26
    float v19 = mean[i1];           // L27
    float v20 = v19 / 768.000000;   // L30
    mean[i1] = v20;                 // L31
    float v21 = mean2[i1];          // L32
    float v22 = v21 / 768.000000;   // L33
    mean2[i1] = v22;                // L34
    float v23 = mean2[i1];          // L35
    float v24 = mean[i1];           // L36
    float v25 = v24 * v24;          // L37
    float v26 = v23 - v25;          // L38
    var[i1] = v26;                  // L39
  }
l_norm_i2:
  for (int i2 = 0; i2 < 64; i2++) { // L41
  l_j1:
    for (int j1 = 0; j1 < 768; j1++) { // L42
      float v29 = v1[j1];              // L43
      float v30 = v0[i2][j1];          // L44
      float v31 = mean[i2];            // L45
      float v32 = v30 - v31;           // L46
      float v33 = v29 * v32;           // L47
      float v34 = var[i2];             // L48
      float v35 = v34 + 0.000010;      // L50
      float v36 = sqrt(v35);           // L51
      float v37 = v33 / v36;           // L52
      float v38 = v2[j1];              // L53
      float v39 = v37 + v38;           // L54
      v3[i2][j1] = v39;                // L55
    }
  }
}

void PE_kernel_Q_0_0(hls::stream<float> &v40 /* v40[768] */,
                     hls::stream<float> &v41 /* v41[768] */,
                     hls::stream<float> &v42 /* v42[768] */,
                     hls::stream<float> &v43 /* v43[768] */, float v44[8][8],
                     int v45,
                     int v46) { // L60
#pragma HLS stream variable = v40 depth = 9
#pragma HLS stream variable = v41 depth = 9
#pragma HLS stream variable = v42 depth = 9
#pragma HLS stream variable = v43 depth = 9
#pragma HLS array_partition variable = v44 complete dim = 1
#pragma HLS array_partition variable = v44 complete dim = 2

  float v;      // L63
  v = 0.000000; // L64
l_S_k_0_k:
  for (int k = 0; k < 768; k++) { // L65
    float v49 = v40.read();       // v40[k];	// L66
    float a;                      // L67
    a = v49;                      // L68
    float v51 = v41.read();       // v41[k];	// L69
    float b;                      // L70
    b = v51;                      // L71
    float v53 = a;                // L72
    float v54 = b;                // L73
    float v55 = v53 * v54;        // L74
    float v56 = v;                // L75
    float v57 = v56 + v55;        // L76
    v = v57;                      // L77
    float v58 = a;                // L78
    v42.write(v58);               // v42[k] = v58;	// L79
    float v59 = b;                // L80
    v43.write(v59);               // v43[k] = v59;	// L81
  }
  float v60 = v;       // L83
  v44[v45][v46] = v60; // L84
}

void PE_kernel_Q_1_0(hls::stream<float> &v61 /* v61[768] */,
                     hls::stream<float> &v62 /* v62[768] */,
                     hls::stream<float> &v63 /* v63[768] */,
                     hls::stream<float> &v64 /* v64[768] */, float v65[8][8],
                     int v66,
                     int v67) { // L87
#pragma HLS stream variable = v61 depth = 9
#pragma HLS stream variable = v62 depth = 9
#pragma HLS stream variable = v63 depth = 9
#pragma HLS stream variable = v64 depth = 9
#pragma HLS array_partition variable = v65 complete dim = 1
#pragma HLS array_partition variable = v65 complete dim = 2

  float v1;      // L90
  v1 = 0.000000; // L91
l_S_k_0_k1:
  for (int k1 = 0; k1 < 768; k1++) { // L92
    float v70 = v61.read();          // v61[k1];	// L93
    float a1;                        // L94
    a1 = v70;                        // L95
    float v72 = v62.read();          // v62[k1];	// L96
    float b1;                        // L97
    b1 = v72;                        // L98
    float v74 = a1;                  // L99
    float v75 = b1;                  // L100
    float v76 = v74 * v75;           // L101
    float v77 = v1;                  // L102
    float v78 = v77 + v76;           // L103
    v1 = v78;                        // L104
    float v79 = a1;                  // L105
    v63.write(v79);                  // v63[k1] = v79;	// L106
    float v80 = b1;                  // L107
    v64.write(v80);                  // v64[k1] = v80;	// L108
  }
  float v81 = v1;      // L110
  v65[v66][v67] = v81; // L111
}

void PE_kernel_Q_2_0(hls::stream<float> &v82 /* v82[768] */,
                     hls::stream<float> &v83 /* v83[768] */,
                     hls::stream<float> &v84 /* v84[768] */,
                     hls::stream<float> &v85 /* v85[768] */, float v86[8][8],
                     int v87,
                     int v88) { // L114
#pragma HLS stream variable = v82 depth = 9
#pragma HLS stream variable = v83 depth = 9
#pragma HLS stream variable = v84 depth = 9
#pragma HLS stream variable = v85 depth = 9
#pragma HLS array_partition variable = v86 complete dim = 1
#pragma HLS array_partition variable = v86 complete dim = 2

  float v2;      // L117
  v2 = 0.000000; // L118
l_S_k_0_k2:
  for (int k2 = 0; k2 < 768; k2++) { // L119
    float v91 = v82.read();          // v82[k2];	// L120
    float a2;                        // L121
    a2 = v91;                        // L122
    float v93 = v83.read();          // v83[k2];	// L123
    float b2;                        // L124
    b2 = v93;                        // L125
    float v95 = a2;                  // L126
    float v96 = b2;                  // L127
    float v97 = v95 * v96;           // L128
    float v98 = v2;                  // L129
    float v99 = v98 + v97;           // L130
    v2 = v99;                        // L131
    float v100 = a2;                 // L132
    v84.write(v100);                 // v84[k2] = v100;	// L133
    float v101 = b2;                 // L134
    v85.write(v101);                 // v85[k2] = v101;	// L135
  }
  float v102 = v2;      // L137
  v86[v87][v88] = v102; // L138
}

void PE_kernel_Q_3_0(hls::stream<float> &v103 /* v103[768] */,
                     hls::stream<float> &v104 /* v104[768] */,
                     hls::stream<float> &v105 /* v105[768] */,
                     hls::stream<float> &v106 /* v106[768] */, float v107[8][8],
                     int v108,
                     int v109) { // L141
#pragma HLS stream variable = v103 depth = 9
#pragma HLS stream variable = v104 depth = 9
#pragma HLS stream variable = v105 depth = 9
#pragma HLS stream variable = v106 depth = 9
#pragma HLS array_partition variable = v107 complete dim = 1
#pragma HLS array_partition variable = v107 complete dim = 2

  float v3;      // L144
  v3 = 0.000000; // L145
l_S_k_0_k3:
  for (int k3 = 0; k3 < 768; k3++) { // L146
    float v112 = v103.read();        // v103[k3];	// L147
    float a3;                        // L148
    a3 = v112;                       // L149
    float v114 = v104.read();        // v104[k3];	// L150
    float b3;                        // L151
    b3 = v114;                       // L152
    float v116 = a3;                 // L153
    float v117 = b3;                 // L154
    float v118 = v116 * v117;        // L155
    float v119 = v3;                 // L156
    float v120 = v119 + v118;        // L157
    v3 = v120;                       // L158
    float v121 = a3;                 // L159
    v105.write(v121);                // v105[k3] = v121;	// L160
    float v122 = b3;                 // L161
    v106.write(v122);                // v106[k3] = v122;	// L162
  }
  float v123 = v3;         // L164
  v107[v108][v109] = v123; // L165
}

void PE_kernel_Q_4_0(hls::stream<float> &v124 /* v124[768] */,
                     hls::stream<float> &v125 /* v125[768] */,
                     hls::stream<float> &v126 /* v126[768] */,
                     hls::stream<float> &v127 /* v127[768] */, float v128[8][8],
                     int v129,
                     int v130) { // L168
#pragma HLS stream variable = v124 depth = 9
#pragma HLS stream variable = v125 depth = 9
#pragma HLS stream variable = v126 depth = 9
#pragma HLS stream variable = v127 depth = 9
#pragma HLS array_partition variable = v128 complete dim = 1
#pragma HLS array_partition variable = v128 complete dim = 2

  float v4;      // L171
  v4 = 0.000000; // L172
l_S_k_0_k4:
  for (int k4 = 0; k4 < 768; k4++) { // L173
    float v133 = v124.read();        // v124[k4];	// L174
    float a4;                        // L175
    a4 = v133;                       // L176
    float v135 = v125.read();        // v125[k4];	// L177
    float b4;                        // L178
    b4 = v135;                       // L179
    float v137 = a4;                 // L180
    float v138 = b4;                 // L181
    float v139 = v137 * v138;        // L182
    float v140 = v4;                 // L183
    float v141 = v140 + v139;        // L184
    v4 = v141;                       // L185
    float v142 = a4;                 // L186
    v126.write(v142);                // v126[k4] = v142;	// L187
    float v143 = b4;                 // L188
    v127.write(v143);                // v127[k4] = v143;	// L189
  }
  float v144 = v4;         // L191
  v128[v129][v130] = v144; // L192
}

void PE_kernel_Q_5_0(hls::stream<float> &v145 /* v145[768] */,
                     hls::stream<float> &v146 /* v146[768] */,
                     hls::stream<float> &v147 /* v147[768] */,
                     hls::stream<float> &v148 /* v148[768] */, float v149[8][8],
                     int v150,
                     int v151) { // L195
#pragma HLS stream variable = v145 depth = 9
#pragma HLS stream variable = v146 depth = 9
#pragma HLS stream variable = v147 depth = 9
#pragma HLS stream variable = v148 depth = 9
#pragma HLS array_partition variable = v149 complete dim = 1
#pragma HLS array_partition variable = v149 complete dim = 2

  float v5;      // L198
  v5 = 0.000000; // L199
l_S_k_0_k5:
  for (int k5 = 0; k5 < 768; k5++) { // L200
    float v154 = v145.read();        // v145[k5];	// L201
    float a5;                        // L202
    a5 = v154;                       // L203
    float v156 = v146.read();        // v146[k5];	// L204
    float b5;                        // L205
    b5 = v156;                       // L206
    float v158 = a5;                 // L207
    float v159 = b5;                 // L208
    float v160 = v158 * v159;        // L209
    float v161 = v5;                 // L210
    float v162 = v161 + v160;        // L211
    v5 = v162;                       // L212
    float v163 = a5;                 // L213
    v147.write(v163);                // v147[k5] = v163;	// L214
    float v164 = b5;                 // L215
    v148.write(v164);                // v148[k5] = v164;	// L216
  }
  float v165 = v5;         // L218
  v149[v150][v151] = v165; // L219
}

void PE_kernel_Q_6_0(hls::stream<float> &v166 /* v166[768] */,
                     hls::stream<float> &v167 /* v167[768] */,
                     hls::stream<float> &v168 /* v168[768] */,
                     hls::stream<float> &v169 /* v169[768] */, float v170[8][8],
                     int v171,
                     int v172) { // L222
#pragma HLS stream variable = v166 depth = 9
#pragma HLS stream variable = v167 depth = 9
#pragma HLS stream variable = v168 depth = 9
#pragma HLS stream variable = v169 depth = 9
#pragma HLS array_partition variable = v170 complete dim = 1
#pragma HLS array_partition variable = v170 complete dim = 2

  float v6;      // L225
  v6 = 0.000000; // L226
l_S_k_0_k6:
  for (int k6 = 0; k6 < 768; k6++) { // L227
    float v175 = v166.read();        // v166[k6];	// L228
    float a6;                        // L229
    a6 = v175;                       // L230
    float v177 = v167.read();        // v167[k6];	// L231
    float b6;                        // L232
    b6 = v177;                       // L233
    float v179 = a6;                 // L234
    float v180 = b6;                 // L235
    float v181 = v179 * v180;        // L236
    float v182 = v6;                 // L237
    float v183 = v182 + v181;        // L238
    v6 = v183;                       // L239
    float v184 = a6;                 // L240
    v168.write(v184);                // v168[k6] = v184;	// L241
    float v185 = b6;                 // L242
    v169.write(v185);                // v169[k6] = v185;	// L243
  }
  float v186 = v6;         // L245
  v170[v171][v172] = v186; // L246
}

void PE_kernel_Q_7_0(hls::stream<float> &v187 /* v187[768] */,
                     hls::stream<float> &v188 /* v188[768] */,
                     hls::stream<float> &v189 /* v189[768] */,
                     hls::stream<float> &v190 /* v190[768] */, float v191[8][8],
                     int v192,
                     int v193) { // L249
#pragma HLS stream variable = v187 depth = 9
#pragma HLS stream variable = v188 depth = 9
#pragma HLS stream variable = v189 depth = 9
#pragma HLS stream variable = v190 depth = 9
#pragma HLS array_partition variable = v191 complete dim = 1
#pragma HLS array_partition variable = v191 complete dim = 2

  float v7;      // L252
  v7 = 0.000000; // L253
l_S_k_0_k7:
  for (int k7 = 0; k7 < 768; k7++) { // L254
    float v196 = v187.read();        // v187[k7];	// L255
    float a7;                        // L256
    a7 = v196;                       // L257
    float v198 = v188.read();        // v188[k7];	// L258
    float b7;                        // L259
    b7 = v198;                       // L260
    float v200 = a7;                 // L261
    float v201 = b7;                 // L262
    float v202 = v200 * v201;        // L263
    float v203 = v7;                 // L264
    float v204 = v203 + v202;        // L265
    v7 = v204;                       // L266
    float v205 = a7;                 // L267
    v189.write(v205);                // v189[k7] = v205;	// L268
    float v206 = b7;                 // L269
    v190.write(v206);                // v190[k7] = v206;	// L270
  }
  float v207 = v7;         // L272
  v191[v192][v193] = v207; // L273
}

void PE_kernel_Q_0_1(hls::stream<float> &v208 /* v208[768] */,
                     hls::stream<float> &v209 /* v209[768] */,
                     hls::stream<float> &v210 /* v210[768] */,
                     hls::stream<float> &v211 /* v211[768] */, float v212[8][8],
                     int v213,
                     int v214) { // L276
#pragma HLS stream variable = v208 depth = 9
#pragma HLS stream variable = v209 depth = 9
#pragma HLS stream variable = v210 depth = 9
#pragma HLS stream variable = v211 depth = 9
#pragma HLS array_partition variable = v212 complete dim = 1
#pragma HLS array_partition variable = v212 complete dim = 2

  float v8;      // L279
  v8 = 0.000000; // L280
l_S_k_0_k8:
  for (int k8 = 0; k8 < 768; k8++) { // L281
    float v217 = v208.read();        // v208[k8];	// L282
    float a8;                        // L283
    a8 = v217;                       // L284
    float v219 = v209.read();        // v209[k8];	// L285
    float b8;                        // L286
    b8 = v219;                       // L287
    float v221 = a8;                 // L288
    float v222 = b8;                 // L289
    float v223 = v221 * v222;        // L290
    float v224 = v8;                 // L291
    float v225 = v224 + v223;        // L292
    v8 = v225;                       // L293
    float v226 = a8;                 // L294
    v210.write(v226);                // v210[k8] = v226;	// L295
    float v227 = b8;                 // L296
    v211.write(v227);                // v211[k8] = v227;	// L297
  }
  float v228 = v8;         // L299
  v212[v213][v214] = v228; // L300
}

void PE_kernel_Q_1_1(hls::stream<float> &v229 /* v229[768] */,
                     hls::stream<float> &v230 /* v230[768] */,
                     hls::stream<float> &v231 /* v231[768] */,
                     hls::stream<float> &v232 /* v232[768] */, float v233[8][8],
                     int v234,
                     int v235) { // L303
#pragma HLS stream variable = v229 depth = 9
#pragma HLS stream variable = v230 depth = 9
#pragma HLS stream variable = v231 depth = 9
#pragma HLS stream variable = v232 depth = 9
#pragma HLS array_partition variable = v233 complete dim = 1
#pragma HLS array_partition variable = v233 complete dim = 2

  float v9;      // L306
  v9 = 0.000000; // L307
l_S_k_0_k9:
  for (int k9 = 0; k9 < 768; k9++) { // L308
    float v238 = v229.read();        // v229[k9];	// L309
    float a9;                        // L310
    a9 = v238;                       // L311
    float v240 = v230.read();        // v230[k9];	// L312
    float b9;                        // L313
    b9 = v240;                       // L314
    float v242 = a9;                 // L315
    float v243 = b9;                 // L316
    float v244 = v242 * v243;        // L317
    float v245 = v9;                 // L318
    float v246 = v245 + v244;        // L319
    v9 = v246;                       // L320
    float v247 = a9;                 // L321
    v231.write(v247);                // v231[k9] = v247;	// L322
    float v248 = b9;                 // L323
    v232.write(v248);                // v232[k9] = v248;	// L324
  }
  float v249 = v9;         // L326
  v233[v234][v235] = v249; // L327
}

void PE_kernel_Q_2_1(hls::stream<float> &v250 /* v250[768] */,
                     hls::stream<float> &v251 /* v251[768] */,
                     hls::stream<float> &v252 /* v252[768] */,
                     hls::stream<float> &v253 /* v253[768] */, float v254[8][8],
                     int v255,
                     int v256) { // L330
#pragma HLS stream variable = v250 depth = 9
#pragma HLS stream variable = v251 depth = 9
#pragma HLS stream variable = v252 depth = 9
#pragma HLS stream variable = v253 depth = 9
#pragma HLS array_partition variable = v254 complete dim = 1
#pragma HLS array_partition variable = v254 complete dim = 2

  float v10;      // L333
  v10 = 0.000000; // L334
l_S_k_0_k10:
  for (int k10 = 0; k10 < 768; k10++) { // L335
    float v259 = v250.read();           // v250[k10];	// L336
    float a10;                          // L337
    a10 = v259;                         // L338
    float v261 = v251.read();           // v251[k10];	// L339
    float b10;                          // L340
    b10 = v261;                         // L341
    float v263 = a10;                   // L342
    float v264 = b10;                   // L343
    float v265 = v263 * v264;           // L344
    float v266 = v10;                   // L345
    float v267 = v266 + v265;           // L346
    v10 = v267;                         // L347
    float v268 = a10;                   // L348
    v252.write(v268);                   // v252[k10] = v268;	// L349
    float v269 = b10;                   // L350
    v253.write(v269);                   // v253[k10] = v269;	// L351
  }
  float v270 = v10;        // L353
  v254[v255][v256] = v270; // L354
}

void PE_kernel_Q_3_1(hls::stream<float> &v271 /* v271[768] */,
                     hls::stream<float> &v272 /* v272[768] */,
                     hls::stream<float> &v273 /* v273[768] */,
                     hls::stream<float> &v274 /* v274[768] */, float v275[8][8],
                     int v276,
                     int v277) { // L357
#pragma HLS stream variable = v271 depth = 9
#pragma HLS stream variable = v272 depth = 9
#pragma HLS stream variable = v273 depth = 9
#pragma HLS stream variable = v274 depth = 9
#pragma HLS array_partition variable = v275 complete dim = 1
#pragma HLS array_partition variable = v275 complete dim = 2

  float v11;      // L360
  v11 = 0.000000; // L361
l_S_k_0_k11:
  for (int k11 = 0; k11 < 768; k11++) { // L362
    float v280 = v271.read();           // v271[k11];	// L363
    float a11;                          // L364
    a11 = v280;                         // L365
    float v282 = v272.read();           // v272[k11];	// L366
    float b11;                          // L367
    b11 = v282;                         // L368
    float v284 = a11;                   // L369
    float v285 = b11;                   // L370
    float v286 = v284 * v285;           // L371
    float v287 = v11;                   // L372
    float v288 = v287 + v286;           // L373
    v11 = v288;                         // L374
    float v289 = a11;                   // L375
    v273.write(v289);                   // v273[k11] = v289;	// L376
    float v290 = b11;                   // L377
    v274.write(v290);                   // v274[k11] = v290;	// L378
  }
  float v291 = v11;        // L380
  v275[v276][v277] = v291; // L381
}

void PE_kernel_Q_4_1(hls::stream<float> &v292 /* v292[768] */,
                     hls::stream<float> &v293 /* v293[768] */,
                     hls::stream<float> &v294 /* v294[768] */,
                     hls::stream<float> &v295 /* v295[768] */, float v296[8][8],
                     int v297,
                     int v298) { // L384
#pragma HLS stream variable = v292 depth = 9
#pragma HLS stream variable = v293 depth = 9
#pragma HLS stream variable = v294 depth = 9
#pragma HLS stream variable = v295 depth = 9
#pragma HLS array_partition variable = v296 complete dim = 1
#pragma HLS array_partition variable = v296 complete dim = 2

  float v12;      // L387
  v12 = 0.000000; // L388
l_S_k_0_k12:
  for (int k12 = 0; k12 < 768; k12++) { // L389
    float v301 = v292.read();           // v292[k12];	// L390
    float a12;                          // L391
    a12 = v301;                         // L392
    float v303 = v293.read();           // v293[k12];	// L393
    float b12;                          // L394
    b12 = v303;                         // L395
    float v305 = a12;                   // L396
    float v306 = b12;                   // L397
    float v307 = v305 * v306;           // L398
    float v308 = v12;                   // L399
    float v309 = v308 + v307;           // L400
    v12 = v309;                         // L401
    float v310 = a12;                   // L402
    v294.write(v310);                   // v294[k12] = v310;	// L403
    float v311 = b12;                   // L404
    v295.write(v311);                   // v295[k12] = v311;	// L405
  }
  float v312 = v12;        // L407
  v296[v297][v298] = v312; // L408
}

void PE_kernel_Q_5_1(hls::stream<float> &v313 /* v313[768] */,
                     hls::stream<float> &v314 /* v314[768] */,
                     hls::stream<float> &v315 /* v315[768] */,
                     hls::stream<float> &v316 /* v316[768] */, float v317[8][8],
                     int v318,
                     int v319) { // L411
#pragma HLS stream variable = v313 depth = 9
#pragma HLS stream variable = v314 depth = 9
#pragma HLS stream variable = v315 depth = 9
#pragma HLS stream variable = v316 depth = 9
#pragma HLS array_partition variable = v317 complete dim = 1
#pragma HLS array_partition variable = v317 complete dim = 2

  float v13;      // L414
  v13 = 0.000000; // L415
l_S_k_0_k13:
  for (int k13 = 0; k13 < 768; k13++) { // L416
    float v322 = v313.read();           // v313[k13];	// L417
    float a13;                          // L418
    a13 = v322;                         // L419
    float v324 = v314.read();           // v314[k13];	// L420
    float b13;                          // L421
    b13 = v324;                         // L422
    float v326 = a13;                   // L423
    float v327 = b13;                   // L424
    float v328 = v326 * v327;           // L425
    float v329 = v13;                   // L426
    float v330 = v329 + v328;           // L427
    v13 = v330;                         // L428
    float v331 = a13;                   // L429
    v315.write(v331);                   // v315[k13] = v331;	// L430
    float v332 = b13;                   // L431
    v316.write(v332);                   // v316[k13] = v332;	// L432
  }
  float v333 = v13;        // L434
  v317[v318][v319] = v333; // L435
}

void PE_kernel_Q_6_1(hls::stream<float> &v334 /* v334[768] */,
                     hls::stream<float> &v335 /* v335[768] */,
                     hls::stream<float> &v336 /* v336[768] */,
                     hls::stream<float> &v337 /* v337[768] */, float v338[8][8],
                     int v339,
                     int v340) { // L438
#pragma HLS stream variable = v334 depth = 9
#pragma HLS stream variable = v335 depth = 9
#pragma HLS stream variable = v336 depth = 9
#pragma HLS stream variable = v337 depth = 9
#pragma HLS array_partition variable = v338 complete dim = 1
#pragma HLS array_partition variable = v338 complete dim = 2

  float v14;      // L441
  v14 = 0.000000; // L442
l_S_k_0_k14:
  for (int k14 = 0; k14 < 768; k14++) { // L443
    float v343 = v334.read();           // v334[k14];	// L444
    float a14;                          // L445
    a14 = v343;                         // L446
    float v345 = v335.read();           // v335[k14];	// L447
    float b14;                          // L448
    b14 = v345;                         // L449
    float v347 = a14;                   // L450
    float v348 = b14;                   // L451
    float v349 = v347 * v348;           // L452
    float v350 = v14;                   // L453
    float v351 = v350 + v349;           // L454
    v14 = v351;                         // L455
    float v352 = a14;                   // L456
    v336.write(v352);                   // v336[k14] = v352;	// L457
    float v353 = b14;                   // L458
    v337.write(v353);                   // v337[k14] = v353;	// L459
  }
  float v354 = v14;        // L461
  v338[v339][v340] = v354; // L462
}

void PE_kernel_Q_7_1(hls::stream<float> &v355 /* v355[768] */,
                     hls::stream<float> &v356 /* v356[768] */,
                     hls::stream<float> &v357 /* v357[768] */,
                     hls::stream<float> &v358 /* v358[768] */, float v359[8][8],
                     int v360,
                     int v361) { // L465
#pragma HLS stream variable = v355 depth = 9
#pragma HLS stream variable = v356 depth = 9
#pragma HLS stream variable = v357 depth = 9
#pragma HLS stream variable = v358 depth = 9
#pragma HLS array_partition variable = v359 complete dim = 1
#pragma HLS array_partition variable = v359 complete dim = 2

  float v15;      // L468
  v15 = 0.000000; // L469
l_S_k_0_k15:
  for (int k15 = 0; k15 < 768; k15++) { // L470
    float v364 = v355.read();           // v355[k15];	// L471
    float a15;                          // L472
    a15 = v364;                         // L473
    float v366 = v356.read();           // v356[k15];	// L474
    float b15;                          // L475
    b15 = v366;                         // L476
    float v368 = a15;                   // L477
    float v369 = b15;                   // L478
    float v370 = v368 * v369;           // L479
    float v371 = v15;                   // L480
    float v372 = v371 + v370;           // L481
    v15 = v372;                         // L482
    float v373 = a15;                   // L483
    v357.write(v373);                   // v357[k15] = v373;	// L484
    float v374 = b15;                   // L485
    v358.write(v374);                   // v358[k15] = v374;	// L486
  }
  float v375 = v15;        // L488
  v359[v360][v361] = v375; // L489
}

void PE_kernel_Q_0_2(hls::stream<float> &v376 /* v376[768] */,
                     hls::stream<float> &v377 /* v377[768] */,
                     hls::stream<float> &v378 /* v378[768] */,
                     hls::stream<float> &v379 /* v379[768] */, float v380[8][8],
                     int v381,
                     int v382) { // L492
#pragma HLS stream variable = v376 depth = 9
#pragma HLS stream variable = v377 depth = 9
#pragma HLS stream variable = v378 depth = 9
#pragma HLS stream variable = v379 depth = 9
#pragma HLS array_partition variable = v380 complete dim = 1
#pragma HLS array_partition variable = v380 complete dim = 2

  float v16;      // L495
  v16 = 0.000000; // L496
l_S_k_0_k16:
  for (int k16 = 0; k16 < 768; k16++) { // L497
    float v385 = v376.read();           // v376[k16];	// L498
    float a16;                          // L499
    a16 = v385;                         // L500
    float v387 = v377.read();           // v377[k16];	// L501
    float b16;                          // L502
    b16 = v387;                         // L503
    float v389 = a16;                   // L504
    float v390 = b16;                   // L505
    float v391 = v389 * v390;           // L506
    float v392 = v16;                   // L507
    float v393 = v392 + v391;           // L508
    v16 = v393;                         // L509
    float v394 = a16;                   // L510
    v378.write(v394);                   // v378[k16] = v394;	// L511
    float v395 = b16;                   // L512
    v379.write(v395);                   // v379[k16] = v395;	// L513
  }
  float v396 = v16;        // L515
  v380[v381][v382] = v396; // L516
}

void PE_kernel_Q_1_2(hls::stream<float> &v397 /* v397[768] */,
                     hls::stream<float> &v398 /* v398[768] */,
                     hls::stream<float> &v399 /* v399[768] */,
                     hls::stream<float> &v400 /* v400[768] */, float v401[8][8],
                     int v402,
                     int v403) { // L519
#pragma HLS stream variable = v397 depth = 9
#pragma HLS stream variable = v398 depth = 9
#pragma HLS stream variable = v399 depth = 9
#pragma HLS stream variable = v400 depth = 9
#pragma HLS array_partition variable = v401 complete dim = 1
#pragma HLS array_partition variable = v401 complete dim = 2

  float v17;      // L522
  v17 = 0.000000; // L523
l_S_k_0_k17:
  for (int k17 = 0; k17 < 768; k17++) { // L524
    float v406 = v397.read();           // v397[k17];	// L525
    float a17;                          // L526
    a17 = v406;                         // L527
    float v408 = v398.read();           // v398[k17];	// L528
    float b17;                          // L529
    b17 = v408;                         // L530
    float v410 = a17;                   // L531
    float v411 = b17;                   // L532
    float v412 = v410 * v411;           // L533
    float v413 = v17;                   // L534
    float v414 = v413 + v412;           // L535
    v17 = v414;                         // L536
    float v415 = a17;                   // L537
    v399.write(v415);                   // v399[k17] = v415;	// L538
    float v416 = b17;                   // L539
    v400.write(v416);                   // v400[k17] = v416;	// L540
  }
  float v417 = v17;        // L542
  v401[v402][v403] = v417; // L543
}

void PE_kernel_Q_2_2(hls::stream<float> &v418 /* v418[768] */,
                     hls::stream<float> &v419 /* v419[768] */,
                     hls::stream<float> &v420 /* v420[768] */,
                     hls::stream<float> &v421 /* v421[768] */, float v422[8][8],
                     int v423,
                     int v424) { // L546
#pragma HLS stream variable = v418 depth = 9
#pragma HLS stream variable = v419 depth = 9
#pragma HLS stream variable = v420 depth = 9
#pragma HLS stream variable = v421 depth = 9
#pragma HLS array_partition variable = v422 complete dim = 1
#pragma HLS array_partition variable = v422 complete dim = 2

  float v18;      // L549
  v18 = 0.000000; // L550
l_S_k_0_k18:
  for (int k18 = 0; k18 < 768; k18++) { // L551
    float v427 = v418.read();           // v418[k18];	// L552
    float a18;                          // L553
    a18 = v427;                         // L554
    float v429 = v419.read();           // v419[k18];	// L555
    float b18;                          // L556
    b18 = v429;                         // L557
    float v431 = a18;                   // L558
    float v432 = b18;                   // L559
    float v433 = v431 * v432;           // L560
    float v434 = v18;                   // L561
    float v435 = v434 + v433;           // L562
    v18 = v435;                         // L563
    float v436 = a18;                   // L564
    v420.write(v436);                   // v420[k18] = v436;	// L565
    float v437 = b18;                   // L566
    v421.write(v437);                   // v421[k18] = v437;	// L567
  }
  float v438 = v18;        // L569
  v422[v423][v424] = v438; // L570
}

void PE_kernel_Q_3_2(hls::stream<float> &v439 /* v439[768] */,
                     hls::stream<float> &v440 /* v440[768] */,
                     hls::stream<float> &v441 /* v441[768] */,
                     hls::stream<float> &v442 /* v442[768] */, float v443[8][8],
                     int v444,
                     int v445) { // L573
#pragma HLS stream variable = v439 depth = 9
#pragma HLS stream variable = v440 depth = 9
#pragma HLS stream variable = v441 depth = 9
#pragma HLS stream variable = v442 depth = 9
#pragma HLS array_partition variable = v443 complete dim = 1
#pragma HLS array_partition variable = v443 complete dim = 2

  float v19;      // L576
  v19 = 0.000000; // L577
l_S_k_0_k19:
  for (int k19 = 0; k19 < 768; k19++) { // L578
    float v448 = v439.read();           // v439[k19];	// L579
    float a19;                          // L580
    a19 = v448;                         // L581
    float v450 = v440.read();           // v440[k19];	// L582
    float b19;                          // L583
    b19 = v450;                         // L584
    float v452 = a19;                   // L585
    float v453 = b19;                   // L586
    float v454 = v452 * v453;           // L587
    float v455 = v19;                   // L588
    float v456 = v455 + v454;           // L589
    v19 = v456;                         // L590
    float v457 = a19;                   // L591
    v441.write(v457);                   // v441[k19] = v457;	// L592
    float v458 = b19;                   // L593
    v442.write(v458);                   // v442[k19] = v458;	// L594
  }
  float v459 = v19;        // L596
  v443[v444][v445] = v459; // L597
}

void PE_kernel_Q_4_2(hls::stream<float> &v460 /* v460[768] */,
                     hls::stream<float> &v461 /* v461[768] */,
                     hls::stream<float> &v462 /* v462[768] */,
                     hls::stream<float> &v463 /* v463[768] */, float v464[8][8],
                     int v465,
                     int v466) { // L600
#pragma HLS stream variable = v460 depth = 9
#pragma HLS stream variable = v461 depth = 9
#pragma HLS stream variable = v462 depth = 9
#pragma HLS stream variable = v463 depth = 9
#pragma HLS array_partition variable = v464 complete dim = 1
#pragma HLS array_partition variable = v464 complete dim = 2

  float v20;      // L603
  v20 = 0.000000; // L604
l_S_k_0_k20:
  for (int k20 = 0; k20 < 768; k20++) { // L605
    float v469 = v460.read();           // v460[k20];	// L606
    float a20;                          // L607
    a20 = v469;                         // L608
    float v471 = v461.read();           // v461[k20];	// L609
    float b20;                          // L610
    b20 = v471;                         // L611
    float v473 = a20;                   // L612
    float v474 = b20;                   // L613
    float v475 = v473 * v474;           // L614
    float v476 = v20;                   // L615
    float v477 = v476 + v475;           // L616
    v20 = v477;                         // L617
    float v478 = a20;                   // L618
    v462.write(v478);                   // v462[k20] = v478;	// L619
    float v479 = b20;                   // L620
    v463.write(v479);                   // v463[k20] = v479;	// L621
  }
  float v480 = v20;        // L623
  v464[v465][v466] = v480; // L624
}

void PE_kernel_Q_5_2(hls::stream<float> &v481 /* v481[768] */,
                     hls::stream<float> &v482 /* v482[768] */,
                     hls::stream<float> &v483 /* v483[768] */,
                     hls::stream<float> &v484 /* v484[768] */, float v485[8][8],
                     int v486,
                     int v487) { // L627
#pragma HLS stream variable = v481 depth = 9
#pragma HLS stream variable = v482 depth = 9
#pragma HLS stream variable = v483 depth = 9
#pragma HLS stream variable = v484 depth = 9
#pragma HLS array_partition variable = v485 complete dim = 1
#pragma HLS array_partition variable = v485 complete dim = 2

  float v21;      // L630
  v21 = 0.000000; // L631
l_S_k_0_k21:
  for (int k21 = 0; k21 < 768; k21++) { // L632
    float v490 = v481.read();           // v481[k21];	// L633
    float a21;                          // L634
    a21 = v490;                         // L635
    float v492 = v482.read();           // v482[k21];	// L636
    float b21;                          // L637
    b21 = v492;                         // L638
    float v494 = a21;                   // L639
    float v495 = b21;                   // L640
    float v496 = v494 * v495;           // L641
    float v497 = v21;                   // L642
    float v498 = v497 + v496;           // L643
    v21 = v498;                         // L644
    float v499 = a21;                   // L645
    v483.write(v499);                   // v483[k21] = v499;	// L646
    float v500 = b21;                   // L647
    v484.write(v500);                   // v484[k21] = v500;	// L648
  }
  float v501 = v21;        // L650
  v485[v486][v487] = v501; // L651
}

void PE_kernel_Q_6_2(hls::stream<float> &v502 /* v502[768] */,
                     hls::stream<float> &v503 /* v503[768] */,
                     hls::stream<float> &v504 /* v504[768] */,
                     hls::stream<float> &v505 /* v505[768] */, float v506[8][8],
                     int v507,
                     int v508) { // L654
#pragma HLS stream variable = v502 depth = 9
#pragma HLS stream variable = v503 depth = 9
#pragma HLS stream variable = v504 depth = 9
#pragma HLS stream variable = v505 depth = 9
#pragma HLS array_partition variable = v506 complete dim = 1
#pragma HLS array_partition variable = v506 complete dim = 2

  float v22;      // L657
  v22 = 0.000000; // L658
l_S_k_0_k22:
  for (int k22 = 0; k22 < 768; k22++) { // L659
    float v511 = v502.read();           // v502[k22];	// L660
    float a22;                          // L661
    a22 = v511;                         // L662
    float v513 = v503.read();           // v503[k22];	// L663
    float b22;                          // L664
    b22 = v513;                         // L665
    float v515 = a22;                   // L666
    float v516 = b22;                   // L667
    float v517 = v515 * v516;           // L668
    float v518 = v22;                   // L669
    float v519 = v518 + v517;           // L670
    v22 = v519;                         // L671
    float v520 = a22;                   // L672
    v504.write(v520);                   // v504[k22] = v520;	// L673
    float v521 = b22;                   // L674
    v505.write(v521);                   // v505[k22] = v521;	// L675
  }
  float v522 = v22;        // L677
  v506[v507][v508] = v522; // L678
}

void PE_kernel_Q_7_2(hls::stream<float> &v523 /* v523[768] */,
                     hls::stream<float> &v524 /* v524[768] */,
                     hls::stream<float> &v525 /* v525[768] */,
                     hls::stream<float> &v526 /* v526[768] */, float v527[8][8],
                     int v528,
                     int v529) { // L681
#pragma HLS stream variable = v523 depth = 9
#pragma HLS stream variable = v524 depth = 9
#pragma HLS stream variable = v525 depth = 9
#pragma HLS stream variable = v526 depth = 9
#pragma HLS array_partition variable = v527 complete dim = 1
#pragma HLS array_partition variable = v527 complete dim = 2

  float v23;      // L684
  v23 = 0.000000; // L685
l_S_k_0_k23:
  for (int k23 = 0; k23 < 768; k23++) { // L686
    float v532 = v523.read();           // v523[k23];	// L687
    float a23;                          // L688
    a23 = v532;                         // L689
    float v534 = v524.read();           // v524[k23];	// L690
    float b23;                          // L691
    b23 = v534;                         // L692
    float v536 = a23;                   // L693
    float v537 = b23;                   // L694
    float v538 = v536 * v537;           // L695
    float v539 = v23;                   // L696
    float v540 = v539 + v538;           // L697
    v23 = v540;                         // L698
    float v541 = a23;                   // L699
    v525.write(v541);                   // v525[k23] = v541;	// L700
    float v542 = b23;                   // L701
    v526.write(v542);                   // v526[k23] = v542;	// L702
  }
  float v543 = v23;        // L704
  v527[v528][v529] = v543; // L705
}

void PE_kernel_Q_0_3(hls::stream<float> &v544 /* v544[768] */,
                     hls::stream<float> &v545 /* v545[768] */,
                     hls::stream<float> &v546 /* v546[768] */,
                     hls::stream<float> &v547 /* v547[768] */, float v548[8][8],
                     int v549,
                     int v550) { // L708
#pragma HLS stream variable = v544 depth = 9
#pragma HLS stream variable = v545 depth = 9
#pragma HLS stream variable = v546 depth = 9
#pragma HLS stream variable = v547 depth = 9
#pragma HLS array_partition variable = v548 complete dim = 1
#pragma HLS array_partition variable = v548 complete dim = 2

  float v24;      // L711
  v24 = 0.000000; // L712
l_S_k_0_k24:
  for (int k24 = 0; k24 < 768; k24++) { // L713
    float v553 = v544.read();           // v544[k24];	// L714
    float a24;                          // L715
    a24 = v553;                         // L716
    float v555 = v545.read();           // v545[k24];	// L717
    float b24;                          // L718
    b24 = v555;                         // L719
    float v557 = a24;                   // L720
    float v558 = b24;                   // L721
    float v559 = v557 * v558;           // L722
    float v560 = v24;                   // L723
    float v561 = v560 + v559;           // L724
    v24 = v561;                         // L725
    float v562 = a24;                   // L726
    v546.write(v562);                   // v546[k24] = v562;	// L727
    float v563 = b24;                   // L728
    v547.write(v563);                   // v547[k24] = v563;	// L729
  }
  float v564 = v24;        // L731
  v548[v549][v550] = v564; // L732
}

void PE_kernel_Q_1_3(hls::stream<float> &v565 /* v565[768] */,
                     hls::stream<float> &v566 /* v566[768] */,
                     hls::stream<float> &v567 /* v567[768] */,
                     hls::stream<float> &v568 /* v568[768] */, float v569[8][8],
                     int v570,
                     int v571) { // L735
#pragma HLS stream variable = v565 depth = 9
#pragma HLS stream variable = v566 depth = 9
#pragma HLS stream variable = v567 depth = 9
#pragma HLS stream variable = v568 depth = 9
#pragma HLS array_partition variable = v569 complete dim = 1
#pragma HLS array_partition variable = v569 complete dim = 2

  float v25;      // L738
  v25 = 0.000000; // L739
l_S_k_0_k25:
  for (int k25 = 0; k25 < 768; k25++) { // L740
    float v574 = v565.read();           // v565[k25];	// L741
    float a25;                          // L742
    a25 = v574;                         // L743
    float v576 = v566.read();           // v566[k25];	// L744
    float b25;                          // L745
    b25 = v576;                         // L746
    float v578 = a25;                   // L747
    float v579 = b25;                   // L748
    float v580 = v578 * v579;           // L749
    float v581 = v25;                   // L750
    float v582 = v581 + v580;           // L751
    v25 = v582;                         // L752
    float v583 = a25;                   // L753
    v567.write(v583);                   // v567[k25] = v583;	// L754
    float v584 = b25;                   // L755
    v568.write(v584);                   // v568[k25] = v584;	// L756
  }
  float v585 = v25;        // L758
  v569[v570][v571] = v585; // L759
}

void PE_kernel_Q_2_3(hls::stream<float> &v586 /* v586[768] */,
                     hls::stream<float> &v587 /* v587[768] */,
                     hls::stream<float> &v588 /* v588[768] */,
                     hls::stream<float> &v589 /* v589[768] */, float v590[8][8],
                     int v591,
                     int v592) { // L762
#pragma HLS stream variable = v586 depth = 9
#pragma HLS stream variable = v587 depth = 9
#pragma HLS stream variable = v588 depth = 9
#pragma HLS stream variable = v589 depth = 9
#pragma HLS array_partition variable = v590 complete dim = 1
#pragma HLS array_partition variable = v590 complete dim = 2

  float v26;      // L765
  v26 = 0.000000; // L766
l_S_k_0_k26:
  for (int k26 = 0; k26 < 768; k26++) { // L767
    float v595 = v586.read();           // v586[k26];	// L768
    float a26;                          // L769
    a26 = v595;                         // L770
    float v597 = v587.read();           // v587[k26];	// L771
    float b26;                          // L772
    b26 = v597;                         // L773
    float v599 = a26;                   // L774
    float v600 = b26;                   // L775
    float v601 = v599 * v600;           // L776
    float v602 = v26;                   // L777
    float v603 = v602 + v601;           // L778
    v26 = v603;                         // L779
    float v604 = a26;                   // L780
    v588.write(v604);                   // v588[k26] = v604;	// L781
    float v605 = b26;                   // L782
    v589.write(v605);                   // v589[k26] = v605;	// L783
  }
  float v606 = v26;        // L785
  v590[v591][v592] = v606; // L786
}

void PE_kernel_Q_3_3(hls::stream<float> &v607 /* v607[768] */,
                     hls::stream<float> &v608 /* v608[768] */,
                     hls::stream<float> &v609 /* v609[768] */,
                     hls::stream<float> &v610 /* v610[768] */, float v611[8][8],
                     int v612,
                     int v613) { // L789
#pragma HLS stream variable = v607 depth = 9
#pragma HLS stream variable = v608 depth = 9
#pragma HLS stream variable = v609 depth = 9
#pragma HLS stream variable = v610 depth = 9
#pragma HLS array_partition variable = v611 complete dim = 1
#pragma HLS array_partition variable = v611 complete dim = 2

  float v27;      // L792
  v27 = 0.000000; // L793
l_S_k_0_k27:
  for (int k27 = 0; k27 < 768; k27++) { // L794
    float v616 = v607.read();           // v607[k27];	// L795
    float a27;                          // L796
    a27 = v616;                         // L797
    float v618 = v608.read();           // v608[k27];	// L798
    float b27;                          // L799
    b27 = v618;                         // L800
    float v620 = a27;                   // L801
    float v621 = b27;                   // L802
    float v622 = v620 * v621;           // L803
    float v623 = v27;                   // L804
    float v624 = v623 + v622;           // L805
    v27 = v624;                         // L806
    float v625 = a27;                   // L807
    v609.write(v625);                   // v609[k27] = v625;	// L808
    float v626 = b27;                   // L809
    v610.write(v626);                   // v610[k27] = v626;	// L810
  }
  float v627 = v27;        // L812
  v611[v612][v613] = v627; // L813
}

void PE_kernel_Q_4_3(hls::stream<float> &v628 /* v628[768] */,
                     hls::stream<float> &v629 /* v629[768] */,
                     hls::stream<float> &v630 /* v630[768] */,
                     hls::stream<float> &v631 /* v631[768] */, float v632[8][8],
                     int v633,
                     int v634) { // L816
#pragma HLS stream variable = v628 depth = 9
#pragma HLS stream variable = v629 depth = 9
#pragma HLS stream variable = v630 depth = 9
#pragma HLS stream variable = v631 depth = 9
#pragma HLS array_partition variable = v632 complete dim = 1
#pragma HLS array_partition variable = v632 complete dim = 2

  float v28;      // L819
  v28 = 0.000000; // L820
l_S_k_0_k28:
  for (int k28 = 0; k28 < 768; k28++) { // L821
    float v637 = v628.read();           // v628[k28];	// L822
    float a28;                          // L823
    a28 = v637;                         // L824
    float v639 = v629.read();           // v629[k28];	// L825
    float b28;                          // L826
    b28 = v639;                         // L827
    float v641 = a28;                   // L828
    float v642 = b28;                   // L829
    float v643 = v641 * v642;           // L830
    float v644 = v28;                   // L831
    float v645 = v644 + v643;           // L832
    v28 = v645;                         // L833
    float v646 = a28;                   // L834
    v630.write(v646);                   // v630[k28] = v646;	// L835
    float v647 = b28;                   // L836
    v631.write(v647);                   // v631[k28] = v647;	// L837
  }
  float v648 = v28;        // L839
  v632[v633][v634] = v648; // L840
}

void PE_kernel_Q_5_3(hls::stream<float> &v649 /* v649[768] */,
                     hls::stream<float> &v650 /* v650[768] */,
                     hls::stream<float> &v651 /* v651[768] */,
                     hls::stream<float> &v652 /* v652[768] */, float v653[8][8],
                     int v654,
                     int v655) { // L843
#pragma HLS stream variable = v649 depth = 9
#pragma HLS stream variable = v650 depth = 9
#pragma HLS stream variable = v651 depth = 9
#pragma HLS stream variable = v652 depth = 9
#pragma HLS array_partition variable = v653 complete dim = 1
#pragma HLS array_partition variable = v653 complete dim = 2

  float v29;      // L846
  v29 = 0.000000; // L847
l_S_k_0_k29:
  for (int k29 = 0; k29 < 768; k29++) { // L848
    float v658 = v649.read();           // v649[k29];	// L849
    float a29;                          // L850
    a29 = v658;                         // L851
    float v660 = v650.read();           // v650[k29];	// L852
    float b29;                          // L853
    b29 = v660;                         // L854
    float v662 = a29;                   // L855
    float v663 = b29;                   // L856
    float v664 = v662 * v663;           // L857
    float v665 = v29;                   // L858
    float v666 = v665 + v664;           // L859
    v29 = v666;                         // L860
    float v667 = a29;                   // L861
    v651.write(v667);                   // v651[k29] = v667;	// L862
    float v668 = b29;                   // L863
    v652.write(v668);                   // v652[k29] = v668;	// L864
  }
  float v669 = v29;        // L866
  v653[v654][v655] = v669; // L867
}

void PE_kernel_Q_6_3(hls::stream<float> &v670 /* v670[768] */,
                     hls::stream<float> &v671 /* v671[768] */,
                     hls::stream<float> &v672 /* v672[768] */,
                     hls::stream<float> &v673 /* v673[768] */, float v674[8][8],
                     int v675,
                     int v676) { // L870
#pragma HLS stream variable = v670 depth = 9
#pragma HLS stream variable = v671 depth = 9
#pragma HLS stream variable = v672 depth = 9
#pragma HLS stream variable = v673 depth = 9
#pragma HLS array_partition variable = v674 complete dim = 1
#pragma HLS array_partition variable = v674 complete dim = 2

  float v30;      // L873
  v30 = 0.000000; // L874
l_S_k_0_k30:
  for (int k30 = 0; k30 < 768; k30++) { // L875
    float v679 = v670.read();           // v670[k30];	// L876
    float a30;                          // L877
    a30 = v679;                         // L878
    float v681 = v671.read();           // v671[k30];	// L879
    float b30;                          // L880
    b30 = v681;                         // L881
    float v683 = a30;                   // L882
    float v684 = b30;                   // L883
    float v685 = v683 * v684;           // L884
    float v686 = v30;                   // L885
    float v687 = v686 + v685;           // L886
    v30 = v687;                         // L887
    float v688 = a30;                   // L888
    v672.write(v688);                   // v672[k30] = v688;	// L889
    float v689 = b30;                   // L890
    v673.write(v689);                   // v673[k30] = v689;	// L891
  }
  float v690 = v30;        // L893
  v674[v675][v676] = v690; // L894
}

void PE_kernel_Q_7_3(hls::stream<float> &v691 /* v691[768] */,
                     hls::stream<float> &v692 /* v692[768] */,
                     hls::stream<float> &v693 /* v693[768] */,
                     hls::stream<float> &v694 /* v694[768] */, float v695[8][8],
                     int v696,
                     int v697) { // L897
#pragma HLS stream variable = v691 depth = 9
#pragma HLS stream variable = v692 depth = 9
#pragma HLS stream variable = v693 depth = 9
#pragma HLS stream variable = v694 depth = 9
#pragma HLS array_partition variable = v695 complete dim = 1
#pragma HLS array_partition variable = v695 complete dim = 2

  float v31;      // L900
  v31 = 0.000000; // L901
l_S_k_0_k31:
  for (int k31 = 0; k31 < 768; k31++) { // L902
    float v700 = v691.read();           // v691[k31];	// L903
    float a31;                          // L904
    a31 = v700;                         // L905
    float v702 = v692.read();           // v692[k31];	// L906
    float b31;                          // L907
    b31 = v702;                         // L908
    float v704 = a31;                   // L909
    float v705 = b31;                   // L910
    float v706 = v704 * v705;           // L911
    float v707 = v31;                   // L912
    float v708 = v707 + v706;           // L913
    v31 = v708;                         // L914
    float v709 = a31;                   // L915
    v693.write(v709);                   // v693[k31] = v709;	// L916
    float v710 = b31;                   // L917
    v694.write(v710);                   // v694[k31] = v710;	// L918
  }
  float v711 = v31;        // L920
  v695[v696][v697] = v711; // L921
}

void PE_kernel_Q_0_4(hls::stream<float> &v712 /* v712[768] */,
                     hls::stream<float> &v713 /* v713[768] */,
                     hls::stream<float> &v714 /* v714[768] */,
                     hls::stream<float> &v715 /* v715[768] */, float v716[8][8],
                     int v717,
                     int v718) { // L924
#pragma HLS stream variable = v712 depth = 9
#pragma HLS stream variable = v713 depth = 9
#pragma HLS stream variable = v714 depth = 9
#pragma HLS stream variable = v715 depth = 9
#pragma HLS array_partition variable = v716 complete dim = 1
#pragma HLS array_partition variable = v716 complete dim = 2

  float v32;      // L927
  v32 = 0.000000; // L928
l_S_k_0_k32:
  for (int k32 = 0; k32 < 768; k32++) { // L929
    float v721 = v712.read();           // v712[k32];	// L930
    float a32;                          // L931
    a32 = v721;                         // L932
    float v723 = v713.read();           // v713[k32];	// L933
    float b32;                          // L934
    b32 = v723;                         // L935
    float v725 = a32;                   // L936
    float v726 = b32;                   // L937
    float v727 = v725 * v726;           // L938
    float v728 = v32;                   // L939
    float v729 = v728 + v727;           // L940
    v32 = v729;                         // L941
    float v730 = a32;                   // L942
    v714.write(v730);                   // v714[k32] = v730;	// L943
    float v731 = b32;                   // L944
    v715.write(v731);                   // v715[k32] = v731;	// L945
  }
  float v732 = v32;        // L947
  v716[v717][v718] = v732; // L948
}

void PE_kernel_Q_1_4(hls::stream<float> &v733 /* v733[768] */,
                     hls::stream<float> &v734 /* v734[768] */,
                     hls::stream<float> &v735 /* v735[768] */,
                     hls::stream<float> &v736 /* v736[768] */, float v737[8][8],
                     int v738,
                     int v739) { // L951
#pragma HLS stream variable = v733 depth = 9
#pragma HLS stream variable = v734 depth = 9
#pragma HLS stream variable = v735 depth = 9
#pragma HLS stream variable = v736 depth = 9
#pragma HLS array_partition variable = v737 complete dim = 1
#pragma HLS array_partition variable = v737 complete dim = 2

  float v33;      // L954
  v33 = 0.000000; // L955
l_S_k_0_k33:
  for (int k33 = 0; k33 < 768; k33++) { // L956
    float v742 = v733.read();           // v733[k33];	// L957
    float a33;                          // L958
    a33 = v742;                         // L959
    float v744 = v734.read();           // v734[k33];	// L960
    float b33;                          // L961
    b33 = v744;                         // L962
    float v746 = a33;                   // L963
    float v747 = b33;                   // L964
    float v748 = v746 * v747;           // L965
    float v749 = v33;                   // L966
    float v750 = v749 + v748;           // L967
    v33 = v750;                         // L968
    float v751 = a33;                   // L969
    v735.write(v751);                   // v735[k33] = v751;	// L970
    float v752 = b33;                   // L971
    v736.write(v752);                   // v736[k33] = v752;	// L972
  }
  float v753 = v33;        // L974
  v737[v738][v739] = v753; // L975
}

void PE_kernel_Q_2_4(hls::stream<float> &v754 /* v754[768] */,
                     hls::stream<float> &v755 /* v755[768] */,
                     hls::stream<float> &v756 /* v756[768] */,
                     hls::stream<float> &v757 /* v757[768] */, float v758[8][8],
                     int v759,
                     int v760) { // L978
#pragma HLS stream variable = v754 depth = 9
#pragma HLS stream variable = v755 depth = 9
#pragma HLS stream variable = v756 depth = 9
#pragma HLS stream variable = v757 depth = 9
#pragma HLS array_partition variable = v758 complete dim = 1
#pragma HLS array_partition variable = v758 complete dim = 2

  float v34;      // L981
  v34 = 0.000000; // L982
l_S_k_0_k34:
  for (int k34 = 0; k34 < 768; k34++) { // L983
    float v763 = v754.read();           // v754[k34];	// L984
    float a34;                          // L985
    a34 = v763;                         // L986
    float v765 = v755.read();           // v755[k34];	// L987
    float b34;                          // L988
    b34 = v765;                         // L989
    float v767 = a34;                   // L990
    float v768 = b34;                   // L991
    float v769 = v767 * v768;           // L992
    float v770 = v34;                   // L993
    float v771 = v770 + v769;           // L994
    v34 = v771;                         // L995
    float v772 = a34;                   // L996
    v756.write(v772);                   // v756[k34] = v772;	// L997
    float v773 = b34;                   // L998
    v757.write(v773);                   // v757[k34] = v773;	// L999
  }
  float v774 = v34;        // L1001
  v758[v759][v760] = v774; // L1002
}

void PE_kernel_Q_3_4(hls::stream<float> &v775 /* v775[768] */,
                     hls::stream<float> &v776 /* v776[768] */,
                     hls::stream<float> &v777 /* v777[768] */,
                     hls::stream<float> &v778 /* v778[768] */, float v779[8][8],
                     int v780,
                     int v781) { // L1005
#pragma HLS stream variable = v775 depth = 9
#pragma HLS stream variable = v776 depth = 9
#pragma HLS stream variable = v777 depth = 9
#pragma HLS stream variable = v778 depth = 9
#pragma HLS array_partition variable = v779 complete dim = 1
#pragma HLS array_partition variable = v779 complete dim = 2

  float v35;      // L1008
  v35 = 0.000000; // L1009
l_S_k_0_k35:
  for (int k35 = 0; k35 < 768; k35++) { // L1010
    float v784 = v775.read();           // v775[k35];	// L1011
    float a35;                          // L1012
    a35 = v784;                         // L1013
    float v786 = v776.read();           // v776[k35];	// L1014
    float b35;                          // L1015
    b35 = v786;                         // L1016
    float v788 = a35;                   // L1017
    float v789 = b35;                   // L1018
    float v790 = v788 * v789;           // L1019
    float v791 = v35;                   // L1020
    float v792 = v791 + v790;           // L1021
    v35 = v792;                         // L1022
    float v793 = a35;                   // L1023
    v777.write(v793);                   // v777[k35] = v793;	// L1024
    float v794 = b35;                   // L1025
    v778.write(v794);                   // v778[k35] = v794;	// L1026
  }
  float v795 = v35;        // L1028
  v779[v780][v781] = v795; // L1029
}

void PE_kernel_Q_4_4(hls::stream<float> &v796 /* v796[768] */,
                     hls::stream<float> &v797 /* v797[768] */,
                     hls::stream<float> &v798 /* v798[768] */,
                     hls::stream<float> &v799 /* v799[768] */, float v800[8][8],
                     int v801,
                     int v802) { // L1032
#pragma HLS stream variable = v796 depth = 9
#pragma HLS stream variable = v797 depth = 9
#pragma HLS stream variable = v798 depth = 9
#pragma HLS stream variable = v799 depth = 9
#pragma HLS array_partition variable = v800 complete dim = 1
#pragma HLS array_partition variable = v800 complete dim = 2

  float v36;      // L1035
  v36 = 0.000000; // L1036
l_S_k_0_k36:
  for (int k36 = 0; k36 < 768; k36++) { // L1037
    float v805 = v796.read();           // v796[k36];	// L1038
    float a36;                          // L1039
    a36 = v805;                         // L1040
    float v807 = v797.read();           // v797[k36];	// L1041
    float b36;                          // L1042
    b36 = v807;                         // L1043
    float v809 = a36;                   // L1044
    float v810 = b36;                   // L1045
    float v811 = v809 * v810;           // L1046
    float v812 = v36;                   // L1047
    float v813 = v812 + v811;           // L1048
    v36 = v813;                         // L1049
    float v814 = a36;                   // L1050
    v798.write(v814);                   // v798[k36] = v814;	// L1051
    float v815 = b36;                   // L1052
    v799.write(v815);                   // v799[k36] = v815;	// L1053
  }
  float v816 = v36;        // L1055
  v800[v801][v802] = v816; // L1056
}

void PE_kernel_Q_5_4(hls::stream<float> &v817 /* v817[768] */,
                     hls::stream<float> &v818 /* v818[768] */,
                     hls::stream<float> &v819 /* v819[768] */,
                     hls::stream<float> &v820 /* v820[768] */, float v821[8][8],
                     int v822,
                     int v823) { // L1059
#pragma HLS stream variable = v817 depth = 9
#pragma HLS stream variable = v818 depth = 9
#pragma HLS stream variable = v819 depth = 9
#pragma HLS stream variable = v820 depth = 9
#pragma HLS array_partition variable = v821 complete dim = 1
#pragma HLS array_partition variable = v821 complete dim = 2

  float v37;      // L1062
  v37 = 0.000000; // L1063
l_S_k_0_k37:
  for (int k37 = 0; k37 < 768; k37++) { // L1064
    float v826 = v817.read();           // v817[k37];	// L1065
    float a37;                          // L1066
    a37 = v826;                         // L1067
    float v828 = v818.read();           // v818[k37];	// L1068
    float b37;                          // L1069
    b37 = v828;                         // L1070
    float v830 = a37;                   // L1071
    float v831 = b37;                   // L1072
    float v832 = v830 * v831;           // L1073
    float v833 = v37;                   // L1074
    float v834 = v833 + v832;           // L1075
    v37 = v834;                         // L1076
    float v835 = a37;                   // L1077
    v819.write(v835);                   // v819[k37] = v835;	// L1078
    float v836 = b37;                   // L1079
    v820.write(v836);                   // v820[k37] = v836;	// L1080
  }
  float v837 = v37;        // L1082
  v821[v822][v823] = v837; // L1083
}

void PE_kernel_Q_6_4(hls::stream<float> &v838 /* v838[768] */,
                     hls::stream<float> &v839 /* v839[768] */,
                     hls::stream<float> &v840 /* v840[768] */,
                     hls::stream<float> &v841 /* v841[768] */, float v842[8][8],
                     int v843,
                     int v844) { // L1086
#pragma HLS stream variable = v838 depth = 9
#pragma HLS stream variable = v839 depth = 9
#pragma HLS stream variable = v840 depth = 9
#pragma HLS stream variable = v841 depth = 9
#pragma HLS array_partition variable = v842 complete dim = 1
#pragma HLS array_partition variable = v842 complete dim = 2

  float v38;      // L1089
  v38 = 0.000000; // L1090
l_S_k_0_k38:
  for (int k38 = 0; k38 < 768; k38++) { // L1091
    float v847 = v838.read();           // v838[k38];	// L1092
    float a38;                          // L1093
    a38 = v847;                         // L1094
    float v849 = v839.read();           // v839[k38];	// L1095
    float b38;                          // L1096
    b38 = v849;                         // L1097
    float v851 = a38;                   // L1098
    float v852 = b38;                   // L1099
    float v853 = v851 * v852;           // L1100
    float v854 = v38;                   // L1101
    float v855 = v854 + v853;           // L1102
    v38 = v855;                         // L1103
    float v856 = a38;                   // L1104
    v840.write(v856);                   // v840[k38] = v856;	// L1105
    float v857 = b38;                   // L1106
    v841.write(v857);                   // v841[k38] = v857;	// L1107
  }
  float v858 = v38;        // L1109
  v842[v843][v844] = v858; // L1110
}

void PE_kernel_Q_7_4(hls::stream<float> &v859 /* v859[768] */,
                     hls::stream<float> &v860 /* v860[768] */,
                     hls::stream<float> &v861 /* v861[768] */,
                     hls::stream<float> &v862 /* v862[768] */, float v863[8][8],
                     int v864,
                     int v865) { // L1113
#pragma HLS stream variable = v859 depth = 9
#pragma HLS stream variable = v860 depth = 9
#pragma HLS stream variable = v861 depth = 9
#pragma HLS stream variable = v862 depth = 9
#pragma HLS array_partition variable = v863 complete dim = 1
#pragma HLS array_partition variable = v863 complete dim = 2

  float v39;      // L1116
  v39 = 0.000000; // L1117
l_S_k_0_k39:
  for (int k39 = 0; k39 < 768; k39++) { // L1118
    float v868 = v859.read();           // v859[k39];	// L1119
    float a39;                          // L1120
    a39 = v868;                         // L1121
    float v870 = v860.read();           // v860[k39];	// L1122
    float b39;                          // L1123
    b39 = v870;                         // L1124
    float v872 = a39;                   // L1125
    float v873 = b39;                   // L1126
    float v874 = v872 * v873;           // L1127
    float v875 = v39;                   // L1128
    float v876 = v875 + v874;           // L1129
    v39 = v876;                         // L1130
    float v877 = a39;                   // L1131
    v861.write(v877);                   // v861[k39] = v877;	// L1132
    float v878 = b39;                   // L1133
    v862.write(v878);                   // v862[k39] = v878;	// L1134
  }
  float v879 = v39;        // L1136
  v863[v864][v865] = v879; // L1137
}

void PE_kernel_Q_0_5(hls::stream<float> &v880 /* v880[768] */,
                     hls::stream<float> &v881 /* v881[768] */,
                     hls::stream<float> &v882 /* v882[768] */,
                     hls::stream<float> &v883 /* v883[768] */, float v884[8][8],
                     int v885,
                     int v886) { // L1140
#pragma HLS stream variable = v880 depth = 9
#pragma HLS stream variable = v881 depth = 9
#pragma HLS stream variable = v882 depth = 9
#pragma HLS stream variable = v883 depth = 9
#pragma HLS array_partition variable = v884 complete dim = 1
#pragma HLS array_partition variable = v884 complete dim = 2

  float v40;      // L1143
  v40 = 0.000000; // L1144
l_S_k_0_k40:
  for (int k40 = 0; k40 < 768; k40++) { // L1145
    float v889 = v880.read();           // v880[k40];	// L1146
    float a40;                          // L1147
    a40 = v889;                         // L1148
    float v891 = v881.read();           // v881[k40];	// L1149
    float b40;                          // L1150
    b40 = v891;                         // L1151
    float v893 = a40;                   // L1152
    float v894 = b40;                   // L1153
    float v895 = v893 * v894;           // L1154
    float v896 = v40;                   // L1155
    float v897 = v896 + v895;           // L1156
    v40 = v897;                         // L1157
    float v898 = a40;                   // L1158
    v882.write(v898);                   // v882[k40] = v898;	// L1159
    float v899 = b40;                   // L1160
    v883.write(v899);                   // v883[k40] = v899;	// L1161
  }
  float v900 = v40;        // L1163
  v884[v885][v886] = v900; // L1164
}

void PE_kernel_Q_1_5(hls::stream<float> &v901 /* v901[768] */,
                     hls::stream<float> &v902 /* v902[768] */,
                     hls::stream<float> &v903 /* v903[768] */,
                     hls::stream<float> &v904 /* v904[768] */, float v905[8][8],
                     int v906,
                     int v907) { // L1167
#pragma HLS stream variable = v901 depth = 9
#pragma HLS stream variable = v902 depth = 9
#pragma HLS stream variable = v903 depth = 9
#pragma HLS stream variable = v904 depth = 9
#pragma HLS array_partition variable = v905 complete dim = 1
#pragma HLS array_partition variable = v905 complete dim = 2

  float v41;      // L1170
  v41 = 0.000000; // L1171
l_S_k_0_k41:
  for (int k41 = 0; k41 < 768; k41++) { // L1172
    float v910 = v901.read();           // v901[k41];	// L1173
    float a41;                          // L1174
    a41 = v910;                         // L1175
    float v912 = v902.read();           // v902[k41];	// L1176
    float b41;                          // L1177
    b41 = v912;                         // L1178
    float v914 = a41;                   // L1179
    float v915 = b41;                   // L1180
    float v916 = v914 * v915;           // L1181
    float v917 = v41;                   // L1182
    float v918 = v917 + v916;           // L1183
    v41 = v918;                         // L1184
    float v919 = a41;                   // L1185
    v903.write(v919);                   // v903[k41] = v919;	// L1186
    float v920 = b41;                   // L1187
    v904.write(v920);                   // v904[k41] = v920;	// L1188
  }
  float v921 = v41;        // L1190
  v905[v906][v907] = v921; // L1191
}

void PE_kernel_Q_2_5(hls::stream<float> &v922 /* v922[768] */,
                     hls::stream<float> &v923 /* v923[768] */,
                     hls::stream<float> &v924 /* v924[768] */,
                     hls::stream<float> &v925 /* v925[768] */, float v926[8][8],
                     int v927,
                     int v928) { // L1194
#pragma HLS stream variable = v922 depth = 9
#pragma HLS stream variable = v923 depth = 9
#pragma HLS stream variable = v924 depth = 9
#pragma HLS stream variable = v925 depth = 9
#pragma HLS array_partition variable = v926 complete dim = 1
#pragma HLS array_partition variable = v926 complete dim = 2

  float v42;      // L1197
  v42 = 0.000000; // L1198
l_S_k_0_k42:
  for (int k42 = 0; k42 < 768; k42++) { // L1199
    float v931 = v922.read();           // v922[k42];	// L1200
    float a42;                          // L1201
    a42 = v931;                         // L1202
    float v933 = v923.read();           // v923[k42];	// L1203
    float b42;                          // L1204
    b42 = v933;                         // L1205
    float v935 = a42;                   // L1206
    float v936 = b42;                   // L1207
    float v937 = v935 * v936;           // L1208
    float v938 = v42;                   // L1209
    float v939 = v938 + v937;           // L1210
    v42 = v939;                         // L1211
    float v940 = a42;                   // L1212
    v924.write(v940);                   // v924[k42] = v940;	// L1213
    float v941 = b42;                   // L1214
    v925.write(v941);                   // v925[k42] = v941;	// L1215
  }
  float v942 = v42;        // L1217
  v926[v927][v928] = v942; // L1218
}

void PE_kernel_Q_3_5(hls::stream<float> &v943 /* v943[768] */,
                     hls::stream<float> &v944 /* v944[768] */,
                     hls::stream<float> &v945 /* v945[768] */,
                     hls::stream<float> &v946 /* v946[768] */, float v947[8][8],
                     int v948,
                     int v949) { // L1221
#pragma HLS stream variable = v943 depth = 9
#pragma HLS stream variable = v944 depth = 9
#pragma HLS stream variable = v945 depth = 9
#pragma HLS stream variable = v946 depth = 9
#pragma HLS array_partition variable = v947 complete dim = 1
#pragma HLS array_partition variable = v947 complete dim = 2

  float v43;      // L1224
  v43 = 0.000000; // L1225
l_S_k_0_k43:
  for (int k43 = 0; k43 < 768; k43++) { // L1226
    float v952 = v943.read();           // v943[k43];	// L1227
    float a43;                          // L1228
    a43 = v952;                         // L1229
    float v954 = v944.read();           // v944[k43];	// L1230
    float b43;                          // L1231
    b43 = v954;                         // L1232
    float v956 = a43;                   // L1233
    float v957 = b43;                   // L1234
    float v958 = v956 * v957;           // L1235
    float v959 = v43;                   // L1236
    float v960 = v959 + v958;           // L1237
    v43 = v960;                         // L1238
    float v961 = a43;                   // L1239
    v945.write(v961);                   // v945[k43] = v961;	// L1240
    float v962 = b43;                   // L1241
    v946.write(v962);                   // v946[k43] = v962;	// L1242
  }
  float v963 = v43;        // L1244
  v947[v948][v949] = v963; // L1245
}

void PE_kernel_Q_4_5(hls::stream<float> &v964 /* v964[768] */,
                     hls::stream<float> &v965 /* v965[768] */,
                     hls::stream<float> &v966 /* v966[768] */,
                     hls::stream<float> &v967 /* v967[768] */, float v968[8][8],
                     int v969,
                     int v970) { // L1248
#pragma HLS stream variable = v964 depth = 9
#pragma HLS stream variable = v965 depth = 9
#pragma HLS stream variable = v966 depth = 9
#pragma HLS stream variable = v967 depth = 9
#pragma HLS array_partition variable = v968 complete dim = 1
#pragma HLS array_partition variable = v968 complete dim = 2

  float v44;      // L1251
  v44 = 0.000000; // L1252
l_S_k_0_k44:
  for (int k44 = 0; k44 < 768; k44++) { // L1253
    float v973 = v964.read();           // v964[k44];	// L1254
    float a44;                          // L1255
    a44 = v973;                         // L1256
    float v975 = v965.read();           // v965[k44];	// L1257
    float b44;                          // L1258
    b44 = v975;                         // L1259
    float v977 = a44;                   // L1260
    float v978 = b44;                   // L1261
    float v979 = v977 * v978;           // L1262
    float v980 = v44;                   // L1263
    float v981 = v980 + v979;           // L1264
    v44 = v981;                         // L1265
    float v982 = a44;                   // L1266
    v966.write(v982);                   // v966[k44] = v982;	// L1267
    float v983 = b44;                   // L1268
    v967.write(v983);                   // v967[k44] = v983;	// L1269
  }
  float v984 = v44;        // L1271
  v968[v969][v970] = v984; // L1272
}

void PE_kernel_Q_5_5(hls::stream<float> &v985 /* v985[768] */,
                     hls::stream<float> &v986 /* v986[768] */,
                     hls::stream<float> &v987 /* v987[768] */,
                     hls::stream<float> &v988 /* v988[768] */, float v989[8][8],
                     int v990,
                     int v991) { // L1275
#pragma HLS stream variable = v985 depth = 9
#pragma HLS stream variable = v986 depth = 9
#pragma HLS stream variable = v987 depth = 9
#pragma HLS stream variable = v988 depth = 9
#pragma HLS array_partition variable = v989 complete dim = 1
#pragma HLS array_partition variable = v989 complete dim = 2

  float v45;      // L1278
  v45 = 0.000000; // L1279
l_S_k_0_k45:
  for (int k45 = 0; k45 < 768; k45++) { // L1280
    float v994 = v985.read();           // v985[k45];	// L1281
    float a45;                          // L1282
    a45 = v994;                         // L1283
    float v996 = v986.read();           // v986[k45];	// L1284
    float b45;                          // L1285
    b45 = v996;                         // L1286
    float v998 = a45;                   // L1287
    float v999 = b45;                   // L1288
    float v1000 = v998 * v999;          // L1289
    float v1001 = v45;                  // L1290
    float v1002 = v1001 + v1000;        // L1291
    v45 = v1002;                        // L1292
    float v1003 = a45;                  // L1293
    v987.write(v1003);                  // v987[k45] = v1003;	// L1294
    float v1004 = b45;                  // L1295
    v988.write(v1004);                  // v988[k45] = v1004;	// L1296
  }
  float v1005 = v45;        // L1298
  v989[v990][v991] = v1005; // L1299
}

void PE_kernel_Q_6_5(hls::stream<float> &v1006 /* v1006[768] */,
                     hls::stream<float> &v1007 /* v1007[768] */,
                     hls::stream<float> &v1008 /* v1008[768] */,
                     hls::stream<float> &v1009 /* v1009[768] */,
                     float v1010[8][8], int v1011,
                     int v1012) { // L1302
#pragma HLS stream variable = v1006 depth = 9
#pragma HLS stream variable = v1007 depth = 9
#pragma HLS stream variable = v1008 depth = 9
#pragma HLS stream variable = v1009 depth = 9
#pragma HLS array_partition variable = v1010 complete dim = 1
#pragma HLS array_partition variable = v1010 complete dim = 2

  float v46;      // L1305
  v46 = 0.000000; // L1306
l_S_k_0_k46:
  for (int k46 = 0; k46 < 768; k46++) { // L1307
    float v1015 = v1006.read();         // v1006[k46];	// L1308
    float a46;                          // L1309
    a46 = v1015;                        // L1310
    float v1017 = v1007.read();         // v1007[k46];	// L1311
    float b46;                          // L1312
    b46 = v1017;                        // L1313
    float v1019 = a46;                  // L1314
    float v1020 = b46;                  // L1315
    float v1021 = v1019 * v1020;        // L1316
    float v1022 = v46;                  // L1317
    float v1023 = v1022 + v1021;        // L1318
    v46 = v1023;                        // L1319
    float v1024 = a46;                  // L1320
    v1008.write(v1024);                 // v1008[k46] = v1024;	// L1321
    float v1025 = b46;                  // L1322
    v1009.write(v1025);                 // v1009[k46] = v1025;	// L1323
  }
  float v1026 = v46;           // L1325
  v1010[v1011][v1012] = v1026; // L1326
}

void PE_kernel_Q_7_5(hls::stream<float> &v1027 /* v1027[768] */,
                     hls::stream<float> &v1028 /* v1028[768] */,
                     hls::stream<float> &v1029 /* v1029[768] */,
                     hls::stream<float> &v1030 /* v1030[768] */,
                     float v1031[8][8], int v1032,
                     int v1033) { // L1329
#pragma HLS stream variable = v1027 depth = 9
#pragma HLS stream variable = v1028 depth = 9
#pragma HLS stream variable = v1029 depth = 9
#pragma HLS stream variable = v1030 depth = 9
#pragma HLS array_partition variable = v1031 complete dim = 1
#pragma HLS array_partition variable = v1031 complete dim = 2

  float v47;      // L1332
  v47 = 0.000000; // L1333
l_S_k_0_k47:
  for (int k47 = 0; k47 < 768; k47++) { // L1334
    float v1036 = v1027.read();         // v1027[k47];	// L1335
    float a47;                          // L1336
    a47 = v1036;                        // L1337
    float v1038 = v1028.read();         // v1028[k47];	// L1338
    float b47;                          // L1339
    b47 = v1038;                        // L1340
    float v1040 = a47;                  // L1341
    float v1041 = b47;                  // L1342
    float v1042 = v1040 * v1041;        // L1343
    float v1043 = v47;                  // L1344
    float v1044 = v1043 + v1042;        // L1345
    v47 = v1044;                        // L1346
    float v1045 = a47;                  // L1347
    v1029.write(v1045);                 // v1029[k47] = v1045;	// L1348
    float v1046 = b47;                  // L1349
    v1030.write(v1046);                 // v1030[k47] = v1046;	// L1350
  }
  float v1047 = v47;           // L1352
  v1031[v1032][v1033] = v1047; // L1353
}

void PE_kernel_Q_0_6(hls::stream<float> &v1048 /* v1048[768] */,
                     hls::stream<float> &v1049 /* v1049[768] */,
                     hls::stream<float> &v1050 /* v1050[768] */,
                     hls::stream<float> &v1051 /* v1051[768] */,
                     float v1052[8][8], int v1053,
                     int v1054) { // L1356
#pragma HLS stream variable = v1048 depth = 9
#pragma HLS stream variable = v1049 depth = 9
#pragma HLS stream variable = v1050 depth = 9
#pragma HLS stream variable = v1051 depth = 9
#pragma HLS array_partition variable = v1052 complete dim = 1
#pragma HLS array_partition variable = v1052 complete dim = 2

  float v48;      // L1359
  v48 = 0.000000; // L1360
l_S_k_0_k48:
  for (int k48 = 0; k48 < 768; k48++) { // L1361
    float v1057 = v1048.read();         // v1048[k48];	// L1362
    float a48;                          // L1363
    a48 = v1057;                        // L1364
    float v1059 = v1049.read();         // v1049[k48];	// L1365
    float b48;                          // L1366
    b48 = v1059;                        // L1367
    float v1061 = a48;                  // L1368
    float v1062 = b48;                  // L1369
    float v1063 = v1061 * v1062;        // L1370
    float v1064 = v48;                  // L1371
    float v1065 = v1064 + v1063;        // L1372
    v48 = v1065;                        // L1373
    float v1066 = a48;                  // L1374
    v1050.write(v1066);                 // v1050[k48] = v1066;	// L1375
    float v1067 = b48;                  // L1376
    v1051.write(v1067);                 // v1051[k48] = v1067;	// L1377
  }
  float v1068 = v48;           // L1379
  v1052[v1053][v1054] = v1068; // L1380
}

void PE_kernel_Q_1_6(hls::stream<float> &v1069 /* v1069[768] */,
                     hls::stream<float> &v1070 /* v1070[768] */,
                     hls::stream<float> &v1071 /* v1071[768] */,
                     hls::stream<float> &v1072 /* v1072[768] */,
                     float v1073[8][8], int v1074,
                     int v1075) { // L1383
#pragma HLS stream variable = v1069 depth = 9
#pragma HLS stream variable = v1070 depth = 9
#pragma HLS stream variable = v1071 depth = 9
#pragma HLS stream variable = v1072 depth = 9
#pragma HLS array_partition variable = v1073 complete dim = 1
#pragma HLS array_partition variable = v1073 complete dim = 2

  float v49;      // L1386
  v49 = 0.000000; // L1387
l_S_k_0_k49:
  for (int k49 = 0; k49 < 768; k49++) { // L1388
    float v1078 = v1069.read();         // v1069[k49];	// L1389
    float a49;                          // L1390
    a49 = v1078;                        // L1391
    float v1080 = v1070.read();         // v1070[k49];	// L1392
    float b49;                          // L1393
    b49 = v1080;                        // L1394
    float v1082 = a49;                  // L1395
    float v1083 = b49;                  // L1396
    float v1084 = v1082 * v1083;        // L1397
    float v1085 = v49;                  // L1398
    float v1086 = v1085 + v1084;        // L1399
    v49 = v1086;                        // L1400
    float v1087 = a49;                  // L1401
    v1071.write(v1087);                 // v1071[k49] = v1087;	// L1402
    float v1088 = b49;                  // L1403
    v1072.write(v1088);                 // v1072[k49] = v1088;	// L1404
  }
  float v1089 = v49;           // L1406
  v1073[v1074][v1075] = v1089; // L1407
}

void PE_kernel_Q_2_6(hls::stream<float> &v1090 /* v1090[768] */,
                     hls::stream<float> &v1091 /* v1091[768] */,
                     hls::stream<float> &v1092 /* v1092[768] */,
                     hls::stream<float> &v1093 /* v1093[768] */,
                     float v1094[8][8], int v1095,
                     int v1096) { // L1410
#pragma HLS stream variable = v1090 depth = 9
#pragma HLS stream variable = v1091 depth = 9
#pragma HLS stream variable = v1092 depth = 9
#pragma HLS stream variable = v1093 depth = 9
#pragma HLS array_partition variable = v1094 complete dim = 1
#pragma HLS array_partition variable = v1094 complete dim = 2

  float v50;      // L1413
  v50 = 0.000000; // L1414
l_S_k_0_k50:
  for (int k50 = 0; k50 < 768; k50++) { // L1415
    float v1099 = v1090.read();         // v1090[k50];	// L1416
    float a50;                          // L1417
    a50 = v1099;                        // L1418
    float v1101 = v1091.read();         // v1091[k50];	// L1419
    float b50;                          // L1420
    b50 = v1101;                        // L1421
    float v1103 = a50;                  // L1422
    float v1104 = b50;                  // L1423
    float v1105 = v1103 * v1104;        // L1424
    float v1106 = v50;                  // L1425
    float v1107 = v1106 + v1105;        // L1426
    v50 = v1107;                        // L1427
    float v1108 = a50;                  // L1428
    v1092.write(v1108);                 // v1092[k50] = v1108;	// L1429
    float v1109 = b50;                  // L1430
    v1093.write(v1109);                 // v1093[k50] = v1109;	// L1431
  }
  float v1110 = v50;           // L1433
  v1094[v1095][v1096] = v1110; // L1434
}

void PE_kernel_Q_3_6(hls::stream<float> &v1111 /* v1111[768] */,
                     hls::stream<float> &v1112 /* v1112[768] */,
                     hls::stream<float> &v1113 /* v1113[768] */,
                     hls::stream<float> &v1114 /* v1114[768] */,
                     float v1115[8][8], int v1116,
                     int v1117) { // L1437
#pragma HLS stream variable = v1111 depth = 9
#pragma HLS stream variable = v1112 depth = 9
#pragma HLS stream variable = v1113 depth = 9
#pragma HLS stream variable = v1114 depth = 9
#pragma HLS array_partition variable = v1115 complete dim = 1
#pragma HLS array_partition variable = v1115 complete dim = 2

  float v51;      // L1440
  v51 = 0.000000; // L1441
l_S_k_0_k51:
  for (int k51 = 0; k51 < 768; k51++) { // L1442
    float v1120 = v1111.read();         // v1111[k51];	// L1443
    float a51;                          // L1444
    a51 = v1120;                        // L1445
    float v1122 = v1112.read();         // v1112[k51];	// L1446
    float b51;                          // L1447
    b51 = v1122;                        // L1448
    float v1124 = a51;                  // L1449
    float v1125 = b51;                  // L1450
    float v1126 = v1124 * v1125;        // L1451
    float v1127 = v51;                  // L1452
    float v1128 = v1127 + v1126;        // L1453
    v51 = v1128;                        // L1454
    float v1129 = a51;                  // L1455
    v1113.write(v1129);                 // v1113[k51] = v1129;	// L1456
    float v1130 = b51;                  // L1457
    v1114.write(v1130);                 // v1114[k51] = v1130;	// L1458
  }
  float v1131 = v51;           // L1460
  v1115[v1116][v1117] = v1131; // L1461
}

void PE_kernel_Q_4_6(hls::stream<float> &v1132 /* v1132[768] */,
                     hls::stream<float> &v1133 /* v1133[768] */,
                     hls::stream<float> &v1134 /* v1134[768] */,
                     hls::stream<float> &v1135 /* v1135[768] */,
                     float v1136[8][8], int v1137,
                     int v1138) { // L1464
#pragma HLS stream variable = v1132 depth = 9
#pragma HLS stream variable = v1133 depth = 9
#pragma HLS stream variable = v1134 depth = 9
#pragma HLS stream variable = v1135 depth = 9
#pragma HLS array_partition variable = v1136 complete dim = 1
#pragma HLS array_partition variable = v1136 complete dim = 2

  float v52;      // L1467
  v52 = 0.000000; // L1468
l_S_k_0_k52:
  for (int k52 = 0; k52 < 768; k52++) { // L1469
    float v1141 = v1132.read();         // v1132[k52];	// L1470
    float a52;                          // L1471
    a52 = v1141;                        // L1472
    float v1143 = v1133.read();         // v1133[k52];	// L1473
    float b52;                          // L1474
    b52 = v1143;                        // L1475
    float v1145 = a52;                  // L1476
    float v1146 = b52;                  // L1477
    float v1147 = v1145 * v1146;        // L1478
    float v1148 = v52;                  // L1479
    float v1149 = v1148 + v1147;        // L1480
    v52 = v1149;                        // L1481
    float v1150 = a52;                  // L1482
    v1134.write(v1150);                 // v1134[k52] = v1150;	// L1483
    float v1151 = b52;                  // L1484
    v1135.write(v1151);                 // v1135[k52] = v1151;	// L1485
  }
  float v1152 = v52;           // L1487
  v1136[v1137][v1138] = v1152; // L1488
}

void PE_kernel_Q_5_6(hls::stream<float> &v1153 /* v1153[768] */,
                     hls::stream<float> &v1154 /* v1154[768] */,
                     hls::stream<float> &v1155 /* v1155[768] */,
                     hls::stream<float> &v1156 /* v1156[768] */,
                     float v1157[8][8], int v1158,
                     int v1159) { // L1491
#pragma HLS stream variable = v1153 depth = 9
#pragma HLS stream variable = v1154 depth = 9
#pragma HLS stream variable = v1155 depth = 9
#pragma HLS stream variable = v1156 depth = 9
#pragma HLS array_partition variable = v1157 complete dim = 1
#pragma HLS array_partition variable = v1157 complete dim = 2

  float v53;      // L1494
  v53 = 0.000000; // L1495
l_S_k_0_k53:
  for (int k53 = 0; k53 < 768; k53++) { // L1496
    float v1162 = v1153.read();         // v1153[k53];	// L1497
    float a53;                          // L1498
    a53 = v1162;                        // L1499
    float v1164 = v1154.read();         // v1154[k53];	// L1500
    float b53;                          // L1501
    b53 = v1164;                        // L1502
    float v1166 = a53;                  // L1503
    float v1167 = b53;                  // L1504
    float v1168 = v1166 * v1167;        // L1505
    float v1169 = v53;                  // L1506
    float v1170 = v1169 + v1168;        // L1507
    v53 = v1170;                        // L1508
    float v1171 = a53;                  // L1509
    v1155.write(v1171);                 // v1155[k53] = v1171;	// L1510
    float v1172 = b53;                  // L1511
    v1156.write(v1172);                 // v1156[k53] = v1172;	// L1512
  }
  float v1173 = v53;           // L1514
  v1157[v1158][v1159] = v1173; // L1515
}

void PE_kernel_Q_6_6(hls::stream<float> &v1174 /* v1174[768] */,
                     hls::stream<float> &v1175 /* v1175[768] */,
                     hls::stream<float> &v1176 /* v1176[768] */,
                     hls::stream<float> &v1177 /* v1177[768] */,
                     float v1178[8][8], int v1179,
                     int v1180) { // L1518
#pragma HLS stream variable = v1174 depth = 9
#pragma HLS stream variable = v1175 depth = 9
#pragma HLS stream variable = v1176 depth = 9
#pragma HLS stream variable = v1177 depth = 9
#pragma HLS array_partition variable = v1178 complete dim = 1
#pragma HLS array_partition variable = v1178 complete dim = 2

  float v54;      // L1521
  v54 = 0.000000; // L1522
l_S_k_0_k54:
  for (int k54 = 0; k54 < 768; k54++) { // L1523
    float v1183 = v1174.read();         // v1174[k54];	// L1524
    float a54;                          // L1525
    a54 = v1183;                        // L1526
    float v1185 = v1175.read();         // v1175[k54];	// L1527
    float b54;                          // L1528
    b54 = v1185;                        // L1529
    float v1187 = a54;                  // L1530
    float v1188 = b54;                  // L1531
    float v1189 = v1187 * v1188;        // L1532
    float v1190 = v54;                  // L1533
    float v1191 = v1190 + v1189;        // L1534
    v54 = v1191;                        // L1535
    float v1192 = a54;                  // L1536
    v1176.write(v1192);                 // v1176[k54] = v1192;	// L1537
    float v1193 = b54;                  // L1538
    v1177.write(v1193);                 // v1177[k54] = v1193;	// L1539
  }
  float v1194 = v54;           // L1541
  v1178[v1179][v1180] = v1194; // L1542
}

void PE_kernel_Q_7_6(hls::stream<float> &v1195 /* v1195[768] */,
                     hls::stream<float> &v1196 /* v1196[768] */,
                     hls::stream<float> &v1197 /* v1197[768] */,
                     hls::stream<float> &v1198 /* v1198[768] */,
                     float v1199[8][8], int v1200,
                     int v1201) { // L1545
#pragma HLS stream variable = v1195 depth = 9
#pragma HLS stream variable = v1196 depth = 9
#pragma HLS stream variable = v1197 depth = 9
#pragma HLS stream variable = v1198 depth = 9
#pragma HLS array_partition variable = v1199 complete dim = 1
#pragma HLS array_partition variable = v1199 complete dim = 2

  float v55;      // L1548
  v55 = 0.000000; // L1549
l_S_k_0_k55:
  for (int k55 = 0; k55 < 768; k55++) { // L1550
    float v1204 = v1195.read();         // v1195[k55];	// L1551
    float a55;                          // L1552
    a55 = v1204;                        // L1553
    float v1206 = v1196.read();         // v1196[k55];	// L1554
    float b55;                          // L1555
    b55 = v1206;                        // L1556
    float v1208 = a55;                  // L1557
    float v1209 = b55;                  // L1558
    float v1210 = v1208 * v1209;        // L1559
    float v1211 = v55;                  // L1560
    float v1212 = v1211 + v1210;        // L1561
    v55 = v1212;                        // L1562
    float v1213 = a55;                  // L1563
    v1197.write(v1213);                 // v1197[k55] = v1213;	// L1564
    float v1214 = b55;                  // L1565
    v1198.write(v1214);                 // v1198[k55] = v1214;	// L1566
  }
  float v1215 = v55;           // L1568
  v1199[v1200][v1201] = v1215; // L1569
}

void PE_kernel_Q_0_7(hls::stream<float> &v1216 /* v1216[768] */,
                     hls::stream<float> &v1217 /* v1217[768] */,
                     hls::stream<float> &v1218 /* v1218[768] */,
                     hls::stream<float> &v1219 /* v1219[768] */,
                     float v1220[8][8], int v1221,
                     int v1222) { // L1572
#pragma HLS stream variable = v1216 depth = 9
#pragma HLS stream variable = v1217 depth = 9
#pragma HLS stream variable = v1218 depth = 9
#pragma HLS stream variable = v1219 depth = 9
#pragma HLS array_partition variable = v1220 complete dim = 1
#pragma HLS array_partition variable = v1220 complete dim = 2

  float v56;      // L1575
  v56 = 0.000000; // L1576
l_S_k_0_k56:
  for (int k56 = 0; k56 < 768; k56++) { // L1577
    float v1225 = v1216.read();         // v1216[k56];	// L1578
    float a56;                          // L1579
    a56 = v1225;                        // L1580
    float v1227 = v1217.read();         // v1217[k56];	// L1581
    float b56;                          // L1582
    b56 = v1227;                        // L1583
    float v1229 = a56;                  // L1584
    float v1230 = b56;                  // L1585
    float v1231 = v1229 * v1230;        // L1586
    float v1232 = v56;                  // L1587
    float v1233 = v1232 + v1231;        // L1588
    v56 = v1233;                        // L1589
    float v1234 = a56;                  // L1590
    v1218.write(v1234);                 // v1218[k56] = v1234;	// L1591
    float v1235 = b56;                  // L1592
    v1219.write(v1235);                 // v1219[k56] = v1235;	// L1593
  }
  float v1236 = v56;           // L1595
  v1220[v1221][v1222] = v1236; // L1596
}

void PE_kernel_Q_1_7(hls::stream<float> &v1237 /* v1237[768] */,
                     hls::stream<float> &v1238 /* v1238[768] */,
                     hls::stream<float> &v1239 /* v1239[768] */,
                     hls::stream<float> &v1240 /* v1240[768] */,
                     float v1241[8][8], int v1242,
                     int v1243) { // L1599
#pragma HLS stream variable = v1237 depth = 9
#pragma HLS stream variable = v1238 depth = 9
#pragma HLS stream variable = v1239 depth = 9
#pragma HLS stream variable = v1240 depth = 9
#pragma HLS array_partition variable = v1241 complete dim = 1
#pragma HLS array_partition variable = v1241 complete dim = 2

  float v57;      // L1602
  v57 = 0.000000; // L1603
l_S_k_0_k57:
  for (int k57 = 0; k57 < 768; k57++) { // L1604
    float v1246 = v1237.read();         // v1237[k57];	// L1605
    float a57;                          // L1606
    a57 = v1246;                        // L1607
    float v1248 = v1238.read();         // v1238[k57];	// L1608
    float b57;                          // L1609
    b57 = v1248;                        // L1610
    float v1250 = a57;                  // L1611
    float v1251 = b57;                  // L1612
    float v1252 = v1250 * v1251;        // L1613
    float v1253 = v57;                  // L1614
    float v1254 = v1253 + v1252;        // L1615
    v57 = v1254;                        // L1616
    float v1255 = a57;                  // L1617
    v1239.write(v1255);                 // v1239[k57] = v1255;	// L1618
    float v1256 = b57;                  // L1619
    v1240.write(v1256);                 // v1240[k57] = v1256;	// L1620
  }
  float v1257 = v57;           // L1622
  v1241[v1242][v1243] = v1257; // L1623
}

void PE_kernel_Q_2_7(hls::stream<float> &v1258 /* v1258[768] */,
                     hls::stream<float> &v1259 /* v1259[768] */,
                     hls::stream<float> &v1260 /* v1260[768] */,
                     hls::stream<float> &v1261 /* v1261[768] */,
                     float v1262[8][8], int v1263,
                     int v1264) { // L1626
#pragma HLS stream variable = v1258 depth = 9
#pragma HLS stream variable = v1259 depth = 9
#pragma HLS stream variable = v1260 depth = 9
#pragma HLS stream variable = v1261 depth = 9
#pragma HLS array_partition variable = v1262 complete dim = 1
#pragma HLS array_partition variable = v1262 complete dim = 2

  float v58;      // L1629
  v58 = 0.000000; // L1630
l_S_k_0_k58:
  for (int k58 = 0; k58 < 768; k58++) { // L1631
    float v1267 = v1258.read();         // v1258[k58];	// L1632
    float a58;                          // L1633
    a58 = v1267;                        // L1634
    float v1269 = v1259.read();         // v1259[k58];	// L1635
    float b58;                          // L1636
    b58 = v1269;                        // L1637
    float v1271 = a58;                  // L1638
    float v1272 = b58;                  // L1639
    float v1273 = v1271 * v1272;        // L1640
    float v1274 = v58;                  // L1641
    float v1275 = v1274 + v1273;        // L1642
    v58 = v1275;                        // L1643
    float v1276 = a58;                  // L1644
    v1260.write(v1276);                 // v1260[k58] = v1276;	// L1645
    float v1277 = b58;                  // L1646
    v1261.write(v1277);                 // v1261[k58] = v1277;	// L1647
  }
  float v1278 = v58;           // L1649
  v1262[v1263][v1264] = v1278; // L1650
}

void PE_kernel_Q_3_7(hls::stream<float> &v1279 /* v1279[768] */,
                     hls::stream<float> &v1280 /* v1280[768] */,
                     hls::stream<float> &v1281 /* v1281[768] */,
                     hls::stream<float> &v1282 /* v1282[768] */,
                     float v1283[8][8], int v1284,
                     int v1285) { // L1653
#pragma HLS stream variable = v1279 depth = 9
#pragma HLS stream variable = v1280 depth = 9
#pragma HLS stream variable = v1281 depth = 9
#pragma HLS stream variable = v1282 depth = 9
#pragma HLS array_partition variable = v1283 complete dim = 1
#pragma HLS array_partition variable = v1283 complete dim = 2

  float v59;      // L1656
  v59 = 0.000000; // L1657
l_S_k_0_k59:
  for (int k59 = 0; k59 < 768; k59++) { // L1658
    float v1288 = v1279.read();         // v1279[k59];	// L1659
    float a59;                          // L1660
    a59 = v1288;                        // L1661
    float v1290 = v1280.read();         // v1280[k59];	// L1662
    float b59;                          // L1663
    b59 = v1290;                        // L1664
    float v1292 = a59;                  // L1665
    float v1293 = b59;                  // L1666
    float v1294 = v1292 * v1293;        // L1667
    float v1295 = v59;                  // L1668
    float v1296 = v1295 + v1294;        // L1669
    v59 = v1296;                        // L1670
    float v1297 = a59;                  // L1671
    v1281.write(v1297);                 // v1281[k59] = v1297;	// L1672
    float v1298 = b59;                  // L1673
    v1282.write(v1298);                 // v1282[k59] = v1298;	// L1674
  }
  float v1299 = v59;           // L1676
  v1283[v1284][v1285] = v1299; // L1677
}

void PE_kernel_Q_4_7(hls::stream<float> &v1300 /* v1300[768] */,
                     hls::stream<float> &v1301 /* v1301[768] */,
                     hls::stream<float> &v1302 /* v1302[768] */,
                     hls::stream<float> &v1303 /* v1303[768] */,
                     float v1304[8][8], int v1305,
                     int v1306) { // L1680
#pragma HLS stream variable = v1300 depth = 9
#pragma HLS stream variable = v1301 depth = 9
#pragma HLS stream variable = v1302 depth = 9
#pragma HLS stream variable = v1303 depth = 9
#pragma HLS array_partition variable = v1304 complete dim = 1
#pragma HLS array_partition variable = v1304 complete dim = 2

  float v60;      // L1683
  v60 = 0.000000; // L1684
l_S_k_0_k60:
  for (int k60 = 0; k60 < 768; k60++) { // L1685
    float v1309 = v1300.read();         // v1300[k60];	// L1686
    float a60;                          // L1687
    a60 = v1309;                        // L1688
    float v1311 = v1301.read();         // v1301[k60];	// L1689
    float b60;                          // L1690
    b60 = v1311;                        // L1691
    float v1313 = a60;                  // L1692
    float v1314 = b60;                  // L1693
    float v1315 = v1313 * v1314;        // L1694
    float v1316 = v60;                  // L1695
    float v1317 = v1316 + v1315;        // L1696
    v60 = v1317;                        // L1697
    float v1318 = a60;                  // L1698
    v1302.write(v1318);                 // v1302[k60] = v1318;	// L1699
    float v1319 = b60;                  // L1700
    v1303.write(v1319);                 // v1303[k60] = v1319;	// L1701
  }
  float v1320 = v60;           // L1703
  v1304[v1305][v1306] = v1320; // L1704
}

void PE_kernel_Q_5_7(hls::stream<float> &v1321 /* v1321[768] */,
                     hls::stream<float> &v1322 /* v1322[768] */,
                     hls::stream<float> &v1323 /* v1323[768] */,
                     hls::stream<float> &v1324 /* v1324[768] */,
                     float v1325[8][8], int v1326,
                     int v1327) { // L1707
#pragma HLS stream variable = v1321 depth = 9
#pragma HLS stream variable = v1322 depth = 9
#pragma HLS stream variable = v1323 depth = 9
#pragma HLS stream variable = v1324 depth = 9
#pragma HLS array_partition variable = v1325 complete dim = 1
#pragma HLS array_partition variable = v1325 complete dim = 2

  float v61;      // L1710
  v61 = 0.000000; // L1711
l_S_k_0_k61:
  for (int k61 = 0; k61 < 768; k61++) { // L1712
    float v1330 = v1321.read();         // v1321[k61];	// L1713
    float a61;                          // L1714
    a61 = v1330;                        // L1715
    float v1332 = v1322.read();         // v1322[k61];	// L1716
    float b61;                          // L1717
    b61 = v1332;                        // L1718
    float v1334 = a61;                  // L1719
    float v1335 = b61;                  // L1720
    float v1336 = v1334 * v1335;        // L1721
    float v1337 = v61;                  // L1722
    float v1338 = v1337 + v1336;        // L1723
    v61 = v1338;                        // L1724
    float v1339 = a61;                  // L1725
    v1323.write(v1339);                 // v1323[k61] = v1339;	// L1726
    float v1340 = b61;                  // L1727
    v1324.write(v1340);                 // v1324[k61] = v1340;	// L1728
  }
  float v1341 = v61;           // L1730
  v1325[v1326][v1327] = v1341; // L1731
}

void PE_kernel_Q_6_7(hls::stream<float> &v1342 /* v1342[768] */,
                     hls::stream<float> &v1343 /* v1343[768] */,
                     hls::stream<float> &v1344 /* v1344[768] */,
                     hls::stream<float> &v1345 /* v1345[768] */,
                     float v1346[8][8], int v1347,
                     int v1348) { // L1734
#pragma HLS stream variable = v1342 depth = 9
#pragma HLS stream variable = v1343 depth = 9
#pragma HLS stream variable = v1344 depth = 9
#pragma HLS stream variable = v1345 depth = 9
#pragma HLS array_partition variable = v1346 complete dim = 1
#pragma HLS array_partition variable = v1346 complete dim = 2

  float v62;      // L1737
  v62 = 0.000000; // L1738
l_S_k_0_k62:
  for (int k62 = 0; k62 < 768; k62++) { // L1739
    float v1351 = v1342.read();         // v1342[k62];	// L1740
    float a62;                          // L1741
    a62 = v1351;                        // L1742
    float v1353 = v1343.read();         // v1343[k62];	// L1743
    float b62;                          // L1744
    b62 = v1353;                        // L1745
    float v1355 = a62;                  // L1746
    float v1356 = b62;                  // L1747
    float v1357 = v1355 * v1356;        // L1748
    float v1358 = v62;                  // L1749
    float v1359 = v1358 + v1357;        // L1750
    v62 = v1359;                        // L1751
    float v1360 = a62;                  // L1752
    v1344.write(v1360);                 // v1344[k62] = v1360;	// L1753
    float v1361 = b62;                  // L1754
    v1345.write(v1361);                 // v1345[k62] = v1361;	// L1755
  }
  float v1362 = v62;           // L1757
  v1346[v1347][v1348] = v1362; // L1758
}

void PE_kernel_Q_7_7(hls::stream<float> &v1363 /* v1363[768] */,
                     hls::stream<float> &v1364 /* v1364[768] */,
                     hls::stream<float> &v1365 /* v1365[768] */,
                     hls::stream<float> &v1366 /* v1366[768] */,
                     float v1367[8][8], int v1368,
                     int v1369) { // L1761
#pragma HLS stream variable = v1363 depth = 9
#pragma HLS stream variable = v1364 depth = 9
#pragma HLS stream variable = v1365 depth = 9
#pragma HLS stream variable = v1366 depth = 9
#pragma HLS array_partition variable = v1367 complete dim = 1
#pragma HLS array_partition variable = v1367 complete dim = 2

  float v63;      // L1764
  v63 = 0.000000; // L1765
l_S_k_0_k63:
  for (int k63 = 0; k63 < 768; k63++) { // L1766
    float v1372 = v1363.read();         // v1363[k63];	// L1767
    float a63;                          // L1768
    a63 = v1372;                        // L1769
    float v1374 = v1364.read();         // v1364[k63];	// L1770
    float b63;                          // L1771
    b63 = v1374;                        // L1772
    float v1376 = a63;                  // L1773
    float v1377 = b63;                  // L1774
    float v1378 = v1376 * v1377;        // L1775
    float v1379 = v63;                  // L1776
    float v1380 = v1379 + v1378;        // L1777
    v63 = v1380;                        // L1778
    float v1381 = a63;                  // L1779
    v1365.write(v1381);                 // v1365[k63] = v1381;	// L1780
    float v1382 = b63;                  // L1781
    v1366.write(v1382);                 // v1366[k63] = v1382;	// L1782
  }
  float v1383 = v63;           // L1784
  v1367[v1368][v1369] = v1383; // L1785
}

void systolic_tile_Q(float v1384[8][768], float v1385[768][8],
                     float v1386[8][8]) { // L1788
#pragma HLS dataflow
#pragma HLS array_partition variable = v1384 complete dim = 1

#pragma HLS array_partition variable = v1385 complete dim = 2

#pragma HLS array_partition variable = v1386 complete dim = 1
#pragma HLS array_partition variable = v1386 complete dim = 2

  hls::stream<float> A_fifo[8][9] /* A_fifo[8][9][768] */; // L1789
#pragma HLS stream variable = A_fifo depth = 9
  hls::stream<float> B_fifo[8][9] /* B_fifo[8][9][768] */; // L1790
#pragma HLS stream variable = B_fifo depth = 9
  float A_drain[8]; // L1791
  float B_drain[8]; // L1792
l_data_load_k64:
  for (int k64 = 0; k64 < 768; k64++) { // L1793
  l_S_m_0_m:
    for (int m = 0; m < 8; m++) {  // L1794
      float v1393 = v1384[m][k64]; // L1795
      A_fifo[m][0].write(v1393);   // A_fifo[m][0][k64] = v1393;	// L1796
    }
  l_S_n_1_n:
    for (int n = 0; n < 8; n++) {  // L1798
      float v1395 = v1385[k64][n]; // L1799
      B_fifo[n][0].write(v1395);   // B_fifo[n][0][k64] = v1395;	// L1800
    }
  }
  hls::stream<float> &v1396 /* v1396[768] */ = A_fifo[0][0]; // L1804
  hls::stream<float> &v1397 /* v1397[768] */ = B_fifo[0][0]; // L1805
  hls::stream<float> &v1398 /* v1398[768] */ = A_fifo[0][1]; // L1811
  hls::stream<float> &v1399 /* v1399[768] */ = B_fifo[0][1]; // L1812
  PE_kernel_Q_0_0(v1396, v1397, v1398, v1399, v1386, 0, 0);  // L1813
  hls::stream<float> &v1400 /* v1400[768] */ = A_fifo[0][1]; // L1815
  hls::stream<float> &v1401 /* v1401[768] */ = B_fifo[1][0]; // L1816
  hls::stream<float> &v1402 /* v1402[768] */ = A_fifo[0][2]; // L1820
  hls::stream<float> &v1403 /* v1403[768] */ = B_fifo[1][1]; // L1821
  PE_kernel_Q_1_0(v1400, v1401, v1402, v1403, v1386, 0, 1);  // L1822
  hls::stream<float> &v1404 /* v1404[768] */ = A_fifo[0][2]; // L1824
  hls::stream<float> &v1405 /* v1405[768] */ = B_fifo[2][0]; // L1825
  hls::stream<float> &v1406 /* v1406[768] */ = A_fifo[0][3]; // L1829
  hls::stream<float> &v1407 /* v1407[768] */ = B_fifo[2][1]; // L1830
  PE_kernel_Q_2_0(v1404, v1405, v1406, v1407, v1386, 0, 2);  // L1831
  hls::stream<float> &v1408 /* v1408[768] */ = A_fifo[0][3]; // L1833
  hls::stream<float> &v1409 /* v1409[768] */ = B_fifo[3][0]; // L1834
  hls::stream<float> &v1410 /* v1410[768] */ = A_fifo[0][4]; // L1838
  hls::stream<float> &v1411 /* v1411[768] */ = B_fifo[3][1]; // L1839
  PE_kernel_Q_3_0(v1408, v1409, v1410, v1411, v1386, 0, 3);  // L1840
  hls::stream<float> &v1412 /* v1412[768] */ = A_fifo[0][4]; // L1842
  hls::stream<float> &v1413 /* v1413[768] */ = B_fifo[4][0]; // L1843
  hls::stream<float> &v1414 /* v1414[768] */ = A_fifo[0][5]; // L1847
  hls::stream<float> &v1415 /* v1415[768] */ = B_fifo[4][1]; // L1848
  PE_kernel_Q_4_0(v1412, v1413, v1414, v1415, v1386, 0, 4);  // L1849
  hls::stream<float> &v1416 /* v1416[768] */ = A_fifo[0][5]; // L1851
  hls::stream<float> &v1417 /* v1417[768] */ = B_fifo[5][0]; // L1852
  hls::stream<float> &v1418 /* v1418[768] */ = A_fifo[0][6]; // L1856
  hls::stream<float> &v1419 /* v1419[768] */ = B_fifo[5][1]; // L1857
  PE_kernel_Q_5_0(v1416, v1417, v1418, v1419, v1386, 0, 5);  // L1858
  hls::stream<float> &v1420 /* v1420[768] */ = A_fifo[0][6]; // L1860
  hls::stream<float> &v1421 /* v1421[768] */ = B_fifo[6][0]; // L1861
  hls::stream<float> &v1422 /* v1422[768] */ = A_fifo[0][7]; // L1865
  hls::stream<float> &v1423 /* v1423[768] */ = B_fifo[6][1]; // L1866
  PE_kernel_Q_6_0(v1420, v1421, v1422, v1423, v1386, 0, 6);  // L1867
  hls::stream<float> &v1424 /* v1424[768] */ = A_fifo[0][7]; // L1869
  hls::stream<float> &v1425 /* v1425[768] */ = B_fifo[7][0]; // L1870
  hls::stream<float> &v1426 /* v1426[768] */ = A_fifo[0][8]; // L1874
  hls::stream<float> &v1427 /* v1427[768] */ = B_fifo[7][1]; // L1875
  PE_kernel_Q_7_0(v1424, v1425, v1426, v1427, v1386, 0, 7);  // L1876
  hls::stream<float> &v1428 /* v1428[768] */ = A_fifo[1][0]; // L1877
  hls::stream<float> &v1429 /* v1429[768] */ = B_fifo[0][1]; // L1878
  hls::stream<float> &v1430 /* v1430[768] */ = A_fifo[1][1]; // L1879
  hls::stream<float> &v1431 /* v1431[768] */ = B_fifo[0][2]; // L1880
  PE_kernel_Q_0_1(v1428, v1429, v1430, v1431, v1386, 1, 0);  // L1881
  hls::stream<float> &v1432 /* v1432[768] */ = A_fifo[1][1]; // L1882
  hls::stream<float> &v1433 /* v1433[768] */ = B_fifo[1][1]; // L1883
  hls::stream<float> &v1434 /* v1434[768] */ = A_fifo[1][2]; // L1884
  hls::stream<float> &v1435 /* v1435[768] */ = B_fifo[1][2]; // L1885
  PE_kernel_Q_1_1(v1432, v1433, v1434, v1435, v1386, 1, 1);  // L1886
  hls::stream<float> &v1436 /* v1436[768] */ = A_fifo[1][2]; // L1887
  hls::stream<float> &v1437 /* v1437[768] */ = B_fifo[2][1]; // L1888
  hls::stream<float> &v1438 /* v1438[768] */ = A_fifo[1][3]; // L1889
  hls::stream<float> &v1439 /* v1439[768] */ = B_fifo[2][2]; // L1890
  PE_kernel_Q_2_1(v1436, v1437, v1438, v1439, v1386, 1, 2);  // L1891
  hls::stream<float> &v1440 /* v1440[768] */ = A_fifo[1][3]; // L1892
  hls::stream<float> &v1441 /* v1441[768] */ = B_fifo[3][1]; // L1893
  hls::stream<float> &v1442 /* v1442[768] */ = A_fifo[1][4]; // L1894
  hls::stream<float> &v1443 /* v1443[768] */ = B_fifo[3][2]; // L1895
  PE_kernel_Q_3_1(v1440, v1441, v1442, v1443, v1386, 1, 3);  // L1896
  hls::stream<float> &v1444 /* v1444[768] */ = A_fifo[1][4]; // L1897
  hls::stream<float> &v1445 /* v1445[768] */ = B_fifo[4][1]; // L1898
  hls::stream<float> &v1446 /* v1446[768] */ = A_fifo[1][5]; // L1899
  hls::stream<float> &v1447 /* v1447[768] */ = B_fifo[4][2]; // L1900
  PE_kernel_Q_4_1(v1444, v1445, v1446, v1447, v1386, 1, 4);  // L1901
  hls::stream<float> &v1448 /* v1448[768] */ = A_fifo[1][5]; // L1902
  hls::stream<float> &v1449 /* v1449[768] */ = B_fifo[5][1]; // L1903
  hls::stream<float> &v1450 /* v1450[768] */ = A_fifo[1][6]; // L1904
  hls::stream<float> &v1451 /* v1451[768] */ = B_fifo[5][2]; // L1905
  PE_kernel_Q_5_1(v1448, v1449, v1450, v1451, v1386, 1, 5);  // L1906
  hls::stream<float> &v1452 /* v1452[768] */ = A_fifo[1][6]; // L1907
  hls::stream<float> &v1453 /* v1453[768] */ = B_fifo[6][1]; // L1908
  hls::stream<float> &v1454 /* v1454[768] */ = A_fifo[1][7]; // L1909
  hls::stream<float> &v1455 /* v1455[768] */ = B_fifo[6][2]; // L1910
  PE_kernel_Q_6_1(v1452, v1453, v1454, v1455, v1386, 1, 6);  // L1911
  hls::stream<float> &v1456 /* v1456[768] */ = A_fifo[1][7]; // L1912
  hls::stream<float> &v1457 /* v1457[768] */ = B_fifo[7][1]; // L1913
  hls::stream<float> &v1458 /* v1458[768] */ = A_fifo[1][8]; // L1914
  hls::stream<float> &v1459 /* v1459[768] */ = B_fifo[7][2]; // L1915
  PE_kernel_Q_7_1(v1456, v1457, v1458, v1459, v1386, 1, 7);  // L1916
  hls::stream<float> &v1460 /* v1460[768] */ = A_fifo[2][0]; // L1917
  hls::stream<float> &v1461 /* v1461[768] */ = B_fifo[0][2]; // L1918
  hls::stream<float> &v1462 /* v1462[768] */ = A_fifo[2][1]; // L1919
  hls::stream<float> &v1463 /* v1463[768] */ = B_fifo[0][3]; // L1920
  PE_kernel_Q_0_2(v1460, v1461, v1462, v1463, v1386, 2, 0);  // L1921
  hls::stream<float> &v1464 /* v1464[768] */ = A_fifo[2][1]; // L1922
  hls::stream<float> &v1465 /* v1465[768] */ = B_fifo[1][2]; // L1923
  hls::stream<float> &v1466 /* v1466[768] */ = A_fifo[2][2]; // L1924
  hls::stream<float> &v1467 /* v1467[768] */ = B_fifo[1][3]; // L1925
  PE_kernel_Q_1_2(v1464, v1465, v1466, v1467, v1386, 2, 1);  // L1926
  hls::stream<float> &v1468 /* v1468[768] */ = A_fifo[2][2]; // L1927
  hls::stream<float> &v1469 /* v1469[768] */ = B_fifo[2][2]; // L1928
  hls::stream<float> &v1470 /* v1470[768] */ = A_fifo[2][3]; // L1929
  hls::stream<float> &v1471 /* v1471[768] */ = B_fifo[2][3]; // L1930
  PE_kernel_Q_2_2(v1468, v1469, v1470, v1471, v1386, 2, 2);  // L1931
  hls::stream<float> &v1472 /* v1472[768] */ = A_fifo[2][3]; // L1932
  hls::stream<float> &v1473 /* v1473[768] */ = B_fifo[3][2]; // L1933
  hls::stream<float> &v1474 /* v1474[768] */ = A_fifo[2][4]; // L1934
  hls::stream<float> &v1475 /* v1475[768] */ = B_fifo[3][3]; // L1935
  PE_kernel_Q_3_2(v1472, v1473, v1474, v1475, v1386, 2, 3);  // L1936
  hls::stream<float> &v1476 /* v1476[768] */ = A_fifo[2][4]; // L1937
  hls::stream<float> &v1477 /* v1477[768] */ = B_fifo[4][2]; // L1938
  hls::stream<float> &v1478 /* v1478[768] */ = A_fifo[2][5]; // L1939
  hls::stream<float> &v1479 /* v1479[768] */ = B_fifo[4][3]; // L1940
  PE_kernel_Q_4_2(v1476, v1477, v1478, v1479, v1386, 2, 4);  // L1941
  hls::stream<float> &v1480 /* v1480[768] */ = A_fifo[2][5]; // L1942
  hls::stream<float> &v1481 /* v1481[768] */ = B_fifo[5][2]; // L1943
  hls::stream<float> &v1482 /* v1482[768] */ = A_fifo[2][6]; // L1944
  hls::stream<float> &v1483 /* v1483[768] */ = B_fifo[5][3]; // L1945
  PE_kernel_Q_5_2(v1480, v1481, v1482, v1483, v1386, 2, 5);  // L1946
  hls::stream<float> &v1484 /* v1484[768] */ = A_fifo[2][6]; // L1947
  hls::stream<float> &v1485 /* v1485[768] */ = B_fifo[6][2]; // L1948
  hls::stream<float> &v1486 /* v1486[768] */ = A_fifo[2][7]; // L1949
  hls::stream<float> &v1487 /* v1487[768] */ = B_fifo[6][3]; // L1950
  PE_kernel_Q_6_2(v1484, v1485, v1486, v1487, v1386, 2, 6);  // L1951
  hls::stream<float> &v1488 /* v1488[768] */ = A_fifo[2][7]; // L1952
  hls::stream<float> &v1489 /* v1489[768] */ = B_fifo[7][2]; // L1953
  hls::stream<float> &v1490 /* v1490[768] */ = A_fifo[2][8]; // L1954
  hls::stream<float> &v1491 /* v1491[768] */ = B_fifo[7][3]; // L1955
  PE_kernel_Q_7_2(v1488, v1489, v1490, v1491, v1386, 2, 7);  // L1956
  hls::stream<float> &v1492 /* v1492[768] */ = A_fifo[3][0]; // L1957
  hls::stream<float> &v1493 /* v1493[768] */ = B_fifo[0][3]; // L1958
  hls::stream<float> &v1494 /* v1494[768] */ = A_fifo[3][1]; // L1959
  hls::stream<float> &v1495 /* v1495[768] */ = B_fifo[0][4]; // L1960
  PE_kernel_Q_0_3(v1492, v1493, v1494, v1495, v1386, 3, 0);  // L1961
  hls::stream<float> &v1496 /* v1496[768] */ = A_fifo[3][1]; // L1962
  hls::stream<float> &v1497 /* v1497[768] */ = B_fifo[1][3]; // L1963
  hls::stream<float> &v1498 /* v1498[768] */ = A_fifo[3][2]; // L1964
  hls::stream<float> &v1499 /* v1499[768] */ = B_fifo[1][4]; // L1965
  PE_kernel_Q_1_3(v1496, v1497, v1498, v1499, v1386, 3, 1);  // L1966
  hls::stream<float> &v1500 /* v1500[768] */ = A_fifo[3][2]; // L1967
  hls::stream<float> &v1501 /* v1501[768] */ = B_fifo[2][3]; // L1968
  hls::stream<float> &v1502 /* v1502[768] */ = A_fifo[3][3]; // L1969
  hls::stream<float> &v1503 /* v1503[768] */ = B_fifo[2][4]; // L1970
  PE_kernel_Q_2_3(v1500, v1501, v1502, v1503, v1386, 3, 2);  // L1971
  hls::stream<float> &v1504 /* v1504[768] */ = A_fifo[3][3]; // L1972
  hls::stream<float> &v1505 /* v1505[768] */ = B_fifo[3][3]; // L1973
  hls::stream<float> &v1506 /* v1506[768] */ = A_fifo[3][4]; // L1974
  hls::stream<float> &v1507 /* v1507[768] */ = B_fifo[3][4]; // L1975
  PE_kernel_Q_3_3(v1504, v1505, v1506, v1507, v1386, 3, 3);  // L1976
  hls::stream<float> &v1508 /* v1508[768] */ = A_fifo[3][4]; // L1977
  hls::stream<float> &v1509 /* v1509[768] */ = B_fifo[4][3]; // L1978
  hls::stream<float> &v1510 /* v1510[768] */ = A_fifo[3][5]; // L1979
  hls::stream<float> &v1511 /* v1511[768] */ = B_fifo[4][4]; // L1980
  PE_kernel_Q_4_3(v1508, v1509, v1510, v1511, v1386, 3, 4);  // L1981
  hls::stream<float> &v1512 /* v1512[768] */ = A_fifo[3][5]; // L1982
  hls::stream<float> &v1513 /* v1513[768] */ = B_fifo[5][3]; // L1983
  hls::stream<float> &v1514 /* v1514[768] */ = A_fifo[3][6]; // L1984
  hls::stream<float> &v1515 /* v1515[768] */ = B_fifo[5][4]; // L1985
  PE_kernel_Q_5_3(v1512, v1513, v1514, v1515, v1386, 3, 5);  // L1986
  hls::stream<float> &v1516 /* v1516[768] */ = A_fifo[3][6]; // L1987
  hls::stream<float> &v1517 /* v1517[768] */ = B_fifo[6][3]; // L1988
  hls::stream<float> &v1518 /* v1518[768] */ = A_fifo[3][7]; // L1989
  hls::stream<float> &v1519 /* v1519[768] */ = B_fifo[6][4]; // L1990
  PE_kernel_Q_6_3(v1516, v1517, v1518, v1519, v1386, 3, 6);  // L1991
  hls::stream<float> &v1520 /* v1520[768] */ = A_fifo[3][7]; // L1992
  hls::stream<float> &v1521 /* v1521[768] */ = B_fifo[7][3]; // L1993
  hls::stream<float> &v1522 /* v1522[768] */ = A_fifo[3][8]; // L1994
  hls::stream<float> &v1523 /* v1523[768] */ = B_fifo[7][4]; // L1995
  PE_kernel_Q_7_3(v1520, v1521, v1522, v1523, v1386, 3, 7);  // L1996
  hls::stream<float> &v1524 /* v1524[768] */ = A_fifo[4][0]; // L1997
  hls::stream<float> &v1525 /* v1525[768] */ = B_fifo[0][4]; // L1998
  hls::stream<float> &v1526 /* v1526[768] */ = A_fifo[4][1]; // L1999
  hls::stream<float> &v1527 /* v1527[768] */ = B_fifo[0][5]; // L2000
  PE_kernel_Q_0_4(v1524, v1525, v1526, v1527, v1386, 4, 0);  // L2001
  hls::stream<float> &v1528 /* v1528[768] */ = A_fifo[4][1]; // L2002
  hls::stream<float> &v1529 /* v1529[768] */ = B_fifo[1][4]; // L2003
  hls::stream<float> &v1530 /* v1530[768] */ = A_fifo[4][2]; // L2004
  hls::stream<float> &v1531 /* v1531[768] */ = B_fifo[1][5]; // L2005
  PE_kernel_Q_1_4(v1528, v1529, v1530, v1531, v1386, 4, 1);  // L2006
  hls::stream<float> &v1532 /* v1532[768] */ = A_fifo[4][2]; // L2007
  hls::stream<float> &v1533 /* v1533[768] */ = B_fifo[2][4]; // L2008
  hls::stream<float> &v1534 /* v1534[768] */ = A_fifo[4][3]; // L2009
  hls::stream<float> &v1535 /* v1535[768] */ = B_fifo[2][5]; // L2010
  PE_kernel_Q_2_4(v1532, v1533, v1534, v1535, v1386, 4, 2);  // L2011
  hls::stream<float> &v1536 /* v1536[768] */ = A_fifo[4][3]; // L2012
  hls::stream<float> &v1537 /* v1537[768] */ = B_fifo[3][4]; // L2013
  hls::stream<float> &v1538 /* v1538[768] */ = A_fifo[4][4]; // L2014
  hls::stream<float> &v1539 /* v1539[768] */ = B_fifo[3][5]; // L2015
  PE_kernel_Q_3_4(v1536, v1537, v1538, v1539, v1386, 4, 3);  // L2016
  hls::stream<float> &v1540 /* v1540[768] */ = A_fifo[4][4]; // L2017
  hls::stream<float> &v1541 /* v1541[768] */ = B_fifo[4][4]; // L2018
  hls::stream<float> &v1542 /* v1542[768] */ = A_fifo[4][5]; // L2019
  hls::stream<float> &v1543 /* v1543[768] */ = B_fifo[4][5]; // L2020
  PE_kernel_Q_4_4(v1540, v1541, v1542, v1543, v1386, 4, 4);  // L2021
  hls::stream<float> &v1544 /* v1544[768] */ = A_fifo[4][5]; // L2022
  hls::stream<float> &v1545 /* v1545[768] */ = B_fifo[5][4]; // L2023
  hls::stream<float> &v1546 /* v1546[768] */ = A_fifo[4][6]; // L2024
  hls::stream<float> &v1547 /* v1547[768] */ = B_fifo[5][5]; // L2025
  PE_kernel_Q_5_4(v1544, v1545, v1546, v1547, v1386, 4, 5);  // L2026
  hls::stream<float> &v1548 /* v1548[768] */ = A_fifo[4][6]; // L2027
  hls::stream<float> &v1549 /* v1549[768] */ = B_fifo[6][4]; // L2028
  hls::stream<float> &v1550 /* v1550[768] */ = A_fifo[4][7]; // L2029
  hls::stream<float> &v1551 /* v1551[768] */ = B_fifo[6][5]; // L2030
  PE_kernel_Q_6_4(v1548, v1549, v1550, v1551, v1386, 4, 6);  // L2031
  hls::stream<float> &v1552 /* v1552[768] */ = A_fifo[4][7]; // L2032
  hls::stream<float> &v1553 /* v1553[768] */ = B_fifo[7][4]; // L2033
  hls::stream<float> &v1554 /* v1554[768] */ = A_fifo[4][8]; // L2034
  hls::stream<float> &v1555 /* v1555[768] */ = B_fifo[7][5]; // L2035
  PE_kernel_Q_7_4(v1552, v1553, v1554, v1555, v1386, 4, 7);  // L2036
  hls::stream<float> &v1556 /* v1556[768] */ = A_fifo[5][0]; // L2037
  hls::stream<float> &v1557 /* v1557[768] */ = B_fifo[0][5]; // L2038
  hls::stream<float> &v1558 /* v1558[768] */ = A_fifo[5][1]; // L2039
  hls::stream<float> &v1559 /* v1559[768] */ = B_fifo[0][6]; // L2040
  PE_kernel_Q_0_5(v1556, v1557, v1558, v1559, v1386, 5, 0);  // L2041
  hls::stream<float> &v1560 /* v1560[768] */ = A_fifo[5][1]; // L2042
  hls::stream<float> &v1561 /* v1561[768] */ = B_fifo[1][5]; // L2043
  hls::stream<float> &v1562 /* v1562[768] */ = A_fifo[5][2]; // L2044
  hls::stream<float> &v1563 /* v1563[768] */ = B_fifo[1][6]; // L2045
  PE_kernel_Q_1_5(v1560, v1561, v1562, v1563, v1386, 5, 1);  // L2046
  hls::stream<float> &v1564 /* v1564[768] */ = A_fifo[5][2]; // L2047
  hls::stream<float> &v1565 /* v1565[768] */ = B_fifo[2][5]; // L2048
  hls::stream<float> &v1566 /* v1566[768] */ = A_fifo[5][3]; // L2049
  hls::stream<float> &v1567 /* v1567[768] */ = B_fifo[2][6]; // L2050
  PE_kernel_Q_2_5(v1564, v1565, v1566, v1567, v1386, 5, 2);  // L2051
  hls::stream<float> &v1568 /* v1568[768] */ = A_fifo[5][3]; // L2052
  hls::stream<float> &v1569 /* v1569[768] */ = B_fifo[3][5]; // L2053
  hls::stream<float> &v1570 /* v1570[768] */ = A_fifo[5][4]; // L2054
  hls::stream<float> &v1571 /* v1571[768] */ = B_fifo[3][6]; // L2055
  PE_kernel_Q_3_5(v1568, v1569, v1570, v1571, v1386, 5, 3);  // L2056
  hls::stream<float> &v1572 /* v1572[768] */ = A_fifo[5][4]; // L2057
  hls::stream<float> &v1573 /* v1573[768] */ = B_fifo[4][5]; // L2058
  hls::stream<float> &v1574 /* v1574[768] */ = A_fifo[5][5]; // L2059
  hls::stream<float> &v1575 /* v1575[768] */ = B_fifo[4][6]; // L2060
  PE_kernel_Q_4_5(v1572, v1573, v1574, v1575, v1386, 5, 4);  // L2061
  hls::stream<float> &v1576 /* v1576[768] */ = A_fifo[5][5]; // L2062
  hls::stream<float> &v1577 /* v1577[768] */ = B_fifo[5][5]; // L2063
  hls::stream<float> &v1578 /* v1578[768] */ = A_fifo[5][6]; // L2064
  hls::stream<float> &v1579 /* v1579[768] */ = B_fifo[5][6]; // L2065
  PE_kernel_Q_5_5(v1576, v1577, v1578, v1579, v1386, 5, 5);  // L2066
  hls::stream<float> &v1580 /* v1580[768] */ = A_fifo[5][6]; // L2067
  hls::stream<float> &v1581 /* v1581[768] */ = B_fifo[6][5]; // L2068
  hls::stream<float> &v1582 /* v1582[768] */ = A_fifo[5][7]; // L2069
  hls::stream<float> &v1583 /* v1583[768] */ = B_fifo[6][6]; // L2070
  PE_kernel_Q_6_5(v1580, v1581, v1582, v1583, v1386, 5, 6);  // L2071
  hls::stream<float> &v1584 /* v1584[768] */ = A_fifo[5][7]; // L2072
  hls::stream<float> &v1585 /* v1585[768] */ = B_fifo[7][5]; // L2073
  hls::stream<float> &v1586 /* v1586[768] */ = A_fifo[5][8]; // L2074
  hls::stream<float> &v1587 /* v1587[768] */ = B_fifo[7][6]; // L2075
  PE_kernel_Q_7_5(v1584, v1585, v1586, v1587, v1386, 5, 7);  // L2076
  hls::stream<float> &v1588 /* v1588[768] */ = A_fifo[6][0]; // L2077
  hls::stream<float> &v1589 /* v1589[768] */ = B_fifo[0][6]; // L2078
  hls::stream<float> &v1590 /* v1590[768] */ = A_fifo[6][1]; // L2079
  hls::stream<float> &v1591 /* v1591[768] */ = B_fifo[0][7]; // L2080
  PE_kernel_Q_0_6(v1588, v1589, v1590, v1591, v1386, 6, 0);  // L2081
  hls::stream<float> &v1592 /* v1592[768] */ = A_fifo[6][1]; // L2082
  hls::stream<float> &v1593 /* v1593[768] */ = B_fifo[1][6]; // L2083
  hls::stream<float> &v1594 /* v1594[768] */ = A_fifo[6][2]; // L2084
  hls::stream<float> &v1595 /* v1595[768] */ = B_fifo[1][7]; // L2085
  PE_kernel_Q_1_6(v1592, v1593, v1594, v1595, v1386, 6, 1);  // L2086
  hls::stream<float> &v1596 /* v1596[768] */ = A_fifo[6][2]; // L2087
  hls::stream<float> &v1597 /* v1597[768] */ = B_fifo[2][6]; // L2088
  hls::stream<float> &v1598 /* v1598[768] */ = A_fifo[6][3]; // L2089
  hls::stream<float> &v1599 /* v1599[768] */ = B_fifo[2][7]; // L2090
  PE_kernel_Q_2_6(v1596, v1597, v1598, v1599, v1386, 6, 2);  // L2091
  hls::stream<float> &v1600 /* v1600[768] */ = A_fifo[6][3]; // L2092
  hls::stream<float> &v1601 /* v1601[768] */ = B_fifo[3][6]; // L2093
  hls::stream<float> &v1602 /* v1602[768] */ = A_fifo[6][4]; // L2094
  hls::stream<float> &v1603 /* v1603[768] */ = B_fifo[3][7]; // L2095
  PE_kernel_Q_3_6(v1600, v1601, v1602, v1603, v1386, 6, 3);  // L2096
  hls::stream<float> &v1604 /* v1604[768] */ = A_fifo[6][4]; // L2097
  hls::stream<float> &v1605 /* v1605[768] */ = B_fifo[4][6]; // L2098
  hls::stream<float> &v1606 /* v1606[768] */ = A_fifo[6][5]; // L2099
  hls::stream<float> &v1607 /* v1607[768] */ = B_fifo[4][7]; // L2100
  PE_kernel_Q_4_6(v1604, v1605, v1606, v1607, v1386, 6, 4);  // L2101
  hls::stream<float> &v1608 /* v1608[768] */ = A_fifo[6][5]; // L2102
  hls::stream<float> &v1609 /* v1609[768] */ = B_fifo[5][6]; // L2103
  hls::stream<float> &v1610 /* v1610[768] */ = A_fifo[6][6]; // L2104
  hls::stream<float> &v1611 /* v1611[768] */ = B_fifo[5][7]; // L2105
  PE_kernel_Q_5_6(v1608, v1609, v1610, v1611, v1386, 6, 5);  // L2106
  hls::stream<float> &v1612 /* v1612[768] */ = A_fifo[6][6]; // L2107
  hls::stream<float> &v1613 /* v1613[768] */ = B_fifo[6][6]; // L2108
  hls::stream<float> &v1614 /* v1614[768] */ = A_fifo[6][7]; // L2109
  hls::stream<float> &v1615 /* v1615[768] */ = B_fifo[6][7]; // L2110
  PE_kernel_Q_6_6(v1612, v1613, v1614, v1615, v1386, 6, 6);  // L2111
  hls::stream<float> &v1616 /* v1616[768] */ = A_fifo[6][7]; // L2112
  hls::stream<float> &v1617 /* v1617[768] */ = B_fifo[7][6]; // L2113
  hls::stream<float> &v1618 /* v1618[768] */ = A_fifo[6][8]; // L2114
  hls::stream<float> &v1619 /* v1619[768] */ = B_fifo[7][7]; // L2115
  PE_kernel_Q_7_6(v1616, v1617, v1618, v1619, v1386, 6, 7);  // L2116
  hls::stream<float> &v1620 /* v1620[768] */ = A_fifo[7][0]; // L2117
  hls::stream<float> &v1621 /* v1621[768] */ = B_fifo[0][7]; // L2118
  hls::stream<float> &v1622 /* v1622[768] */ = A_fifo[7][1]; // L2119
  hls::stream<float> &v1623 /* v1623[768] */ = B_fifo[0][8]; // L2120
  PE_kernel_Q_0_7(v1620, v1621, v1622, v1623, v1386, 7, 0);  // L2121
  hls::stream<float> &v1624 /* v1624[768] */ = A_fifo[7][1]; // L2122
  hls::stream<float> &v1625 /* v1625[768] */ = B_fifo[1][7]; // L2123
  hls::stream<float> &v1626 /* v1626[768] */ = A_fifo[7][2]; // L2124
  hls::stream<float> &v1627 /* v1627[768] */ = B_fifo[1][8]; // L2125
  PE_kernel_Q_1_7(v1624, v1625, v1626, v1627, v1386, 7, 1);  // L2126
  hls::stream<float> &v1628 /* v1628[768] */ = A_fifo[7][2]; // L2127
  hls::stream<float> &v1629 /* v1629[768] */ = B_fifo[2][7]; // L2128
  hls::stream<float> &v1630 /* v1630[768] */ = A_fifo[7][3]; // L2129
  hls::stream<float> &v1631 /* v1631[768] */ = B_fifo[2][8]; // L2130
  PE_kernel_Q_2_7(v1628, v1629, v1630, v1631, v1386, 7, 2);  // L2131
  hls::stream<float> &v1632 /* v1632[768] */ = A_fifo[7][3]; // L2132
  hls::stream<float> &v1633 /* v1633[768] */ = B_fifo[3][7]; // L2133
  hls::stream<float> &v1634 /* v1634[768] */ = A_fifo[7][4]; // L2134
  hls::stream<float> &v1635 /* v1635[768] */ = B_fifo[3][8]; // L2135
  PE_kernel_Q_3_7(v1632, v1633, v1634, v1635, v1386, 7, 3);  // L2136
  hls::stream<float> &v1636 /* v1636[768] */ = A_fifo[7][4]; // L2137
  hls::stream<float> &v1637 /* v1637[768] */ = B_fifo[4][7]; // L2138
  hls::stream<float> &v1638 /* v1638[768] */ = A_fifo[7][5]; // L2139
  hls::stream<float> &v1639 /* v1639[768] */ = B_fifo[4][8]; // L2140
  PE_kernel_Q_4_7(v1636, v1637, v1638, v1639, v1386, 7, 4);  // L2141
  hls::stream<float> &v1640 /* v1640[768] */ = A_fifo[7][5]; // L2142
  hls::stream<float> &v1641 /* v1641[768] */ = B_fifo[5][7]; // L2143
  hls::stream<float> &v1642 /* v1642[768] */ = A_fifo[7][6]; // L2144
  hls::stream<float> &v1643 /* v1643[768] */ = B_fifo[5][8]; // L2145
  PE_kernel_Q_5_7(v1640, v1641, v1642, v1643, v1386, 7, 5);  // L2146
  hls::stream<float> &v1644 /* v1644[768] */ = A_fifo[7][6]; // L2147
  hls::stream<float> &v1645 /* v1645[768] */ = B_fifo[6][7]; // L2148
  hls::stream<float> &v1646 /* v1646[768] */ = A_fifo[7][7]; // L2149
  hls::stream<float> &v1647 /* v1647[768] */ = B_fifo[6][8]; // L2150
  PE_kernel_Q_6_7(v1644, v1645, v1646, v1647, v1386, 7, 6);  // L2151
  hls::stream<float> &v1648 /* v1648[768] */ = A_fifo[7][7]; // L2152
  hls::stream<float> &v1649 /* v1649[768] */ = B_fifo[7][7]; // L2153
  hls::stream<float> &v1650 /* v1650[768] */ = A_fifo[7][8]; // L2154
  hls::stream<float> &v1651 /* v1651[768] */ = B_fifo[7][8]; // L2155
  PE_kernel_Q_7_7(v1648, v1649, v1650, v1651, v1386, 7, 7);  // L2156
l_data_drain_k65:
  for (int k65 = 0; k65 < 768; k65++) { // L2157
  l_S_m_4_m1:
    for (int m1 = 0; m1 < 8; m1++) {      // L2158
      float v1654 = A_fifo[m1][8].read(); // A_fifo[m1][8][k65];	// L2159
      A_drain[m1] = v1654;                // L2160
    }
  l_S_n_5_n1:
    for (int n1 = 0; n1 < 8; n1++) {      // L2162
      float v1656 = B_fifo[n1][8].read(); // B_fifo[n1][8][k65];	// L2163
      B_drain[n1] = v1656;                // L2164
    }
  }
}

void systolic_Q(float v1657[64][768], float v1658[768][768],
                float v1659[64][768]) { // L2169
  float local_A[8][768];                // L2170
#pragma HLS array_partition variable = local_A complete dim = 1

  float local_B[768][8]; // L2171
#pragma HLS array_partition variable = local_B complete dim = 2

  float local_C[8][8]; // L2172
#pragma HLS array_partition variable = local_C complete dim = 1
#pragma HLS array_partition variable = local_C complete dim = 2

l_outer_tile_mi:
  for (int mi = 0; mi < 8; mi++) { // L2173
  l_ni:
    for (int ni = 0; ni < 96; ni++) { // L2174
                                      // #pragma HLS dataflow
    l_load_A_tile_ak:
      for (int ak = 0; ak < 768; ak++) { // L2175
      l_ai:
        for (int ai = 0; ai < 8; ai++) { // L2176
#pragma HLS pipeline II = 1
          ap_int<33> v1667 = ni;                      // L2177
          bool v1668 = v1667 == 0;                    // L2180
          if (v1668) {                                // L2181
            float v1669 = v1657[((mi * 8) + ai)][ak]; // L2182
            local_A[ai][ak] = v1669;                  // L2183
          }
        }
      }
    l_load_B_tile_bk:
      for (int bk = 0; bk < 768; bk++) { // L2187
      l_bj:
        for (int bj = 0; bj < 8; bj++) { // L2188
#pragma HLS pipeline II = 1
          float v1672 = v1658[bk][((ni * 8) + bj)]; // L2189
          local_B[bk][bj] = v1672;                  // L2190
        }
      }
      systolic_tile_Q(local_A, local_B, local_C); // L2193
    l_store_C_tile_sj:
      for (int sj = 0; sj < 8; sj++) { // L2194
      l_si:
        for (int si = 0; si < 8; si++) { // L2195
#pragma HLS pipeline II = 1
          float v1675 = local_C[si][sj];                   // L2196
          v1659[((mi * 8) + si)][((ni * 8) + sj)] = v1675; // L2197
        }
      }
    }
  }
}

void PE_kernel_K_0_0(hls::stream<float> &v1676 /* v1676[768] */,
                     hls::stream<float> &v1677 /* v1677[768] */,
                     hls::stream<float> &v1678 /* v1678[768] */,
                     hls::stream<float> &v1679 /* v1679[768] */,
                     float v1680[8][8], int v1681,
                     int v1682) { // L2204
#pragma HLS stream variable = v1676 depth = 9
#pragma HLS stream variable = v1677 depth = 9
#pragma HLS stream variable = v1678 depth = 9
#pragma HLS stream variable = v1679 depth = 9
#pragma HLS array_partition variable = v1680 complete dim = 1
#pragma HLS array_partition variable = v1680 complete dim = 2

  float v64;      // L2207
  v64 = 0.000000; // L2208
l_S_k_0_k66:
  for (int k66 = 0; k66 < 768; k66++) { // L2209
    float v1685 = v1676.read();         // v1676[k66];	// L2210
    float a64;                          // L2211
    a64 = v1685;                        // L2212
    float v1687 = v1677.read();         // v1677[k66];	// L2213
    float b64;                          // L2214
    b64 = v1687;                        // L2215
    float v1689 = a64;                  // L2216
    float v1690 = b64;                  // L2217
    float v1691 = v1689 * v1690;        // L2218
    float v1692 = v64;                  // L2219
    float v1693 = v1692 + v1691;        // L2220
    v64 = v1693;                        // L2221
    float v1694 = a64;                  // L2222
    v1678.write(v1694);                 // v1678[k66] = v1694;	// L2223
    float v1695 = b64;                  // L2224
    v1679.write(v1695);                 // v1679[k66] = v1695;	// L2225
  }
  float v1696 = v64;           // L2227
  v1680[v1681][v1682] = v1696; // L2228
}

void PE_kernel_K_1_0(hls::stream<float> &v1697 /* v1697[768] */,
                     hls::stream<float> &v1698 /* v1698[768] */,
                     hls::stream<float> &v1699 /* v1699[768] */,
                     hls::stream<float> &v1700 /* v1700[768] */,
                     float v1701[8][8], int v1702,
                     int v1703) { // L2231
#pragma HLS stream variable = v1697 depth = 9
#pragma HLS stream variable = v1698 depth = 9
#pragma HLS stream variable = v1699 depth = 9
#pragma HLS stream variable = v1700 depth = 9
#pragma HLS array_partition variable = v1701 complete dim = 1
#pragma HLS array_partition variable = v1701 complete dim = 2

  float v65;      // L2234
  v65 = 0.000000; // L2235
l_S_k_0_k67:
  for (int k67 = 0; k67 < 768; k67++) { // L2236
    float v1706 = v1697.read();         // v1697[k67];	// L2237
    float a65;                          // L2238
    a65 = v1706;                        // L2239
    float v1708 = v1698.read();         // v1698[k67];	// L2240
    float b65;                          // L2241
    b65 = v1708;                        // L2242
    float v1710 = a65;                  // L2243
    float v1711 = b65;                  // L2244
    float v1712 = v1710 * v1711;        // L2245
    float v1713 = v65;                  // L2246
    float v1714 = v1713 + v1712;        // L2247
    v65 = v1714;                        // L2248
    float v1715 = a65;                  // L2249
    v1699.write(v1715);                 // v1699[k67] = v1715;	// L2250
    float v1716 = b65;                  // L2251
    v1700.write(v1716);                 // v1700[k67] = v1716;	// L2252
  }
  float v1717 = v65;           // L2254
  v1701[v1702][v1703] = v1717; // L2255
}

void PE_kernel_K_2_0(hls::stream<float> &v1718 /* v1718[768] */,
                     hls::stream<float> &v1719 /* v1719[768] */,
                     hls::stream<float> &v1720 /* v1720[768] */,
                     hls::stream<float> &v1721 /* v1721[768] */,
                     float v1722[8][8], int v1723,
                     int v1724) { // L2258
#pragma HLS stream variable = v1718 depth = 9
#pragma HLS stream variable = v1719 depth = 9
#pragma HLS stream variable = v1720 depth = 9
#pragma HLS stream variable = v1721 depth = 9
#pragma HLS array_partition variable = v1722 complete dim = 1
#pragma HLS array_partition variable = v1722 complete dim = 2

  float v66;      // L2261
  v66 = 0.000000; // L2262
l_S_k_0_k68:
  for (int k68 = 0; k68 < 768; k68++) { // L2263
    float v1727 = v1718.read();         // v1718[k68];	// L2264
    float a66;                          // L2265
    a66 = v1727;                        // L2266
    float v1729 = v1719.read();         // v1719[k68];	// L2267
    float b66;                          // L2268
    b66 = v1729;                        // L2269
    float v1731 = a66;                  // L2270
    float v1732 = b66;                  // L2271
    float v1733 = v1731 * v1732;        // L2272
    float v1734 = v66;                  // L2273
    float v1735 = v1734 + v1733;        // L2274
    v66 = v1735;                        // L2275
    float v1736 = a66;                  // L2276
    v1720.write(v1736);                 // v1720[k68] = v1736;	// L2277
    float v1737 = b66;                  // L2278
    v1721.write(v1737);                 // v1721[k68] = v1737;	// L2279
  }
  float v1738 = v66;           // L2281
  v1722[v1723][v1724] = v1738; // L2282
}

void PE_kernel_K_3_0(hls::stream<float> &v1739 /* v1739[768] */,
                     hls::stream<float> &v1740 /* v1740[768] */,
                     hls::stream<float> &v1741 /* v1741[768] */,
                     hls::stream<float> &v1742 /* v1742[768] */,
                     float v1743[8][8], int v1744,
                     int v1745) { // L2285
#pragma HLS stream variable = v1739 depth = 9
#pragma HLS stream variable = v1740 depth = 9
#pragma HLS stream variable = v1741 depth = 9
#pragma HLS stream variable = v1742 depth = 9
#pragma HLS array_partition variable = v1743 complete dim = 1
#pragma HLS array_partition variable = v1743 complete dim = 2

  float v67;      // L2288
  v67 = 0.000000; // L2289
l_S_k_0_k69:
  for (int k69 = 0; k69 < 768; k69++) { // L2290
    float v1748 = v1739.read();         // v1739[k69];	// L2291
    float a67;                          // L2292
    a67 = v1748;                        // L2293
    float v1750 = v1740.read();         // v1740[k69];	// L2294
    float b67;                          // L2295
    b67 = v1750;                        // L2296
    float v1752 = a67;                  // L2297
    float v1753 = b67;                  // L2298
    float v1754 = v1752 * v1753;        // L2299
    float v1755 = v67;                  // L2300
    float v1756 = v1755 + v1754;        // L2301
    v67 = v1756;                        // L2302
    float v1757 = a67;                  // L2303
    v1741.write(v1757);                 // v1741[k69] = v1757;	// L2304
    float v1758 = b67;                  // L2305
    v1742.write(v1758);                 // v1742[k69] = v1758;	// L2306
  }
  float v1759 = v67;           // L2308
  v1743[v1744][v1745] = v1759; // L2309
}

void PE_kernel_K_4_0(hls::stream<float> &v1760 /* v1760[768] */,
                     hls::stream<float> &v1761 /* v1761[768] */,
                     hls::stream<float> &v1762 /* v1762[768] */,
                     hls::stream<float> &v1763 /* v1763[768] */,
                     float v1764[8][8], int v1765,
                     int v1766) { // L2312
#pragma HLS stream variable = v1760 depth = 9
#pragma HLS stream variable = v1761 depth = 9
#pragma HLS stream variable = v1762 depth = 9
#pragma HLS stream variable = v1763 depth = 9
#pragma HLS array_partition variable = v1764 complete dim = 1
#pragma HLS array_partition variable = v1764 complete dim = 2

  float v68;      // L2315
  v68 = 0.000000; // L2316
l_S_k_0_k70:
  for (int k70 = 0; k70 < 768; k70++) { // L2317
    float v1769 = v1760.read();         // v1760[k70];	// L2318
    float a68;                          // L2319
    a68 = v1769;                        // L2320
    float v1771 = v1761.read();         // v1761[k70];	// L2321
    float b68;                          // L2322
    b68 = v1771;                        // L2323
    float v1773 = a68;                  // L2324
    float v1774 = b68;                  // L2325
    float v1775 = v1773 * v1774;        // L2326
    float v1776 = v68;                  // L2327
    float v1777 = v1776 + v1775;        // L2328
    v68 = v1777;                        // L2329
    float v1778 = a68;                  // L2330
    v1762.write(v1778);                 // v1762[k70] = v1778;	// L2331
    float v1779 = b68;                  // L2332
    v1763.write(v1779);                 // v1763[k70] = v1779;	// L2333
  }
  float v1780 = v68;           // L2335
  v1764[v1765][v1766] = v1780; // L2336
}

void PE_kernel_K_5_0(hls::stream<float> &v1781 /* v1781[768] */,
                     hls::stream<float> &v1782 /* v1782[768] */,
                     hls::stream<float> &v1783 /* v1783[768] */,
                     hls::stream<float> &v1784 /* v1784[768] */,
                     float v1785[8][8], int v1786,
                     int v1787) { // L2339
#pragma HLS stream variable = v1781 depth = 9
#pragma HLS stream variable = v1782 depth = 9
#pragma HLS stream variable = v1783 depth = 9
#pragma HLS stream variable = v1784 depth = 9
#pragma HLS array_partition variable = v1785 complete dim = 1
#pragma HLS array_partition variable = v1785 complete dim = 2

  float v69;      // L2342
  v69 = 0.000000; // L2343
l_S_k_0_k71:
  for (int k71 = 0; k71 < 768; k71++) { // L2344
    float v1790 = v1781.read();         // v1781[k71];	// L2345
    float a69;                          // L2346
    a69 = v1790;                        // L2347
    float v1792 = v1782.read();         // v1782[k71];	// L2348
    float b69;                          // L2349
    b69 = v1792;                        // L2350
    float v1794 = a69;                  // L2351
    float v1795 = b69;                  // L2352
    float v1796 = v1794 * v1795;        // L2353
    float v1797 = v69;                  // L2354
    float v1798 = v1797 + v1796;        // L2355
    v69 = v1798;                        // L2356
    float v1799 = a69;                  // L2357
    v1783.write(v1799);                 // v1783[k71] = v1799;	// L2358
    float v1800 = b69;                  // L2359
    v1784.write(v1800);                 // v1784[k71] = v1800;	// L2360
  }
  float v1801 = v69;           // L2362
  v1785[v1786][v1787] = v1801; // L2363
}

void PE_kernel_K_6_0(hls::stream<float> &v1802 /* v1802[768] */,
                     hls::stream<float> &v1803 /* v1803[768] */,
                     hls::stream<float> &v1804 /* v1804[768] */,
                     hls::stream<float> &v1805 /* v1805[768] */,
                     float v1806[8][8], int v1807,
                     int v1808) { // L2366
#pragma HLS stream variable = v1802 depth = 9
#pragma HLS stream variable = v1803 depth = 9
#pragma HLS stream variable = v1804 depth = 9
#pragma HLS stream variable = v1805 depth = 9
#pragma HLS array_partition variable = v1806 complete dim = 1
#pragma HLS array_partition variable = v1806 complete dim = 2

  float v70;      // L2369
  v70 = 0.000000; // L2370
l_S_k_0_k72:
  for (int k72 = 0; k72 < 768; k72++) { // L2371
    float v1811 = v1802.read();         // v1802[k72];	// L2372
    float a70;                          // L2373
    a70 = v1811;                        // L2374
    float v1813 = v1803.read();         // v1803[k72];	// L2375
    float b70;                          // L2376
    b70 = v1813;                        // L2377
    float v1815 = a70;                  // L2378
    float v1816 = b70;                  // L2379
    float v1817 = v1815 * v1816;        // L2380
    float v1818 = v70;                  // L2381
    float v1819 = v1818 + v1817;        // L2382
    v70 = v1819;                        // L2383
    float v1820 = a70;                  // L2384
    v1804.write(v1820);                 // v1804[k72] = v1820;	// L2385
    float v1821 = b70;                  // L2386
    v1805.write(v1821);                 // v1805[k72] = v1821;	// L2387
  }
  float v1822 = v70;           // L2389
  v1806[v1807][v1808] = v1822; // L2390
}

void PE_kernel_K_7_0(hls::stream<float> &v1823 /* v1823[768] */,
                     hls::stream<float> &v1824 /* v1824[768] */,
                     hls::stream<float> &v1825 /* v1825[768] */,
                     hls::stream<float> &v1826 /* v1826[768] */,
                     float v1827[8][8], int v1828,
                     int v1829) { // L2393
#pragma HLS stream variable = v1823 depth = 9
#pragma HLS stream variable = v1824 depth = 9
#pragma HLS stream variable = v1825 depth = 9
#pragma HLS stream variable = v1826 depth = 9
#pragma HLS array_partition variable = v1827 complete dim = 1
#pragma HLS array_partition variable = v1827 complete dim = 2

  float v71;      // L2396
  v71 = 0.000000; // L2397
l_S_k_0_k73:
  for (int k73 = 0; k73 < 768; k73++) { // L2398
    float v1832 = v1823.read();         // v1823[k73];	// L2399
    float a71;                          // L2400
    a71 = v1832;                        // L2401
    float v1834 = v1824.read();         // v1824[k73];	// L2402
    float b71;                          // L2403
    b71 = v1834;                        // L2404
    float v1836 = a71;                  // L2405
    float v1837 = b71;                  // L2406
    float v1838 = v1836 * v1837;        // L2407
    float v1839 = v71;                  // L2408
    float v1840 = v1839 + v1838;        // L2409
    v71 = v1840;                        // L2410
    float v1841 = a71;                  // L2411
    v1825.write(v1841);                 // v1825[k73] = v1841;	// L2412
    float v1842 = b71;                  // L2413
    v1826.write(v1842);                 // v1826[k73] = v1842;	// L2414
  }
  float v1843 = v71;           // L2416
  v1827[v1828][v1829] = v1843; // L2417
}

void PE_kernel_K_0_1(hls::stream<float> &v1844 /* v1844[768] */,
                     hls::stream<float> &v1845 /* v1845[768] */,
                     hls::stream<float> &v1846 /* v1846[768] */,
                     hls::stream<float> &v1847 /* v1847[768] */,
                     float v1848[8][8], int v1849,
                     int v1850) { // L2420
#pragma HLS stream variable = v1844 depth = 9
#pragma HLS stream variable = v1845 depth = 9
#pragma HLS stream variable = v1846 depth = 9
#pragma HLS stream variable = v1847 depth = 9
#pragma HLS array_partition variable = v1848 complete dim = 1
#pragma HLS array_partition variable = v1848 complete dim = 2

  float v72;      // L2423
  v72 = 0.000000; // L2424
l_S_k_0_k74:
  for (int k74 = 0; k74 < 768; k74++) { // L2425
    float v1853 = v1844.read();         // v1844[k74];	// L2426
    float a72;                          // L2427
    a72 = v1853;                        // L2428
    float v1855 = v1845.read();         // v1845[k74];	// L2429
    float b72;                          // L2430
    b72 = v1855;                        // L2431
    float v1857 = a72;                  // L2432
    float v1858 = b72;                  // L2433
    float v1859 = v1857 * v1858;        // L2434
    float v1860 = v72;                  // L2435
    float v1861 = v1860 + v1859;        // L2436
    v72 = v1861;                        // L2437
    float v1862 = a72;                  // L2438
    v1846.write(v1862);                 // v1846[k74] = v1862;	// L2439
    float v1863 = b72;                  // L2440
    v1847.write(v1863);                 // v1847[k74] = v1863;	// L2441
  }
  float v1864 = v72;           // L2443
  v1848[v1849][v1850] = v1864; // L2444
}

void PE_kernel_K_1_1(hls::stream<float> &v1865 /* v1865[768] */,
                     hls::stream<float> &v1866 /* v1866[768] */,
                     hls::stream<float> &v1867 /* v1867[768] */,
                     hls::stream<float> &v1868 /* v1868[768] */,
                     float v1869[8][8], int v1870,
                     int v1871) { // L2447
#pragma HLS stream variable = v1865 depth = 9
#pragma HLS stream variable = v1866 depth = 9
#pragma HLS stream variable = v1867 depth = 9
#pragma HLS stream variable = v1868 depth = 9
#pragma HLS array_partition variable = v1869 complete dim = 1
#pragma HLS array_partition variable = v1869 complete dim = 2

  float v73;      // L2450
  v73 = 0.000000; // L2451
l_S_k_0_k75:
  for (int k75 = 0; k75 < 768; k75++) { // L2452
    float v1874 = v1865.read();         // v1865[k75];	// L2453
    float a73;                          // L2454
    a73 = v1874;                        // L2455
    float v1876 = v1866.read();         // v1866[k75];	// L2456
    float b73;                          // L2457
    b73 = v1876;                        // L2458
    float v1878 = a73;                  // L2459
    float v1879 = b73;                  // L2460
    float v1880 = v1878 * v1879;        // L2461
    float v1881 = v73;                  // L2462
    float v1882 = v1881 + v1880;        // L2463
    v73 = v1882;                        // L2464
    float v1883 = a73;                  // L2465
    v1867.write(v1883);                 // v1867[k75] = v1883;	// L2466
    float v1884 = b73;                  // L2467
    v1868.write(v1884);                 // v1868[k75] = v1884;	// L2468
  }
  float v1885 = v73;           // L2470
  v1869[v1870][v1871] = v1885; // L2471
}

void PE_kernel_K_2_1(hls::stream<float> &v1886 /* v1886[768] */,
                     hls::stream<float> &v1887 /* v1887[768] */,
                     hls::stream<float> &v1888 /* v1888[768] */,
                     hls::stream<float> &v1889 /* v1889[768] */,
                     float v1890[8][8], int v1891,
                     int v1892) { // L2474
#pragma HLS stream variable = v1886 depth = 9
#pragma HLS stream variable = v1887 depth = 9
#pragma HLS stream variable = v1888 depth = 9
#pragma HLS stream variable = v1889 depth = 9
#pragma HLS array_partition variable = v1890 complete dim = 1
#pragma HLS array_partition variable = v1890 complete dim = 2

  float v74;      // L2477
  v74 = 0.000000; // L2478
l_S_k_0_k76:
  for (int k76 = 0; k76 < 768; k76++) { // L2479
    float v1895 = v1886.read();         // v1886[k76];	// L2480
    float a74;                          // L2481
    a74 = v1895;                        // L2482
    float v1897 = v1887.read();         // v1887[k76];	// L2483
    float b74;                          // L2484
    b74 = v1897;                        // L2485
    float v1899 = a74;                  // L2486
    float v1900 = b74;                  // L2487
    float v1901 = v1899 * v1900;        // L2488
    float v1902 = v74;                  // L2489
    float v1903 = v1902 + v1901;        // L2490
    v74 = v1903;                        // L2491
    float v1904 = a74;                  // L2492
    v1888.write(v1904);                 // v1888[k76] = v1904;	// L2493
    float v1905 = b74;                  // L2494
    v1889.write(v1905);                 // v1889[k76] = v1905;	// L2495
  }
  float v1906 = v74;           // L2497
  v1890[v1891][v1892] = v1906; // L2498
}

void PE_kernel_K_3_1(hls::stream<float> &v1907 /* v1907[768] */,
                     hls::stream<float> &v1908 /* v1908[768] */,
                     hls::stream<float> &v1909 /* v1909[768] */,
                     hls::stream<float> &v1910 /* v1910[768] */,
                     float v1911[8][8], int v1912,
                     int v1913) { // L2501
#pragma HLS stream variable = v1907 depth = 9
#pragma HLS stream variable = v1908 depth = 9
#pragma HLS stream variable = v1909 depth = 9
#pragma HLS stream variable = v1910 depth = 9
#pragma HLS array_partition variable = v1911 complete dim = 1
#pragma HLS array_partition variable = v1911 complete dim = 2

  float v75;      // L2504
  v75 = 0.000000; // L2505
l_S_k_0_k77:
  for (int k77 = 0; k77 < 768; k77++) { // L2506
    float v1916 = v1907.read();         // v1907[k77];	// L2507
    float a75;                          // L2508
    a75 = v1916;                        // L2509
    float v1918 = v1908.read();         // v1908[k77];	// L2510
    float b75;                          // L2511
    b75 = v1918;                        // L2512
    float v1920 = a75;                  // L2513
    float v1921 = b75;                  // L2514
    float v1922 = v1920 * v1921;        // L2515
    float v1923 = v75;                  // L2516
    float v1924 = v1923 + v1922;        // L2517
    v75 = v1924;                        // L2518
    float v1925 = a75;                  // L2519
    v1909.write(v1925);                 // v1909[k77] = v1925;	// L2520
    float v1926 = b75;                  // L2521
    v1910.write(v1926);                 // v1910[k77] = v1926;	// L2522
  }
  float v1927 = v75;           // L2524
  v1911[v1912][v1913] = v1927; // L2525
}

void PE_kernel_K_4_1(hls::stream<float> &v1928 /* v1928[768] */,
                     hls::stream<float> &v1929 /* v1929[768] */,
                     hls::stream<float> &v1930 /* v1930[768] */,
                     hls::stream<float> &v1931 /* v1931[768] */,
                     float v1932[8][8], int v1933,
                     int v1934) { // L2528
#pragma HLS stream variable = v1928 depth = 9
#pragma HLS stream variable = v1929 depth = 9
#pragma HLS stream variable = v1930 depth = 9
#pragma HLS stream variable = v1931 depth = 9
#pragma HLS array_partition variable = v1932 complete dim = 1
#pragma HLS array_partition variable = v1932 complete dim = 2

  float v76;      // L2531
  v76 = 0.000000; // L2532
l_S_k_0_k78:
  for (int k78 = 0; k78 < 768; k78++) { // L2533
    float v1937 = v1928.read();         // v1928[k78];	// L2534
    float a76;                          // L2535
    a76 = v1937;                        // L2536
    float v1939 = v1929.read();         // v1929[k78];	// L2537
    float b76;                          // L2538
    b76 = v1939;                        // L2539
    float v1941 = a76;                  // L2540
    float v1942 = b76;                  // L2541
    float v1943 = v1941 * v1942;        // L2542
    float v1944 = v76;                  // L2543
    float v1945 = v1944 + v1943;        // L2544
    v76 = v1945;                        // L2545
    float v1946 = a76;                  // L2546
    v1930.write(v1946);                 // v1930[k78] = v1946;	// L2547
    float v1947 = b76;                  // L2548
    v1931.write(v1947);                 // v1931[k78] = v1947;	// L2549
  }
  float v1948 = v76;           // L2551
  v1932[v1933][v1934] = v1948; // L2552
}

void PE_kernel_K_5_1(hls::stream<float> &v1949 /* v1949[768] */,
                     hls::stream<float> &v1950 /* v1950[768] */,
                     hls::stream<float> &v1951 /* v1951[768] */,
                     hls::stream<float> &v1952 /* v1952[768] */,
                     float v1953[8][8], int v1954,
                     int v1955) { // L2555
#pragma HLS stream variable = v1949 depth = 9
#pragma HLS stream variable = v1950 depth = 9
#pragma HLS stream variable = v1951 depth = 9
#pragma HLS stream variable = v1952 depth = 9
#pragma HLS array_partition variable = v1953 complete dim = 1
#pragma HLS array_partition variable = v1953 complete dim = 2

  float v77;      // L2558
  v77 = 0.000000; // L2559
l_S_k_0_k79:
  for (int k79 = 0; k79 < 768; k79++) { // L2560
    float v1958 = v1949.read();         // v1949[k79];	// L2561
    float a77;                          // L2562
    a77 = v1958;                        // L2563
    float v1960 = v1950.read();         // v1950[k79];	// L2564
    float b77;                          // L2565
    b77 = v1960;                        // L2566
    float v1962 = a77;                  // L2567
    float v1963 = b77;                  // L2568
    float v1964 = v1962 * v1963;        // L2569
    float v1965 = v77;                  // L2570
    float v1966 = v1965 + v1964;        // L2571
    v77 = v1966;                        // L2572
    float v1967 = a77;                  // L2573
    v1951.write(v1967);                 // v1951[k79] = v1967;	// L2574
    float v1968 = b77;                  // L2575
    v1952.write(v1968);                 // v1952[k79] = v1968;	// L2576
  }
  float v1969 = v77;           // L2578
  v1953[v1954][v1955] = v1969; // L2579
}

void PE_kernel_K_6_1(hls::stream<float> &v1970 /* v1970[768] */,
                     hls::stream<float> &v1971 /* v1971[768] */,
                     hls::stream<float> &v1972 /* v1972[768] */,
                     hls::stream<float> &v1973 /* v1973[768] */,
                     float v1974[8][8], int v1975,
                     int v1976) { // L2582
#pragma HLS stream variable = v1970 depth = 9
#pragma HLS stream variable = v1971 depth = 9
#pragma HLS stream variable = v1972 depth = 9
#pragma HLS stream variable = v1973 depth = 9
#pragma HLS array_partition variable = v1974 complete dim = 1
#pragma HLS array_partition variable = v1974 complete dim = 2

  float v78;      // L2585
  v78 = 0.000000; // L2586
l_S_k_0_k80:
  for (int k80 = 0; k80 < 768; k80++) { // L2587
    float v1979 = v1970.read();         // v1970[k80];	// L2588
    float a78;                          // L2589
    a78 = v1979;                        // L2590
    float v1981 = v1971.read();         // v1971[k80];	// L2591
    float b78;                          // L2592
    b78 = v1981;                        // L2593
    float v1983 = a78;                  // L2594
    float v1984 = b78;                  // L2595
    float v1985 = v1983 * v1984;        // L2596
    float v1986 = v78;                  // L2597
    float v1987 = v1986 + v1985;        // L2598
    v78 = v1987;                        // L2599
    float v1988 = a78;                  // L2600
    v1972.write(v1988);                 // v1972[k80] = v1988;	// L2601
    float v1989 = b78;                  // L2602
    v1973.write(v1989);                 // v1973[k80] = v1989;	// L2603
  }
  float v1990 = v78;           // L2605
  v1974[v1975][v1976] = v1990; // L2606
}

void PE_kernel_K_7_1(hls::stream<float> &v1991 /* v1991[768] */,
                     hls::stream<float> &v1992 /* v1992[768] */,
                     hls::stream<float> &v1993 /* v1993[768] */,
                     hls::stream<float> &v1994 /* v1994[768] */,
                     float v1995[8][8], int v1996,
                     int v1997) { // L2609
#pragma HLS stream variable = v1991 depth = 9
#pragma HLS stream variable = v1992 depth = 9
#pragma HLS stream variable = v1993 depth = 9
#pragma HLS stream variable = v1994 depth = 9
#pragma HLS array_partition variable = v1995 complete dim = 1
#pragma HLS array_partition variable = v1995 complete dim = 2

  float v79;      // L2612
  v79 = 0.000000; // L2613
l_S_k_0_k81:
  for (int k81 = 0; k81 < 768; k81++) { // L2614
    float v2000 = v1991.read();         // v1991[k81];	// L2615
    float a79;                          // L2616
    a79 = v2000;                        // L2617
    float v2002 = v1992.read();         // v1992[k81];	// L2618
    float b79;                          // L2619
    b79 = v2002;                        // L2620
    float v2004 = a79;                  // L2621
    float v2005 = b79;                  // L2622
    float v2006 = v2004 * v2005;        // L2623
    float v2007 = v79;                  // L2624
    float v2008 = v2007 + v2006;        // L2625
    v79 = v2008;                        // L2626
    float v2009 = a79;                  // L2627
    v1993.write(v2009);                 // v1993[k81] = v2009;	// L2628
    float v2010 = b79;                  // L2629
    v1994.write(v2010);                 // v1994[k81] = v2010;	// L2630
  }
  float v2011 = v79;           // L2632
  v1995[v1996][v1997] = v2011; // L2633
}

void PE_kernel_K_0_2(hls::stream<float> &v2012 /* v2012[768] */,
                     hls::stream<float> &v2013 /* v2013[768] */,
                     hls::stream<float> &v2014 /* v2014[768] */,
                     hls::stream<float> &v2015 /* v2015[768] */,
                     float v2016[8][8], int v2017,
                     int v2018) { // L2636
#pragma HLS stream variable = v2012 depth = 9
#pragma HLS stream variable = v2013 depth = 9
#pragma HLS stream variable = v2014 depth = 9
#pragma HLS stream variable = v2015 depth = 9
#pragma HLS array_partition variable = v2016 complete dim = 1
#pragma HLS array_partition variable = v2016 complete dim = 2

  float v80;      // L2639
  v80 = 0.000000; // L2640
l_S_k_0_k82:
  for (int k82 = 0; k82 < 768; k82++) { // L2641
    float v2021 = v2012.read();         // v2012[k82];	// L2642
    float a80;                          // L2643
    a80 = v2021;                        // L2644
    float v2023 = v2013.read();         // v2013[k82];	// L2645
    float b80;                          // L2646
    b80 = v2023;                        // L2647
    float v2025 = a80;                  // L2648
    float v2026 = b80;                  // L2649
    float v2027 = v2025 * v2026;        // L2650
    float v2028 = v80;                  // L2651
    float v2029 = v2028 + v2027;        // L2652
    v80 = v2029;                        // L2653
    float v2030 = a80;                  // L2654
    v2014.write(v2030);                 // v2014[k82] = v2030;	// L2655
    float v2031 = b80;                  // L2656
    v2015.write(v2031);                 // v2015[k82] = v2031;	// L2657
  }
  float v2032 = v80;           // L2659
  v2016[v2017][v2018] = v2032; // L2660
}

void PE_kernel_K_1_2(hls::stream<float> &v2033 /* v2033[768] */,
                     hls::stream<float> &v2034 /* v2034[768] */,
                     hls::stream<float> &v2035 /* v2035[768] */,
                     hls::stream<float> &v2036 /* v2036[768] */,
                     float v2037[8][8], int v2038,
                     int v2039) { // L2663
#pragma HLS stream variable = v2033 depth = 9
#pragma HLS stream variable = v2034 depth = 9
#pragma HLS stream variable = v2035 depth = 9
#pragma HLS stream variable = v2036 depth = 9
#pragma HLS array_partition variable = v2037 complete dim = 1
#pragma HLS array_partition variable = v2037 complete dim = 2

  float v81;      // L2666
  v81 = 0.000000; // L2667
l_S_k_0_k83:
  for (int k83 = 0; k83 < 768; k83++) { // L2668
    float v2042 = v2033.read();         // v2033[k83];	// L2669
    float a81;                          // L2670
    a81 = v2042;                        // L2671
    float v2044 = v2034.read();         // v2034[k83];	// L2672
    float b81;                          // L2673
    b81 = v2044;                        // L2674
    float v2046 = a81;                  // L2675
    float v2047 = b81;                  // L2676
    float v2048 = v2046 * v2047;        // L2677
    float v2049 = v81;                  // L2678
    float v2050 = v2049 + v2048;        // L2679
    v81 = v2050;                        // L2680
    float v2051 = a81;                  // L2681
    v2035.write(v2051);                 // v2035[k83] = v2051;	// L2682
    float v2052 = b81;                  // L2683
    v2036.write(v2052);                 // v2036[k83] = v2052;	// L2684
  }
  float v2053 = v81;           // L2686
  v2037[v2038][v2039] = v2053; // L2687
}

void PE_kernel_K_2_2(hls::stream<float> &v2054 /* v2054[768] */,
                     hls::stream<float> &v2055 /* v2055[768] */,
                     hls::stream<float> &v2056 /* v2056[768] */,
                     hls::stream<float> &v2057 /* v2057[768] */,
                     float v2058[8][8], int v2059,
                     int v2060) { // L2690
#pragma HLS stream variable = v2054 depth = 9
#pragma HLS stream variable = v2055 depth = 9
#pragma HLS stream variable = v2056 depth = 9
#pragma HLS stream variable = v2057 depth = 9
#pragma HLS array_partition variable = v2058 complete dim = 1
#pragma HLS array_partition variable = v2058 complete dim = 2

  float v82;      // L2693
  v82 = 0.000000; // L2694
l_S_k_0_k84:
  for (int k84 = 0; k84 < 768; k84++) { // L2695
    float v2063 = v2054.read();         // v2054[k84];	// L2696
    float a82;                          // L2697
    a82 = v2063;                        // L2698
    float v2065 = v2055.read();         // v2055[k84];	// L2699
    float b82;                          // L2700
    b82 = v2065;                        // L2701
    float v2067 = a82;                  // L2702
    float v2068 = b82;                  // L2703
    float v2069 = v2067 * v2068;        // L2704
    float v2070 = v82;                  // L2705
    float v2071 = v2070 + v2069;        // L2706
    v82 = v2071;                        // L2707
    float v2072 = a82;                  // L2708
    v2056.write(v2072);                 // v2056[k84] = v2072;	// L2709
    float v2073 = b82;                  // L2710
    v2057.write(v2073);                 // v2057[k84] = v2073;	// L2711
  }
  float v2074 = v82;           // L2713
  v2058[v2059][v2060] = v2074; // L2714
}

void PE_kernel_K_3_2(hls::stream<float> &v2075 /* v2075[768] */,
                     hls::stream<float> &v2076 /* v2076[768] */,
                     hls::stream<float> &v2077 /* v2077[768] */,
                     hls::stream<float> &v2078 /* v2078[768] */,
                     float v2079[8][8], int v2080,
                     int v2081) { // L2717
#pragma HLS stream variable = v2075 depth = 9
#pragma HLS stream variable = v2076 depth = 9
#pragma HLS stream variable = v2077 depth = 9
#pragma HLS stream variable = v2078 depth = 9
#pragma HLS array_partition variable = v2079 complete dim = 1
#pragma HLS array_partition variable = v2079 complete dim = 2

  float v83;      // L2720
  v83 = 0.000000; // L2721
l_S_k_0_k85:
  for (int k85 = 0; k85 < 768; k85++) { // L2722
    float v2084 = v2075.read();         // v2075[k85];	// L2723
    float a83;                          // L2724
    a83 = v2084;                        // L2725
    float v2086 = v2076.read();         // v2076[k85];	// L2726
    float b83;                          // L2727
    b83 = v2086;                        // L2728
    float v2088 = a83;                  // L2729
    float v2089 = b83;                  // L2730
    float v2090 = v2088 * v2089;        // L2731
    float v2091 = v83;                  // L2732
    float v2092 = v2091 + v2090;        // L2733
    v83 = v2092;                        // L2734
    float v2093 = a83;                  // L2735
    v2077.write(v2093);                 // v2077[k85] = v2093;	// L2736
    float v2094 = b83;                  // L2737
    v2078.write(v2094);                 // v2078[k85] = v2094;	// L2738
  }
  float v2095 = v83;           // L2740
  v2079[v2080][v2081] = v2095; // L2741
}

void PE_kernel_K_4_2(hls::stream<float> &v2096 /* v2096[768] */,
                     hls::stream<float> &v2097 /* v2097[768] */,
                     hls::stream<float> &v2098 /* v2098[768] */,
                     hls::stream<float> &v2099 /* v2099[768] */,
                     float v2100[8][8], int v2101,
                     int v2102) { // L2744
#pragma HLS stream variable = v2096 depth = 9
#pragma HLS stream variable = v2097 depth = 9
#pragma HLS stream variable = v2098 depth = 9
#pragma HLS stream variable = v2099 depth = 9
#pragma HLS array_partition variable = v2100 complete dim = 1
#pragma HLS array_partition variable = v2100 complete dim = 2

  float v84;      // L2747
  v84 = 0.000000; // L2748
l_S_k_0_k86:
  for (int k86 = 0; k86 < 768; k86++) { // L2749
    float v2105 = v2096.read();         // v2096[k86];	// L2750
    float a84;                          // L2751
    a84 = v2105;                        // L2752
    float v2107 = v2097.read();         // v2097[k86];	// L2753
    float b84;                          // L2754
    b84 = v2107;                        // L2755
    float v2109 = a84;                  // L2756
    float v2110 = b84;                  // L2757
    float v2111 = v2109 * v2110;        // L2758
    float v2112 = v84;                  // L2759
    float v2113 = v2112 + v2111;        // L2760
    v84 = v2113;                        // L2761
    float v2114 = a84;                  // L2762
    v2098.write(v2114);                 // v2098[k86] = v2114;	// L2763
    float v2115 = b84;                  // L2764
    v2099.write(v2115);                 // v2099[k86] = v2115;	// L2765
  }
  float v2116 = v84;           // L2767
  v2100[v2101][v2102] = v2116; // L2768
}

void PE_kernel_K_5_2(hls::stream<float> &v2117 /* v2117[768] */,
                     hls::stream<float> &v2118 /* v2118[768] */,
                     hls::stream<float> &v2119 /* v2119[768] */,
                     hls::stream<float> &v2120 /* v2120[768] */,
                     float v2121[8][8], int v2122,
                     int v2123) { // L2771
#pragma HLS stream variable = v2117 depth = 9
#pragma HLS stream variable = v2118 depth = 9
#pragma HLS stream variable = v2119 depth = 9
#pragma HLS stream variable = v2120 depth = 9
#pragma HLS array_partition variable = v2121 complete dim = 1
#pragma HLS array_partition variable = v2121 complete dim = 2

  float v85;      // L2774
  v85 = 0.000000; // L2775
l_S_k_0_k87:
  for (int k87 = 0; k87 < 768; k87++) { // L2776
    float v2126 = v2117.read();         // v2117[k87];	// L2777
    float a85;                          // L2778
    a85 = v2126;                        // L2779
    float v2128 = v2118.read();         // v2118[k87];	// L2780
    float b85;                          // L2781
    b85 = v2128;                        // L2782
    float v2130 = a85;                  // L2783
    float v2131 = b85;                  // L2784
    float v2132 = v2130 * v2131;        // L2785
    float v2133 = v85;                  // L2786
    float v2134 = v2133 + v2132;        // L2787
    v85 = v2134;                        // L2788
    float v2135 = a85;                  // L2789
    v2119.write(v2135);                 // v2119[k87] = v2135;	// L2790
    float v2136 = b85;                  // L2791
    v2120.write(v2136);                 // v2120[k87] = v2136;	// L2792
  }
  float v2137 = v85;           // L2794
  v2121[v2122][v2123] = v2137; // L2795
}

void PE_kernel_K_6_2(hls::stream<float> &v2138 /* v2138[768] */,
                     hls::stream<float> &v2139 /* v2139[768] */,
                     hls::stream<float> &v2140 /* v2140[768] */,
                     hls::stream<float> &v2141 /* v2141[768] */,
                     float v2142[8][8], int v2143,
                     int v2144) { // L2798
#pragma HLS stream variable = v2138 depth = 9
#pragma HLS stream variable = v2139 depth = 9
#pragma HLS stream variable = v2140 depth = 9
#pragma HLS stream variable = v2141 depth = 9
#pragma HLS array_partition variable = v2142 complete dim = 1
#pragma HLS array_partition variable = v2142 complete dim = 2

  float v86;      // L2801
  v86 = 0.000000; // L2802
l_S_k_0_k88:
  for (int k88 = 0; k88 < 768; k88++) { // L2803
    float v2147 = v2138.read();         // v2138[k88];	// L2804
    float a86;                          // L2805
    a86 = v2147;                        // L2806
    float v2149 = v2139.read();         // v2139[k88];	// L2807
    float b86;                          // L2808
    b86 = v2149;                        // L2809
    float v2151 = a86;                  // L2810
    float v2152 = b86;                  // L2811
    float v2153 = v2151 * v2152;        // L2812
    float v2154 = v86;                  // L2813
    float v2155 = v2154 + v2153;        // L2814
    v86 = v2155;                        // L2815
    float v2156 = a86;                  // L2816
    v2140.write(v2156);                 // v2140[k88] = v2156;	// L2817
    float v2157 = b86;                  // L2818
    v2141.write(v2157);                 // v2141[k88] = v2157;	// L2819
  }
  float v2158 = v86;           // L2821
  v2142[v2143][v2144] = v2158; // L2822
}

void PE_kernel_K_7_2(hls::stream<float> &v2159 /* v2159[768] */,
                     hls::stream<float> &v2160 /* v2160[768] */,
                     hls::stream<float> &v2161 /* v2161[768] */,
                     hls::stream<float> &v2162 /* v2162[768] */,
                     float v2163[8][8], int v2164,
                     int v2165) { // L2825
#pragma HLS stream variable = v2159 depth = 9
#pragma HLS stream variable = v2160 depth = 9
#pragma HLS stream variable = v2161 depth = 9
#pragma HLS stream variable = v2162 depth = 9
#pragma HLS array_partition variable = v2163 complete dim = 1
#pragma HLS array_partition variable = v2163 complete dim = 2

  float v87;      // L2828
  v87 = 0.000000; // L2829
l_S_k_0_k89:
  for (int k89 = 0; k89 < 768; k89++) { // L2830
    float v2168 = v2159.read();         // v2159[k89];	// L2831
    float a87;                          // L2832
    a87 = v2168;                        // L2833
    float v2170 = v2160.read();         // v2160[k89];	// L2834
    float b87;                          // L2835
    b87 = v2170;                        // L2836
    float v2172 = a87;                  // L2837
    float v2173 = b87;                  // L2838
    float v2174 = v2172 * v2173;        // L2839
    float v2175 = v87;                  // L2840
    float v2176 = v2175 + v2174;        // L2841
    v87 = v2176;                        // L2842
    float v2177 = a87;                  // L2843
    v2161.write(v2177);                 // v2161[k89] = v2177;	// L2844
    float v2178 = b87;                  // L2845
    v2162.write(v2178);                 // v2162[k89] = v2178;	// L2846
  }
  float v2179 = v87;           // L2848
  v2163[v2164][v2165] = v2179; // L2849
}

void PE_kernel_K_0_3(hls::stream<float> &v2180 /* v2180[768] */,
                     hls::stream<float> &v2181 /* v2181[768] */,
                     hls::stream<float> &v2182 /* v2182[768] */,
                     hls::stream<float> &v2183 /* v2183[768] */,
                     float v2184[8][8], int v2185,
                     int v2186) { // L2852
#pragma HLS stream variable = v2180 depth = 9
#pragma HLS stream variable = v2181 depth = 9
#pragma HLS stream variable = v2182 depth = 9
#pragma HLS stream variable = v2183 depth = 9
#pragma HLS array_partition variable = v2184 complete dim = 1
#pragma HLS array_partition variable = v2184 complete dim = 2

  float v88;      // L2855
  v88 = 0.000000; // L2856
l_S_k_0_k90:
  for (int k90 = 0; k90 < 768; k90++) { // L2857
    float v2189 = v2180.read();         // v2180[k90];	// L2858
    float a88;                          // L2859
    a88 = v2189;                        // L2860
    float v2191 = v2181.read();         // v2181[k90];	// L2861
    float b88;                          // L2862
    b88 = v2191;                        // L2863
    float v2193 = a88;                  // L2864
    float v2194 = b88;                  // L2865
    float v2195 = v2193 * v2194;        // L2866
    float v2196 = v88;                  // L2867
    float v2197 = v2196 + v2195;        // L2868
    v88 = v2197;                        // L2869
    float v2198 = a88;                  // L2870
    v2182.write(v2198);                 // v2182[k90] = v2198;	// L2871
    float v2199 = b88;                  // L2872
    v2183.write(v2199);                 // v2183[k90] = v2199;	// L2873
  }
  float v2200 = v88;           // L2875
  v2184[v2185][v2186] = v2200; // L2876
}

void PE_kernel_K_1_3(hls::stream<float> &v2201 /* v2201[768] */,
                     hls::stream<float> &v2202 /* v2202[768] */,
                     hls::stream<float> &v2203 /* v2203[768] */,
                     hls::stream<float> &v2204 /* v2204[768] */,
                     float v2205[8][8], int v2206,
                     int v2207) { // L2879
#pragma HLS stream variable = v2201 depth = 9
#pragma HLS stream variable = v2202 depth = 9
#pragma HLS stream variable = v2203 depth = 9
#pragma HLS stream variable = v2204 depth = 9
#pragma HLS array_partition variable = v2205 complete dim = 1
#pragma HLS array_partition variable = v2205 complete dim = 2

  float v89;      // L2882
  v89 = 0.000000; // L2883
l_S_k_0_k91:
  for (int k91 = 0; k91 < 768; k91++) { // L2884
    float v2210 = v2201.read();         // v2201[k91];	// L2885
    float a89;                          // L2886
    a89 = v2210;                        // L2887
    float v2212 = v2202.read();         // v2202[k91];	// L2888
    float b89;                          // L2889
    b89 = v2212;                        // L2890
    float v2214 = a89;                  // L2891
    float v2215 = b89;                  // L2892
    float v2216 = v2214 * v2215;        // L2893
    float v2217 = v89;                  // L2894
    float v2218 = v2217 + v2216;        // L2895
    v89 = v2218;                        // L2896
    float v2219 = a89;                  // L2897
    v2203.write(v2219);                 // v2203[k91] = v2219;	// L2898
    float v2220 = b89;                  // L2899
    v2204.write(v2220);                 // v2204[k91] = v2220;	// L2900
  }
  float v2221 = v89;           // L2902
  v2205[v2206][v2207] = v2221; // L2903
}

void PE_kernel_K_2_3(hls::stream<float> &v2222 /* v2222[768] */,
                     hls::stream<float> &v2223 /* v2223[768] */,
                     hls::stream<float> &v2224 /* v2224[768] */,
                     hls::stream<float> &v2225 /* v2225[768] */,
                     float v2226[8][8], int v2227,
                     int v2228) { // L2906
#pragma HLS stream variable = v2222 depth = 9
#pragma HLS stream variable = v2223 depth = 9
#pragma HLS stream variable = v2224 depth = 9
#pragma HLS stream variable = v2225 depth = 9
#pragma HLS array_partition variable = v2226 complete dim = 1
#pragma HLS array_partition variable = v2226 complete dim = 2

  float v90;      // L2909
  v90 = 0.000000; // L2910
l_S_k_0_k92:
  for (int k92 = 0; k92 < 768; k92++) { // L2911
    float v2231 = v2222.read();         // v2222[k92];	// L2912
    float a90;                          // L2913
    a90 = v2231;                        // L2914
    float v2233 = v2223.read();         // v2223[k92];	// L2915
    float b90;                          // L2916
    b90 = v2233;                        // L2917
    float v2235 = a90;                  // L2918
    float v2236 = b90;                  // L2919
    float v2237 = v2235 * v2236;        // L2920
    float v2238 = v90;                  // L2921
    float v2239 = v2238 + v2237;        // L2922
    v90 = v2239;                        // L2923
    float v2240 = a90;                  // L2924
    v2224.write(v2240);                 // v2224[k92] = v2240;	// L2925
    float v2241 = b90;                  // L2926
    v2225.write(v2241);                 // v2225[k92] = v2241;	// L2927
  }
  float v2242 = v90;           // L2929
  v2226[v2227][v2228] = v2242; // L2930
}

void PE_kernel_K_3_3(hls::stream<float> &v2243 /* v2243[768] */,
                     hls::stream<float> &v2244 /* v2244[768] */,
                     hls::stream<float> &v2245 /* v2245[768] */,
                     hls::stream<float> &v2246 /* v2246[768] */,
                     float v2247[8][8], int v2248,
                     int v2249) { // L2933
#pragma HLS stream variable = v2243 depth = 9
#pragma HLS stream variable = v2244 depth = 9
#pragma HLS stream variable = v2245 depth = 9
#pragma HLS stream variable = v2246 depth = 9
#pragma HLS array_partition variable = v2247 complete dim = 1
#pragma HLS array_partition variable = v2247 complete dim = 2

  float v91;      // L2936
  v91 = 0.000000; // L2937
l_S_k_0_k93:
  for (int k93 = 0; k93 < 768; k93++) { // L2938
    float v2252 = v2243.read();         // v2243[k93];	// L2939
    float a91;                          // L2940
    a91 = v2252;                        // L2941
    float v2254 = v2244.read();         // v2244[k93];	// L2942
    float b91;                          // L2943
    b91 = v2254;                        // L2944
    float v2256 = a91;                  // L2945
    float v2257 = b91;                  // L2946
    float v2258 = v2256 * v2257;        // L2947
    float v2259 = v91;                  // L2948
    float v2260 = v2259 + v2258;        // L2949
    v91 = v2260;                        // L2950
    float v2261 = a91;                  // L2951
    v2245.write(v2261);                 // v2245[k93] = v2261;	// L2952
    float v2262 = b91;                  // L2953
    v2246.write(v2262);                 // v2246[k93] = v2262;	// L2954
  }
  float v2263 = v91;           // L2956
  v2247[v2248][v2249] = v2263; // L2957
}

void PE_kernel_K_4_3(hls::stream<float> &v2264 /* v2264[768] */,
                     hls::stream<float> &v2265 /* v2265[768] */,
                     hls::stream<float> &v2266 /* v2266[768] */,
                     hls::stream<float> &v2267 /* v2267[768] */,
                     float v2268[8][8], int v2269,
                     int v2270) { // L2960
#pragma HLS stream variable = v2264 depth = 9
#pragma HLS stream variable = v2265 depth = 9
#pragma HLS stream variable = v2266 depth = 9
#pragma HLS stream variable = v2267 depth = 9
#pragma HLS array_partition variable = v2268 complete dim = 1
#pragma HLS array_partition variable = v2268 complete dim = 2

  float v92;      // L2963
  v92 = 0.000000; // L2964
l_S_k_0_k94:
  for (int k94 = 0; k94 < 768; k94++) { // L2965
    float v2273 = v2264.read();         // v2264[k94];	// L2966
    float a92;                          // L2967
    a92 = v2273;                        // L2968
    float v2275 = v2265.read();         // v2265[k94];	// L2969
    float b92;                          // L2970
    b92 = v2275;                        // L2971
    float v2277 = a92;                  // L2972
    float v2278 = b92;                  // L2973
    float v2279 = v2277 * v2278;        // L2974
    float v2280 = v92;                  // L2975
    float v2281 = v2280 + v2279;        // L2976
    v92 = v2281;                        // L2977
    float v2282 = a92;                  // L2978
    v2266.write(v2282);                 // v2266[k94] = v2282;	// L2979
    float v2283 = b92;                  // L2980
    v2267.write(v2283);                 // v2267[k94] = v2283;	// L2981
  }
  float v2284 = v92;           // L2983
  v2268[v2269][v2270] = v2284; // L2984
}

void PE_kernel_K_5_3(hls::stream<float> &v2285 /* v2285[768] */,
                     hls::stream<float> &v2286 /* v2286[768] */,
                     hls::stream<float> &v2287 /* v2287[768] */,
                     hls::stream<float> &v2288 /* v2288[768] */,
                     float v2289[8][8], int v2290,
                     int v2291) { // L2987
#pragma HLS stream variable = v2285 depth = 9
#pragma HLS stream variable = v2286 depth = 9
#pragma HLS stream variable = v2287 depth = 9
#pragma HLS stream variable = v2288 depth = 9
#pragma HLS array_partition variable = v2289 complete dim = 1
#pragma HLS array_partition variable = v2289 complete dim = 2

  float v93;      // L2990
  v93 = 0.000000; // L2991
l_S_k_0_k95:
  for (int k95 = 0; k95 < 768; k95++) { // L2992
    float v2294 = v2285.read();         // v2285[k95];	// L2993
    float a93;                          // L2994
    a93 = v2294;                        // L2995
    float v2296 = v2286.read();         // v2286[k95];	// L2996
    float b93;                          // L2997
    b93 = v2296;                        // L2998
    float v2298 = a93;                  // L2999
    float v2299 = b93;                  // L3000
    float v2300 = v2298 * v2299;        // L3001
    float v2301 = v93;                  // L3002
    float v2302 = v2301 + v2300;        // L3003
    v93 = v2302;                        // L3004
    float v2303 = a93;                  // L3005
    v2287.write(v2303);                 // v2287[k95] = v2303;	// L3006
    float v2304 = b93;                  // L3007
    v2288.write(v2304);                 // v2288[k95] = v2304;	// L3008
  }
  float v2305 = v93;           // L3010
  v2289[v2290][v2291] = v2305; // L3011
}

void PE_kernel_K_6_3(hls::stream<float> &v2306 /* v2306[768] */,
                     hls::stream<float> &v2307 /* v2307[768] */,
                     hls::stream<float> &v2308 /* v2308[768] */,
                     hls::stream<float> &v2309 /* v2309[768] */,
                     float v2310[8][8], int v2311,
                     int v2312) { // L3014
#pragma HLS stream variable = v2306 depth = 9
#pragma HLS stream variable = v2307 depth = 9
#pragma HLS stream variable = v2308 depth = 9
#pragma HLS stream variable = v2309 depth = 9
#pragma HLS array_partition variable = v2310 complete dim = 1
#pragma HLS array_partition variable = v2310 complete dim = 2

  float v94;      // L3017
  v94 = 0.000000; // L3018
l_S_k_0_k96:
  for (int k96 = 0; k96 < 768; k96++) { // L3019
    float v2315 = v2306.read();         // v2306[k96];	// L3020
    float a94;                          // L3021
    a94 = v2315;                        // L3022
    float v2317 = v2307.read();         // v2307[k96];	// L3023
    float b94;                          // L3024
    b94 = v2317;                        // L3025
    float v2319 = a94;                  // L3026
    float v2320 = b94;                  // L3027
    float v2321 = v2319 * v2320;        // L3028
    float v2322 = v94;                  // L3029
    float v2323 = v2322 + v2321;        // L3030
    v94 = v2323;                        // L3031
    float v2324 = a94;                  // L3032
    v2308.write(v2324);                 // v2308[k96] = v2324;	// L3033
    float v2325 = b94;                  // L3034
    v2309.write(v2325);                 // v2309[k96] = v2325;	// L3035
  }
  float v2326 = v94;           // L3037
  v2310[v2311][v2312] = v2326; // L3038
}

void PE_kernel_K_7_3(hls::stream<float> &v2327 /* v2327[768] */,
                     hls::stream<float> &v2328 /* v2328[768] */,
                     hls::stream<float> &v2329 /* v2329[768] */,
                     hls::stream<float> &v2330 /* v2330[768] */,
                     float v2331[8][8], int v2332,
                     int v2333) { // L3041
#pragma HLS stream variable = v2327 depth = 9
#pragma HLS stream variable = v2328 depth = 9
#pragma HLS stream variable = v2329 depth = 9
#pragma HLS stream variable = v2330 depth = 9
#pragma HLS array_partition variable = v2331 complete dim = 1
#pragma HLS array_partition variable = v2331 complete dim = 2

  float v95;      // L3044
  v95 = 0.000000; // L3045
l_S_k_0_k97:
  for (int k97 = 0; k97 < 768; k97++) { // L3046
    float v2336 = v2327.read();         // v2327[k97];	// L3047
    float a95;                          // L3048
    a95 = v2336;                        // L3049
    float v2338 = v2328.read();         // v2328[k97];	// L3050
    float b95;                          // L3051
    b95 = v2338;                        // L3052
    float v2340 = a95;                  // L3053
    float v2341 = b95;                  // L3054
    float v2342 = v2340 * v2341;        // L3055
    float v2343 = v95;                  // L3056
    float v2344 = v2343 + v2342;        // L3057
    v95 = v2344;                        // L3058
    float v2345 = a95;                  // L3059
    v2329.write(v2345);                 // v2329[k97] = v2345;	// L3060
    float v2346 = b95;                  // L3061
    v2330.write(v2346);                 // v2330[k97] = v2346;	// L3062
  }
  float v2347 = v95;           // L3064
  v2331[v2332][v2333] = v2347; // L3065
}

void PE_kernel_K_0_4(hls::stream<float> &v2348 /* v2348[768] */,
                     hls::stream<float> &v2349 /* v2349[768] */,
                     hls::stream<float> &v2350 /* v2350[768] */,
                     hls::stream<float> &v2351 /* v2351[768] */,
                     float v2352[8][8], int v2353,
                     int v2354) { // L3068
#pragma HLS stream variable = v2348 depth = 9
#pragma HLS stream variable = v2349 depth = 9
#pragma HLS stream variable = v2350 depth = 9
#pragma HLS stream variable = v2351 depth = 9
#pragma HLS array_partition variable = v2352 complete dim = 1
#pragma HLS array_partition variable = v2352 complete dim = 2

  float v96;      // L3071
  v96 = 0.000000; // L3072
l_S_k_0_k98:
  for (int k98 = 0; k98 < 768; k98++) { // L3073
    float v2357 = v2348.read();         // v2348[k98];	// L3074
    float a96;                          // L3075
    a96 = v2357;                        // L3076
    float v2359 = v2349.read();         // v2349[k98];	// L3077
    float b96;                          // L3078
    b96 = v2359;                        // L3079
    float v2361 = a96;                  // L3080
    float v2362 = b96;                  // L3081
    float v2363 = v2361 * v2362;        // L3082
    float v2364 = v96;                  // L3083
    float v2365 = v2364 + v2363;        // L3084
    v96 = v2365;                        // L3085
    float v2366 = a96;                  // L3086
    v2350.write(v2366);                 // v2350[k98] = v2366;	// L3087
    float v2367 = b96;                  // L3088
    v2351.write(v2367);                 // v2351[k98] = v2367;	// L3089
  }
  float v2368 = v96;           // L3091
  v2352[v2353][v2354] = v2368; // L3092
}

void PE_kernel_K_1_4(hls::stream<float> &v2369 /* v2369[768] */,
                     hls::stream<float> &v2370 /* v2370[768] */,
                     hls::stream<float> &v2371 /* v2371[768] */,
                     hls::stream<float> &v2372 /* v2372[768] */,
                     float v2373[8][8], int v2374,
                     int v2375) { // L3095
#pragma HLS stream variable = v2369 depth = 9
#pragma HLS stream variable = v2370 depth = 9
#pragma HLS stream variable = v2371 depth = 9
#pragma HLS stream variable = v2372 depth = 9
#pragma HLS array_partition variable = v2373 complete dim = 1
#pragma HLS array_partition variable = v2373 complete dim = 2

  float v97;      // L3098
  v97 = 0.000000; // L3099
l_S_k_0_k99:
  for (int k99 = 0; k99 < 768; k99++) { // L3100
    float v2378 = v2369.read();         // v2369[k99];	// L3101
    float a97;                          // L3102
    a97 = v2378;                        // L3103
    float v2380 = v2370.read();         // v2370[k99];	// L3104
    float b97;                          // L3105
    b97 = v2380;                        // L3106
    float v2382 = a97;                  // L3107
    float v2383 = b97;                  // L3108
    float v2384 = v2382 * v2383;        // L3109
    float v2385 = v97;                  // L3110
    float v2386 = v2385 + v2384;        // L3111
    v97 = v2386;                        // L3112
    float v2387 = a97;                  // L3113
    v2371.write(v2387);                 // v2371[k99] = v2387;	// L3114
    float v2388 = b97;                  // L3115
    v2372.write(v2388);                 // v2372[k99] = v2388;	// L3116
  }
  float v2389 = v97;           // L3118
  v2373[v2374][v2375] = v2389; // L3119
}

void PE_kernel_K_2_4(hls::stream<float> &v2390 /* v2390[768] */,
                     hls::stream<float> &v2391 /* v2391[768] */,
                     hls::stream<float> &v2392 /* v2392[768] */,
                     hls::stream<float> &v2393 /* v2393[768] */,
                     float v2394[8][8], int v2395,
                     int v2396) { // L3122
#pragma HLS stream variable = v2390 depth = 9
#pragma HLS stream variable = v2391 depth = 9
#pragma HLS stream variable = v2392 depth = 9
#pragma HLS stream variable = v2393 depth = 9
#pragma HLS array_partition variable = v2394 complete dim = 1
#pragma HLS array_partition variable = v2394 complete dim = 2

  float v98;      // L3125
  v98 = 0.000000; // L3126
l_S_k_0_k100:
  for (int k100 = 0; k100 < 768; k100++) { // L3127
    float v2399 = v2390.read();            // v2390[k100];	// L3128
    float a98;                             // L3129
    a98 = v2399;                           // L3130
    float v2401 = v2391.read();            // v2391[k100];	// L3131
    float b98;                             // L3132
    b98 = v2401;                           // L3133
    float v2403 = a98;                     // L3134
    float v2404 = b98;                     // L3135
    float v2405 = v2403 * v2404;           // L3136
    float v2406 = v98;                     // L3137
    float v2407 = v2406 + v2405;           // L3138
    v98 = v2407;                           // L3139
    float v2408 = a98;                     // L3140
    v2392.write(v2408);                    // v2392[k100] = v2408;	// L3141
    float v2409 = b98;                     // L3142
    v2393.write(v2409);                    // v2393[k100] = v2409;	// L3143
  }
  float v2410 = v98;           // L3145
  v2394[v2395][v2396] = v2410; // L3146
}

void PE_kernel_K_3_4(hls::stream<float> &v2411 /* v2411[768] */,
                     hls::stream<float> &v2412 /* v2412[768] */,
                     hls::stream<float> &v2413 /* v2413[768] */,
                     hls::stream<float> &v2414 /* v2414[768] */,
                     float v2415[8][8], int v2416,
                     int v2417) { // L3149
#pragma HLS stream variable = v2411 depth = 9
#pragma HLS stream variable = v2412 depth = 9
#pragma HLS stream variable = v2413 depth = 9
#pragma HLS stream variable = v2414 depth = 9
#pragma HLS array_partition variable = v2415 complete dim = 1
#pragma HLS array_partition variable = v2415 complete dim = 2

  float v99;      // L3152
  v99 = 0.000000; // L3153
l_S_k_0_k101:
  for (int k101 = 0; k101 < 768; k101++) { // L3154
    float v2420 = v2411.read();            // v2411[k101];	// L3155
    float a99;                             // L3156
    a99 = v2420;                           // L3157
    float v2422 = v2412.read();            // v2412[k101];	// L3158
    float b99;                             // L3159
    b99 = v2422;                           // L3160
    float v2424 = a99;                     // L3161
    float v2425 = b99;                     // L3162
    float v2426 = v2424 * v2425;           // L3163
    float v2427 = v99;                     // L3164
    float v2428 = v2427 + v2426;           // L3165
    v99 = v2428;                           // L3166
    float v2429 = a99;                     // L3167
    v2413.write(v2429);                    // v2413[k101] = v2429;	// L3168
    float v2430 = b99;                     // L3169
    v2414.write(v2430);                    // v2414[k101] = v2430;	// L3170
  }
  float v2431 = v99;           // L3172
  v2415[v2416][v2417] = v2431; // L3173
}

void PE_kernel_K_4_4(hls::stream<float> &v2432 /* v2432[768] */,
                     hls::stream<float> &v2433 /* v2433[768] */,
                     hls::stream<float> &v2434 /* v2434[768] */,
                     hls::stream<float> &v2435 /* v2435[768] */,
                     float v2436[8][8], int v2437,
                     int v2438) { // L3176
#pragma HLS stream variable = v2432 depth = 9
#pragma HLS stream variable = v2433 depth = 9
#pragma HLS stream variable = v2434 depth = 9
#pragma HLS stream variable = v2435 depth = 9
#pragma HLS array_partition variable = v2436 complete dim = 1
#pragma HLS array_partition variable = v2436 complete dim = 2

  float v100;      // L3179
  v100 = 0.000000; // L3180
l_S_k_0_k102:
  for (int k102 = 0; k102 < 768; k102++) { // L3181
    float v2441 = v2432.read();            // v2432[k102];	// L3182
    float a100;                            // L3183
    a100 = v2441;                          // L3184
    float v2443 = v2433.read();            // v2433[k102];	// L3185
    float b100;                            // L3186
    b100 = v2443;                          // L3187
    float v2445 = a100;                    // L3188
    float v2446 = b100;                    // L3189
    float v2447 = v2445 * v2446;           // L3190
    float v2448 = v100;                    // L3191
    float v2449 = v2448 + v2447;           // L3192
    v100 = v2449;                          // L3193
    float v2450 = a100;                    // L3194
    v2434.write(v2450);                    // v2434[k102] = v2450;	// L3195
    float v2451 = b100;                    // L3196
    v2435.write(v2451);                    // v2435[k102] = v2451;	// L3197
  }
  float v2452 = v100;          // L3199
  v2436[v2437][v2438] = v2452; // L3200
}

void PE_kernel_K_5_4(hls::stream<float> &v2453 /* v2453[768] */,
                     hls::stream<float> &v2454 /* v2454[768] */,
                     hls::stream<float> &v2455 /* v2455[768] */,
                     hls::stream<float> &v2456 /* v2456[768] */,
                     float v2457[8][8], int v2458,
                     int v2459) { // L3203
#pragma HLS stream variable = v2453 depth = 9
#pragma HLS stream variable = v2454 depth = 9
#pragma HLS stream variable = v2455 depth = 9
#pragma HLS stream variable = v2456 depth = 9
#pragma HLS array_partition variable = v2457 complete dim = 1
#pragma HLS array_partition variable = v2457 complete dim = 2

  float v101;      // L3206
  v101 = 0.000000; // L3207
l_S_k_0_k103:
  for (int k103 = 0; k103 < 768; k103++) { // L3208
    float v2462 = v2453.read();            // v2453[k103];	// L3209
    float a101;                            // L3210
    a101 = v2462;                          // L3211
    float v2464 = v2454.read();            // v2454[k103];	// L3212
    float b101;                            // L3213
    b101 = v2464;                          // L3214
    float v2466 = a101;                    // L3215
    float v2467 = b101;                    // L3216
    float v2468 = v2466 * v2467;           // L3217
    float v2469 = v101;                    // L3218
    float v2470 = v2469 + v2468;           // L3219
    v101 = v2470;                          // L3220
    float v2471 = a101;                    // L3221
    v2455.write(v2471);                    // v2455[k103] = v2471;	// L3222
    float v2472 = b101;                    // L3223
    v2456.write(v2472);                    // v2456[k103] = v2472;	// L3224
  }
  float v2473 = v101;          // L3226
  v2457[v2458][v2459] = v2473; // L3227
}

void PE_kernel_K_6_4(hls::stream<float> &v2474 /* v2474[768] */,
                     hls::stream<float> &v2475 /* v2475[768] */,
                     hls::stream<float> &v2476 /* v2476[768] */,
                     hls::stream<float> &v2477 /* v2477[768] */,
                     float v2478[8][8], int v2479,
                     int v2480) { // L3230
#pragma HLS stream variable = v2474 depth = 9
#pragma HLS stream variable = v2475 depth = 9
#pragma HLS stream variable = v2476 depth = 9
#pragma HLS stream variable = v2477 depth = 9
#pragma HLS array_partition variable = v2478 complete dim = 1
#pragma HLS array_partition variable = v2478 complete dim = 2

  float v102;      // L3233
  v102 = 0.000000; // L3234
l_S_k_0_k104:
  for (int k104 = 0; k104 < 768; k104++) { // L3235
    float v2483 = v2474.read();            // v2474[k104];	// L3236
    float a102;                            // L3237
    a102 = v2483;                          // L3238
    float v2485 = v2475.read();            // v2475[k104];	// L3239
    float b102;                            // L3240
    b102 = v2485;                          // L3241
    float v2487 = a102;                    // L3242
    float v2488 = b102;                    // L3243
    float v2489 = v2487 * v2488;           // L3244
    float v2490 = v102;                    // L3245
    float v2491 = v2490 + v2489;           // L3246
    v102 = v2491;                          // L3247
    float v2492 = a102;                    // L3248
    v2476.write(v2492);                    // v2476[k104] = v2492;	// L3249
    float v2493 = b102;                    // L3250
    v2477.write(v2493);                    // v2477[k104] = v2493;	// L3251
  }
  float v2494 = v102;          // L3253
  v2478[v2479][v2480] = v2494; // L3254
}

void PE_kernel_K_7_4(hls::stream<float> &v2495 /* v2495[768] */,
                     hls::stream<float> &v2496 /* v2496[768] */,
                     hls::stream<float> &v2497 /* v2497[768] */,
                     hls::stream<float> &v2498 /* v2498[768] */,
                     float v2499[8][8], int v2500,
                     int v2501) { // L3257
#pragma HLS stream variable = v2495 depth = 9
#pragma HLS stream variable = v2496 depth = 9
#pragma HLS stream variable = v2497 depth = 9
#pragma HLS stream variable = v2498 depth = 9
#pragma HLS array_partition variable = v2499 complete dim = 1
#pragma HLS array_partition variable = v2499 complete dim = 2

  float v103;      // L3260
  v103 = 0.000000; // L3261
l_S_k_0_k105:
  for (int k105 = 0; k105 < 768; k105++) { // L3262
    float v2504 = v2495.read();            // v2495[k105];	// L3263
    float a103;                            // L3264
    a103 = v2504;                          // L3265
    float v2506 = v2496.read();            // v2496[k105];	// L3266
    float b103;                            // L3267
    b103 = v2506;                          // L3268
    float v2508 = a103;                    // L3269
    float v2509 = b103;                    // L3270
    float v2510 = v2508 * v2509;           // L3271
    float v2511 = v103;                    // L3272
    float v2512 = v2511 + v2510;           // L3273
    v103 = v2512;                          // L3274
    float v2513 = a103;                    // L3275
    v2497.write(v2513);                    // v2497[k105] = v2513;	// L3276
    float v2514 = b103;                    // L3277
    v2498.write(v2514);                    // v2498[k105] = v2514;	// L3278
  }
  float v2515 = v103;          // L3280
  v2499[v2500][v2501] = v2515; // L3281
}

void PE_kernel_K_0_5(hls::stream<float> &v2516 /* v2516[768] */,
                     hls::stream<float> &v2517 /* v2517[768] */,
                     hls::stream<float> &v2518 /* v2518[768] */,
                     hls::stream<float> &v2519 /* v2519[768] */,
                     float v2520[8][8], int v2521,
                     int v2522) { // L3284
#pragma HLS stream variable = v2516 depth = 9
#pragma HLS stream variable = v2517 depth = 9
#pragma HLS stream variable = v2518 depth = 9
#pragma HLS stream variable = v2519 depth = 9
#pragma HLS array_partition variable = v2520 complete dim = 1
#pragma HLS array_partition variable = v2520 complete dim = 2

  float v104;      // L3287
  v104 = 0.000000; // L3288
l_S_k_0_k106:
  for (int k106 = 0; k106 < 768; k106++) { // L3289
    float v2525 = v2516.read();            // v2516[k106];	// L3290
    float a104;                            // L3291
    a104 = v2525;                          // L3292
    float v2527 = v2517.read();            // v2517[k106];	// L3293
    float b104;                            // L3294
    b104 = v2527;                          // L3295
    float v2529 = a104;                    // L3296
    float v2530 = b104;                    // L3297
    float v2531 = v2529 * v2530;           // L3298
    float v2532 = v104;                    // L3299
    float v2533 = v2532 + v2531;           // L3300
    v104 = v2533;                          // L3301
    float v2534 = a104;                    // L3302
    v2518.write(v2534);                    // v2518[k106] = v2534;	// L3303
    float v2535 = b104;                    // L3304
    v2519.write(v2535);                    // v2519[k106] = v2535;	// L3305
  }
  float v2536 = v104;          // L3307
  v2520[v2521][v2522] = v2536; // L3308
}

void PE_kernel_K_1_5(hls::stream<float> &v2537 /* v2537[768] */,
                     hls::stream<float> &v2538 /* v2538[768] */,
                     hls::stream<float> &v2539 /* v2539[768] */,
                     hls::stream<float> &v2540 /* v2540[768] */,
                     float v2541[8][8], int v2542,
                     int v2543) { // L3311
#pragma HLS stream variable = v2537 depth = 9
#pragma HLS stream variable = v2538 depth = 9
#pragma HLS stream variable = v2539 depth = 9
#pragma HLS stream variable = v2540 depth = 9
#pragma HLS array_partition variable = v2541 complete dim = 1
#pragma HLS array_partition variable = v2541 complete dim = 2

  float v105;      // L3314
  v105 = 0.000000; // L3315
l_S_k_0_k107:
  for (int k107 = 0; k107 < 768; k107++) { // L3316
    float v2546 = v2537.read();            // v2537[k107];	// L3317
    float a105;                            // L3318
    a105 = v2546;                          // L3319
    float v2548 = v2538.read();            // v2538[k107];	// L3320
    float b105;                            // L3321
    b105 = v2548;                          // L3322
    float v2550 = a105;                    // L3323
    float v2551 = b105;                    // L3324
    float v2552 = v2550 * v2551;           // L3325
    float v2553 = v105;                    // L3326
    float v2554 = v2553 + v2552;           // L3327
    v105 = v2554;                          // L3328
    float v2555 = a105;                    // L3329
    v2539.write(v2555);                    // v2539[k107] = v2555;	// L3330
    float v2556 = b105;                    // L3331
    v2540.write(v2556);                    // v2540[k107] = v2556;	// L3332
  }
  float v2557 = v105;          // L3334
  v2541[v2542][v2543] = v2557; // L3335
}

void PE_kernel_K_2_5(hls::stream<float> &v2558 /* v2558[768] */,
                     hls::stream<float> &v2559 /* v2559[768] */,
                     hls::stream<float> &v2560 /* v2560[768] */,
                     hls::stream<float> &v2561 /* v2561[768] */,
                     float v2562[8][8], int v2563,
                     int v2564) { // L3338
#pragma HLS stream variable = v2558 depth = 9
#pragma HLS stream variable = v2559 depth = 9
#pragma HLS stream variable = v2560 depth = 9
#pragma HLS stream variable = v2561 depth = 9
#pragma HLS array_partition variable = v2562 complete dim = 1
#pragma HLS array_partition variable = v2562 complete dim = 2

  float v106;      // L3341
  v106 = 0.000000; // L3342
l_S_k_0_k108:
  for (int k108 = 0; k108 < 768; k108++) { // L3343
    float v2567 = v2558.read();            // v2558[k108];	// L3344
    float a106;                            // L3345
    a106 = v2567;                          // L3346
    float v2569 = v2559.read();            // v2559[k108];	// L3347
    float b106;                            // L3348
    b106 = v2569;                          // L3349
    float v2571 = a106;                    // L3350
    float v2572 = b106;                    // L3351
    float v2573 = v2571 * v2572;           // L3352
    float v2574 = v106;                    // L3353
    float v2575 = v2574 + v2573;           // L3354
    v106 = v2575;                          // L3355
    float v2576 = a106;                    // L3356
    v2560.write(v2576);                    // v2560[k108] = v2576;	// L3357
    float v2577 = b106;                    // L3358
    v2561.write(v2577);                    // v2561[k108] = v2577;	// L3359
  }
  float v2578 = v106;          // L3361
  v2562[v2563][v2564] = v2578; // L3362
}

void PE_kernel_K_3_5(hls::stream<float> &v2579 /* v2579[768] */,
                     hls::stream<float> &v2580 /* v2580[768] */,
                     hls::stream<float> &v2581 /* v2581[768] */,
                     hls::stream<float> &v2582 /* v2582[768] */,
                     float v2583[8][8], int v2584,
                     int v2585) { // L3365
#pragma HLS stream variable = v2579 depth = 9
#pragma HLS stream variable = v2580 depth = 9
#pragma HLS stream variable = v2581 depth = 9
#pragma HLS stream variable = v2582 depth = 9
#pragma HLS array_partition variable = v2583 complete dim = 1
#pragma HLS array_partition variable = v2583 complete dim = 2

  float v107;      // L3368
  v107 = 0.000000; // L3369
l_S_k_0_k109:
  for (int k109 = 0; k109 < 768; k109++) { // L3370
    float v2588 = v2579.read();            // v2579[k109];	// L3371
    float a107;                            // L3372
    a107 = v2588;                          // L3373
    float v2590 = v2580.read();            // v2580[k109];	// L3374
    float b107;                            // L3375
    b107 = v2590;                          // L3376
    float v2592 = a107;                    // L3377
    float v2593 = b107;                    // L3378
    float v2594 = v2592 * v2593;           // L3379
    float v2595 = v107;                    // L3380
    float v2596 = v2595 + v2594;           // L3381
    v107 = v2596;                          // L3382
    float v2597 = a107;                    // L3383
    v2581.write(v2597);                    // v2581[k109] = v2597;	// L3384
    float v2598 = b107;                    // L3385
    v2582.write(v2598);                    // v2582[k109] = v2598;	// L3386
  }
  float v2599 = v107;          // L3388
  v2583[v2584][v2585] = v2599; // L3389
}

void PE_kernel_K_4_5(hls::stream<float> &v2600 /* v2600[768] */,
                     hls::stream<float> &v2601 /* v2601[768] */,
                     hls::stream<float> &v2602 /* v2602[768] */,
                     hls::stream<float> &v2603 /* v2603[768] */,
                     float v2604[8][8], int v2605,
                     int v2606) { // L3392
#pragma HLS stream variable = v2600 depth = 9
#pragma HLS stream variable = v2601 depth = 9
#pragma HLS stream variable = v2602 depth = 9
#pragma HLS stream variable = v2603 depth = 9
#pragma HLS array_partition variable = v2604 complete dim = 1
#pragma HLS array_partition variable = v2604 complete dim = 2

  float v108;      // L3395
  v108 = 0.000000; // L3396
l_S_k_0_k110:
  for (int k110 = 0; k110 < 768; k110++) { // L3397
    float v2609 = v2600.read();            // v2600[k110];	// L3398
    float a108;                            // L3399
    a108 = v2609;                          // L3400
    float v2611 = v2601.read();            // v2601[k110];	// L3401
    float b108;                            // L3402
    b108 = v2611;                          // L3403
    float v2613 = a108;                    // L3404
    float v2614 = b108;                    // L3405
    float v2615 = v2613 * v2614;           // L3406
    float v2616 = v108;                    // L3407
    float v2617 = v2616 + v2615;           // L3408
    v108 = v2617;                          // L3409
    float v2618 = a108;                    // L3410
    v2602.write(v2618);                    // v2602[k110] = v2618;	// L3411
    float v2619 = b108;                    // L3412
    v2603.write(v2619);                    // v2603[k110] = v2619;	// L3413
  }
  float v2620 = v108;          // L3415
  v2604[v2605][v2606] = v2620; // L3416
}

void PE_kernel_K_5_5(hls::stream<float> &v2621 /* v2621[768] */,
                     hls::stream<float> &v2622 /* v2622[768] */,
                     hls::stream<float> &v2623 /* v2623[768] */,
                     hls::stream<float> &v2624 /* v2624[768] */,
                     float v2625[8][8], int v2626,
                     int v2627) { // L3419
#pragma HLS stream variable = v2621 depth = 9
#pragma HLS stream variable = v2622 depth = 9
#pragma HLS stream variable = v2623 depth = 9
#pragma HLS stream variable = v2624 depth = 9
#pragma HLS array_partition variable = v2625 complete dim = 1
#pragma HLS array_partition variable = v2625 complete dim = 2

  float v109;      // L3422
  v109 = 0.000000; // L3423
l_S_k_0_k111:
  for (int k111 = 0; k111 < 768; k111++) { // L3424
    float v2630 = v2621.read();            // v2621[k111];	// L3425
    float a109;                            // L3426
    a109 = v2630;                          // L3427
    float v2632 = v2622.read();            // v2622[k111];	// L3428
    float b109;                            // L3429
    b109 = v2632;                          // L3430
    float v2634 = a109;                    // L3431
    float v2635 = b109;                    // L3432
    float v2636 = v2634 * v2635;           // L3433
    float v2637 = v109;                    // L3434
    float v2638 = v2637 + v2636;           // L3435
    v109 = v2638;                          // L3436
    float v2639 = a109;                    // L3437
    v2623.write(v2639);                    // v2623[k111] = v2639;	// L3438
    float v2640 = b109;                    // L3439
    v2624.write(v2640);                    // v2624[k111] = v2640;	// L3440
  }
  float v2641 = v109;          // L3442
  v2625[v2626][v2627] = v2641; // L3443
}

void PE_kernel_K_6_5(hls::stream<float> &v2642 /* v2642[768] */,
                     hls::stream<float> &v2643 /* v2643[768] */,
                     hls::stream<float> &v2644 /* v2644[768] */,
                     hls::stream<float> &v2645 /* v2645[768] */,
                     float v2646[8][8], int v2647,
                     int v2648) { // L3446
#pragma HLS stream variable = v2642 depth = 9
#pragma HLS stream variable = v2643 depth = 9
#pragma HLS stream variable = v2644 depth = 9
#pragma HLS stream variable = v2645 depth = 9
#pragma HLS array_partition variable = v2646 complete dim = 1
#pragma HLS array_partition variable = v2646 complete dim = 2

  float v110;      // L3449
  v110 = 0.000000; // L3450
l_S_k_0_k112:
  for (int k112 = 0; k112 < 768; k112++) { // L3451
    float v2651 = v2642.read();            // v2642[k112];	// L3452
    float a110;                            // L3453
    a110 = v2651;                          // L3454
    float v2653 = v2643.read();            // v2643[k112];	// L3455
    float b110;                            // L3456
    b110 = v2653;                          // L3457
    float v2655 = a110;                    // L3458
    float v2656 = b110;                    // L3459
    float v2657 = v2655 * v2656;           // L3460
    float v2658 = v110;                    // L3461
    float v2659 = v2658 + v2657;           // L3462
    v110 = v2659;                          // L3463
    float v2660 = a110;                    // L3464
    v2644.write(v2660);                    // v2644[k112] = v2660;	// L3465
    float v2661 = b110;                    // L3466
    v2645.write(v2661);                    // v2645[k112] = v2661;	// L3467
  }
  float v2662 = v110;          // L3469
  v2646[v2647][v2648] = v2662; // L3470
}

void PE_kernel_K_7_5(hls::stream<float> &v2663 /* v2663[768] */,
                     hls::stream<float> &v2664 /* v2664[768] */,
                     hls::stream<float> &v2665 /* v2665[768] */,
                     hls::stream<float> &v2666 /* v2666[768] */,
                     float v2667[8][8], int v2668,
                     int v2669) { // L3473
#pragma HLS stream variable = v2663 depth = 9
#pragma HLS stream variable = v2664 depth = 9
#pragma HLS stream variable = v2665 depth = 9
#pragma HLS stream variable = v2666 depth = 9
#pragma HLS array_partition variable = v2667 complete dim = 1
#pragma HLS array_partition variable = v2667 complete dim = 2

  float v111;      // L3476
  v111 = 0.000000; // L3477
l_S_k_0_k113:
  for (int k113 = 0; k113 < 768; k113++) { // L3478
    float v2672 = v2663.read();            // v2663[k113];	// L3479
    float a111;                            // L3480
    a111 = v2672;                          // L3481
    float v2674 = v2664.read();            // v2664[k113];	// L3482
    float b111;                            // L3483
    b111 = v2674;                          // L3484
    float v2676 = a111;                    // L3485
    float v2677 = b111;                    // L3486
    float v2678 = v2676 * v2677;           // L3487
    float v2679 = v111;                    // L3488
    float v2680 = v2679 + v2678;           // L3489
    v111 = v2680;                          // L3490
    float v2681 = a111;                    // L3491
    v2665.write(v2681);                    // v2665[k113] = v2681;	// L3492
    float v2682 = b111;                    // L3493
    v2666.write(v2682);                    // v2666[k113] = v2682;	// L3494
  }
  float v2683 = v111;          // L3496
  v2667[v2668][v2669] = v2683; // L3497
}

void PE_kernel_K_0_6(hls::stream<float> &v2684 /* v2684[768] */,
                     hls::stream<float> &v2685 /* v2685[768] */,
                     hls::stream<float> &v2686 /* v2686[768] */,
                     hls::stream<float> &v2687 /* v2687[768] */,
                     float v2688[8][8], int v2689,
                     int v2690) { // L3500
#pragma HLS stream variable = v2684 depth = 9
#pragma HLS stream variable = v2685 depth = 9
#pragma HLS stream variable = v2686 depth = 9
#pragma HLS stream variable = v2687 depth = 9
#pragma HLS array_partition variable = v2688 complete dim = 1
#pragma HLS array_partition variable = v2688 complete dim = 2

  float v112;      // L3503
  v112 = 0.000000; // L3504
l_S_k_0_k114:
  for (int k114 = 0; k114 < 768; k114++) { // L3505
    float v2693 = v2684.read();            // v2684[k114];	// L3506
    float a112;                            // L3507
    a112 = v2693;                          // L3508
    float v2695 = v2685.read();            // v2685[k114];	// L3509
    float b112;                            // L3510
    b112 = v2695;                          // L3511
    float v2697 = a112;                    // L3512
    float v2698 = b112;                    // L3513
    float v2699 = v2697 * v2698;           // L3514
    float v2700 = v112;                    // L3515
    float v2701 = v2700 + v2699;           // L3516
    v112 = v2701;                          // L3517
    float v2702 = a112;                    // L3518
    v2686.write(v2702);                    // v2686[k114] = v2702;	// L3519
    float v2703 = b112;                    // L3520
    v2687.write(v2703);                    // v2687[k114] = v2703;	// L3521
  }
  float v2704 = v112;          // L3523
  v2688[v2689][v2690] = v2704; // L3524
}

void PE_kernel_K_1_6(hls::stream<float> &v2705 /* v2705[768] */,
                     hls::stream<float> &v2706 /* v2706[768] */,
                     hls::stream<float> &v2707 /* v2707[768] */,
                     hls::stream<float> &v2708 /* v2708[768] */,
                     float v2709[8][8], int v2710,
                     int v2711) { // L3527
#pragma HLS stream variable = v2705 depth = 9
#pragma HLS stream variable = v2706 depth = 9
#pragma HLS stream variable = v2707 depth = 9
#pragma HLS stream variable = v2708 depth = 9
#pragma HLS array_partition variable = v2709 complete dim = 1
#pragma HLS array_partition variable = v2709 complete dim = 2

  float v113;      // L3530
  v113 = 0.000000; // L3531
l_S_k_0_k115:
  for (int k115 = 0; k115 < 768; k115++) { // L3532
    float v2714 = v2705.read();            // v2705[k115];	// L3533
    float a113;                            // L3534
    a113 = v2714;                          // L3535
    float v2716 = v2706.read();            // v2706[k115];	// L3536
    float b113;                            // L3537
    b113 = v2716;                          // L3538
    float v2718 = a113;                    // L3539
    float v2719 = b113;                    // L3540
    float v2720 = v2718 * v2719;           // L3541
    float v2721 = v113;                    // L3542
    float v2722 = v2721 + v2720;           // L3543
    v113 = v2722;                          // L3544
    float v2723 = a113;                    // L3545
    v2707.write(v2723);                    // v2707[k115] = v2723;	// L3546
    float v2724 = b113;                    // L3547
    v2708.write(v2724);                    // v2708[k115] = v2724;	// L3548
  }
  float v2725 = v113;          // L3550
  v2709[v2710][v2711] = v2725; // L3551
}

void PE_kernel_K_2_6(hls::stream<float> &v2726 /* v2726[768] */,
                     hls::stream<float> &v2727 /* v2727[768] */,
                     hls::stream<float> &v2728 /* v2728[768] */,
                     hls::stream<float> &v2729 /* v2729[768] */,
                     float v2730[8][8], int v2731,
                     int v2732) { // L3554
#pragma HLS stream variable = v2726 depth = 9
#pragma HLS stream variable = v2727 depth = 9
#pragma HLS stream variable = v2728 depth = 9
#pragma HLS stream variable = v2729 depth = 9
#pragma HLS array_partition variable = v2730 complete dim = 1
#pragma HLS array_partition variable = v2730 complete dim = 2

  float v114;      // L3557
  v114 = 0.000000; // L3558
l_S_k_0_k116:
  for (int k116 = 0; k116 < 768; k116++) { // L3559
    float v2735 = v2726.read();            // v2726[k116];	// L3560
    float a114;                            // L3561
    a114 = v2735;                          // L3562
    float v2737 = v2727.read();            // v2727[k116];	// L3563
    float b114;                            // L3564
    b114 = v2737;                          // L3565
    float v2739 = a114;                    // L3566
    float v2740 = b114;                    // L3567
    float v2741 = v2739 * v2740;           // L3568
    float v2742 = v114;                    // L3569
    float v2743 = v2742 + v2741;           // L3570
    v114 = v2743;                          // L3571
    float v2744 = a114;                    // L3572
    v2728.write(v2744);                    // v2728[k116] = v2744;	// L3573
    float v2745 = b114;                    // L3574
    v2729.write(v2745);                    // v2729[k116] = v2745;	// L3575
  }
  float v2746 = v114;          // L3577
  v2730[v2731][v2732] = v2746; // L3578
}

void PE_kernel_K_3_6(hls::stream<float> &v2747 /* v2747[768] */,
                     hls::stream<float> &v2748 /* v2748[768] */,
                     hls::stream<float> &v2749 /* v2749[768] */,
                     hls::stream<float> &v2750 /* v2750[768] */,
                     float v2751[8][8], int v2752,
                     int v2753) { // L3581
#pragma HLS stream variable = v2747 depth = 9
#pragma HLS stream variable = v2748 depth = 9
#pragma HLS stream variable = v2749 depth = 9
#pragma HLS stream variable = v2750 depth = 9
#pragma HLS array_partition variable = v2751 complete dim = 1
#pragma HLS array_partition variable = v2751 complete dim = 2

  float v115;      // L3584
  v115 = 0.000000; // L3585
l_S_k_0_k117:
  for (int k117 = 0; k117 < 768; k117++) { // L3586
    float v2756 = v2747.read();            // v2747[k117];	// L3587
    float a115;                            // L3588
    a115 = v2756;                          // L3589
    float v2758 = v2748.read();            // v2748[k117];	// L3590
    float b115;                            // L3591
    b115 = v2758;                          // L3592
    float v2760 = a115;                    // L3593
    float v2761 = b115;                    // L3594
    float v2762 = v2760 * v2761;           // L3595
    float v2763 = v115;                    // L3596
    float v2764 = v2763 + v2762;           // L3597
    v115 = v2764;                          // L3598
    float v2765 = a115;                    // L3599
    v2749.write(v2765);                    // v2749[k117] = v2765;	// L3600
    float v2766 = b115;                    // L3601
    v2750.write(v2766);                    // v2750[k117] = v2766;	// L3602
  }
  float v2767 = v115;          // L3604
  v2751[v2752][v2753] = v2767; // L3605
}

void PE_kernel_K_4_6(hls::stream<float> &v2768 /* v2768[768] */,
                     hls::stream<float> &v2769 /* v2769[768] */,
                     hls::stream<float> &v2770 /* v2770[768] */,
                     hls::stream<float> &v2771 /* v2771[768] */,
                     float v2772[8][8], int v2773,
                     int v2774) { // L3608
#pragma HLS stream variable = v2768 depth = 9
#pragma HLS stream variable = v2769 depth = 9
#pragma HLS stream variable = v2770 depth = 9
#pragma HLS stream variable = v2771 depth = 9
#pragma HLS array_partition variable = v2772 complete dim = 1
#pragma HLS array_partition variable = v2772 complete dim = 2

  float v116;      // L3611
  v116 = 0.000000; // L3612
l_S_k_0_k118:
  for (int k118 = 0; k118 < 768; k118++) { // L3613
    float v2777 = v2768.read();            // v2768[k118];	// L3614
    float a116;                            // L3615
    a116 = v2777;                          // L3616
    float v2779 = v2769.read();            // v2769[k118];	// L3617
    float b116;                            // L3618
    b116 = v2779;                          // L3619
    float v2781 = a116;                    // L3620
    float v2782 = b116;                    // L3621
    float v2783 = v2781 * v2782;           // L3622
    float v2784 = v116;                    // L3623
    float v2785 = v2784 + v2783;           // L3624
    v116 = v2785;                          // L3625
    float v2786 = a116;                    // L3626
    v2770.write(v2786);                    // v2770[k118] = v2786;	// L3627
    float v2787 = b116;                    // L3628
    v2771.write(v2787);                    // v2771[k118] = v2787;	// L3629
  }
  float v2788 = v116;          // L3631
  v2772[v2773][v2774] = v2788; // L3632
}

void PE_kernel_K_5_6(hls::stream<float> &v2789 /* v2789[768] */,
                     hls::stream<float> &v2790 /* v2790[768] */,
                     hls::stream<float> &v2791 /* v2791[768] */,
                     hls::stream<float> &v2792 /* v2792[768] */,
                     float v2793[8][8], int v2794,
                     int v2795) { // L3635
#pragma HLS stream variable = v2789 depth = 9
#pragma HLS stream variable = v2790 depth = 9
#pragma HLS stream variable = v2791 depth = 9
#pragma HLS stream variable = v2792 depth = 9
#pragma HLS array_partition variable = v2793 complete dim = 1
#pragma HLS array_partition variable = v2793 complete dim = 2

  float v117;      // L3638
  v117 = 0.000000; // L3639
l_S_k_0_k119:
  for (int k119 = 0; k119 < 768; k119++) { // L3640
    float v2798 = v2789.read();            // v2789[k119];	// L3641
    float a117;                            // L3642
    a117 = v2798;                          // L3643
    float v2800 = v2790.read();            // v2790[k119];	// L3644
    float b117;                            // L3645
    b117 = v2800;                          // L3646
    float v2802 = a117;                    // L3647
    float v2803 = b117;                    // L3648
    float v2804 = v2802 * v2803;           // L3649
    float v2805 = v117;                    // L3650
    float v2806 = v2805 + v2804;           // L3651
    v117 = v2806;                          // L3652
    float v2807 = a117;                    // L3653
    v2791.write(v2807);                    // v2791[k119] = v2807;	// L3654
    float v2808 = b117;                    // L3655
    v2792.write(v2808);                    // v2792[k119] = v2808;	// L3656
  }
  float v2809 = v117;          // L3658
  v2793[v2794][v2795] = v2809; // L3659
}

void PE_kernel_K_6_6(hls::stream<float> &v2810 /* v2810[768] */,
                     hls::stream<float> &v2811 /* v2811[768] */,
                     hls::stream<float> &v2812 /* v2812[768] */,
                     hls::stream<float> &v2813 /* v2813[768] */,
                     float v2814[8][8], int v2815,
                     int v2816) { // L3662
#pragma HLS stream variable = v2810 depth = 9
#pragma HLS stream variable = v2811 depth = 9
#pragma HLS stream variable = v2812 depth = 9
#pragma HLS stream variable = v2813 depth = 9
#pragma HLS array_partition variable = v2814 complete dim = 1
#pragma HLS array_partition variable = v2814 complete dim = 2

  float v118;      // L3665
  v118 = 0.000000; // L3666
l_S_k_0_k120:
  for (int k120 = 0; k120 < 768; k120++) { // L3667
    float v2819 = v2810.read();            // v2810[k120];	// L3668
    float a118;                            // L3669
    a118 = v2819;                          // L3670
    float v2821 = v2811.read();            // v2811[k120];	// L3671
    float b118;                            // L3672
    b118 = v2821;                          // L3673
    float v2823 = a118;                    // L3674
    float v2824 = b118;                    // L3675
    float v2825 = v2823 * v2824;           // L3676
    float v2826 = v118;                    // L3677
    float v2827 = v2826 + v2825;           // L3678
    v118 = v2827;                          // L3679
    float v2828 = a118;                    // L3680
    v2812.write(v2828);                    // v2812[k120] = v2828;	// L3681
    float v2829 = b118;                    // L3682
    v2813.write(v2829);                    // v2813[k120] = v2829;	// L3683
  }
  float v2830 = v118;          // L3685
  v2814[v2815][v2816] = v2830; // L3686
}

void PE_kernel_K_7_6(hls::stream<float> &v2831 /* v2831[768] */,
                     hls::stream<float> &v2832 /* v2832[768] */,
                     hls::stream<float> &v2833 /* v2833[768] */,
                     hls::stream<float> &v2834 /* v2834[768] */,
                     float v2835[8][8], int v2836,
                     int v2837) { // L3689
#pragma HLS stream variable = v2831 depth = 9
#pragma HLS stream variable = v2832 depth = 9
#pragma HLS stream variable = v2833 depth = 9
#pragma HLS stream variable = v2834 depth = 9
#pragma HLS array_partition variable = v2835 complete dim = 1
#pragma HLS array_partition variable = v2835 complete dim = 2

  float v119;      // L3692
  v119 = 0.000000; // L3693
l_S_k_0_k121:
  for (int k121 = 0; k121 < 768; k121++) { // L3694
    float v2840 = v2831.read();            // v2831[k121];	// L3695
    float a119;                            // L3696
    a119 = v2840;                          // L3697
    float v2842 = v2832.read();            // v2832[k121];	// L3698
    float b119;                            // L3699
    b119 = v2842;                          // L3700
    float v2844 = a119;                    // L3701
    float v2845 = b119;                    // L3702
    float v2846 = v2844 * v2845;           // L3703
    float v2847 = v119;                    // L3704
    float v2848 = v2847 + v2846;           // L3705
    v119 = v2848;                          // L3706
    float v2849 = a119;                    // L3707
    v2833.write(v2849);                    // v2833[k121] = v2849;	// L3708
    float v2850 = b119;                    // L3709
    v2834.write(v2850);                    // v2834[k121] = v2850;	// L3710
  }
  float v2851 = v119;          // L3712
  v2835[v2836][v2837] = v2851; // L3713
}

void PE_kernel_K_0_7(hls::stream<float> &v2852 /* v2852[768] */,
                     hls::stream<float> &v2853 /* v2853[768] */,
                     hls::stream<float> &v2854 /* v2854[768] */,
                     hls::stream<float> &v2855 /* v2855[768] */,
                     float v2856[8][8], int v2857,
                     int v2858) { // L3716
#pragma HLS stream variable = v2852 depth = 9
#pragma HLS stream variable = v2853 depth = 9
#pragma HLS stream variable = v2854 depth = 9
#pragma HLS stream variable = v2855 depth = 9
#pragma HLS array_partition variable = v2856 complete dim = 1
#pragma HLS array_partition variable = v2856 complete dim = 2

  float v120;      // L3719
  v120 = 0.000000; // L3720
l_S_k_0_k122:
  for (int k122 = 0; k122 < 768; k122++) { // L3721
    float v2861 = v2852.read();            // v2852[k122];	// L3722
    float a120;                            // L3723
    a120 = v2861;                          // L3724
    float v2863 = v2853.read();            // v2853[k122];	// L3725
    float b120;                            // L3726
    b120 = v2863;                          // L3727
    float v2865 = a120;                    // L3728
    float v2866 = b120;                    // L3729
    float v2867 = v2865 * v2866;           // L3730
    float v2868 = v120;                    // L3731
    float v2869 = v2868 + v2867;           // L3732
    v120 = v2869;                          // L3733
    float v2870 = a120;                    // L3734
    v2854.write(v2870);                    // v2854[k122] = v2870;	// L3735
    float v2871 = b120;                    // L3736
    v2855.write(v2871);                    // v2855[k122] = v2871;	// L3737
  }
  float v2872 = v120;          // L3739
  v2856[v2857][v2858] = v2872; // L3740
}

void PE_kernel_K_1_7(hls::stream<float> &v2873 /* v2873[768] */,
                     hls::stream<float> &v2874 /* v2874[768] */,
                     hls::stream<float> &v2875 /* v2875[768] */,
                     hls::stream<float> &v2876 /* v2876[768] */,
                     float v2877[8][8], int v2878,
                     int v2879) { // L3743
#pragma HLS stream variable = v2873 depth = 9
#pragma HLS stream variable = v2874 depth = 9
#pragma HLS stream variable = v2875 depth = 9
#pragma HLS stream variable = v2876 depth = 9
#pragma HLS array_partition variable = v2877 complete dim = 1
#pragma HLS array_partition variable = v2877 complete dim = 2

  float v121;      // L3746
  v121 = 0.000000; // L3747
l_S_k_0_k123:
  for (int k123 = 0; k123 < 768; k123++) { // L3748
    float v2882 = v2873.read();            // v2873[k123];	// L3749
    float a121;                            // L3750
    a121 = v2882;                          // L3751
    float v2884 = v2874.read();            // v2874[k123];	// L3752
    float b121;                            // L3753
    b121 = v2884;                          // L3754
    float v2886 = a121;                    // L3755
    float v2887 = b121;                    // L3756
    float v2888 = v2886 * v2887;           // L3757
    float v2889 = v121;                    // L3758
    float v2890 = v2889 + v2888;           // L3759
    v121 = v2890;                          // L3760
    float v2891 = a121;                    // L3761
    v2875.write(v2891);                    // v2875[k123] = v2891;	// L3762
    float v2892 = b121;                    // L3763
    v2876.write(v2892);                    // v2876[k123] = v2892;	// L3764
  }
  float v2893 = v121;          // L3766
  v2877[v2878][v2879] = v2893; // L3767
}

void PE_kernel_K_2_7(hls::stream<float> &v2894 /* v2894[768] */,
                     hls::stream<float> &v2895 /* v2895[768] */,
                     hls::stream<float> &v2896 /* v2896[768] */,
                     hls::stream<float> &v2897 /* v2897[768] */,
                     float v2898[8][8], int v2899,
                     int v2900) { // L3770
#pragma HLS stream variable = v2894 depth = 9
#pragma HLS stream variable = v2895 depth = 9
#pragma HLS stream variable = v2896 depth = 9
#pragma HLS stream variable = v2897 depth = 9
#pragma HLS array_partition variable = v2898 complete dim = 1
#pragma HLS array_partition variable = v2898 complete dim = 2

  float v122;      // L3773
  v122 = 0.000000; // L3774
l_S_k_0_k124:
  for (int k124 = 0; k124 < 768; k124++) { // L3775
    float v2903 = v2894.read();            // v2894[k124];	// L3776
    float a122;                            // L3777
    a122 = v2903;                          // L3778
    float v2905 = v2895.read();            // v2895[k124];	// L3779
    float b122;                            // L3780
    b122 = v2905;                          // L3781
    float v2907 = a122;                    // L3782
    float v2908 = b122;                    // L3783
    float v2909 = v2907 * v2908;           // L3784
    float v2910 = v122;                    // L3785
    float v2911 = v2910 + v2909;           // L3786
    v122 = v2911;                          // L3787
    float v2912 = a122;                    // L3788
    v2896.write(v2912);                    // v2896[k124] = v2912;	// L3789
    float v2913 = b122;                    // L3790
    v2897.write(v2913);                    // v2897[k124] = v2913;	// L3791
  }
  float v2914 = v122;          // L3793
  v2898[v2899][v2900] = v2914; // L3794
}

void PE_kernel_K_3_7(hls::stream<float> &v2915 /* v2915[768] */,
                     hls::stream<float> &v2916 /* v2916[768] */,
                     hls::stream<float> &v2917 /* v2917[768] */,
                     hls::stream<float> &v2918 /* v2918[768] */,
                     float v2919[8][8], int v2920,
                     int v2921) { // L3797
#pragma HLS stream variable = v2915 depth = 9
#pragma HLS stream variable = v2916 depth = 9
#pragma HLS stream variable = v2917 depth = 9
#pragma HLS stream variable = v2918 depth = 9
#pragma HLS array_partition variable = v2919 complete dim = 1
#pragma HLS array_partition variable = v2919 complete dim = 2

  float v123;      // L3800
  v123 = 0.000000; // L3801
l_S_k_0_k125:
  for (int k125 = 0; k125 < 768; k125++) { // L3802
    float v2924 = v2915.read();            // v2915[k125];	// L3803
    float a123;                            // L3804
    a123 = v2924;                          // L3805
    float v2926 = v2916.read();            // v2916[k125];	// L3806
    float b123;                            // L3807
    b123 = v2926;                          // L3808
    float v2928 = a123;                    // L3809
    float v2929 = b123;                    // L3810
    float v2930 = v2928 * v2929;           // L3811
    float v2931 = v123;                    // L3812
    float v2932 = v2931 + v2930;           // L3813
    v123 = v2932;                          // L3814
    float v2933 = a123;                    // L3815
    v2917.write(v2933);                    // v2917[k125] = v2933;	// L3816
    float v2934 = b123;                    // L3817
    v2918.write(v2934);                    // v2918[k125] = v2934;	// L3818
  }
  float v2935 = v123;          // L3820
  v2919[v2920][v2921] = v2935; // L3821
}

void PE_kernel_K_4_7(hls::stream<float> &v2936 /* v2936[768] */,
                     hls::stream<float> &v2937 /* v2937[768] */,
                     hls::stream<float> &v2938 /* v2938[768] */,
                     hls::stream<float> &v2939 /* v2939[768] */,
                     float v2940[8][8], int v2941,
                     int v2942) { // L3824
#pragma HLS stream variable = v2936 depth = 9
#pragma HLS stream variable = v2937 depth = 9
#pragma HLS stream variable = v2938 depth = 9
#pragma HLS stream variable = v2939 depth = 9
#pragma HLS array_partition variable = v2940 complete dim = 1
#pragma HLS array_partition variable = v2940 complete dim = 2

  float v124;      // L3827
  v124 = 0.000000; // L3828
l_S_k_0_k126:
  for (int k126 = 0; k126 < 768; k126++) { // L3829
    float v2945 = v2936.read();            // v2936[k126];	// L3830
    float a124;                            // L3831
    a124 = v2945;                          // L3832
    float v2947 = v2937.read();            // v2937[k126];	// L3833
    float b124;                            // L3834
    b124 = v2947;                          // L3835
    float v2949 = a124;                    // L3836
    float v2950 = b124;                    // L3837
    float v2951 = v2949 * v2950;           // L3838
    float v2952 = v124;                    // L3839
    float v2953 = v2952 + v2951;           // L3840
    v124 = v2953;                          // L3841
    float v2954 = a124;                    // L3842
    v2938.write(v2954);                    // v2938[k126] = v2954;	// L3843
    float v2955 = b124;                    // L3844
    v2939.write(v2955);                    // v2939[k126] = v2955;	// L3845
  }
  float v2956 = v124;          // L3847
  v2940[v2941][v2942] = v2956; // L3848
}

void PE_kernel_K_5_7(hls::stream<float> &v2957 /* v2957[768] */,
                     hls::stream<float> &v2958 /* v2958[768] */,
                     hls::stream<float> &v2959 /* v2959[768] */,
                     hls::stream<float> &v2960 /* v2960[768] */,
                     float v2961[8][8], int v2962,
                     int v2963) { // L3851
#pragma HLS stream variable = v2957 depth = 9
#pragma HLS stream variable = v2958 depth = 9
#pragma HLS stream variable = v2959 depth = 9
#pragma HLS stream variable = v2960 depth = 9
#pragma HLS array_partition variable = v2961 complete dim = 1
#pragma HLS array_partition variable = v2961 complete dim = 2

  float v125;      // L3854
  v125 = 0.000000; // L3855
l_S_k_0_k127:
  for (int k127 = 0; k127 < 768; k127++) { // L3856
    float v2966 = v2957.read();            // v2957[k127];	// L3857
    float a125;                            // L3858
    a125 = v2966;                          // L3859
    float v2968 = v2958.read();            // v2958[k127];	// L3860
    float b125;                            // L3861
    b125 = v2968;                          // L3862
    float v2970 = a125;                    // L3863
    float v2971 = b125;                    // L3864
    float v2972 = v2970 * v2971;           // L3865
    float v2973 = v125;                    // L3866
    float v2974 = v2973 + v2972;           // L3867
    v125 = v2974;                          // L3868
    float v2975 = a125;                    // L3869
    v2959.write(v2975);                    // v2959[k127] = v2975;	// L3870
    float v2976 = b125;                    // L3871
    v2960.write(v2976);                    // v2960[k127] = v2976;	// L3872
  }
  float v2977 = v125;          // L3874
  v2961[v2962][v2963] = v2977; // L3875
}

void PE_kernel_K_6_7(hls::stream<float> &v2978 /* v2978[768] */,
                     hls::stream<float> &v2979 /* v2979[768] */,
                     hls::stream<float> &v2980 /* v2980[768] */,
                     hls::stream<float> &v2981 /* v2981[768] */,
                     float v2982[8][8], int v2983,
                     int v2984) { // L3878
#pragma HLS stream variable = v2978 depth = 9
#pragma HLS stream variable = v2979 depth = 9
#pragma HLS stream variable = v2980 depth = 9
#pragma HLS stream variable = v2981 depth = 9
#pragma HLS array_partition variable = v2982 complete dim = 1
#pragma HLS array_partition variable = v2982 complete dim = 2

  float v126;      // L3881
  v126 = 0.000000; // L3882
l_S_k_0_k128:
  for (int k128 = 0; k128 < 768; k128++) { // L3883
    float v2987 = v2978.read();            // v2978[k128];	// L3884
    float a126;                            // L3885
    a126 = v2987;                          // L3886
    float v2989 = v2979.read();            // v2979[k128];	// L3887
    float b126;                            // L3888
    b126 = v2989;                          // L3889
    float v2991 = a126;                    // L3890
    float v2992 = b126;                    // L3891
    float v2993 = v2991 * v2992;           // L3892
    float v2994 = v126;                    // L3893
    float v2995 = v2994 + v2993;           // L3894
    v126 = v2995;                          // L3895
    float v2996 = a126;                    // L3896
    v2980.write(v2996);                    // v2980[k128] = v2996;	// L3897
    float v2997 = b126;                    // L3898
    v2981.write(v2997);                    // v2981[k128] = v2997;	// L3899
  }
  float v2998 = v126;          // L3901
  v2982[v2983][v2984] = v2998; // L3902
}

void PE_kernel_K_7_7(hls::stream<float> &v2999 /* v2999[768] */,
                     hls::stream<float> &v3000 /* v3000[768] */,
                     hls::stream<float> &v3001 /* v3001[768] */,
                     hls::stream<float> &v3002 /* v3002[768] */,
                     float v3003[8][8], int v3004,
                     int v3005) { // L3905
#pragma HLS stream variable = v2999 depth = 9
#pragma HLS stream variable = v3000 depth = 9
#pragma HLS stream variable = v3001 depth = 9
#pragma HLS stream variable = v3002 depth = 9
#pragma HLS array_partition variable = v3003 complete dim = 1
#pragma HLS array_partition variable = v3003 complete dim = 2

  float v127;      // L3908
  v127 = 0.000000; // L3909
l_S_k_0_k129:
  for (int k129 = 0; k129 < 768; k129++) { // L3910
    float v3008 = v2999.read();            // v2999[k129];	// L3911
    float a127;                            // L3912
    a127 = v3008;                          // L3913
    float v3010 = v3000.read();            // v3000[k129];	// L3914
    float b127;                            // L3915
    b127 = v3010;                          // L3916
    float v3012 = a127;                    // L3917
    float v3013 = b127;                    // L3918
    float v3014 = v3012 * v3013;           // L3919
    float v3015 = v127;                    // L3920
    float v3016 = v3015 + v3014;           // L3921
    v127 = v3016;                          // L3922
    float v3017 = a127;                    // L3923
    v3001.write(v3017);                    // v3001[k129] = v3017;	// L3924
    float v3018 = b127;                    // L3925
    v3002.write(v3018);                    // v3002[k129] = v3018;	// L3926
  }
  float v3019 = v127;          // L3928
  v3003[v3004][v3005] = v3019; // L3929
}

void systolic_tile_K(float v3020[8][768], float v3021[768][8],
                     float v3022[8][8]) { // L3932
#pragma HLS dataflow
#pragma HLS array_partition variable = v3020 complete dim = 1

#pragma HLS array_partition variable = v3021 complete dim = 2

#pragma HLS array_partition variable = v3022 complete dim = 1
#pragma HLS array_partition variable = v3022 complete dim = 2

  hls::stream<float> A_fifo1[8][9] /* A_fifo1[8][9][768] */; // L3933
#pragma HLS stream variable = A_fifo1 depth = 9
  hls::stream<float> B_fifo1[8][9] /* B_fifo1[8][9][768] */; // L3934
#pragma HLS stream variable = B_fifo1 depth = 9
  float A_drain1[8]; // L3935
  float B_drain1[8]; // L3936
l_data_load_k130:
  for (int k130 = 0; k130 < 768; k130++) { // L3937
  l_S_m_0_m2:
    for (int m2 = 0; m2 < 8; m2++) { // L3938
      float v3029 = v3020[m2][k130]; // L3939
      A_fifo1[m2][0].write(v3029);   // A_fifo1[m2][0][k130] = v3029;	// L3940
    }
  l_S_n_1_n2:
    for (int n2 = 0; n2 < 8; n2++) { // L3942
      float v3031 = v3021[k130][n2]; // L3943
      B_fifo1[n2][0].write(v3031);   // B_fifo1[n2][0][k130] = v3031;	// L3944
    }
  }
  hls::stream<float> &v3032 /* v3032[768] */ = A_fifo1[0][0]; // L3948
  hls::stream<float> &v3033 /* v3033[768] */ = B_fifo1[0][0]; // L3949
  hls::stream<float> &v3034 /* v3034[768] */ = A_fifo1[0][1]; // L3955
  hls::stream<float> &v3035 /* v3035[768] */ = B_fifo1[0][1]; // L3956
  PE_kernel_K_0_0(v3032, v3033, v3034, v3035, v3022, 0, 0);   // L3957
  hls::stream<float> &v3036 /* v3036[768] */ = A_fifo1[0][1]; // L3959
  hls::stream<float> &v3037 /* v3037[768] */ = B_fifo1[1][0]; // L3960
  hls::stream<float> &v3038 /* v3038[768] */ = A_fifo1[0][2]; // L3964
  hls::stream<float> &v3039 /* v3039[768] */ = B_fifo1[1][1]; // L3965
  PE_kernel_K_1_0(v3036, v3037, v3038, v3039, v3022, 0, 1);   // L3966
  hls::stream<float> &v3040 /* v3040[768] */ = A_fifo1[0][2]; // L3968
  hls::stream<float> &v3041 /* v3041[768] */ = B_fifo1[2][0]; // L3969
  hls::stream<float> &v3042 /* v3042[768] */ = A_fifo1[0][3]; // L3973
  hls::stream<float> &v3043 /* v3043[768] */ = B_fifo1[2][1]; // L3974
  PE_kernel_K_2_0(v3040, v3041, v3042, v3043, v3022, 0, 2);   // L3975
  hls::stream<float> &v3044 /* v3044[768] */ = A_fifo1[0][3]; // L3977
  hls::stream<float> &v3045 /* v3045[768] */ = B_fifo1[3][0]; // L3978
  hls::stream<float> &v3046 /* v3046[768] */ = A_fifo1[0][4]; // L3982
  hls::stream<float> &v3047 /* v3047[768] */ = B_fifo1[3][1]; // L3983
  PE_kernel_K_3_0(v3044, v3045, v3046, v3047, v3022, 0, 3);   // L3984
  hls::stream<float> &v3048 /* v3048[768] */ = A_fifo1[0][4]; // L3986
  hls::stream<float> &v3049 /* v3049[768] */ = B_fifo1[4][0]; // L3987
  hls::stream<float> &v3050 /* v3050[768] */ = A_fifo1[0][5]; // L3991
  hls::stream<float> &v3051 /* v3051[768] */ = B_fifo1[4][1]; // L3992
  PE_kernel_K_4_0(v3048, v3049, v3050, v3051, v3022, 0, 4);   // L3993
  hls::stream<float> &v3052 /* v3052[768] */ = A_fifo1[0][5]; // L3995
  hls::stream<float> &v3053 /* v3053[768] */ = B_fifo1[5][0]; // L3996
  hls::stream<float> &v3054 /* v3054[768] */ = A_fifo1[0][6]; // L4000
  hls::stream<float> &v3055 /* v3055[768] */ = B_fifo1[5][1]; // L4001
  PE_kernel_K_5_0(v3052, v3053, v3054, v3055, v3022, 0, 5);   // L4002
  hls::stream<float> &v3056 /* v3056[768] */ = A_fifo1[0][6]; // L4004
  hls::stream<float> &v3057 /* v3057[768] */ = B_fifo1[6][0]; // L4005
  hls::stream<float> &v3058 /* v3058[768] */ = A_fifo1[0][7]; // L4009
  hls::stream<float> &v3059 /* v3059[768] */ = B_fifo1[6][1]; // L4010
  PE_kernel_K_6_0(v3056, v3057, v3058, v3059, v3022, 0, 6);   // L4011
  hls::stream<float> &v3060 /* v3060[768] */ = A_fifo1[0][7]; // L4013
  hls::stream<float> &v3061 /* v3061[768] */ = B_fifo1[7][0]; // L4014
  hls::stream<float> &v3062 /* v3062[768] */ = A_fifo1[0][8]; // L4018
  hls::stream<float> &v3063 /* v3063[768] */ = B_fifo1[7][1]; // L4019
  PE_kernel_K_7_0(v3060, v3061, v3062, v3063, v3022, 0, 7);   // L4020
  hls::stream<float> &v3064 /* v3064[768] */ = A_fifo1[1][0]; // L4021
  hls::stream<float> &v3065 /* v3065[768] */ = B_fifo1[0][1]; // L4022
  hls::stream<float> &v3066 /* v3066[768] */ = A_fifo1[1][1]; // L4023
  hls::stream<float> &v3067 /* v3067[768] */ = B_fifo1[0][2]; // L4024
  PE_kernel_K_0_1(v3064, v3065, v3066, v3067, v3022, 1, 0);   // L4025
  hls::stream<float> &v3068 /* v3068[768] */ = A_fifo1[1][1]; // L4026
  hls::stream<float> &v3069 /* v3069[768] */ = B_fifo1[1][1]; // L4027
  hls::stream<float> &v3070 /* v3070[768] */ = A_fifo1[1][2]; // L4028
  hls::stream<float> &v3071 /* v3071[768] */ = B_fifo1[1][2]; // L4029
  PE_kernel_K_1_1(v3068, v3069, v3070, v3071, v3022, 1, 1);   // L4030
  hls::stream<float> &v3072 /* v3072[768] */ = A_fifo1[1][2]; // L4031
  hls::stream<float> &v3073 /* v3073[768] */ = B_fifo1[2][1]; // L4032
  hls::stream<float> &v3074 /* v3074[768] */ = A_fifo1[1][3]; // L4033
  hls::stream<float> &v3075 /* v3075[768] */ = B_fifo1[2][2]; // L4034
  PE_kernel_K_2_1(v3072, v3073, v3074, v3075, v3022, 1, 2);   // L4035
  hls::stream<float> &v3076 /* v3076[768] */ = A_fifo1[1][3]; // L4036
  hls::stream<float> &v3077 /* v3077[768] */ = B_fifo1[3][1]; // L4037
  hls::stream<float> &v3078 /* v3078[768] */ = A_fifo1[1][4]; // L4038
  hls::stream<float> &v3079 /* v3079[768] */ = B_fifo1[3][2]; // L4039
  PE_kernel_K_3_1(v3076, v3077, v3078, v3079, v3022, 1, 3);   // L4040
  hls::stream<float> &v3080 /* v3080[768] */ = A_fifo1[1][4]; // L4041
  hls::stream<float> &v3081 /* v3081[768] */ = B_fifo1[4][1]; // L4042
  hls::stream<float> &v3082 /* v3082[768] */ = A_fifo1[1][5]; // L4043
  hls::stream<float> &v3083 /* v3083[768] */ = B_fifo1[4][2]; // L4044
  PE_kernel_K_4_1(v3080, v3081, v3082, v3083, v3022, 1, 4);   // L4045
  hls::stream<float> &v3084 /* v3084[768] */ = A_fifo1[1][5]; // L4046
  hls::stream<float> &v3085 /* v3085[768] */ = B_fifo1[5][1]; // L4047
  hls::stream<float> &v3086 /* v3086[768] */ = A_fifo1[1][6]; // L4048
  hls::stream<float> &v3087 /* v3087[768] */ = B_fifo1[5][2]; // L4049
  PE_kernel_K_5_1(v3084, v3085, v3086, v3087, v3022, 1, 5);   // L4050
  hls::stream<float> &v3088 /* v3088[768] */ = A_fifo1[1][6]; // L4051
  hls::stream<float> &v3089 /* v3089[768] */ = B_fifo1[6][1]; // L4052
  hls::stream<float> &v3090 /* v3090[768] */ = A_fifo1[1][7]; // L4053
  hls::stream<float> &v3091 /* v3091[768] */ = B_fifo1[6][2]; // L4054
  PE_kernel_K_6_1(v3088, v3089, v3090, v3091, v3022, 1, 6);   // L4055
  hls::stream<float> &v3092 /* v3092[768] */ = A_fifo1[1][7]; // L4056
  hls::stream<float> &v3093 /* v3093[768] */ = B_fifo1[7][1]; // L4057
  hls::stream<float> &v3094 /* v3094[768] */ = A_fifo1[1][8]; // L4058
  hls::stream<float> &v3095 /* v3095[768] */ = B_fifo1[7][2]; // L4059
  PE_kernel_K_7_1(v3092, v3093, v3094, v3095, v3022, 1, 7);   // L4060
  hls::stream<float> &v3096 /* v3096[768] */ = A_fifo1[2][0]; // L4061
  hls::stream<float> &v3097 /* v3097[768] */ = B_fifo1[0][2]; // L4062
  hls::stream<float> &v3098 /* v3098[768] */ = A_fifo1[2][1]; // L4063
  hls::stream<float> &v3099 /* v3099[768] */ = B_fifo1[0][3]; // L4064
  PE_kernel_K_0_2(v3096, v3097, v3098, v3099, v3022, 2, 0);   // L4065
  hls::stream<float> &v3100 /* v3100[768] */ = A_fifo1[2][1]; // L4066
  hls::stream<float> &v3101 /* v3101[768] */ = B_fifo1[1][2]; // L4067
  hls::stream<float> &v3102 /* v3102[768] */ = A_fifo1[2][2]; // L4068
  hls::stream<float> &v3103 /* v3103[768] */ = B_fifo1[1][3]; // L4069
  PE_kernel_K_1_2(v3100, v3101, v3102, v3103, v3022, 2, 1);   // L4070
  hls::stream<float> &v3104 /* v3104[768] */ = A_fifo1[2][2]; // L4071
  hls::stream<float> &v3105 /* v3105[768] */ = B_fifo1[2][2]; // L4072
  hls::stream<float> &v3106 /* v3106[768] */ = A_fifo1[2][3]; // L4073
  hls::stream<float> &v3107 /* v3107[768] */ = B_fifo1[2][3]; // L4074
  PE_kernel_K_2_2(v3104, v3105, v3106, v3107, v3022, 2, 2);   // L4075
  hls::stream<float> &v3108 /* v3108[768] */ = A_fifo1[2][3]; // L4076
  hls::stream<float> &v3109 /* v3109[768] */ = B_fifo1[3][2]; // L4077
  hls::stream<float> &v3110 /* v3110[768] */ = A_fifo1[2][4]; // L4078
  hls::stream<float> &v3111 /* v3111[768] */ = B_fifo1[3][3]; // L4079
  PE_kernel_K_3_2(v3108, v3109, v3110, v3111, v3022, 2, 3);   // L4080
  hls::stream<float> &v3112 /* v3112[768] */ = A_fifo1[2][4]; // L4081
  hls::stream<float> &v3113 /* v3113[768] */ = B_fifo1[4][2]; // L4082
  hls::stream<float> &v3114 /* v3114[768] */ = A_fifo1[2][5]; // L4083
  hls::stream<float> &v3115 /* v3115[768] */ = B_fifo1[4][3]; // L4084
  PE_kernel_K_4_2(v3112, v3113, v3114, v3115, v3022, 2, 4);   // L4085
  hls::stream<float> &v3116 /* v3116[768] */ = A_fifo1[2][5]; // L4086
  hls::stream<float> &v3117 /* v3117[768] */ = B_fifo1[5][2]; // L4087
  hls::stream<float> &v3118 /* v3118[768] */ = A_fifo1[2][6]; // L4088
  hls::stream<float> &v3119 /* v3119[768] */ = B_fifo1[5][3]; // L4089
  PE_kernel_K_5_2(v3116, v3117, v3118, v3119, v3022, 2, 5);   // L4090
  hls::stream<float> &v3120 /* v3120[768] */ = A_fifo1[2][6]; // L4091
  hls::stream<float> &v3121 /* v3121[768] */ = B_fifo1[6][2]; // L4092
  hls::stream<float> &v3122 /* v3122[768] */ = A_fifo1[2][7]; // L4093
  hls::stream<float> &v3123 /* v3123[768] */ = B_fifo1[6][3]; // L4094
  PE_kernel_K_6_2(v3120, v3121, v3122, v3123, v3022, 2, 6);   // L4095
  hls::stream<float> &v3124 /* v3124[768] */ = A_fifo1[2][7]; // L4096
  hls::stream<float> &v3125 /* v3125[768] */ = B_fifo1[7][2]; // L4097
  hls::stream<float> &v3126 /* v3126[768] */ = A_fifo1[2][8]; // L4098
  hls::stream<float> &v3127 /* v3127[768] */ = B_fifo1[7][3]; // L4099
  PE_kernel_K_7_2(v3124, v3125, v3126, v3127, v3022, 2, 7);   // L4100
  hls::stream<float> &v3128 /* v3128[768] */ = A_fifo1[3][0]; // L4101
  hls::stream<float> &v3129 /* v3129[768] */ = B_fifo1[0][3]; // L4102
  hls::stream<float> &v3130 /* v3130[768] */ = A_fifo1[3][1]; // L4103
  hls::stream<float> &v3131 /* v3131[768] */ = B_fifo1[0][4]; // L4104
  PE_kernel_K_0_3(v3128, v3129, v3130, v3131, v3022, 3, 0);   // L4105
  hls::stream<float> &v3132 /* v3132[768] */ = A_fifo1[3][1]; // L4106
  hls::stream<float> &v3133 /* v3133[768] */ = B_fifo1[1][3]; // L4107
  hls::stream<float> &v3134 /* v3134[768] */ = A_fifo1[3][2]; // L4108
  hls::stream<float> &v3135 /* v3135[768] */ = B_fifo1[1][4]; // L4109
  PE_kernel_K_1_3(v3132, v3133, v3134, v3135, v3022, 3, 1);   // L4110
  hls::stream<float> &v3136 /* v3136[768] */ = A_fifo1[3][2]; // L4111
  hls::stream<float> &v3137 /* v3137[768] */ = B_fifo1[2][3]; // L4112
  hls::stream<float> &v3138 /* v3138[768] */ = A_fifo1[3][3]; // L4113
  hls::stream<float> &v3139 /* v3139[768] */ = B_fifo1[2][4]; // L4114
  PE_kernel_K_2_3(v3136, v3137, v3138, v3139, v3022, 3, 2);   // L4115
  hls::stream<float> &v3140 /* v3140[768] */ = A_fifo1[3][3]; // L4116
  hls::stream<float> &v3141 /* v3141[768] */ = B_fifo1[3][3]; // L4117
  hls::stream<float> &v3142 /* v3142[768] */ = A_fifo1[3][4]; // L4118
  hls::stream<float> &v3143 /* v3143[768] */ = B_fifo1[3][4]; // L4119
  PE_kernel_K_3_3(v3140, v3141, v3142, v3143, v3022, 3, 3);   // L4120
  hls::stream<float> &v3144 /* v3144[768] */ = A_fifo1[3][4]; // L4121
  hls::stream<float> &v3145 /* v3145[768] */ = B_fifo1[4][3]; // L4122
  hls::stream<float> &v3146 /* v3146[768] */ = A_fifo1[3][5]; // L4123
  hls::stream<float> &v3147 /* v3147[768] */ = B_fifo1[4][4]; // L4124
  PE_kernel_K_4_3(v3144, v3145, v3146, v3147, v3022, 3, 4);   // L4125
  hls::stream<float> &v3148 /* v3148[768] */ = A_fifo1[3][5]; // L4126
  hls::stream<float> &v3149 /* v3149[768] */ = B_fifo1[5][3]; // L4127
  hls::stream<float> &v3150 /* v3150[768] */ = A_fifo1[3][6]; // L4128
  hls::stream<float> &v3151 /* v3151[768] */ = B_fifo1[5][4]; // L4129
  PE_kernel_K_5_3(v3148, v3149, v3150, v3151, v3022, 3, 5);   // L4130
  hls::stream<float> &v3152 /* v3152[768] */ = A_fifo1[3][6]; // L4131
  hls::stream<float> &v3153 /* v3153[768] */ = B_fifo1[6][3]; // L4132
  hls::stream<float> &v3154 /* v3154[768] */ = A_fifo1[3][7]; // L4133
  hls::stream<float> &v3155 /* v3155[768] */ = B_fifo1[6][4]; // L4134
  PE_kernel_K_6_3(v3152, v3153, v3154, v3155, v3022, 3, 6);   // L4135
  hls::stream<float> &v3156 /* v3156[768] */ = A_fifo1[3][7]; // L4136
  hls::stream<float> &v3157 /* v3157[768] */ = B_fifo1[7][3]; // L4137
  hls::stream<float> &v3158 /* v3158[768] */ = A_fifo1[3][8]; // L4138
  hls::stream<float> &v3159 /* v3159[768] */ = B_fifo1[7][4]; // L4139
  PE_kernel_K_7_3(v3156, v3157, v3158, v3159, v3022, 3, 7);   // L4140
  hls::stream<float> &v3160 /* v3160[768] */ = A_fifo1[4][0]; // L4141
  hls::stream<float> &v3161 /* v3161[768] */ = B_fifo1[0][4]; // L4142
  hls::stream<float> &v3162 /* v3162[768] */ = A_fifo1[4][1]; // L4143
  hls::stream<float> &v3163 /* v3163[768] */ = B_fifo1[0][5]; // L4144
  PE_kernel_K_0_4(v3160, v3161, v3162, v3163, v3022, 4, 0);   // L4145
  hls::stream<float> &v3164 /* v3164[768] */ = A_fifo1[4][1]; // L4146
  hls::stream<float> &v3165 /* v3165[768] */ = B_fifo1[1][4]; // L4147
  hls::stream<float> &v3166 /* v3166[768] */ = A_fifo1[4][2]; // L4148
  hls::stream<float> &v3167 /* v3167[768] */ = B_fifo1[1][5]; // L4149
  PE_kernel_K_1_4(v3164, v3165, v3166, v3167, v3022, 4, 1);   // L4150
  hls::stream<float> &v3168 /* v3168[768] */ = A_fifo1[4][2]; // L4151
  hls::stream<float> &v3169 /* v3169[768] */ = B_fifo1[2][4]; // L4152
  hls::stream<float> &v3170 /* v3170[768] */ = A_fifo1[4][3]; // L4153
  hls::stream<float> &v3171 /* v3171[768] */ = B_fifo1[2][5]; // L4154
  PE_kernel_K_2_4(v3168, v3169, v3170, v3171, v3022, 4, 2);   // L4155
  hls::stream<float> &v3172 /* v3172[768] */ = A_fifo1[4][3]; // L4156
  hls::stream<float> &v3173 /* v3173[768] */ = B_fifo1[3][4]; // L4157
  hls::stream<float> &v3174 /* v3174[768] */ = A_fifo1[4][4]; // L4158
  hls::stream<float> &v3175 /* v3175[768] */ = B_fifo1[3][5]; // L4159
  PE_kernel_K_3_4(v3172, v3173, v3174, v3175, v3022, 4, 3);   // L4160
  hls::stream<float> &v3176 /* v3176[768] */ = A_fifo1[4][4]; // L4161
  hls::stream<float> &v3177 /* v3177[768] */ = B_fifo1[4][4]; // L4162
  hls::stream<float> &v3178 /* v3178[768] */ = A_fifo1[4][5]; // L4163
  hls::stream<float> &v3179 /* v3179[768] */ = B_fifo1[4][5]; // L4164
  PE_kernel_K_4_4(v3176, v3177, v3178, v3179, v3022, 4, 4);   // L4165
  hls::stream<float> &v3180 /* v3180[768] */ = A_fifo1[4][5]; // L4166
  hls::stream<float> &v3181 /* v3181[768] */ = B_fifo1[5][4]; // L4167
  hls::stream<float> &v3182 /* v3182[768] */ = A_fifo1[4][6]; // L4168
  hls::stream<float> &v3183 /* v3183[768] */ = B_fifo1[5][5]; // L4169
  PE_kernel_K_5_4(v3180, v3181, v3182, v3183, v3022, 4, 5);   // L4170
  hls::stream<float> &v3184 /* v3184[768] */ = A_fifo1[4][6]; // L4171
  hls::stream<float> &v3185 /* v3185[768] */ = B_fifo1[6][4]; // L4172
  hls::stream<float> &v3186 /* v3186[768] */ = A_fifo1[4][7]; // L4173
  hls::stream<float> &v3187 /* v3187[768] */ = B_fifo1[6][5]; // L4174
  PE_kernel_K_6_4(v3184, v3185, v3186, v3187, v3022, 4, 6);   // L4175
  hls::stream<float> &v3188 /* v3188[768] */ = A_fifo1[4][7]; // L4176
  hls::stream<float> &v3189 /* v3189[768] */ = B_fifo1[7][4]; // L4177
  hls::stream<float> &v3190 /* v3190[768] */ = A_fifo1[4][8]; // L4178
  hls::stream<float> &v3191 /* v3191[768] */ = B_fifo1[7][5]; // L4179
  PE_kernel_K_7_4(v3188, v3189, v3190, v3191, v3022, 4, 7);   // L4180
  hls::stream<float> &v3192 /* v3192[768] */ = A_fifo1[5][0]; // L4181
  hls::stream<float> &v3193 /* v3193[768] */ = B_fifo1[0][5]; // L4182
  hls::stream<float> &v3194 /* v3194[768] */ = A_fifo1[5][1]; // L4183
  hls::stream<float> &v3195 /* v3195[768] */ = B_fifo1[0][6]; // L4184
  PE_kernel_K_0_5(v3192, v3193, v3194, v3195, v3022, 5, 0);   // L4185
  hls::stream<float> &v3196 /* v3196[768] */ = A_fifo1[5][1]; // L4186
  hls::stream<float> &v3197 /* v3197[768] */ = B_fifo1[1][5]; // L4187
  hls::stream<float> &v3198 /* v3198[768] */ = A_fifo1[5][2]; // L4188
  hls::stream<float> &v3199 /* v3199[768] */ = B_fifo1[1][6]; // L4189
  PE_kernel_K_1_5(v3196, v3197, v3198, v3199, v3022, 5, 1);   // L4190
  hls::stream<float> &v3200 /* v3200[768] */ = A_fifo1[5][2]; // L4191
  hls::stream<float> &v3201 /* v3201[768] */ = B_fifo1[2][5]; // L4192
  hls::stream<float> &v3202 /* v3202[768] */ = A_fifo1[5][3]; // L4193
  hls::stream<float> &v3203 /* v3203[768] */ = B_fifo1[2][6]; // L4194
  PE_kernel_K_2_5(v3200, v3201, v3202, v3203, v3022, 5, 2);   // L4195
  hls::stream<float> &v3204 /* v3204[768] */ = A_fifo1[5][3]; // L4196
  hls::stream<float> &v3205 /* v3205[768] */ = B_fifo1[3][5]; // L4197
  hls::stream<float> &v3206 /* v3206[768] */ = A_fifo1[5][4]; // L4198
  hls::stream<float> &v3207 /* v3207[768] */ = B_fifo1[3][6]; // L4199
  PE_kernel_K_3_5(v3204, v3205, v3206, v3207, v3022, 5, 3);   // L4200
  hls::stream<float> &v3208 /* v3208[768] */ = A_fifo1[5][4]; // L4201
  hls::stream<float> &v3209 /* v3209[768] */ = B_fifo1[4][5]; // L4202
  hls::stream<float> &v3210 /* v3210[768] */ = A_fifo1[5][5]; // L4203
  hls::stream<float> &v3211 /* v3211[768] */ = B_fifo1[4][6]; // L4204
  PE_kernel_K_4_5(v3208, v3209, v3210, v3211, v3022, 5, 4);   // L4205
  hls::stream<float> &v3212 /* v3212[768] */ = A_fifo1[5][5]; // L4206
  hls::stream<float> &v3213 /* v3213[768] */ = B_fifo1[5][5]; // L4207
  hls::stream<float> &v3214 /* v3214[768] */ = A_fifo1[5][6]; // L4208
  hls::stream<float> &v3215 /* v3215[768] */ = B_fifo1[5][6]; // L4209
  PE_kernel_K_5_5(v3212, v3213, v3214, v3215, v3022, 5, 5);   // L4210
  hls::stream<float> &v3216 /* v3216[768] */ = A_fifo1[5][6]; // L4211
  hls::stream<float> &v3217 /* v3217[768] */ = B_fifo1[6][5]; // L4212
  hls::stream<float> &v3218 /* v3218[768] */ = A_fifo1[5][7]; // L4213
  hls::stream<float> &v3219 /* v3219[768] */ = B_fifo1[6][6]; // L4214
  PE_kernel_K_6_5(v3216, v3217, v3218, v3219, v3022, 5, 6);   // L4215
  hls::stream<float> &v3220 /* v3220[768] */ = A_fifo1[5][7]; // L4216
  hls::stream<float> &v3221 /* v3221[768] */ = B_fifo1[7][5]; // L4217
  hls::stream<float> &v3222 /* v3222[768] */ = A_fifo1[5][8]; // L4218
  hls::stream<float> &v3223 /* v3223[768] */ = B_fifo1[7][6]; // L4219
  PE_kernel_K_7_5(v3220, v3221, v3222, v3223, v3022, 5, 7);   // L4220
  hls::stream<float> &v3224 /* v3224[768] */ = A_fifo1[6][0]; // L4221
  hls::stream<float> &v3225 /* v3225[768] */ = B_fifo1[0][6]; // L4222
  hls::stream<float> &v3226 /* v3226[768] */ = A_fifo1[6][1]; // L4223
  hls::stream<float> &v3227 /* v3227[768] */ = B_fifo1[0][7]; // L4224
  PE_kernel_K_0_6(v3224, v3225, v3226, v3227, v3022, 6, 0);   // L4225
  hls::stream<float> &v3228 /* v3228[768] */ = A_fifo1[6][1]; // L4226
  hls::stream<float> &v3229 /* v3229[768] */ = B_fifo1[1][6]; // L4227
  hls::stream<float> &v3230 /* v3230[768] */ = A_fifo1[6][2]; // L4228
  hls::stream<float> &v3231 /* v3231[768] */ = B_fifo1[1][7]; // L4229
  PE_kernel_K_1_6(v3228, v3229, v3230, v3231, v3022, 6, 1);   // L4230
  hls::stream<float> &v3232 /* v3232[768] */ = A_fifo1[6][2]; // L4231
  hls::stream<float> &v3233 /* v3233[768] */ = B_fifo1[2][6]; // L4232
  hls::stream<float> &v3234 /* v3234[768] */ = A_fifo1[6][3]; // L4233
  hls::stream<float> &v3235 /* v3235[768] */ = B_fifo1[2][7]; // L4234
  PE_kernel_K_2_6(v3232, v3233, v3234, v3235, v3022, 6, 2);   // L4235
  hls::stream<float> &v3236 /* v3236[768] */ = A_fifo1[6][3]; // L4236
  hls::stream<float> &v3237 /* v3237[768] */ = B_fifo1[3][6]; // L4237
  hls::stream<float> &v3238 /* v3238[768] */ = A_fifo1[6][4]; // L4238
  hls::stream<float> &v3239 /* v3239[768] */ = B_fifo1[3][7]; // L4239
  PE_kernel_K_3_6(v3236, v3237, v3238, v3239, v3022, 6, 3);   // L4240
  hls::stream<float> &v3240 /* v3240[768] */ = A_fifo1[6][4]; // L4241
  hls::stream<float> &v3241 /* v3241[768] */ = B_fifo1[4][6]; // L4242
  hls::stream<float> &v3242 /* v3242[768] */ = A_fifo1[6][5]; // L4243
  hls::stream<float> &v3243 /* v3243[768] */ = B_fifo1[4][7]; // L4244
  PE_kernel_K_4_6(v3240, v3241, v3242, v3243, v3022, 6, 4);   // L4245
  hls::stream<float> &v3244 /* v3244[768] */ = A_fifo1[6][5]; // L4246
  hls::stream<float> &v3245 /* v3245[768] */ = B_fifo1[5][6]; // L4247
  hls::stream<float> &v3246 /* v3246[768] */ = A_fifo1[6][6]; // L4248
  hls::stream<float> &v3247 /* v3247[768] */ = B_fifo1[5][7]; // L4249
  PE_kernel_K_5_6(v3244, v3245, v3246, v3247, v3022, 6, 5);   // L4250
  hls::stream<float> &v3248 /* v3248[768] */ = A_fifo1[6][6]; // L4251
  hls::stream<float> &v3249 /* v3249[768] */ = B_fifo1[6][6]; // L4252
  hls::stream<float> &v3250 /* v3250[768] */ = A_fifo1[6][7]; // L4253
  hls::stream<float> &v3251 /* v3251[768] */ = B_fifo1[6][7]; // L4254
  PE_kernel_K_6_6(v3248, v3249, v3250, v3251, v3022, 6, 6);   // L4255
  hls::stream<float> &v3252 /* v3252[768] */ = A_fifo1[6][7]; // L4256
  hls::stream<float> &v3253 /* v3253[768] */ = B_fifo1[7][6]; // L4257
  hls::stream<float> &v3254 /* v3254[768] */ = A_fifo1[6][8]; // L4258
  hls::stream<float> &v3255 /* v3255[768] */ = B_fifo1[7][7]; // L4259
  PE_kernel_K_7_6(v3252, v3253, v3254, v3255, v3022, 6, 7);   // L4260
  hls::stream<float> &v3256 /* v3256[768] */ = A_fifo1[7][0]; // L4261
  hls::stream<float> &v3257 /* v3257[768] */ = B_fifo1[0][7]; // L4262
  hls::stream<float> &v3258 /* v3258[768] */ = A_fifo1[7][1]; // L4263
  hls::stream<float> &v3259 /* v3259[768] */ = B_fifo1[0][8]; // L4264
  PE_kernel_K_0_7(v3256, v3257, v3258, v3259, v3022, 7, 0);   // L4265
  hls::stream<float> &v3260 /* v3260[768] */ = A_fifo1[7][1]; // L4266
  hls::stream<float> &v3261 /* v3261[768] */ = B_fifo1[1][7]; // L4267
  hls::stream<float> &v3262 /* v3262[768] */ = A_fifo1[7][2]; // L4268
  hls::stream<float> &v3263 /* v3263[768] */ = B_fifo1[1][8]; // L4269
  PE_kernel_K_1_7(v3260, v3261, v3262, v3263, v3022, 7, 1);   // L4270
  hls::stream<float> &v3264 /* v3264[768] */ = A_fifo1[7][2]; // L4271
  hls::stream<float> &v3265 /* v3265[768] */ = B_fifo1[2][7]; // L4272
  hls::stream<float> &v3266 /* v3266[768] */ = A_fifo1[7][3]; // L4273
  hls::stream<float> &v3267 /* v3267[768] */ = B_fifo1[2][8]; // L4274
  PE_kernel_K_2_7(v3264, v3265, v3266, v3267, v3022, 7, 2);   // L4275
  hls::stream<float> &v3268 /* v3268[768] */ = A_fifo1[7][3]; // L4276
  hls::stream<float> &v3269 /* v3269[768] */ = B_fifo1[3][7]; // L4277
  hls::stream<float> &v3270 /* v3270[768] */ = A_fifo1[7][4]; // L4278
  hls::stream<float> &v3271 /* v3271[768] */ = B_fifo1[3][8]; // L4279
  PE_kernel_K_3_7(v3268, v3269, v3270, v3271, v3022, 7, 3);   // L4280
  hls::stream<float> &v3272 /* v3272[768] */ = A_fifo1[7][4]; // L4281
  hls::stream<float> &v3273 /* v3273[768] */ = B_fifo1[4][7]; // L4282
  hls::stream<float> &v3274 /* v3274[768] */ = A_fifo1[7][5]; // L4283
  hls::stream<float> &v3275 /* v3275[768] */ = B_fifo1[4][8]; // L4284
  PE_kernel_K_4_7(v3272, v3273, v3274, v3275, v3022, 7, 4);   // L4285
  hls::stream<float> &v3276 /* v3276[768] */ = A_fifo1[7][5]; // L4286
  hls::stream<float> &v3277 /* v3277[768] */ = B_fifo1[5][7]; // L4287
  hls::stream<float> &v3278 /* v3278[768] */ = A_fifo1[7][6]; // L4288
  hls::stream<float> &v3279 /* v3279[768] */ = B_fifo1[5][8]; // L4289
  PE_kernel_K_5_7(v3276, v3277, v3278, v3279, v3022, 7, 5);   // L4290
  hls::stream<float> &v3280 /* v3280[768] */ = A_fifo1[7][6]; // L4291
  hls::stream<float> &v3281 /* v3281[768] */ = B_fifo1[6][7]; // L4292
  hls::stream<float> &v3282 /* v3282[768] */ = A_fifo1[7][7]; // L4293
  hls::stream<float> &v3283 /* v3283[768] */ = B_fifo1[6][8]; // L4294
  PE_kernel_K_6_7(v3280, v3281, v3282, v3283, v3022, 7, 6);   // L4295
  hls::stream<float> &v3284 /* v3284[768] */ = A_fifo1[7][7]; // L4296
  hls::stream<float> &v3285 /* v3285[768] */ = B_fifo1[7][7]; // L4297
  hls::stream<float> &v3286 /* v3286[768] */ = A_fifo1[7][8]; // L4298
  hls::stream<float> &v3287 /* v3287[768] */ = B_fifo1[7][8]; // L4299
  PE_kernel_K_7_7(v3284, v3285, v3286, v3287, v3022, 7, 7);   // L4300
l_data_drain_k131:
  for (int k131 = 0; k131 < 768; k131++) { // L4301
  l_S_m_4_m3:
    for (int m3 = 0; m3 < 8; m3++) {       // L4302
      float v3290 = A_fifo1[m3][8].read(); // A_fifo1[m3][8][k131];	// L4303
      A_drain1[m3] = v3290;                // L4304
    }
  l_S_n_5_n3:
    for (int n3 = 0; n3 < 8; n3++) {       // L4306
      float v3292 = B_fifo1[n3][8].read(); // B_fifo1[n3][8][k131];	// L4307
      B_drain1[n3] = v3292;                // L4308
    }
  }
}

void systolic_K(float v3293[64][768], float v3294[768][768],
                float v3295[64][768]) { // L4313
  float local_A1[8][768];               // L4314
#pragma HLS array_partition variable = local_A1 complete dim = 1

  float local_B1[768][8]; // L4315
#pragma HLS array_partition variable = local_B1 complete dim = 2

  float local_C1[8][8]; // L4316
#pragma HLS array_partition variable = local_C1 complete dim = 1
#pragma HLS array_partition variable = local_C1 complete dim = 2

l_outer_tile_mi1:
  for (int mi1 = 0; mi1 < 8; mi1++) { // L4317
  l_ni1:
    for (int ni1 = 0; ni1 < 96; ni1++) { // L4318
                                         // #pragma HLS dataflow
    l_load_A_tile_ak1:
      for (int ak1 = 0; ak1 < 768; ak1++) { // L4319
      l_ai1:
        for (int ai1 = 0; ai1 < 8; ai1++) { // L4320
#pragma HLS pipeline II = 1
          ap_int<33> v3303 = ni1;                        // L4321
          bool v3304 = v3303 == 0;                       // L4324
          if (v3304) {                                   // L4325
            float v3305 = v3293[((mi1 * 8) + ai1)][ak1]; // L4326
            local_A1[ai1][ak1] = v3305;                  // L4327
          }
        }
      }
    l_load_B_tile_bk1:
      for (int bk1 = 0; bk1 < 768; bk1++) { // L4331
      l_bj1:
        for (int bj1 = 0; bj1 < 8; bj1++) { // L4332
#pragma HLS pipeline II = 1
          float v3308 = v3294[bk1][((ni1 * 8) + bj1)]; // L4333
          local_B1[bk1][bj1] = v3308;                  // L4334
        }
      }
      systolic_tile_K(local_A1, local_B1, local_C1); // L4337
    l_store_C_tile_sj1:
      for (int sj1 = 0; sj1 < 8; sj1++) { // L4338
      l_si1:
        for (int si1 = 0; si1 < 8; si1++) { // L4339
#pragma HLS pipeline II = 1
          float v3311 = local_C1[si1][sj1];                    // L4340
          v3295[((mi1 * 8) + si1)][((ni1 * 8) + sj1)] = v3311; // L4341
        }
      }
    }
  }
}

void PE_kernel_V_0_0(hls::stream<float> &v3312 /* v3312[768] */,
                     hls::stream<float> &v3313 /* v3313[768] */,
                     hls::stream<float> &v3314 /* v3314[768] */,
                     hls::stream<float> &v3315 /* v3315[768] */,
                     float v3316[8][8], int v3317,
                     int v3318) { // L4348
#pragma HLS stream variable = v3312 depth = 9
#pragma HLS stream variable = v3313 depth = 9
#pragma HLS stream variable = v3314 depth = 9
#pragma HLS stream variable = v3315 depth = 9
#pragma HLS array_partition variable = v3316 complete dim = 1
#pragma HLS array_partition variable = v3316 complete dim = 2

  float v128;      // L4351
  v128 = 0.000000; // L4352
l_S_k_0_k132:
  for (int k132 = 0; k132 < 768; k132++) { // L4353
    float v3321 = v3312.read();            // v3312[k132];	// L4354
    float a128;                            // L4355
    a128 = v3321;                          // L4356
    float v3323 = v3313.read();            // v3313[k132];	// L4357
    float b128;                            // L4358
    b128 = v3323;                          // L4359
    float v3325 = a128;                    // L4360
    float v3326 = b128;                    // L4361
    float v3327 = v3325 * v3326;           // L4362
    float v3328 = v128;                    // L4363
    float v3329 = v3328 + v3327;           // L4364
    v128 = v3329;                          // L4365
    float v3330 = a128;                    // L4366
    v3314.write(v3330);                    // v3314[k132] = v3330;	// L4367
    float v3331 = b128;                    // L4368
    v3315.write(v3331);                    // v3315[k132] = v3331;	// L4369
  }
  float v3332 = v128;          // L4371
  v3316[v3317][v3318] = v3332; // L4372
}

void PE_kernel_V_1_0(hls::stream<float> &v3333 /* v3333[768] */,
                     hls::stream<float> &v3334 /* v3334[768] */,
                     hls::stream<float> &v3335 /* v3335[768] */,
                     hls::stream<float> &v3336 /* v3336[768] */,
                     float v3337[8][8], int v3338,
                     int v3339) { // L4375
#pragma HLS stream variable = v3333 depth = 9
#pragma HLS stream variable = v3334 depth = 9
#pragma HLS stream variable = v3335 depth = 9
#pragma HLS stream variable = v3336 depth = 9
#pragma HLS array_partition variable = v3337 complete dim = 1
#pragma HLS array_partition variable = v3337 complete dim = 2

  float v129;      // L4378
  v129 = 0.000000; // L4379
l_S_k_0_k133:
  for (int k133 = 0; k133 < 768; k133++) { // L4380
    float v3342 = v3333.read();            // v3333[k133];	// L4381
    float a129;                            // L4382
    a129 = v3342;                          // L4383
    float v3344 = v3334.read();            // v3334[k133];	// L4384
    float b129;                            // L4385
    b129 = v3344;                          // L4386
    float v3346 = a129;                    // L4387
    float v3347 = b129;                    // L4388
    float v3348 = v3346 * v3347;           // L4389
    float v3349 = v129;                    // L4390
    float v3350 = v3349 + v3348;           // L4391
    v129 = v3350;                          // L4392
    float v3351 = a129;                    // L4393
    v3335.write(v3351);                    // v3335[k133] = v3351;	// L4394
    float v3352 = b129;                    // L4395
    v3336.write(v3352);                    // v3336[k133] = v3352;	// L4396
  }
  float v3353 = v129;          // L4398
  v3337[v3338][v3339] = v3353; // L4399
}

void PE_kernel_V_2_0(hls::stream<float> &v3354 /* v3354[768] */,
                     hls::stream<float> &v3355 /* v3355[768] */,
                     hls::stream<float> &v3356 /* v3356[768] */,
                     hls::stream<float> &v3357 /* v3357[768] */,
                     float v3358[8][8], int v3359,
                     int v3360) { // L4402
#pragma HLS stream variable = v3354 depth = 9
#pragma HLS stream variable = v3355 depth = 9
#pragma HLS stream variable = v3356 depth = 9
#pragma HLS stream variable = v3357 depth = 9
#pragma HLS array_partition variable = v3358 complete dim = 1
#pragma HLS array_partition variable = v3358 complete dim = 2

  float v130;      // L4405
  v130 = 0.000000; // L4406
l_S_k_0_k134:
  for (int k134 = 0; k134 < 768; k134++) { // L4407
    float v3363 = v3354.read();            // v3354[k134];	// L4408
    float a130;                            // L4409
    a130 = v3363;                          // L4410
    float v3365 = v3355.read();            // v3355[k134];	// L4411
    float b130;                            // L4412
    b130 = v3365;                          // L4413
    float v3367 = a130;                    // L4414
    float v3368 = b130;                    // L4415
    float v3369 = v3367 * v3368;           // L4416
    float v3370 = v130;                    // L4417
    float v3371 = v3370 + v3369;           // L4418
    v130 = v3371;                          // L4419
    float v3372 = a130;                    // L4420
    v3356.write(v3372);                    // v3356[k134] = v3372;	// L4421
    float v3373 = b130;                    // L4422
    v3357.write(v3373);                    // v3357[k134] = v3373;	// L4423
  }
  float v3374 = v130;          // L4425
  v3358[v3359][v3360] = v3374; // L4426
}

void PE_kernel_V_3_0(hls::stream<float> &v3375 /* v3375[768] */,
                     hls::stream<float> &v3376 /* v3376[768] */,
                     hls::stream<float> &v3377 /* v3377[768] */,
                     hls::stream<float> &v3378 /* v3378[768] */,
                     float v3379[8][8], int v3380,
                     int v3381) { // L4429
#pragma HLS stream variable = v3375 depth = 9
#pragma HLS stream variable = v3376 depth = 9
#pragma HLS stream variable = v3377 depth = 9
#pragma HLS stream variable = v3378 depth = 9
#pragma HLS array_partition variable = v3379 complete dim = 1
#pragma HLS array_partition variable = v3379 complete dim = 2

  float v131;      // L4432
  v131 = 0.000000; // L4433
l_S_k_0_k135:
  for (int k135 = 0; k135 < 768; k135++) { // L4434
    float v3384 = v3375.read();            // v3375[k135];	// L4435
    float a131;                            // L4436
    a131 = v3384;                          // L4437
    float v3386 = v3376.read();            // v3376[k135];	// L4438
    float b131;                            // L4439
    b131 = v3386;                          // L4440
    float v3388 = a131;                    // L4441
    float v3389 = b131;                    // L4442
    float v3390 = v3388 * v3389;           // L4443
    float v3391 = v131;                    // L4444
    float v3392 = v3391 + v3390;           // L4445
    v131 = v3392;                          // L4446
    float v3393 = a131;                    // L4447
    v3377.write(v3393);                    // v3377[k135] = v3393;	// L4448
    float v3394 = b131;                    // L4449
    v3378.write(v3394);                    // v3378[k135] = v3394;	// L4450
  }
  float v3395 = v131;          // L4452
  v3379[v3380][v3381] = v3395; // L4453
}

void PE_kernel_V_4_0(hls::stream<float> &v3396 /* v3396[768] */,
                     hls::stream<float> &v3397 /* v3397[768] */,
                     hls::stream<float> &v3398 /* v3398[768] */,
                     hls::stream<float> &v3399 /* v3399[768] */,
                     float v3400[8][8], int v3401,
                     int v3402) { // L4456
#pragma HLS stream variable = v3396 depth = 9
#pragma HLS stream variable = v3397 depth = 9
#pragma HLS stream variable = v3398 depth = 9
#pragma HLS stream variable = v3399 depth = 9
#pragma HLS array_partition variable = v3400 complete dim = 1
#pragma HLS array_partition variable = v3400 complete dim = 2

  float v132;      // L4459
  v132 = 0.000000; // L4460
l_S_k_0_k136:
  for (int k136 = 0; k136 < 768; k136++) { // L4461
    float v3405 = v3396.read();            // v3396[k136];	// L4462
    float a132;                            // L4463
    a132 = v3405;                          // L4464
    float v3407 = v3397.read();            // v3397[k136];	// L4465
    float b132;                            // L4466
    b132 = v3407;                          // L4467
    float v3409 = a132;                    // L4468
    float v3410 = b132;                    // L4469
    float v3411 = v3409 * v3410;           // L4470
    float v3412 = v132;                    // L4471
    float v3413 = v3412 + v3411;           // L4472
    v132 = v3413;                          // L4473
    float v3414 = a132;                    // L4474
    v3398.write(v3414);                    // v3398[k136] = v3414;	// L4475
    float v3415 = b132;                    // L4476
    v3399.write(v3415);                    // v3399[k136] = v3415;	// L4477
  }
  float v3416 = v132;          // L4479
  v3400[v3401][v3402] = v3416; // L4480
}

void PE_kernel_V_5_0(hls::stream<float> &v3417 /* v3417[768] */,
                     hls::stream<float> &v3418 /* v3418[768] */,
                     hls::stream<float> &v3419 /* v3419[768] */,
                     hls::stream<float> &v3420 /* v3420[768] */,
                     float v3421[8][8], int v3422,
                     int v3423) { // L4483
#pragma HLS stream variable = v3417 depth = 9
#pragma HLS stream variable = v3418 depth = 9
#pragma HLS stream variable = v3419 depth = 9
#pragma HLS stream variable = v3420 depth = 9
#pragma HLS array_partition variable = v3421 complete dim = 1
#pragma HLS array_partition variable = v3421 complete dim = 2

  float v133;      // L4486
  v133 = 0.000000; // L4487
l_S_k_0_k137:
  for (int k137 = 0; k137 < 768; k137++) { // L4488
    float v3426 = v3417.read();            // v3417[k137];	// L4489
    float a133;                            // L4490
    a133 = v3426;                          // L4491
    float v3428 = v3418.read();            // v3418[k137];	// L4492
    float b133;                            // L4493
    b133 = v3428;                          // L4494
    float v3430 = a133;                    // L4495
    float v3431 = b133;                    // L4496
    float v3432 = v3430 * v3431;           // L4497
    float v3433 = v133;                    // L4498
    float v3434 = v3433 + v3432;           // L4499
    v133 = v3434;                          // L4500
    float v3435 = a133;                    // L4501
    v3419.write(v3435);                    // v3419[k137] = v3435;	// L4502
    float v3436 = b133;                    // L4503
    v3420.write(v3436);                    // v3420[k137] = v3436;	// L4504
  }
  float v3437 = v133;          // L4506
  v3421[v3422][v3423] = v3437; // L4507
}

void PE_kernel_V_6_0(hls::stream<float> &v3438 /* v3438[768] */,
                     hls::stream<float> &v3439 /* v3439[768] */,
                     hls::stream<float> &v3440 /* v3440[768] */,
                     hls::stream<float> &v3441 /* v3441[768] */,
                     float v3442[8][8], int v3443,
                     int v3444) { // L4510
#pragma HLS stream variable = v3438 depth = 9
#pragma HLS stream variable = v3439 depth = 9
#pragma HLS stream variable = v3440 depth = 9
#pragma HLS stream variable = v3441 depth = 9
#pragma HLS array_partition variable = v3442 complete dim = 1
#pragma HLS array_partition variable = v3442 complete dim = 2

  float v134;      // L4513
  v134 = 0.000000; // L4514
l_S_k_0_k138:
  for (int k138 = 0; k138 < 768; k138++) { // L4515
    float v3447 = v3438.read();            // v3438[k138];	// L4516
    float a134;                            // L4517
    a134 = v3447;                          // L4518
    float v3449 = v3439.read();            // v3439[k138];	// L4519
    float b134;                            // L4520
    b134 = v3449;                          // L4521
    float v3451 = a134;                    // L4522
    float v3452 = b134;                    // L4523
    float v3453 = v3451 * v3452;           // L4524
    float v3454 = v134;                    // L4525
    float v3455 = v3454 + v3453;           // L4526
    v134 = v3455;                          // L4527
    float v3456 = a134;                    // L4528
    v3440.write(v3456);                    // v3440[k138] = v3456;	// L4529
    float v3457 = b134;                    // L4530
    v3441.write(v3457);                    // v3441[k138] = v3457;	// L4531
  }
  float v3458 = v134;          // L4533
  v3442[v3443][v3444] = v3458; // L4534
}

void PE_kernel_V_7_0(hls::stream<float> &v3459 /* v3459[768] */,
                     hls::stream<float> &v3460 /* v3460[768] */,
                     hls::stream<float> &v3461 /* v3461[768] */,
                     hls::stream<float> &v3462 /* v3462[768] */,
                     float v3463[8][8], int v3464,
                     int v3465) { // L4537
#pragma HLS stream variable = v3459 depth = 9
#pragma HLS stream variable = v3460 depth = 9
#pragma HLS stream variable = v3461 depth = 9
#pragma HLS stream variable = v3462 depth = 9
#pragma HLS array_partition variable = v3463 complete dim = 1
#pragma HLS array_partition variable = v3463 complete dim = 2

  float v135;      // L4540
  v135 = 0.000000; // L4541
l_S_k_0_k139:
  for (int k139 = 0; k139 < 768; k139++) { // L4542
    float v3468 = v3459.read();            // v3459[k139];	// L4543
    float a135;                            // L4544
    a135 = v3468;                          // L4545
    float v3470 = v3460.read();            // v3460[k139];	// L4546
    float b135;                            // L4547
    b135 = v3470;                          // L4548
    float v3472 = a135;                    // L4549
    float v3473 = b135;                    // L4550
    float v3474 = v3472 * v3473;           // L4551
    float v3475 = v135;                    // L4552
    float v3476 = v3475 + v3474;           // L4553
    v135 = v3476;                          // L4554
    float v3477 = a135;                    // L4555
    v3461.write(v3477);                    // v3461[k139] = v3477;	// L4556
    float v3478 = b135;                    // L4557
    v3462.write(v3478);                    // v3462[k139] = v3478;	// L4558
  }
  float v3479 = v135;          // L4560
  v3463[v3464][v3465] = v3479; // L4561
}

void PE_kernel_V_0_1(hls::stream<float> &v3480 /* v3480[768] */,
                     hls::stream<float> &v3481 /* v3481[768] */,
                     hls::stream<float> &v3482 /* v3482[768] */,
                     hls::stream<float> &v3483 /* v3483[768] */,
                     float v3484[8][8], int v3485,
                     int v3486) { // L4564
#pragma HLS stream variable = v3480 depth = 9
#pragma HLS stream variable = v3481 depth = 9
#pragma HLS stream variable = v3482 depth = 9
#pragma HLS stream variable = v3483 depth = 9
#pragma HLS array_partition variable = v3484 complete dim = 1
#pragma HLS array_partition variable = v3484 complete dim = 2

  float v136;      // L4567
  v136 = 0.000000; // L4568
l_S_k_0_k140:
  for (int k140 = 0; k140 < 768; k140++) { // L4569
    float v3489 = v3480.read();            // v3480[k140];	// L4570
    float a136;                            // L4571
    a136 = v3489;                          // L4572
    float v3491 = v3481.read();            // v3481[k140];	// L4573
    float b136;                            // L4574
    b136 = v3491;                          // L4575
    float v3493 = a136;                    // L4576
    float v3494 = b136;                    // L4577
    float v3495 = v3493 * v3494;           // L4578
    float v3496 = v136;                    // L4579
    float v3497 = v3496 + v3495;           // L4580
    v136 = v3497;                          // L4581
    float v3498 = a136;                    // L4582
    v3482.write(v3498);                    // v3482[k140] = v3498;	// L4583
    float v3499 = b136;                    // L4584
    v3483.write(v3499);                    // v3483[k140] = v3499;	// L4585
  }
  float v3500 = v136;          // L4587
  v3484[v3485][v3486] = v3500; // L4588
}

void PE_kernel_V_1_1(hls::stream<float> &v3501 /* v3501[768] */,
                     hls::stream<float> &v3502 /* v3502[768] */,
                     hls::stream<float> &v3503 /* v3503[768] */,
                     hls::stream<float> &v3504 /* v3504[768] */,
                     float v3505[8][8], int v3506,
                     int v3507) { // L4591
#pragma HLS stream variable = v3501 depth = 9
#pragma HLS stream variable = v3502 depth = 9
#pragma HLS stream variable = v3503 depth = 9
#pragma HLS stream variable = v3504 depth = 9
#pragma HLS array_partition variable = v3505 complete dim = 1
#pragma HLS array_partition variable = v3505 complete dim = 2

  float v137;      // L4594
  v137 = 0.000000; // L4595
l_S_k_0_k141:
  for (int k141 = 0; k141 < 768; k141++) { // L4596
    float v3510 = v3501.read();            // v3501[k141];	// L4597
    float a137;                            // L4598
    a137 = v3510;                          // L4599
    float v3512 = v3502.read();            // v3502[k141];	// L4600
    float b137;                            // L4601
    b137 = v3512;                          // L4602
    float v3514 = a137;                    // L4603
    float v3515 = b137;                    // L4604
    float v3516 = v3514 * v3515;           // L4605
    float v3517 = v137;                    // L4606
    float v3518 = v3517 + v3516;           // L4607
    v137 = v3518;                          // L4608
    float v3519 = a137;                    // L4609
    v3503.write(v3519);                    // v3503[k141] = v3519;	// L4610
    float v3520 = b137;                    // L4611
    v3504.write(v3520);                    // v3504[k141] = v3520;	// L4612
  }
  float v3521 = v137;          // L4614
  v3505[v3506][v3507] = v3521; // L4615
}

void PE_kernel_V_2_1(hls::stream<float> &v3522 /* v3522[768] */,
                     hls::stream<float> &v3523 /* v3523[768] */,
                     hls::stream<float> &v3524 /* v3524[768] */,
                     hls::stream<float> &v3525 /* v3525[768] */,
                     float v3526[8][8], int v3527,
                     int v3528) { // L4618
#pragma HLS stream variable = v3522 depth = 9
#pragma HLS stream variable = v3523 depth = 9
#pragma HLS stream variable = v3524 depth = 9
#pragma HLS stream variable = v3525 depth = 9
#pragma HLS array_partition variable = v3526 complete dim = 1
#pragma HLS array_partition variable = v3526 complete dim = 2

  float v138;      // L4621
  v138 = 0.000000; // L4622
l_S_k_0_k142:
  for (int k142 = 0; k142 < 768; k142++) { // L4623
    float v3531 = v3522.read();            // v3522[k142];	// L4624
    float a138;                            // L4625
    a138 = v3531;                          // L4626
    float v3533 = v3523.read();            // v3523[k142];	// L4627
    float b138;                            // L4628
    b138 = v3533;                          // L4629
    float v3535 = a138;                    // L4630
    float v3536 = b138;                    // L4631
    float v3537 = v3535 * v3536;           // L4632
    float v3538 = v138;                    // L4633
    float v3539 = v3538 + v3537;           // L4634
    v138 = v3539;                          // L4635
    float v3540 = a138;                    // L4636
    v3524.write(v3540);                    // v3524[k142] = v3540;	// L4637
    float v3541 = b138;                    // L4638
    v3525.write(v3541);                    // v3525[k142] = v3541;	// L4639
  }
  float v3542 = v138;          // L4641
  v3526[v3527][v3528] = v3542; // L4642
}

void PE_kernel_V_3_1(hls::stream<float> &v3543 /* v3543[768] */,
                     hls::stream<float> &v3544 /* v3544[768] */,
                     hls::stream<float> &v3545 /* v3545[768] */,
                     hls::stream<float> &v3546 /* v3546[768] */,
                     float v3547[8][8], int v3548,
                     int v3549) { // L4645
#pragma HLS stream variable = v3543 depth = 9
#pragma HLS stream variable = v3544 depth = 9
#pragma HLS stream variable = v3545 depth = 9
#pragma HLS stream variable = v3546 depth = 9
#pragma HLS array_partition variable = v3547 complete dim = 1
#pragma HLS array_partition variable = v3547 complete dim = 2

  float v139;      // L4648
  v139 = 0.000000; // L4649
l_S_k_0_k143:
  for (int k143 = 0; k143 < 768; k143++) { // L4650
    float v3552 = v3543.read();            // v3543[k143];	// L4651
    float a139;                            // L4652
    a139 = v3552;                          // L4653
    float v3554 = v3544.read();            // v3544[k143];	// L4654
    float b139;                            // L4655
    b139 = v3554;                          // L4656
    float v3556 = a139;                    // L4657
    float v3557 = b139;                    // L4658
    float v3558 = v3556 * v3557;           // L4659
    float v3559 = v139;                    // L4660
    float v3560 = v3559 + v3558;           // L4661
    v139 = v3560;                          // L4662
    float v3561 = a139;                    // L4663
    v3545.write(v3561);                    // v3545[k143] = v3561;	// L4664
    float v3562 = b139;                    // L4665
    v3546.write(v3562);                    // v3546[k143] = v3562;	// L4666
  }
  float v3563 = v139;          // L4668
  v3547[v3548][v3549] = v3563; // L4669
}

void PE_kernel_V_4_1(hls::stream<float> &v3564 /* v3564[768] */,
                     hls::stream<float> &v3565 /* v3565[768] */,
                     hls::stream<float> &v3566 /* v3566[768] */,
                     hls::stream<float> &v3567 /* v3567[768] */,
                     float v3568[8][8], int v3569,
                     int v3570) { // L4672
#pragma HLS stream variable = v3564 depth = 9
#pragma HLS stream variable = v3565 depth = 9
#pragma HLS stream variable = v3566 depth = 9
#pragma HLS stream variable = v3567 depth = 9
#pragma HLS array_partition variable = v3568 complete dim = 1
#pragma HLS array_partition variable = v3568 complete dim = 2

  float v140;      // L4675
  v140 = 0.000000; // L4676
l_S_k_0_k144:
  for (int k144 = 0; k144 < 768; k144++) { // L4677
    float v3573 = v3564.read();            // v3564[k144];	// L4678
    float a140;                            // L4679
    a140 = v3573;                          // L4680
    float v3575 = v3565.read();            // v3565[k144];	// L4681
    float b140;                            // L4682
    b140 = v3575;                          // L4683
    float v3577 = a140;                    // L4684
    float v3578 = b140;                    // L4685
    float v3579 = v3577 * v3578;           // L4686
    float v3580 = v140;                    // L4687
    float v3581 = v3580 + v3579;           // L4688
    v140 = v3581;                          // L4689
    float v3582 = a140;                    // L4690
    v3566.write(v3582);                    // v3566[k144] = v3582;	// L4691
    float v3583 = b140;                    // L4692
    v3567.write(v3583);                    // v3567[k144] = v3583;	// L4693
  }
  float v3584 = v140;          // L4695
  v3568[v3569][v3570] = v3584; // L4696
}

void PE_kernel_V_5_1(hls::stream<float> &v3585 /* v3585[768] */,
                     hls::stream<float> &v3586 /* v3586[768] */,
                     hls::stream<float> &v3587 /* v3587[768] */,
                     hls::stream<float> &v3588 /* v3588[768] */,
                     float v3589[8][8], int v3590,
                     int v3591) { // L4699
#pragma HLS stream variable = v3585 depth = 9
#pragma HLS stream variable = v3586 depth = 9
#pragma HLS stream variable = v3587 depth = 9
#pragma HLS stream variable = v3588 depth = 9
#pragma HLS array_partition variable = v3589 complete dim = 1
#pragma HLS array_partition variable = v3589 complete dim = 2

  float v141;      // L4702
  v141 = 0.000000; // L4703
l_S_k_0_k145:
  for (int k145 = 0; k145 < 768; k145++) { // L4704
    float v3594 = v3585.read();            // v3585[k145];	// L4705
    float a141;                            // L4706
    a141 = v3594;                          // L4707
    float v3596 = v3586.read();            // v3586[k145];	// L4708
    float b141;                            // L4709
    b141 = v3596;                          // L4710
    float v3598 = a141;                    // L4711
    float v3599 = b141;                    // L4712
    float v3600 = v3598 * v3599;           // L4713
    float v3601 = v141;                    // L4714
    float v3602 = v3601 + v3600;           // L4715
    v141 = v3602;                          // L4716
    float v3603 = a141;                    // L4717
    v3587.write(v3603);                    // v3587[k145] = v3603;	// L4718
    float v3604 = b141;                    // L4719
    v3588.write(v3604);                    // v3588[k145] = v3604;	// L4720
  }
  float v3605 = v141;          // L4722
  v3589[v3590][v3591] = v3605; // L4723
}

void PE_kernel_V_6_1(hls::stream<float> &v3606 /* v3606[768] */,
                     hls::stream<float> &v3607 /* v3607[768] */,
                     hls::stream<float> &v3608 /* v3608[768] */,
                     hls::stream<float> &v3609 /* v3609[768] */,
                     float v3610[8][8], int v3611,
                     int v3612) { // L4726
#pragma HLS stream variable = v3606 depth = 9
#pragma HLS stream variable = v3607 depth = 9
#pragma HLS stream variable = v3608 depth = 9
#pragma HLS stream variable = v3609 depth = 9
#pragma HLS array_partition variable = v3610 complete dim = 1
#pragma HLS array_partition variable = v3610 complete dim = 2

  float v142;      // L4729
  v142 = 0.000000; // L4730
l_S_k_0_k146:
  for (int k146 = 0; k146 < 768; k146++) { // L4731
    float v3615 = v3606.read();            // v3606[k146];	// L4732
    float a142;                            // L4733
    a142 = v3615;                          // L4734
    float v3617 = v3607.read();            // v3607[k146];	// L4735
    float b142;                            // L4736
    b142 = v3617;                          // L4737
    float v3619 = a142;                    // L4738
    float v3620 = b142;                    // L4739
    float v3621 = v3619 * v3620;           // L4740
    float v3622 = v142;                    // L4741
    float v3623 = v3622 + v3621;           // L4742
    v142 = v3623;                          // L4743
    float v3624 = a142;                    // L4744
    v3608.write(v3624);                    // v3608[k146] = v3624;	// L4745
    float v3625 = b142;                    // L4746
    v3609.write(v3625);                    // v3609[k146] = v3625;	// L4747
  }
  float v3626 = v142;          // L4749
  v3610[v3611][v3612] = v3626; // L4750
}

void PE_kernel_V_7_1(hls::stream<float> &v3627 /* v3627[768] */,
                     hls::stream<float> &v3628 /* v3628[768] */,
                     hls::stream<float> &v3629 /* v3629[768] */,
                     hls::stream<float> &v3630 /* v3630[768] */,
                     float v3631[8][8], int v3632,
                     int v3633) { // L4753
#pragma HLS stream variable = v3627 depth = 9
#pragma HLS stream variable = v3628 depth = 9
#pragma HLS stream variable = v3629 depth = 9
#pragma HLS stream variable = v3630 depth = 9
#pragma HLS array_partition variable = v3631 complete dim = 1
#pragma HLS array_partition variable = v3631 complete dim = 2

  float v143;      // L4756
  v143 = 0.000000; // L4757
l_S_k_0_k147:
  for (int k147 = 0; k147 < 768; k147++) { // L4758
    float v3636 = v3627.read();            // v3627[k147];	// L4759
    float a143;                            // L4760
    a143 = v3636;                          // L4761
    float v3638 = v3628.read();            // v3628[k147];	// L4762
    float b143;                            // L4763
    b143 = v3638;                          // L4764
    float v3640 = a143;                    // L4765
    float v3641 = b143;                    // L4766
    float v3642 = v3640 * v3641;           // L4767
    float v3643 = v143;                    // L4768
    float v3644 = v3643 + v3642;           // L4769
    v143 = v3644;                          // L4770
    float v3645 = a143;                    // L4771
    v3629.write(v3645);                    // v3629[k147] = v3645;	// L4772
    float v3646 = b143;                    // L4773
    v3630.write(v3646);                    // v3630[k147] = v3646;	// L4774
  }
  float v3647 = v143;          // L4776
  v3631[v3632][v3633] = v3647; // L4777
}

void PE_kernel_V_0_2(hls::stream<float> &v3648 /* v3648[768] */,
                     hls::stream<float> &v3649 /* v3649[768] */,
                     hls::stream<float> &v3650 /* v3650[768] */,
                     hls::stream<float> &v3651 /* v3651[768] */,
                     float v3652[8][8], int v3653,
                     int v3654) { // L4780
#pragma HLS stream variable = v3648 depth = 9
#pragma HLS stream variable = v3649 depth = 9
#pragma HLS stream variable = v3650 depth = 9
#pragma HLS stream variable = v3651 depth = 9
#pragma HLS array_partition variable = v3652 complete dim = 1
#pragma HLS array_partition variable = v3652 complete dim = 2

  float v144;      // L4783
  v144 = 0.000000; // L4784
l_S_k_0_k148:
  for (int k148 = 0; k148 < 768; k148++) { // L4785
    float v3657 = v3648.read();            // v3648[k148];	// L4786
    float a144;                            // L4787
    a144 = v3657;                          // L4788
    float v3659 = v3649.read();            // v3649[k148];	// L4789
    float b144;                            // L4790
    b144 = v3659;                          // L4791
    float v3661 = a144;                    // L4792
    float v3662 = b144;                    // L4793
    float v3663 = v3661 * v3662;           // L4794
    float v3664 = v144;                    // L4795
    float v3665 = v3664 + v3663;           // L4796
    v144 = v3665;                          // L4797
    float v3666 = a144;                    // L4798
    v3650.write(v3666);                    // v3650[k148] = v3666;	// L4799
    float v3667 = b144;                    // L4800
    v3651.write(v3667);                    // v3651[k148] = v3667;	// L4801
  }
  float v3668 = v144;          // L4803
  v3652[v3653][v3654] = v3668; // L4804
}

void PE_kernel_V_1_2(hls::stream<float> &v3669 /* v3669[768] */,
                     hls::stream<float> &v3670 /* v3670[768] */,
                     hls::stream<float> &v3671 /* v3671[768] */,
                     hls::stream<float> &v3672 /* v3672[768] */,
                     float v3673[8][8], int v3674,
                     int v3675) { // L4807
#pragma HLS stream variable = v3669 depth = 9
#pragma HLS stream variable = v3670 depth = 9
#pragma HLS stream variable = v3671 depth = 9
#pragma HLS stream variable = v3672 depth = 9
#pragma HLS array_partition variable = v3673 complete dim = 1
#pragma HLS array_partition variable = v3673 complete dim = 2

  float v145;      // L4810
  v145 = 0.000000; // L4811
l_S_k_0_k149:
  for (int k149 = 0; k149 < 768; k149++) { // L4812
    float v3678 = v3669.read();            // v3669[k149];	// L4813
    float a145;                            // L4814
    a145 = v3678;                          // L4815
    float v3680 = v3670.read();            // v3670[k149];	// L4816
    float b145;                            // L4817
    b145 = v3680;                          // L4818
    float v3682 = a145;                    // L4819
    float v3683 = b145;                    // L4820
    float v3684 = v3682 * v3683;           // L4821
    float v3685 = v145;                    // L4822
    float v3686 = v3685 + v3684;           // L4823
    v145 = v3686;                          // L4824
    float v3687 = a145;                    // L4825
    v3671.write(v3687);                    // v3671[k149] = v3687;	// L4826
    float v3688 = b145;                    // L4827
    v3672.write(v3688);                    // v3672[k149] = v3688;	// L4828
  }
  float v3689 = v145;          // L4830
  v3673[v3674][v3675] = v3689; // L4831
}

void PE_kernel_V_2_2(hls::stream<float> &v3690 /* v3690[768] */,
                     hls::stream<float> &v3691 /* v3691[768] */,
                     hls::stream<float> &v3692 /* v3692[768] */,
                     hls::stream<float> &v3693 /* v3693[768] */,
                     float v3694[8][8], int v3695,
                     int v3696) { // L4834
#pragma HLS stream variable = v3690 depth = 9
#pragma HLS stream variable = v3691 depth = 9
#pragma HLS stream variable = v3692 depth = 9
#pragma HLS stream variable = v3693 depth = 9
#pragma HLS array_partition variable = v3694 complete dim = 1
#pragma HLS array_partition variable = v3694 complete dim = 2

  float v146;      // L4837
  v146 = 0.000000; // L4838
l_S_k_0_k150:
  for (int k150 = 0; k150 < 768; k150++) { // L4839
    float v3699 = v3690.read();            // v3690[k150];	// L4840
    float a146;                            // L4841
    a146 = v3699;                          // L4842
    float v3701 = v3691.read();            // v3691[k150];	// L4843
    float b146;                            // L4844
    b146 = v3701;                          // L4845
    float v3703 = a146;                    // L4846
    float v3704 = b146;                    // L4847
    float v3705 = v3703 * v3704;           // L4848
    float v3706 = v146;                    // L4849
    float v3707 = v3706 + v3705;           // L4850
    v146 = v3707;                          // L4851
    float v3708 = a146;                    // L4852
    v3692.write(v3708);                    // v3692[k150] = v3708;	// L4853
    float v3709 = b146;                    // L4854
    v3693.write(v3709);                    // v3693[k150] = v3709;	// L4855
  }
  float v3710 = v146;          // L4857
  v3694[v3695][v3696] = v3710; // L4858
}

void PE_kernel_V_3_2(hls::stream<float> &v3711 /* v3711[768] */,
                     hls::stream<float> &v3712 /* v3712[768] */,
                     hls::stream<float> &v3713 /* v3713[768] */,
                     hls::stream<float> &v3714 /* v3714[768] */,
                     float v3715[8][8], int v3716,
                     int v3717) { // L4861
#pragma HLS stream variable = v3711 depth = 9
#pragma HLS stream variable = v3712 depth = 9
#pragma HLS stream variable = v3713 depth = 9
#pragma HLS stream variable = v3714 depth = 9
#pragma HLS array_partition variable = v3715 complete dim = 1
#pragma HLS array_partition variable = v3715 complete dim = 2

  float v147;      // L4864
  v147 = 0.000000; // L4865
l_S_k_0_k151:
  for (int k151 = 0; k151 < 768; k151++) { // L4866
    float v3720 = v3711.read();            // v3711[k151];	// L4867
    float a147;                            // L4868
    a147 = v3720;                          // L4869
    float v3722 = v3712.read();            // v3712[k151];	// L4870
    float b147;                            // L4871
    b147 = v3722;                          // L4872
    float v3724 = a147;                    // L4873
    float v3725 = b147;                    // L4874
    float v3726 = v3724 * v3725;           // L4875
    float v3727 = v147;                    // L4876
    float v3728 = v3727 + v3726;           // L4877
    v147 = v3728;                          // L4878
    float v3729 = a147;                    // L4879
    v3713.write(v3729);                    // v3713[k151] = v3729;	// L4880
    float v3730 = b147;                    // L4881
    v3714.write(v3730);                    // v3714[k151] = v3730;	// L4882
  }
  float v3731 = v147;          // L4884
  v3715[v3716][v3717] = v3731; // L4885
}

void PE_kernel_V_4_2(hls::stream<float> &v3732 /* v3732[768] */,
                     hls::stream<float> &v3733 /* v3733[768] */,
                     hls::stream<float> &v3734 /* v3734[768] */,
                     hls::stream<float> &v3735 /* v3735[768] */,
                     float v3736[8][8], int v3737,
                     int v3738) { // L4888
#pragma HLS stream variable = v3732 depth = 9
#pragma HLS stream variable = v3733 depth = 9
#pragma HLS stream variable = v3734 depth = 9
#pragma HLS stream variable = v3735 depth = 9
#pragma HLS array_partition variable = v3736 complete dim = 1
#pragma HLS array_partition variable = v3736 complete dim = 2

  float v148;      // L4891
  v148 = 0.000000; // L4892
l_S_k_0_k152:
  for (int k152 = 0; k152 < 768; k152++) { // L4893
    float v3741 = v3732.read();            // v3732[k152];	// L4894
    float a148;                            // L4895
    a148 = v3741;                          // L4896
    float v3743 = v3733.read();            // v3733[k152];	// L4897
    float b148;                            // L4898
    b148 = v3743;                          // L4899
    float v3745 = a148;                    // L4900
    float v3746 = b148;                    // L4901
    float v3747 = v3745 * v3746;           // L4902
    float v3748 = v148;                    // L4903
    float v3749 = v3748 + v3747;           // L4904
    v148 = v3749;                          // L4905
    float v3750 = a148;                    // L4906
    v3734.write(v3750);                    // v3734[k152] = v3750;	// L4907
    float v3751 = b148;                    // L4908
    v3735.write(v3751);                    // v3735[k152] = v3751;	// L4909
  }
  float v3752 = v148;          // L4911
  v3736[v3737][v3738] = v3752; // L4912
}

void PE_kernel_V_5_2(hls::stream<float> &v3753 /* v3753[768] */,
                     hls::stream<float> &v3754 /* v3754[768] */,
                     hls::stream<float> &v3755 /* v3755[768] */,
                     hls::stream<float> &v3756 /* v3756[768] */,
                     float v3757[8][8], int v3758,
                     int v3759) { // L4915
#pragma HLS stream variable = v3753 depth = 9
#pragma HLS stream variable = v3754 depth = 9
#pragma HLS stream variable = v3755 depth = 9
#pragma HLS stream variable = v3756 depth = 9
#pragma HLS array_partition variable = v3757 complete dim = 1
#pragma HLS array_partition variable = v3757 complete dim = 2

  float v149;      // L4918
  v149 = 0.000000; // L4919
l_S_k_0_k153:
  for (int k153 = 0; k153 < 768; k153++) { // L4920
    float v3762 = v3753.read();            // v3753[k153];	// L4921
    float a149;                            // L4922
    a149 = v3762;                          // L4923
    float v3764 = v3754.read();            // v3754[k153];	// L4924
    float b149;                            // L4925
    b149 = v3764;                          // L4926
    float v3766 = a149;                    // L4927
    float v3767 = b149;                    // L4928
    float v3768 = v3766 * v3767;           // L4929
    float v3769 = v149;                    // L4930
    float v3770 = v3769 + v3768;           // L4931
    v149 = v3770;                          // L4932
    float v3771 = a149;                    // L4933
    v3755.write(v3771);                    // v3755[k153] = v3771;	// L4934
    float v3772 = b149;                    // L4935
    v3756.write(v3772);                    // v3756[k153] = v3772;	// L4936
  }
  float v3773 = v149;          // L4938
  v3757[v3758][v3759] = v3773; // L4939
}

void PE_kernel_V_6_2(hls::stream<float> &v3774 /* v3774[768] */,
                     hls::stream<float> &v3775 /* v3775[768] */,
                     hls::stream<float> &v3776 /* v3776[768] */,
                     hls::stream<float> &v3777 /* v3777[768] */,
                     float v3778[8][8], int v3779,
                     int v3780) { // L4942
#pragma HLS stream variable = v3774 depth = 9
#pragma HLS stream variable = v3775 depth = 9
#pragma HLS stream variable = v3776 depth = 9
#pragma HLS stream variable = v3777 depth = 9
#pragma HLS array_partition variable = v3778 complete dim = 1
#pragma HLS array_partition variable = v3778 complete dim = 2

  float v150;      // L4945
  v150 = 0.000000; // L4946
l_S_k_0_k154:
  for (int k154 = 0; k154 < 768; k154++) { // L4947
    float v3783 = v3774.read();            // v3774[k154];	// L4948
    float a150;                            // L4949
    a150 = v3783;                          // L4950
    float v3785 = v3775.read();            // v3775[k154];	// L4951
    float b150;                            // L4952
    b150 = v3785;                          // L4953
    float v3787 = a150;                    // L4954
    float v3788 = b150;                    // L4955
    float v3789 = v3787 * v3788;           // L4956
    float v3790 = v150;                    // L4957
    float v3791 = v3790 + v3789;           // L4958
    v150 = v3791;                          // L4959
    float v3792 = a150;                    // L4960
    v3776.write(v3792);                    // v3776[k154] = v3792;	// L4961
    float v3793 = b150;                    // L4962
    v3777.write(v3793);                    // v3777[k154] = v3793;	// L4963
  }
  float v3794 = v150;          // L4965
  v3778[v3779][v3780] = v3794; // L4966
}

void PE_kernel_V_7_2(hls::stream<float> &v3795 /* v3795[768] */,
                     hls::stream<float> &v3796 /* v3796[768] */,
                     hls::stream<float> &v3797 /* v3797[768] */,
                     hls::stream<float> &v3798 /* v3798[768] */,
                     float v3799[8][8], int v3800,
                     int v3801) { // L4969
#pragma HLS stream variable = v3795 depth = 9
#pragma HLS stream variable = v3796 depth = 9
#pragma HLS stream variable = v3797 depth = 9
#pragma HLS stream variable = v3798 depth = 9
#pragma HLS array_partition variable = v3799 complete dim = 1
#pragma HLS array_partition variable = v3799 complete dim = 2

  float v151;      // L4972
  v151 = 0.000000; // L4973
l_S_k_0_k155:
  for (int k155 = 0; k155 < 768; k155++) { // L4974
    float v3804 = v3795.read();            // v3795[k155];	// L4975
    float a151;                            // L4976
    a151 = v3804;                          // L4977
    float v3806 = v3796.read();            // v3796[k155];	// L4978
    float b151;                            // L4979
    b151 = v3806;                          // L4980
    float v3808 = a151;                    // L4981
    float v3809 = b151;                    // L4982
    float v3810 = v3808 * v3809;           // L4983
    float v3811 = v151;                    // L4984
    float v3812 = v3811 + v3810;           // L4985
    v151 = v3812;                          // L4986
    float v3813 = a151;                    // L4987
    v3797.write(v3813);                    // v3797[k155] = v3813;	// L4988
    float v3814 = b151;                    // L4989
    v3798.write(v3814);                    // v3798[k155] = v3814;	// L4990
  }
  float v3815 = v151;          // L4992
  v3799[v3800][v3801] = v3815; // L4993
}

void PE_kernel_V_0_3(hls::stream<float> &v3816 /* v3816[768] */,
                     hls::stream<float> &v3817 /* v3817[768] */,
                     hls::stream<float> &v3818 /* v3818[768] */,
                     hls::stream<float> &v3819 /* v3819[768] */,
                     float v3820[8][8], int v3821,
                     int v3822) { // L4996
#pragma HLS stream variable = v3816 depth = 9
#pragma HLS stream variable = v3817 depth = 9
#pragma HLS stream variable = v3818 depth = 9
#pragma HLS stream variable = v3819 depth = 9
#pragma HLS array_partition variable = v3820 complete dim = 1
#pragma HLS array_partition variable = v3820 complete dim = 2

  float v152;      // L4999
  v152 = 0.000000; // L5000
l_S_k_0_k156:
  for (int k156 = 0; k156 < 768; k156++) { // L5001
    float v3825 = v3816.read();            // v3816[k156];	// L5002
    float a152;                            // L5003
    a152 = v3825;                          // L5004
    float v3827 = v3817.read();            // v3817[k156];	// L5005
    float b152;                            // L5006
    b152 = v3827;                          // L5007
    float v3829 = a152;                    // L5008
    float v3830 = b152;                    // L5009
    float v3831 = v3829 * v3830;           // L5010
    float v3832 = v152;                    // L5011
    float v3833 = v3832 + v3831;           // L5012
    v152 = v3833;                          // L5013
    float v3834 = a152;                    // L5014
    v3818.write(v3834);                    // v3818[k156] = v3834;	// L5015
    float v3835 = b152;                    // L5016
    v3819.write(v3835);                    // v3819[k156] = v3835;	// L5017
  }
  float v3836 = v152;          // L5019
  v3820[v3821][v3822] = v3836; // L5020
}

void PE_kernel_V_1_3(hls::stream<float> &v3837 /* v3837[768] */,
                     hls::stream<float> &v3838 /* v3838[768] */,
                     hls::stream<float> &v3839 /* v3839[768] */,
                     hls::stream<float> &v3840 /* v3840[768] */,
                     float v3841[8][8], int v3842,
                     int v3843) { // L5023
#pragma HLS stream variable = v3837 depth = 9
#pragma HLS stream variable = v3838 depth = 9
#pragma HLS stream variable = v3839 depth = 9
#pragma HLS stream variable = v3840 depth = 9
#pragma HLS array_partition variable = v3841 complete dim = 1
#pragma HLS array_partition variable = v3841 complete dim = 2

  float v153;      // L5026
  v153 = 0.000000; // L5027
l_S_k_0_k157:
  for (int k157 = 0; k157 < 768; k157++) { // L5028
    float v3846 = v3837.read();            // v3837[k157];	// L5029
    float a153;                            // L5030
    a153 = v3846;                          // L5031
    float v3848 = v3838.read();            // v3838[k157];	// L5032
    float b153;                            // L5033
    b153 = v3848;                          // L5034
    float v3850 = a153;                    // L5035
    float v3851 = b153;                    // L5036
    float v3852 = v3850 * v3851;           // L5037
    float v3853 = v153;                    // L5038
    float v3854 = v3853 + v3852;           // L5039
    v153 = v3854;                          // L5040
    float v3855 = a153;                    // L5041
    v3839.write(v3855);                    // v3839[k157] = v3855;	// L5042
    float v3856 = b153;                    // L5043
    v3840.write(v3856);                    // v3840[k157] = v3856;	// L5044
  }
  float v3857 = v153;          // L5046
  v3841[v3842][v3843] = v3857; // L5047
}

void PE_kernel_V_2_3(hls::stream<float> &v3858 /* v3858[768] */,
                     hls::stream<float> &v3859 /* v3859[768] */,
                     hls::stream<float> &v3860 /* v3860[768] */,
                     hls::stream<float> &v3861 /* v3861[768] */,
                     float v3862[8][8], int v3863,
                     int v3864) { // L5050
#pragma HLS stream variable = v3858 depth = 9
#pragma HLS stream variable = v3859 depth = 9
#pragma HLS stream variable = v3860 depth = 9
#pragma HLS stream variable = v3861 depth = 9
#pragma HLS array_partition variable = v3862 complete dim = 1
#pragma HLS array_partition variable = v3862 complete dim = 2

  float v154;      // L5053
  v154 = 0.000000; // L5054
l_S_k_0_k158:
  for (int k158 = 0; k158 < 768; k158++) { // L5055
    float v3867 = v3858.read();            // v3858[k158];	// L5056
    float a154;                            // L5057
    a154 = v3867;                          // L5058
    float v3869 = v3859.read();            // v3859[k158];	// L5059
    float b154;                            // L5060
    b154 = v3869;                          // L5061
    float v3871 = a154;                    // L5062
    float v3872 = b154;                    // L5063
    float v3873 = v3871 * v3872;           // L5064
    float v3874 = v154;                    // L5065
    float v3875 = v3874 + v3873;           // L5066
    v154 = v3875;                          // L5067
    float v3876 = a154;                    // L5068
    v3860.write(v3876);                    // v3860[k158] = v3876;	// L5069
    float v3877 = b154;                    // L5070
    v3861.write(v3877);                    // v3861[k158] = v3877;	// L5071
  }
  float v3878 = v154;          // L5073
  v3862[v3863][v3864] = v3878; // L5074
}

void PE_kernel_V_3_3(hls::stream<float> &v3879 /* v3879[768] */,
                     hls::stream<float> &v3880 /* v3880[768] */,
                     hls::stream<float> &v3881 /* v3881[768] */,
                     hls::stream<float> &v3882 /* v3882[768] */,
                     float v3883[8][8], int v3884,
                     int v3885) { // L5077
#pragma HLS stream variable = v3879 depth = 9
#pragma HLS stream variable = v3880 depth = 9
#pragma HLS stream variable = v3881 depth = 9
#pragma HLS stream variable = v3882 depth = 9
#pragma HLS array_partition variable = v3883 complete dim = 1
#pragma HLS array_partition variable = v3883 complete dim = 2

  float v155;      // L5080
  v155 = 0.000000; // L5081
l_S_k_0_k159:
  for (int k159 = 0; k159 < 768; k159++) { // L5082
    float v3888 = v3879.read();            // v3879[k159];	// L5083
    float a155;                            // L5084
    a155 = v3888;                          // L5085
    float v3890 = v3880.read();            // v3880[k159];	// L5086
    float b155;                            // L5087
    b155 = v3890;                          // L5088
    float v3892 = a155;                    // L5089
    float v3893 = b155;                    // L5090
    float v3894 = v3892 * v3893;           // L5091
    float v3895 = v155;                    // L5092
    float v3896 = v3895 + v3894;           // L5093
    v155 = v3896;                          // L5094
    float v3897 = a155;                    // L5095
    v3881.write(v3897);                    // v3881[k159] = v3897;	// L5096
    float v3898 = b155;                    // L5097
    v3882.write(v3898);                    // v3882[k159] = v3898;	// L5098
  }
  float v3899 = v155;          // L5100
  v3883[v3884][v3885] = v3899; // L5101
}

void PE_kernel_V_4_3(hls::stream<float> &v3900 /* v3900[768] */,
                     hls::stream<float> &v3901 /* v3901[768] */,
                     hls::stream<float> &v3902 /* v3902[768] */,
                     hls::stream<float> &v3903 /* v3903[768] */,
                     float v3904[8][8], int v3905,
                     int v3906) { // L5104
#pragma HLS stream variable = v3900 depth = 9
#pragma HLS stream variable = v3901 depth = 9
#pragma HLS stream variable = v3902 depth = 9
#pragma HLS stream variable = v3903 depth = 9
#pragma HLS array_partition variable = v3904 complete dim = 1
#pragma HLS array_partition variable = v3904 complete dim = 2

  float v156;      // L5107
  v156 = 0.000000; // L5108
l_S_k_0_k160:
  for (int k160 = 0; k160 < 768; k160++) { // L5109
    float v3909 = v3900.read();            // v3900[k160];	// L5110
    float a156;                            // L5111
    a156 = v3909;                          // L5112
    float v3911 = v3901.read();            // v3901[k160];	// L5113
    float b156;                            // L5114
    b156 = v3911;                          // L5115
    float v3913 = a156;                    // L5116
    float v3914 = b156;                    // L5117
    float v3915 = v3913 * v3914;           // L5118
    float v3916 = v156;                    // L5119
    float v3917 = v3916 + v3915;           // L5120
    v156 = v3917;                          // L5121
    float v3918 = a156;                    // L5122
    v3902.write(v3918);                    // v3902[k160] = v3918;	// L5123
    float v3919 = b156;                    // L5124
    v3903.write(v3919);                    // v3903[k160] = v3919;	// L5125
  }
  float v3920 = v156;          // L5127
  v3904[v3905][v3906] = v3920; // L5128
}

void PE_kernel_V_5_3(hls::stream<float> &v3921 /* v3921[768] */,
                     hls::stream<float> &v3922 /* v3922[768] */,
                     hls::stream<float> &v3923 /* v3923[768] */,
                     hls::stream<float> &v3924 /* v3924[768] */,
                     float v3925[8][8], int v3926,
                     int v3927) { // L5131
#pragma HLS stream variable = v3921 depth = 9
#pragma HLS stream variable = v3922 depth = 9
#pragma HLS stream variable = v3923 depth = 9
#pragma HLS stream variable = v3924 depth = 9
#pragma HLS array_partition variable = v3925 complete dim = 1
#pragma HLS array_partition variable = v3925 complete dim = 2

  float v157;      // L5134
  v157 = 0.000000; // L5135
l_S_k_0_k161:
  for (int k161 = 0; k161 < 768; k161++) { // L5136
    float v3930 = v3921.read();            // v3921[k161];	// L5137
    float a157;                            // L5138
    a157 = v3930;                          // L5139
    float v3932 = v3922.read();            // v3922[k161];	// L5140
    float b157;                            // L5141
    b157 = v3932;                          // L5142
    float v3934 = a157;                    // L5143
    float v3935 = b157;                    // L5144
    float v3936 = v3934 * v3935;           // L5145
    float v3937 = v157;                    // L5146
    float v3938 = v3937 + v3936;           // L5147
    v157 = v3938;                          // L5148
    float v3939 = a157;                    // L5149
    v3923.write(v3939);                    // v3923[k161] = v3939;	// L5150
    float v3940 = b157;                    // L5151
    v3924.write(v3940);                    // v3924[k161] = v3940;	// L5152
  }
  float v3941 = v157;          // L5154
  v3925[v3926][v3927] = v3941; // L5155
}

void PE_kernel_V_6_3(hls::stream<float> &v3942 /* v3942[768] */,
                     hls::stream<float> &v3943 /* v3943[768] */,
                     hls::stream<float> &v3944 /* v3944[768] */,
                     hls::stream<float> &v3945 /* v3945[768] */,
                     float v3946[8][8], int v3947,
                     int v3948) { // L5158
#pragma HLS stream variable = v3942 depth = 9
#pragma HLS stream variable = v3943 depth = 9
#pragma HLS stream variable = v3944 depth = 9
#pragma HLS stream variable = v3945 depth = 9
#pragma HLS array_partition variable = v3946 complete dim = 1
#pragma HLS array_partition variable = v3946 complete dim = 2

  float v158;      // L5161
  v158 = 0.000000; // L5162
l_S_k_0_k162:
  for (int k162 = 0; k162 < 768; k162++) { // L5163
    float v3951 = v3942.read();            // v3942[k162];	// L5164
    float a158;                            // L5165
    a158 = v3951;                          // L5166
    float v3953 = v3943.read();            // v3943[k162];	// L5167
    float b158;                            // L5168
    b158 = v3953;                          // L5169
    float v3955 = a158;                    // L5170
    float v3956 = b158;                    // L5171
    float v3957 = v3955 * v3956;           // L5172
    float v3958 = v158;                    // L5173
    float v3959 = v3958 + v3957;           // L5174
    v158 = v3959;                          // L5175
    float v3960 = a158;                    // L5176
    v3944.write(v3960);                    // v3944[k162] = v3960;	// L5177
    float v3961 = b158;                    // L5178
    v3945.write(v3961);                    // v3945[k162] = v3961;	// L5179
  }
  float v3962 = v158;          // L5181
  v3946[v3947][v3948] = v3962; // L5182
}

void PE_kernel_V_7_3(hls::stream<float> &v3963 /* v3963[768] */,
                     hls::stream<float> &v3964 /* v3964[768] */,
                     hls::stream<float> &v3965 /* v3965[768] */,
                     hls::stream<float> &v3966 /* v3966[768] */,
                     float v3967[8][8], int v3968,
                     int v3969) { // L5185
#pragma HLS stream variable = v3963 depth = 9
#pragma HLS stream variable = v3964 depth = 9
#pragma HLS stream variable = v3965 depth = 9
#pragma HLS stream variable = v3966 depth = 9
#pragma HLS array_partition variable = v3967 complete dim = 1
#pragma HLS array_partition variable = v3967 complete dim = 2

  float v159;      // L5188
  v159 = 0.000000; // L5189
l_S_k_0_k163:
  for (int k163 = 0; k163 < 768; k163++) { // L5190
    float v3972 = v3963.read();            // v3963[k163];	// L5191
    float a159;                            // L5192
    a159 = v3972;                          // L5193
    float v3974 = v3964.read();            // v3964[k163];	// L5194
    float b159;                            // L5195
    b159 = v3974;                          // L5196
    float v3976 = a159;                    // L5197
    float v3977 = b159;                    // L5198
    float v3978 = v3976 * v3977;           // L5199
    float v3979 = v159;                    // L5200
    float v3980 = v3979 + v3978;           // L5201
    v159 = v3980;                          // L5202
    float v3981 = a159;                    // L5203
    v3965.write(v3981);                    // v3965[k163] = v3981;	// L5204
    float v3982 = b159;                    // L5205
    v3966.write(v3982);                    // v3966[k163] = v3982;	// L5206
  }
  float v3983 = v159;          // L5208
  v3967[v3968][v3969] = v3983; // L5209
}

void PE_kernel_V_0_4(hls::stream<float> &v3984 /* v3984[768] */,
                     hls::stream<float> &v3985 /* v3985[768] */,
                     hls::stream<float> &v3986 /* v3986[768] */,
                     hls::stream<float> &v3987 /* v3987[768] */,
                     float v3988[8][8], int v3989,
                     int v3990) { // L5212
#pragma HLS stream variable = v3984 depth = 9
#pragma HLS stream variable = v3985 depth = 9
#pragma HLS stream variable = v3986 depth = 9
#pragma HLS stream variable = v3987 depth = 9
#pragma HLS array_partition variable = v3988 complete dim = 1
#pragma HLS array_partition variable = v3988 complete dim = 2

  float v160;      // L5215
  v160 = 0.000000; // L5216
l_S_k_0_k164:
  for (int k164 = 0; k164 < 768; k164++) { // L5217
    float v3993 = v3984.read();            // v3984[k164];	// L5218
    float a160;                            // L5219
    a160 = v3993;                          // L5220
    float v3995 = v3985.read();            // v3985[k164];	// L5221
    float b160;                            // L5222
    b160 = v3995;                          // L5223
    float v3997 = a160;                    // L5224
    float v3998 = b160;                    // L5225
    float v3999 = v3997 * v3998;           // L5226
    float v4000 = v160;                    // L5227
    float v4001 = v4000 + v3999;           // L5228
    v160 = v4001;                          // L5229
    float v4002 = a160;                    // L5230
    v3986.write(v4002);                    // v3986[k164] = v4002;	// L5231
    float v4003 = b160;                    // L5232
    v3987.write(v4003);                    // v3987[k164] = v4003;	// L5233
  }
  float v4004 = v160;          // L5235
  v3988[v3989][v3990] = v4004; // L5236
}

void PE_kernel_V_1_4(hls::stream<float> &v4005 /* v4005[768] */,
                     hls::stream<float> &v4006 /* v4006[768] */,
                     hls::stream<float> &v4007 /* v4007[768] */,
                     hls::stream<float> &v4008 /* v4008[768] */,
                     float v4009[8][8], int v4010,
                     int v4011) { // L5239
#pragma HLS stream variable = v4005 depth = 9
#pragma HLS stream variable = v4006 depth = 9
#pragma HLS stream variable = v4007 depth = 9
#pragma HLS stream variable = v4008 depth = 9
#pragma HLS array_partition variable = v4009 complete dim = 1
#pragma HLS array_partition variable = v4009 complete dim = 2

  float v161;      // L5242
  v161 = 0.000000; // L5243
l_S_k_0_k165:
  for (int k165 = 0; k165 < 768; k165++) { // L5244
    float v4014 = v4005.read();            // v4005[k165];	// L5245
    float a161;                            // L5246
    a161 = v4014;                          // L5247
    float v4016 = v4006.read();            // v4006[k165];	// L5248
    float b161;                            // L5249
    b161 = v4016;                          // L5250
    float v4018 = a161;                    // L5251
    float v4019 = b161;                    // L5252
    float v4020 = v4018 * v4019;           // L5253
    float v4021 = v161;                    // L5254
    float v4022 = v4021 + v4020;           // L5255
    v161 = v4022;                          // L5256
    float v4023 = a161;                    // L5257
    v4007.write(v4023);                    // v4007[k165] = v4023;	// L5258
    float v4024 = b161;                    // L5259
    v4008.write(v4024);                    // v4008[k165] = v4024;	// L5260
  }
  float v4025 = v161;          // L5262
  v4009[v4010][v4011] = v4025; // L5263
}

void PE_kernel_V_2_4(hls::stream<float> &v4026 /* v4026[768] */,
                     hls::stream<float> &v4027 /* v4027[768] */,
                     hls::stream<float> &v4028 /* v4028[768] */,
                     hls::stream<float> &v4029 /* v4029[768] */,
                     float v4030[8][8], int v4031,
                     int v4032) { // L5266
#pragma HLS stream variable = v4026 depth = 9
#pragma HLS stream variable = v4027 depth = 9
#pragma HLS stream variable = v4028 depth = 9
#pragma HLS stream variable = v4029 depth = 9
#pragma HLS array_partition variable = v4030 complete dim = 1
#pragma HLS array_partition variable = v4030 complete dim = 2

  float v162;      // L5269
  v162 = 0.000000; // L5270
l_S_k_0_k166:
  for (int k166 = 0; k166 < 768; k166++) { // L5271
    float v4035 = v4026.read();            // v4026[k166];	// L5272
    float a162;                            // L5273
    a162 = v4035;                          // L5274
    float v4037 = v4027.read();            // v4027[k166];	// L5275
    float b162;                            // L5276
    b162 = v4037;                          // L5277
    float v4039 = a162;                    // L5278
    float v4040 = b162;                    // L5279
    float v4041 = v4039 * v4040;           // L5280
    float v4042 = v162;                    // L5281
    float v4043 = v4042 + v4041;           // L5282
    v162 = v4043;                          // L5283
    float v4044 = a162;                    // L5284
    v4028.write(v4044);                    // v4028[k166] = v4044;	// L5285
    float v4045 = b162;                    // L5286
    v4029.write(v4045);                    // v4029[k166] = v4045;	// L5287
  }
  float v4046 = v162;          // L5289
  v4030[v4031][v4032] = v4046; // L5290
}

void PE_kernel_V_3_4(hls::stream<float> &v4047 /* v4047[768] */,
                     hls::stream<float> &v4048 /* v4048[768] */,
                     hls::stream<float> &v4049 /* v4049[768] */,
                     hls::stream<float> &v4050 /* v4050[768] */,
                     float v4051[8][8], int v4052,
                     int v4053) { // L5293
#pragma HLS stream variable = v4047 depth = 9
#pragma HLS stream variable = v4048 depth = 9
#pragma HLS stream variable = v4049 depth = 9
#pragma HLS stream variable = v4050 depth = 9
#pragma HLS array_partition variable = v4051 complete dim = 1
#pragma HLS array_partition variable = v4051 complete dim = 2

  float v163;      // L5296
  v163 = 0.000000; // L5297
l_S_k_0_k167:
  for (int k167 = 0; k167 < 768; k167++) { // L5298
    float v4056 = v4047.read();            // v4047[k167];	// L5299
    float a163;                            // L5300
    a163 = v4056;                          // L5301
    float v4058 = v4048.read();            // v4048[k167];	// L5302
    float b163;                            // L5303
    b163 = v4058;                          // L5304
    float v4060 = a163;                    // L5305
    float v4061 = b163;                    // L5306
    float v4062 = v4060 * v4061;           // L5307
    float v4063 = v163;                    // L5308
    float v4064 = v4063 + v4062;           // L5309
    v163 = v4064;                          // L5310
    float v4065 = a163;                    // L5311
    v4049.write(v4065);                    // v4049[k167] = v4065;	// L5312
    float v4066 = b163;                    // L5313
    v4050.write(v4066);                    // v4050[k167] = v4066;	// L5314
  }
  float v4067 = v163;          // L5316
  v4051[v4052][v4053] = v4067; // L5317
}

void PE_kernel_V_4_4(hls::stream<float> &v4068 /* v4068[768] */,
                     hls::stream<float> &v4069 /* v4069[768] */,
                     hls::stream<float> &v4070 /* v4070[768] */,
                     hls::stream<float> &v4071 /* v4071[768] */,
                     float v4072[8][8], int v4073,
                     int v4074) { // L5320
#pragma HLS stream variable = v4068 depth = 9
#pragma HLS stream variable = v4069 depth = 9
#pragma HLS stream variable = v4070 depth = 9
#pragma HLS stream variable = v4071 depth = 9
#pragma HLS array_partition variable = v4072 complete dim = 1
#pragma HLS array_partition variable = v4072 complete dim = 2

  float v164;      // L5323
  v164 = 0.000000; // L5324
l_S_k_0_k168:
  for (int k168 = 0; k168 < 768; k168++) { // L5325
    float v4077 = v4068.read();            // v4068[k168];	// L5326
    float a164;                            // L5327
    a164 = v4077;                          // L5328
    float v4079 = v4069.read();            // v4069[k168];	// L5329
    float b164;                            // L5330
    b164 = v4079;                          // L5331
    float v4081 = a164;                    // L5332
    float v4082 = b164;                    // L5333
    float v4083 = v4081 * v4082;           // L5334
    float v4084 = v164;                    // L5335
    float v4085 = v4084 + v4083;           // L5336
    v164 = v4085;                          // L5337
    float v4086 = a164;                    // L5338
    v4070.write(v4086);                    // v4070[k168] = v4086;	// L5339
    float v4087 = b164;                    // L5340
    v4071.write(v4087);                    // v4071[k168] = v4087;	// L5341
  }
  float v4088 = v164;          // L5343
  v4072[v4073][v4074] = v4088; // L5344
}

void PE_kernel_V_5_4(hls::stream<float> &v4089 /* v4089[768] */,
                     hls::stream<float> &v4090 /* v4090[768] */,
                     hls::stream<float> &v4091 /* v4091[768] */,
                     hls::stream<float> &v4092 /* v4092[768] */,
                     float v4093[8][8], int v4094,
                     int v4095) { // L5347
#pragma HLS stream variable = v4089 depth = 9
#pragma HLS stream variable = v4090 depth = 9
#pragma HLS stream variable = v4091 depth = 9
#pragma HLS stream variable = v4092 depth = 9
#pragma HLS array_partition variable = v4093 complete dim = 1
#pragma HLS array_partition variable = v4093 complete dim = 2

  float v165;      // L5350
  v165 = 0.000000; // L5351
l_S_k_0_k169:
  for (int k169 = 0; k169 < 768; k169++) { // L5352
    float v4098 = v4089.read();            // v4089[k169];	// L5353
    float a165;                            // L5354
    a165 = v4098;                          // L5355
    float v4100 = v4090.read();            // v4090[k169];	// L5356
    float b165;                            // L5357
    b165 = v4100;                          // L5358
    float v4102 = a165;                    // L5359
    float v4103 = b165;                    // L5360
    float v4104 = v4102 * v4103;           // L5361
    float v4105 = v165;                    // L5362
    float v4106 = v4105 + v4104;           // L5363
    v165 = v4106;                          // L5364
    float v4107 = a165;                    // L5365
    v4091.write(v4107);                    // v4091[k169] = v4107;	// L5366
    float v4108 = b165;                    // L5367
    v4092.write(v4108);                    // v4092[k169] = v4108;	// L5368
  }
  float v4109 = v165;          // L5370
  v4093[v4094][v4095] = v4109; // L5371
}

void PE_kernel_V_6_4(hls::stream<float> &v4110 /* v4110[768] */,
                     hls::stream<float> &v4111 /* v4111[768] */,
                     hls::stream<float> &v4112 /* v4112[768] */,
                     hls::stream<float> &v4113 /* v4113[768] */,
                     float v4114[8][8], int v4115,
                     int v4116) { // L5374
#pragma HLS stream variable = v4110 depth = 9
#pragma HLS stream variable = v4111 depth = 9
#pragma HLS stream variable = v4112 depth = 9
#pragma HLS stream variable = v4113 depth = 9
#pragma HLS array_partition variable = v4114 complete dim = 1
#pragma HLS array_partition variable = v4114 complete dim = 2

  float v166;      // L5377
  v166 = 0.000000; // L5378
l_S_k_0_k170:
  for (int k170 = 0; k170 < 768; k170++) { // L5379
    float v4119 = v4110.read();            // v4110[k170];	// L5380
    float a166;                            // L5381
    a166 = v4119;                          // L5382
    float v4121 = v4111.read();            // v4111[k170];	// L5383
    float b166;                            // L5384
    b166 = v4121;                          // L5385
    float v4123 = a166;                    // L5386
    float v4124 = b166;                    // L5387
    float v4125 = v4123 * v4124;           // L5388
    float v4126 = v166;                    // L5389
    float v4127 = v4126 + v4125;           // L5390
    v166 = v4127;                          // L5391
    float v4128 = a166;                    // L5392
    v4112.write(v4128);                    // v4112[k170] = v4128;	// L5393
    float v4129 = b166;                    // L5394
    v4113.write(v4129);                    // v4113[k170] = v4129;	// L5395
  }
  float v4130 = v166;          // L5397
  v4114[v4115][v4116] = v4130; // L5398
}

void PE_kernel_V_7_4(hls::stream<float> &v4131 /* v4131[768] */,
                     hls::stream<float> &v4132 /* v4132[768] */,
                     hls::stream<float> &v4133 /* v4133[768] */,
                     hls::stream<float> &v4134 /* v4134[768] */,
                     float v4135[8][8], int v4136,
                     int v4137) { // L5401
#pragma HLS stream variable = v4131 depth = 9
#pragma HLS stream variable = v4132 depth = 9
#pragma HLS stream variable = v4133 depth = 9
#pragma HLS stream variable = v4134 depth = 9
#pragma HLS array_partition variable = v4135 complete dim = 1
#pragma HLS array_partition variable = v4135 complete dim = 2

  float v167;      // L5404
  v167 = 0.000000; // L5405
l_S_k_0_k171:
  for (int k171 = 0; k171 < 768; k171++) { // L5406
    float v4140 = v4131.read();            // v4131[k171];	// L5407
    float a167;                            // L5408
    a167 = v4140;                          // L5409
    float v4142 = v4132.read();            // v4132[k171];	// L5410
    float b167;                            // L5411
    b167 = v4142;                          // L5412
    float v4144 = a167;                    // L5413
    float v4145 = b167;                    // L5414
    float v4146 = v4144 * v4145;           // L5415
    float v4147 = v167;                    // L5416
    float v4148 = v4147 + v4146;           // L5417
    v167 = v4148;                          // L5418
    float v4149 = a167;                    // L5419
    v4133.write(v4149);                    // v4133[k171] = v4149;	// L5420
    float v4150 = b167;                    // L5421
    v4134.write(v4150);                    // v4134[k171] = v4150;	// L5422
  }
  float v4151 = v167;          // L5424
  v4135[v4136][v4137] = v4151; // L5425
}

void PE_kernel_V_0_5(hls::stream<float> &v4152 /* v4152[768] */,
                     hls::stream<float> &v4153 /* v4153[768] */,
                     hls::stream<float> &v4154 /* v4154[768] */,
                     hls::stream<float> &v4155 /* v4155[768] */,
                     float v4156[8][8], int v4157,
                     int v4158) { // L5428
#pragma HLS stream variable = v4152 depth = 9
#pragma HLS stream variable = v4153 depth = 9
#pragma HLS stream variable = v4154 depth = 9
#pragma HLS stream variable = v4155 depth = 9
#pragma HLS array_partition variable = v4156 complete dim = 1
#pragma HLS array_partition variable = v4156 complete dim = 2

  float v168;      // L5431
  v168 = 0.000000; // L5432
l_S_k_0_k172:
  for (int k172 = 0; k172 < 768; k172++) { // L5433
    float v4161 = v4152.read();            // v4152[k172];	// L5434
    float a168;                            // L5435
    a168 = v4161;                          // L5436
    float v4163 = v4153.read();            // v4153[k172];	// L5437
    float b168;                            // L5438
    b168 = v4163;                          // L5439
    float v4165 = a168;                    // L5440
    float v4166 = b168;                    // L5441
    float v4167 = v4165 * v4166;           // L5442
    float v4168 = v168;                    // L5443
    float v4169 = v4168 + v4167;           // L5444
    v168 = v4169;                          // L5445
    float v4170 = a168;                    // L5446
    v4154.write(v4170);                    // v4154[k172] = v4170;	// L5447
    float v4171 = b168;                    // L5448
    v4155.write(v4171);                    // v4155[k172] = v4171;	// L5449
  }
  float v4172 = v168;          // L5451
  v4156[v4157][v4158] = v4172; // L5452
}

void PE_kernel_V_1_5(hls::stream<float> &v4173 /* v4173[768] */,
                     hls::stream<float> &v4174 /* v4174[768] */,
                     hls::stream<float> &v4175 /* v4175[768] */,
                     hls::stream<float> &v4176 /* v4176[768] */,
                     float v4177[8][8], int v4178,
                     int v4179) { // L5455
#pragma HLS stream variable = v4173 depth = 9
#pragma HLS stream variable = v4174 depth = 9
#pragma HLS stream variable = v4175 depth = 9
#pragma HLS stream variable = v4176 depth = 9
#pragma HLS array_partition variable = v4177 complete dim = 1
#pragma HLS array_partition variable = v4177 complete dim = 2

  float v169;      // L5458
  v169 = 0.000000; // L5459
l_S_k_0_k173:
  for (int k173 = 0; k173 < 768; k173++) { // L5460
    float v4182 = v4173.read();            // v4173[k173];	// L5461
    float a169;                            // L5462
    a169 = v4182;                          // L5463
    float v4184 = v4174.read();            // v4174[k173];	// L5464
    float b169;                            // L5465
    b169 = v4184;                          // L5466
    float v4186 = a169;                    // L5467
    float v4187 = b169;                    // L5468
    float v4188 = v4186 * v4187;           // L5469
    float v4189 = v169;                    // L5470
    float v4190 = v4189 + v4188;           // L5471
    v169 = v4190;                          // L5472
    float v4191 = a169;                    // L5473
    v4175.write(v4191);                    // v4175[k173] = v4191;	// L5474
    float v4192 = b169;                    // L5475
    v4176.write(v4192);                    // v4176[k173] = v4192;	// L5476
  }
  float v4193 = v169;          // L5478
  v4177[v4178][v4179] = v4193; // L5479
}

void PE_kernel_V_2_5(hls::stream<float> &v4194 /* v4194[768] */,
                     hls::stream<float> &v4195 /* v4195[768] */,
                     hls::stream<float> &v4196 /* v4196[768] */,
                     hls::stream<float> &v4197 /* v4197[768] */,
                     float v4198[8][8], int v4199,
                     int v4200) { // L5482
#pragma HLS stream variable = v4194 depth = 9
#pragma HLS stream variable = v4195 depth = 9
#pragma HLS stream variable = v4196 depth = 9
#pragma HLS stream variable = v4197 depth = 9
#pragma HLS array_partition variable = v4198 complete dim = 1
#pragma HLS array_partition variable = v4198 complete dim = 2

  float v170;      // L5485
  v170 = 0.000000; // L5486
l_S_k_0_k174:
  for (int k174 = 0; k174 < 768; k174++) { // L5487
    float v4203 = v4194.read();            // v4194[k174];	// L5488
    float a170;                            // L5489
    a170 = v4203;                          // L5490
    float v4205 = v4195.read();            // v4195[k174];	// L5491
    float b170;                            // L5492
    b170 = v4205;                          // L5493
    float v4207 = a170;                    // L5494
    float v4208 = b170;                    // L5495
    float v4209 = v4207 * v4208;           // L5496
    float v4210 = v170;                    // L5497
    float v4211 = v4210 + v4209;           // L5498
    v170 = v4211;                          // L5499
    float v4212 = a170;                    // L5500
    v4196.write(v4212);                    // v4196[k174] = v4212;	// L5501
    float v4213 = b170;                    // L5502
    v4197.write(v4213);                    // v4197[k174] = v4213;	// L5503
  }
  float v4214 = v170;          // L5505
  v4198[v4199][v4200] = v4214; // L5506
}

void PE_kernel_V_3_5(hls::stream<float> &v4215 /* v4215[768] */,
                     hls::stream<float> &v4216 /* v4216[768] */,
                     hls::stream<float> &v4217 /* v4217[768] */,
                     hls::stream<float> &v4218 /* v4218[768] */,
                     float v4219[8][8], int v4220,
                     int v4221) { // L5509
#pragma HLS stream variable = v4215 depth = 9
#pragma HLS stream variable = v4216 depth = 9
#pragma HLS stream variable = v4217 depth = 9
#pragma HLS stream variable = v4218 depth = 9
#pragma HLS array_partition variable = v4219 complete dim = 1
#pragma HLS array_partition variable = v4219 complete dim = 2

  float v171;      // L5512
  v171 = 0.000000; // L5513
l_S_k_0_k175:
  for (int k175 = 0; k175 < 768; k175++) { // L5514
    float v4224 = v4215.read();            // v4215[k175];	// L5515
    float a171;                            // L5516
    a171 = v4224;                          // L5517
    float v4226 = v4216.read();            // v4216[k175];	// L5518
    float b171;                            // L5519
    b171 = v4226;                          // L5520
    float v4228 = a171;                    // L5521
    float v4229 = b171;                    // L5522
    float v4230 = v4228 * v4229;           // L5523
    float v4231 = v171;                    // L5524
    float v4232 = v4231 + v4230;           // L5525
    v171 = v4232;                          // L5526
    float v4233 = a171;                    // L5527
    v4217.write(v4233);                    // v4217[k175] = v4233;	// L5528
    float v4234 = b171;                    // L5529
    v4218.write(v4234);                    // v4218[k175] = v4234;	// L5530
  }
  float v4235 = v171;          // L5532
  v4219[v4220][v4221] = v4235; // L5533
}

void PE_kernel_V_4_5(hls::stream<float> &v4236 /* v4236[768] */,
                     hls::stream<float> &v4237 /* v4237[768] */,
                     hls::stream<float> &v4238 /* v4238[768] */,
                     hls::stream<float> &v4239 /* v4239[768] */,
                     float v4240[8][8], int v4241,
                     int v4242) { // L5536
#pragma HLS stream variable = v4236 depth = 9
#pragma HLS stream variable = v4237 depth = 9
#pragma HLS stream variable = v4238 depth = 9
#pragma HLS stream variable = v4239 depth = 9
#pragma HLS array_partition variable = v4240 complete dim = 1
#pragma HLS array_partition variable = v4240 complete dim = 2

  float v172;      // L5539
  v172 = 0.000000; // L5540
l_S_k_0_k176:
  for (int k176 = 0; k176 < 768; k176++) { // L5541
    float v4245 = v4236.read();            // v4236[k176];	// L5542
    float a172;                            // L5543
    a172 = v4245;                          // L5544
    float v4247 = v4237.read();            // v4237[k176];	// L5545
    float b172;                            // L5546
    b172 = v4247;                          // L5547
    float v4249 = a172;                    // L5548
    float v4250 = b172;                    // L5549
    float v4251 = v4249 * v4250;           // L5550
    float v4252 = v172;                    // L5551
    float v4253 = v4252 + v4251;           // L5552
    v172 = v4253;                          // L5553
    float v4254 = a172;                    // L5554
    v4238.write(v4254);                    // v4238[k176] = v4254;	// L5555
    float v4255 = b172;                    // L5556
    v4239.write(v4255);                    // v4239[k176] = v4255;	// L5557
  }
  float v4256 = v172;          // L5559
  v4240[v4241][v4242] = v4256; // L5560
}

void PE_kernel_V_5_5(hls::stream<float> &v4257 /* v4257[768] */,
                     hls::stream<float> &v4258 /* v4258[768] */,
                     hls::stream<float> &v4259 /* v4259[768] */,
                     hls::stream<float> &v4260 /* v4260[768] */,
                     float v4261[8][8], int v4262,
                     int v4263) { // L5563
#pragma HLS stream variable = v4257 depth = 9
#pragma HLS stream variable = v4258 depth = 9
#pragma HLS stream variable = v4259 depth = 9
#pragma HLS stream variable = v4260 depth = 9
#pragma HLS array_partition variable = v4261 complete dim = 1
#pragma HLS array_partition variable = v4261 complete dim = 2

  float v173;      // L5566
  v173 = 0.000000; // L5567
l_S_k_0_k177:
  for (int k177 = 0; k177 < 768; k177++) { // L5568
    float v4266 = v4257.read();            // v4257[k177];	// L5569
    float a173;                            // L5570
    a173 = v4266;                          // L5571
    float v4268 = v4258.read();            // v4258[k177];	// L5572
    float b173;                            // L5573
    b173 = v4268;                          // L5574
    float v4270 = a173;                    // L5575
    float v4271 = b173;                    // L5576
    float v4272 = v4270 * v4271;           // L5577
    float v4273 = v173;                    // L5578
    float v4274 = v4273 + v4272;           // L5579
    v173 = v4274;                          // L5580
    float v4275 = a173;                    // L5581
    v4259.write(v4275);                    // v4259[k177] = v4275;	// L5582
    float v4276 = b173;                    // L5583
    v4260.write(v4276);                    // v4260[k177] = v4276;	// L5584
  }
  float v4277 = v173;          // L5586
  v4261[v4262][v4263] = v4277; // L5587
}

void PE_kernel_V_6_5(hls::stream<float> &v4278 /* v4278[768] */,
                     hls::stream<float> &v4279 /* v4279[768] */,
                     hls::stream<float> &v4280 /* v4280[768] */,
                     hls::stream<float> &v4281 /* v4281[768] */,
                     float v4282[8][8], int v4283,
                     int v4284) { // L5590
#pragma HLS stream variable = v4278 depth = 9
#pragma HLS stream variable = v4279 depth = 9
#pragma HLS stream variable = v4280 depth = 9
#pragma HLS stream variable = v4281 depth = 9
#pragma HLS array_partition variable = v4282 complete dim = 1
#pragma HLS array_partition variable = v4282 complete dim = 2

  float v174;      // L5593
  v174 = 0.000000; // L5594
l_S_k_0_k178:
  for (int k178 = 0; k178 < 768; k178++) { // L5595
    float v4287 = v4278.read();            // v4278[k178];	// L5596
    float a174;                            // L5597
    a174 = v4287;                          // L5598
    float v4289 = v4279.read();            // v4279[k178];	// L5599
    float b174;                            // L5600
    b174 = v4289;                          // L5601
    float v4291 = a174;                    // L5602
    float v4292 = b174;                    // L5603
    float v4293 = v4291 * v4292;           // L5604
    float v4294 = v174;                    // L5605
    float v4295 = v4294 + v4293;           // L5606
    v174 = v4295;                          // L5607
    float v4296 = a174;                    // L5608
    v4280.write(v4296);                    // v4280[k178] = v4296;	// L5609
    float v4297 = b174;                    // L5610
    v4281.write(v4297);                    // v4281[k178] = v4297;	// L5611
  }
  float v4298 = v174;          // L5613
  v4282[v4283][v4284] = v4298; // L5614
}

void PE_kernel_V_7_5(hls::stream<float> &v4299 /* v4299[768] */,
                     hls::stream<float> &v4300 /* v4300[768] */,
                     hls::stream<float> &v4301 /* v4301[768] */,
                     hls::stream<float> &v4302 /* v4302[768] */,
                     float v4303[8][8], int v4304,
                     int v4305) { // L5617
#pragma HLS stream variable = v4299 depth = 9
#pragma HLS stream variable = v4300 depth = 9
#pragma HLS stream variable = v4301 depth = 9
#pragma HLS stream variable = v4302 depth = 9
#pragma HLS array_partition variable = v4303 complete dim = 1
#pragma HLS array_partition variable = v4303 complete dim = 2

  float v175;      // L5620
  v175 = 0.000000; // L5621
l_S_k_0_k179:
  for (int k179 = 0; k179 < 768; k179++) { // L5622
    float v4308 = v4299.read();            // v4299[k179];	// L5623
    float a175;                            // L5624
    a175 = v4308;                          // L5625
    float v4310 = v4300.read();            // v4300[k179];	// L5626
    float b175;                            // L5627
    b175 = v4310;                          // L5628
    float v4312 = a175;                    // L5629
    float v4313 = b175;                    // L5630
    float v4314 = v4312 * v4313;           // L5631
    float v4315 = v175;                    // L5632
    float v4316 = v4315 + v4314;           // L5633
    v175 = v4316;                          // L5634
    float v4317 = a175;                    // L5635
    v4301.write(v4317);                    // v4301[k179] = v4317;	// L5636
    float v4318 = b175;                    // L5637
    v4302.write(v4318);                    // v4302[k179] = v4318;	// L5638
  }
  float v4319 = v175;          // L5640
  v4303[v4304][v4305] = v4319; // L5641
}

void PE_kernel_V_0_6(hls::stream<float> &v4320 /* v4320[768] */,
                     hls::stream<float> &v4321 /* v4321[768] */,
                     hls::stream<float> &v4322 /* v4322[768] */,
                     hls::stream<float> &v4323 /* v4323[768] */,
                     float v4324[8][8], int v4325,
                     int v4326) { // L5644
#pragma HLS stream variable = v4320 depth = 9
#pragma HLS stream variable = v4321 depth = 9
#pragma HLS stream variable = v4322 depth = 9
#pragma HLS stream variable = v4323 depth = 9
#pragma HLS array_partition variable = v4324 complete dim = 1
#pragma HLS array_partition variable = v4324 complete dim = 2

  float v176;      // L5647
  v176 = 0.000000; // L5648
l_S_k_0_k180:
  for (int k180 = 0; k180 < 768; k180++) { // L5649
    float v4329 = v4320.read();            // v4320[k180];	// L5650
    float a176;                            // L5651
    a176 = v4329;                          // L5652
    float v4331 = v4321.read();            // v4321[k180];	// L5653
    float b176;                            // L5654
    b176 = v4331;                          // L5655
    float v4333 = a176;                    // L5656
    float v4334 = b176;                    // L5657
    float v4335 = v4333 * v4334;           // L5658
    float v4336 = v176;                    // L5659
    float v4337 = v4336 + v4335;           // L5660
    v176 = v4337;                          // L5661
    float v4338 = a176;                    // L5662
    v4322.write(v4338);                    // v4322[k180] = v4338;	// L5663
    float v4339 = b176;                    // L5664
    v4323.write(v4339);                    // v4323[k180] = v4339;	// L5665
  }
  float v4340 = v176;          // L5667
  v4324[v4325][v4326] = v4340; // L5668
}

void PE_kernel_V_1_6(hls::stream<float> &v4341 /* v4341[768] */,
                     hls::stream<float> &v4342 /* v4342[768] */,
                     hls::stream<float> &v4343 /* v4343[768] */,
                     hls::stream<float> &v4344 /* v4344[768] */,
                     float v4345[8][8], int v4346,
                     int v4347) { // L5671
#pragma HLS stream variable = v4341 depth = 9
#pragma HLS stream variable = v4342 depth = 9
#pragma HLS stream variable = v4343 depth = 9
#pragma HLS stream variable = v4344 depth = 9
#pragma HLS array_partition variable = v4345 complete dim = 1
#pragma HLS array_partition variable = v4345 complete dim = 2

  float v177;      // L5674
  v177 = 0.000000; // L5675
l_S_k_0_k181:
  for (int k181 = 0; k181 < 768; k181++) { // L5676
    float v4350 = v4341.read();            // v4341[k181];	// L5677
    float a177;                            // L5678
    a177 = v4350;                          // L5679
    float v4352 = v4342.read();            // v4342[k181];	// L5680
    float b177;                            // L5681
    b177 = v4352;                          // L5682
    float v4354 = a177;                    // L5683
    float v4355 = b177;                    // L5684
    float v4356 = v4354 * v4355;           // L5685
    float v4357 = v177;                    // L5686
    float v4358 = v4357 + v4356;           // L5687
    v177 = v4358;                          // L5688
    float v4359 = a177;                    // L5689
    v4343.write(v4359);                    // v4343[k181] = v4359;	// L5690
    float v4360 = b177;                    // L5691
    v4344.write(v4360);                    // v4344[k181] = v4360;	// L5692
  }
  float v4361 = v177;          // L5694
  v4345[v4346][v4347] = v4361; // L5695
}

void PE_kernel_V_2_6(hls::stream<float> &v4362 /* v4362[768] */,
                     hls::stream<float> &v4363 /* v4363[768] */,
                     hls::stream<float> &v4364 /* v4364[768] */,
                     hls::stream<float> &v4365 /* v4365[768] */,
                     float v4366[8][8], int v4367,
                     int v4368) { // L5698
#pragma HLS stream variable = v4362 depth = 9
#pragma HLS stream variable = v4363 depth = 9
#pragma HLS stream variable = v4364 depth = 9
#pragma HLS stream variable = v4365 depth = 9
#pragma HLS array_partition variable = v4366 complete dim = 1
#pragma HLS array_partition variable = v4366 complete dim = 2

  float v178;      // L5701
  v178 = 0.000000; // L5702
l_S_k_0_k182:
  for (int k182 = 0; k182 < 768; k182++) { // L5703
    float v4371 = v4362.read();            // v4362[k182];	// L5704
    float a178;                            // L5705
    a178 = v4371;                          // L5706
    float v4373 = v4363.read();            // v4363[k182];	// L5707
    float b178;                            // L5708
    b178 = v4373;                          // L5709
    float v4375 = a178;                    // L5710
    float v4376 = b178;                    // L5711
    float v4377 = v4375 * v4376;           // L5712
    float v4378 = v178;                    // L5713
    float v4379 = v4378 + v4377;           // L5714
    v178 = v4379;                          // L5715
    float v4380 = a178;                    // L5716
    v4364.write(v4380);                    // v4364[k182] = v4380;	// L5717
    float v4381 = b178;                    // L5718
    v4365.write(v4381);                    // v4365[k182] = v4381;	// L5719
  }
  float v4382 = v178;          // L5721
  v4366[v4367][v4368] = v4382; // L5722
}

void PE_kernel_V_3_6(hls::stream<float> &v4383 /* v4383[768] */,
                     hls::stream<float> &v4384 /* v4384[768] */,
                     hls::stream<float> &v4385 /* v4385[768] */,
                     hls::stream<float> &v4386 /* v4386[768] */,
                     float v4387[8][8], int v4388,
                     int v4389) { // L5725
#pragma HLS stream variable = v4383 depth = 9
#pragma HLS stream variable = v4384 depth = 9
#pragma HLS stream variable = v4385 depth = 9
#pragma HLS stream variable = v4386 depth = 9
#pragma HLS array_partition variable = v4387 complete dim = 1
#pragma HLS array_partition variable = v4387 complete dim = 2

  float v179;      // L5728
  v179 = 0.000000; // L5729
l_S_k_0_k183:
  for (int k183 = 0; k183 < 768; k183++) { // L5730
    float v4392 = v4383.read();            // v4383[k183];	// L5731
    float a179;                            // L5732
    a179 = v4392;                          // L5733
    float v4394 = v4384.read();            // v4384[k183];	// L5734
    float b179;                            // L5735
    b179 = v4394;                          // L5736
    float v4396 = a179;                    // L5737
    float v4397 = b179;                    // L5738
    float v4398 = v4396 * v4397;           // L5739
    float v4399 = v179;                    // L5740
    float v4400 = v4399 + v4398;           // L5741
    v179 = v4400;                          // L5742
    float v4401 = a179;                    // L5743
    v4385.write(v4401);                    // v4385[k183] = v4401;	// L5744
    float v4402 = b179;                    // L5745
    v4386.write(v4402);                    // v4386[k183] = v4402;	// L5746
  }
  float v4403 = v179;          // L5748
  v4387[v4388][v4389] = v4403; // L5749
}

void PE_kernel_V_4_6(hls::stream<float> &v4404 /* v4404[768] */,
                     hls::stream<float> &v4405 /* v4405[768] */,
                     hls::stream<float> &v4406 /* v4406[768] */,
                     hls::stream<float> &v4407 /* v4407[768] */,
                     float v4408[8][8], int v4409,
                     int v4410) { // L5752
#pragma HLS stream variable = v4404 depth = 9
#pragma HLS stream variable = v4405 depth = 9
#pragma HLS stream variable = v4406 depth = 9
#pragma HLS stream variable = v4407 depth = 9
#pragma HLS array_partition variable = v4408 complete dim = 1
#pragma HLS array_partition variable = v4408 complete dim = 2

  float v180;      // L5755
  v180 = 0.000000; // L5756
l_S_k_0_k184:
  for (int k184 = 0; k184 < 768; k184++) { // L5757
    float v4413 = v4404.read();            // v4404[k184];	// L5758
    float a180;                            // L5759
    a180 = v4413;                          // L5760
    float v4415 = v4405.read();            // v4405[k184];	// L5761
    float b180;                            // L5762
    b180 = v4415;                          // L5763
    float v4417 = a180;                    // L5764
    float v4418 = b180;                    // L5765
    float v4419 = v4417 * v4418;           // L5766
    float v4420 = v180;                    // L5767
    float v4421 = v4420 + v4419;           // L5768
    v180 = v4421;                          // L5769
    float v4422 = a180;                    // L5770
    v4406.write(v4422);                    // v4406[k184] = v4422;	// L5771
    float v4423 = b180;                    // L5772
    v4407.write(v4423);                    // v4407[k184] = v4423;	// L5773
  }
  float v4424 = v180;          // L5775
  v4408[v4409][v4410] = v4424; // L5776
}

void PE_kernel_V_5_6(hls::stream<float> &v4425 /* v4425[768] */,
                     hls::stream<float> &v4426 /* v4426[768] */,
                     hls::stream<float> &v4427 /* v4427[768] */,
                     hls::stream<float> &v4428 /* v4428[768] */,
                     float v4429[8][8], int v4430,
                     int v4431) { // L5779
#pragma HLS stream variable = v4425 depth = 9
#pragma HLS stream variable = v4426 depth = 9
#pragma HLS stream variable = v4427 depth = 9
#pragma HLS stream variable = v4428 depth = 9
#pragma HLS array_partition variable = v4429 complete dim = 1
#pragma HLS array_partition variable = v4429 complete dim = 2

  float v181;      // L5782
  v181 = 0.000000; // L5783
l_S_k_0_k185:
  for (int k185 = 0; k185 < 768; k185++) { // L5784
    float v4434 = v4425.read();            // v4425[k185];	// L5785
    float a181;                            // L5786
    a181 = v4434;                          // L5787
    float v4436 = v4426.read();            // v4426[k185];	// L5788
    float b181;                            // L5789
    b181 = v4436;                          // L5790
    float v4438 = a181;                    // L5791
    float v4439 = b181;                    // L5792
    float v4440 = v4438 * v4439;           // L5793
    float v4441 = v181;                    // L5794
    float v4442 = v4441 + v4440;           // L5795
    v181 = v4442;                          // L5796
    float v4443 = a181;                    // L5797
    v4427.write(v4443);                    // v4427[k185] = v4443;	// L5798
    float v4444 = b181;                    // L5799
    v4428.write(v4444);                    // v4428[k185] = v4444;	// L5800
  }
  float v4445 = v181;          // L5802
  v4429[v4430][v4431] = v4445; // L5803
}

void PE_kernel_V_6_6(hls::stream<float> &v4446 /* v4446[768] */,
                     hls::stream<float> &v4447 /* v4447[768] */,
                     hls::stream<float> &v4448 /* v4448[768] */,
                     hls::stream<float> &v4449 /* v4449[768] */,
                     float v4450[8][8], int v4451,
                     int v4452) { // L5806
#pragma HLS stream variable = v4446 depth = 9
#pragma HLS stream variable = v4447 depth = 9
#pragma HLS stream variable = v4448 depth = 9
#pragma HLS stream variable = v4449 depth = 9
#pragma HLS array_partition variable = v4450 complete dim = 1
#pragma HLS array_partition variable = v4450 complete dim = 2

  float v182;      // L5809
  v182 = 0.000000; // L5810
l_S_k_0_k186:
  for (int k186 = 0; k186 < 768; k186++) { // L5811
    float v4455 = v4446.read();            // v4446[k186];	// L5812
    float a182;                            // L5813
    a182 = v4455;                          // L5814
    float v4457 = v4447.read();            // v4447[k186];	// L5815
    float b182;                            // L5816
    b182 = v4457;                          // L5817
    float v4459 = a182;                    // L5818
    float v4460 = b182;                    // L5819
    float v4461 = v4459 * v4460;           // L5820
    float v4462 = v182;                    // L5821
    float v4463 = v4462 + v4461;           // L5822
    v182 = v4463;                          // L5823
    float v4464 = a182;                    // L5824
    v4448.write(v4464);                    // v4448[k186] = v4464;	// L5825
    float v4465 = b182;                    // L5826
    v4449.write(v4465);                    // v4449[k186] = v4465;	// L5827
  }
  float v4466 = v182;          // L5829
  v4450[v4451][v4452] = v4466; // L5830
}

void PE_kernel_V_7_6(hls::stream<float> &v4467 /* v4467[768] */,
                     hls::stream<float> &v4468 /* v4468[768] */,
                     hls::stream<float> &v4469 /* v4469[768] */,
                     hls::stream<float> &v4470 /* v4470[768] */,
                     float v4471[8][8], int v4472,
                     int v4473) { // L5833
#pragma HLS stream variable = v4467 depth = 9
#pragma HLS stream variable = v4468 depth = 9
#pragma HLS stream variable = v4469 depth = 9
#pragma HLS stream variable = v4470 depth = 9
#pragma HLS array_partition variable = v4471 complete dim = 1
#pragma HLS array_partition variable = v4471 complete dim = 2

  float v183;      // L5836
  v183 = 0.000000; // L5837
l_S_k_0_k187:
  for (int k187 = 0; k187 < 768; k187++) { // L5838
    float v4476 = v4467.read();            // v4467[k187];	// L5839
    float a183;                            // L5840
    a183 = v4476;                          // L5841
    float v4478 = v4468.read();            // v4468[k187];	// L5842
    float b183;                            // L5843
    b183 = v4478;                          // L5844
    float v4480 = a183;                    // L5845
    float v4481 = b183;                    // L5846
    float v4482 = v4480 * v4481;           // L5847
    float v4483 = v183;                    // L5848
    float v4484 = v4483 + v4482;           // L5849
    v183 = v4484;                          // L5850
    float v4485 = a183;                    // L5851
    v4469.write(v4485);                    // v4469[k187] = v4485;	// L5852
    float v4486 = b183;                    // L5853
    v4470.write(v4486);                    // v4470[k187] = v4486;	// L5854
  }
  float v4487 = v183;          // L5856
  v4471[v4472][v4473] = v4487; // L5857
}

void PE_kernel_V_0_7(hls::stream<float> &v4488 /* v4488[768] */,
                     hls::stream<float> &v4489 /* v4489[768] */,
                     hls::stream<float> &v4490 /* v4490[768] */,
                     hls::stream<float> &v4491 /* v4491[768] */,
                     float v4492[8][8], int v4493,
                     int v4494) { // L5860
#pragma HLS stream variable = v4488 depth = 9
#pragma HLS stream variable = v4489 depth = 9
#pragma HLS stream variable = v4490 depth = 9
#pragma HLS stream variable = v4491 depth = 9
#pragma HLS array_partition variable = v4492 complete dim = 1
#pragma HLS array_partition variable = v4492 complete dim = 2

  float v184;      // L5863
  v184 = 0.000000; // L5864
l_S_k_0_k188:
  for (int k188 = 0; k188 < 768; k188++) { // L5865
    float v4497 = v4488.read();            // v4488[k188];	// L5866
    float a184;                            // L5867
    a184 = v4497;                          // L5868
    float v4499 = v4489.read();            // v4489[k188];	// L5869
    float b184;                            // L5870
    b184 = v4499;                          // L5871
    float v4501 = a184;                    // L5872
    float v4502 = b184;                    // L5873
    float v4503 = v4501 * v4502;           // L5874
    float v4504 = v184;                    // L5875
    float v4505 = v4504 + v4503;           // L5876
    v184 = v4505;                          // L5877
    float v4506 = a184;                    // L5878
    v4490.write(v4506);                    // v4490[k188] = v4506;	// L5879
    float v4507 = b184;                    // L5880
    v4491.write(v4507);                    // v4491[k188] = v4507;	// L5881
  }
  float v4508 = v184;          // L5883
  v4492[v4493][v4494] = v4508; // L5884
}

void PE_kernel_V_1_7(hls::stream<float> &v4509 /* v4509[768] */,
                     hls::stream<float> &v4510 /* v4510[768] */,
                     hls::stream<float> &v4511 /* v4511[768] */,
                     hls::stream<float> &v4512 /* v4512[768] */,
                     float v4513[8][8], int v4514,
                     int v4515) { // L5887
#pragma HLS stream variable = v4509 depth = 9
#pragma HLS stream variable = v4510 depth = 9
#pragma HLS stream variable = v4511 depth = 9
#pragma HLS stream variable = v4512 depth = 9
#pragma HLS array_partition variable = v4513 complete dim = 1
#pragma HLS array_partition variable = v4513 complete dim = 2

  float v185;      // L5890
  v185 = 0.000000; // L5891
l_S_k_0_k189:
  for (int k189 = 0; k189 < 768; k189++) { // L5892
    float v4518 = v4509.read();            // v4509[k189];	// L5893
    float a185;                            // L5894
    a185 = v4518;                          // L5895
    float v4520 = v4510.read();            // v4510[k189];	// L5896
    float b185;                            // L5897
    b185 = v4520;                          // L5898
    float v4522 = a185;                    // L5899
    float v4523 = b185;                    // L5900
    float v4524 = v4522 * v4523;           // L5901
    float v4525 = v185;                    // L5902
    float v4526 = v4525 + v4524;           // L5903
    v185 = v4526;                          // L5904
    float v4527 = a185;                    // L5905
    v4511.write(v4527);                    // v4511[k189] = v4527;	// L5906
    float v4528 = b185;                    // L5907
    v4512.write(v4528);                    // v4512[k189] = v4528;	// L5908
  }
  float v4529 = v185;          // L5910
  v4513[v4514][v4515] = v4529; // L5911
}

void PE_kernel_V_2_7(hls::stream<float> &v4530 /* v4530[768] */,
                     hls::stream<float> &v4531 /* v4531[768] */,
                     hls::stream<float> &v4532 /* v4532[768] */,
                     hls::stream<float> &v4533 /* v4533[768] */,
                     float v4534[8][8], int v4535,
                     int v4536) { // L5914
#pragma HLS stream variable = v4530 depth = 9
#pragma HLS stream variable = v4531 depth = 9
#pragma HLS stream variable = v4532 depth = 9
#pragma HLS stream variable = v4533 depth = 9
#pragma HLS array_partition variable = v4534 complete dim = 1
#pragma HLS array_partition variable = v4534 complete dim = 2

  float v186;      // L5917
  v186 = 0.000000; // L5918
l_S_k_0_k190:
  for (int k190 = 0; k190 < 768; k190++) { // L5919
    float v4539 = v4530.read();            // v4530[k190];	// L5920
    float a186;                            // L5921
    a186 = v4539;                          // L5922
    float v4541 = v4531.read();            // v4531[k190];	// L5923
    float b186;                            // L5924
    b186 = v4541;                          // L5925
    float v4543 = a186;                    // L5926
    float v4544 = b186;                    // L5927
    float v4545 = v4543 * v4544;           // L5928
    float v4546 = v186;                    // L5929
    float v4547 = v4546 + v4545;           // L5930
    v186 = v4547;                          // L5931
    float v4548 = a186;                    // L5932
    v4532.write(v4548);                    // v4532[k190] = v4548;	// L5933
    float v4549 = b186;                    // L5934
    v4533.write(v4549);                    // v4533[k190] = v4549;	// L5935
  }
  float v4550 = v186;          // L5937
  v4534[v4535][v4536] = v4550; // L5938
}

void PE_kernel_V_3_7(hls::stream<float> &v4551 /* v4551[768] */,
                     hls::stream<float> &v4552 /* v4552[768] */,
                     hls::stream<float> &v4553 /* v4553[768] */,
                     hls::stream<float> &v4554 /* v4554[768] */,
                     float v4555[8][8], int v4556,
                     int v4557) { // L5941
#pragma HLS stream variable = v4551 depth = 9
#pragma HLS stream variable = v4552 depth = 9
#pragma HLS stream variable = v4553 depth = 9
#pragma HLS stream variable = v4554 depth = 9
#pragma HLS array_partition variable = v4555 complete dim = 1
#pragma HLS array_partition variable = v4555 complete dim = 2

  float v187;      // L5944
  v187 = 0.000000; // L5945
l_S_k_0_k191:
  for (int k191 = 0; k191 < 768; k191++) { // L5946
    float v4560 = v4551.read();            // v4551[k191];	// L5947
    float a187;                            // L5948
    a187 = v4560;                          // L5949
    float v4562 = v4552.read();            // v4552[k191];	// L5950
    float b187;                            // L5951
    b187 = v4562;                          // L5952
    float v4564 = a187;                    // L5953
    float v4565 = b187;                    // L5954
    float v4566 = v4564 * v4565;           // L5955
    float v4567 = v187;                    // L5956
    float v4568 = v4567 + v4566;           // L5957
    v187 = v4568;                          // L5958
    float v4569 = a187;                    // L5959
    v4553.write(v4569);                    // v4553[k191] = v4569;	// L5960
    float v4570 = b187;                    // L5961
    v4554.write(v4570);                    // v4554[k191] = v4570;	// L5962
  }
  float v4571 = v187;          // L5964
  v4555[v4556][v4557] = v4571; // L5965
}

void PE_kernel_V_4_7(hls::stream<float> &v4572 /* v4572[768] */,
                     hls::stream<float> &v4573 /* v4573[768] */,
                     hls::stream<float> &v4574 /* v4574[768] */,
                     hls::stream<float> &v4575 /* v4575[768] */,
                     float v4576[8][8], int v4577,
                     int v4578) { // L5968
#pragma HLS stream variable = v4572 depth = 9
#pragma HLS stream variable = v4573 depth = 9
#pragma HLS stream variable = v4574 depth = 9
#pragma HLS stream variable = v4575 depth = 9
#pragma HLS array_partition variable = v4576 complete dim = 1
#pragma HLS array_partition variable = v4576 complete dim = 2

  float v188;      // L5971
  v188 = 0.000000; // L5972
l_S_k_0_k192:
  for (int k192 = 0; k192 < 768; k192++) { // L5973
    float v4581 = v4572.read();            // v4572[k192];	// L5974
    float a188;                            // L5975
    a188 = v4581;                          // L5976
    float v4583 = v4573.read();            // v4573[k192];	// L5977
    float b188;                            // L5978
    b188 = v4583;                          // L5979
    float v4585 = a188;                    // L5980
    float v4586 = b188;                    // L5981
    float v4587 = v4585 * v4586;           // L5982
    float v4588 = v188;                    // L5983
    float v4589 = v4588 + v4587;           // L5984
    v188 = v4589;                          // L5985
    float v4590 = a188;                    // L5986
    v4574.write(v4590);                    // v4574[k192] = v4590;	// L5987
    float v4591 = b188;                    // L5988
    v4575.write(v4591);                    // v4575[k192] = v4591;	// L5989
  }
  float v4592 = v188;          // L5991
  v4576[v4577][v4578] = v4592; // L5992
}

void PE_kernel_V_5_7(hls::stream<float> &v4593 /* v4593[768] */,
                     hls::stream<float> &v4594 /* v4594[768] */,
                     hls::stream<float> &v4595 /* v4595[768] */,
                     hls::stream<float> &v4596 /* v4596[768] */,
                     float v4597[8][8], int v4598,
                     int v4599) { // L5995
#pragma HLS stream variable = v4593 depth = 9
#pragma HLS stream variable = v4594 depth = 9
#pragma HLS stream variable = v4595 depth = 9
#pragma HLS stream variable = v4596 depth = 9
#pragma HLS array_partition variable = v4597 complete dim = 1
#pragma HLS array_partition variable = v4597 complete dim = 2

  float v189;      // L5998
  v189 = 0.000000; // L5999
l_S_k_0_k193:
  for (int k193 = 0; k193 < 768; k193++) { // L6000
    float v4602 = v4593.read();            // v4593[k193];	// L6001
    float a189;                            // L6002
    a189 = v4602;                          // L6003
    float v4604 = v4594.read();            // v4594[k193];	// L6004
    float b189;                            // L6005
    b189 = v4604;                          // L6006
    float v4606 = a189;                    // L6007
    float v4607 = b189;                    // L6008
    float v4608 = v4606 * v4607;           // L6009
    float v4609 = v189;                    // L6010
    float v4610 = v4609 + v4608;           // L6011
    v189 = v4610;                          // L6012
    float v4611 = a189;                    // L6013
    v4595.write(v4611);                    // v4595[k193] = v4611;	// L6014
    float v4612 = b189;                    // L6015
    v4596.write(v4612);                    // v4596[k193] = v4612;	// L6016
  }
  float v4613 = v189;          // L6018
  v4597[v4598][v4599] = v4613; // L6019
}

void PE_kernel_V_6_7(hls::stream<float> &v4614 /* v4614[768] */,
                     hls::stream<float> &v4615 /* v4615[768] */,
                     hls::stream<float> &v4616 /* v4616[768] */,
                     hls::stream<float> &v4617 /* v4617[768] */,
                     float v4618[8][8], int v4619,
                     int v4620) { // L6022
#pragma HLS stream variable = v4614 depth = 9
#pragma HLS stream variable = v4615 depth = 9
#pragma HLS stream variable = v4616 depth = 9
#pragma HLS stream variable = v4617 depth = 9
#pragma HLS array_partition variable = v4618 complete dim = 1
#pragma HLS array_partition variable = v4618 complete dim = 2

  float v190;      // L6025
  v190 = 0.000000; // L6026
l_S_k_0_k194:
  for (int k194 = 0; k194 < 768; k194++) { // L6027
    float v4623 = v4614.read();            // v4614[k194];	// L6028
    float a190;                            // L6029
    a190 = v4623;                          // L6030
    float v4625 = v4615.read();            // v4615[k194];	// L6031
    float b190;                            // L6032
    b190 = v4625;                          // L6033
    float v4627 = a190;                    // L6034
    float v4628 = b190;                    // L6035
    float v4629 = v4627 * v4628;           // L6036
    float v4630 = v190;                    // L6037
    float v4631 = v4630 + v4629;           // L6038
    v190 = v4631;                          // L6039
    float v4632 = a190;                    // L6040
    v4616.write(v4632);                    // v4616[k194] = v4632;	// L6041
    float v4633 = b190;                    // L6042
    v4617.write(v4633);                    // v4617[k194] = v4633;	// L6043
  }
  float v4634 = v190;          // L6045
  v4618[v4619][v4620] = v4634; // L6046
}

void PE_kernel_V_7_7(hls::stream<float> &v4635 /* v4635[768] */,
                     hls::stream<float> &v4636 /* v4636[768] */,
                     hls::stream<float> &v4637 /* v4637[768] */,
                     hls::stream<float> &v4638 /* v4638[768] */,
                     float v4639[8][8], int v4640,
                     int v4641) { // L6049
#pragma HLS stream variable = v4635 depth = 9
#pragma HLS stream variable = v4636 depth = 9
#pragma HLS stream variable = v4637 depth = 9
#pragma HLS stream variable = v4638 depth = 9
#pragma HLS array_partition variable = v4639 complete dim = 1
#pragma HLS array_partition variable = v4639 complete dim = 2

  float v191;      // L6052
  v191 = 0.000000; // L6053
l_S_k_0_k195:
  for (int k195 = 0; k195 < 768; k195++) { // L6054
    float v4644 = v4635.read();            // v4635[k195];	// L6055
    float a191;                            // L6056
    a191 = v4644;                          // L6057
    float v4646 = v4636.read();            // v4636[k195];	// L6058
    float b191;                            // L6059
    b191 = v4646;                          // L6060
    float v4648 = a191;                    // L6061
    float v4649 = b191;                    // L6062
    float v4650 = v4648 * v4649;           // L6063
    float v4651 = v191;                    // L6064
    float v4652 = v4651 + v4650;           // L6065
    v191 = v4652;                          // L6066
    float v4653 = a191;                    // L6067
    v4637.write(v4653);                    // v4637[k195] = v4653;	// L6068
    float v4654 = b191;                    // L6069
    v4638.write(v4654);                    // v4638[k195] = v4654;	// L6070
  }
  float v4655 = v191;          // L6072
  v4639[v4640][v4641] = v4655; // L6073
}

void systolic_tile_V(float v4656[8][768], float v4657[768][8],
                     float v4658[8][8]) { // L6076
#pragma HLS dataflow
#pragma HLS array_partition variable = v4656 complete dim = 1

#pragma HLS array_partition variable = v4657 complete dim = 2

#pragma HLS array_partition variable = v4658 complete dim = 1
#pragma HLS array_partition variable = v4658 complete dim = 2

  hls::stream<float> A_fifo2[8][9] /* A_fifo2[8][9][768] */; // L6077
#pragma HLS stream variable = A_fifo2 depth = 9
  hls::stream<float> B_fifo2[8][9] /* B_fifo2[8][9][768] */; // L6078
#pragma HLS stream variable = B_fifo2 depth = 9
  float A_drain2[8]; // L6079
  float B_drain2[8]; // L6080
l_data_load_k196:
  for (int k196 = 0; k196 < 768; k196++) { // L6081
  l_S_m_0_m4:
    for (int m4 = 0; m4 < 8; m4++) { // L6082
      float v4665 = v4656[m4][k196]; // L6083
      A_fifo2[m4][0].write(v4665);   // A_fifo2[m4][0][k196] = v4665;	// L6084
    }
  l_S_n_1_n4:
    for (int n4 = 0; n4 < 8; n4++) { // L6086
      float v4667 = v4657[k196][n4]; // L6087
      B_fifo2[n4][0].write(v4667);   // B_fifo2[n4][0][k196] = v4667;	// L6088
    }
  }
  hls::stream<float> &v4668 /* v4668[768] */ = A_fifo2[0][0]; // L6092
  hls::stream<float> &v4669 /* v4669[768] */ = B_fifo2[0][0]; // L6093
  hls::stream<float> &v4670 /* v4670[768] */ = A_fifo2[0][1]; // L6099
  hls::stream<float> &v4671 /* v4671[768] */ = B_fifo2[0][1]; // L6100
  PE_kernel_V_0_0(v4668, v4669, v4670, v4671, v4658, 0, 0);   // L6101
  hls::stream<float> &v4672 /* v4672[768] */ = A_fifo2[0][1]; // L6103
  hls::stream<float> &v4673 /* v4673[768] */ = B_fifo2[1][0]; // L6104
  hls::stream<float> &v4674 /* v4674[768] */ = A_fifo2[0][2]; // L6108
  hls::stream<float> &v4675 /* v4675[768] */ = B_fifo2[1][1]; // L6109
  PE_kernel_V_1_0(v4672, v4673, v4674, v4675, v4658, 0, 1);   // L6110
  hls::stream<float> &v4676 /* v4676[768] */ = A_fifo2[0][2]; // L6112
  hls::stream<float> &v4677 /* v4677[768] */ = B_fifo2[2][0]; // L6113
  hls::stream<float> &v4678 /* v4678[768] */ = A_fifo2[0][3]; // L6117
  hls::stream<float> &v4679 /* v4679[768] */ = B_fifo2[2][1]; // L6118
  PE_kernel_V_2_0(v4676, v4677, v4678, v4679, v4658, 0, 2);   // L6119
  hls::stream<float> &v4680 /* v4680[768] */ = A_fifo2[0][3]; // L6121
  hls::stream<float> &v4681 /* v4681[768] */ = B_fifo2[3][0]; // L6122
  hls::stream<float> &v4682 /* v4682[768] */ = A_fifo2[0][4]; // L6126
  hls::stream<float> &v4683 /* v4683[768] */ = B_fifo2[3][1]; // L6127
  PE_kernel_V_3_0(v4680, v4681, v4682, v4683, v4658, 0, 3);   // L6128
  hls::stream<float> &v4684 /* v4684[768] */ = A_fifo2[0][4]; // L6130
  hls::stream<float> &v4685 /* v4685[768] */ = B_fifo2[4][0]; // L6131
  hls::stream<float> &v4686 /* v4686[768] */ = A_fifo2[0][5]; // L6135
  hls::stream<float> &v4687 /* v4687[768] */ = B_fifo2[4][1]; // L6136
  PE_kernel_V_4_0(v4684, v4685, v4686, v4687, v4658, 0, 4);   // L6137
  hls::stream<float> &v4688 /* v4688[768] */ = A_fifo2[0][5]; // L6139
  hls::stream<float> &v4689 /* v4689[768] */ = B_fifo2[5][0]; // L6140
  hls::stream<float> &v4690 /* v4690[768] */ = A_fifo2[0][6]; // L6144
  hls::stream<float> &v4691 /* v4691[768] */ = B_fifo2[5][1]; // L6145
  PE_kernel_V_5_0(v4688, v4689, v4690, v4691, v4658, 0, 5);   // L6146
  hls::stream<float> &v4692 /* v4692[768] */ = A_fifo2[0][6]; // L6148
  hls::stream<float> &v4693 /* v4693[768] */ = B_fifo2[6][0]; // L6149
  hls::stream<float> &v4694 /* v4694[768] */ = A_fifo2[0][7]; // L6153
  hls::stream<float> &v4695 /* v4695[768] */ = B_fifo2[6][1]; // L6154
  PE_kernel_V_6_0(v4692, v4693, v4694, v4695, v4658, 0, 6);   // L6155
  hls::stream<float> &v4696 /* v4696[768] */ = A_fifo2[0][7]; // L6157
  hls::stream<float> &v4697 /* v4697[768] */ = B_fifo2[7][0]; // L6158
  hls::stream<float> &v4698 /* v4698[768] */ = A_fifo2[0][8]; // L6162
  hls::stream<float> &v4699 /* v4699[768] */ = B_fifo2[7][1]; // L6163
  PE_kernel_V_7_0(v4696, v4697, v4698, v4699, v4658, 0, 7);   // L6164
  hls::stream<float> &v4700 /* v4700[768] */ = A_fifo2[1][0]; // L6165
  hls::stream<float> &v4701 /* v4701[768] */ = B_fifo2[0][1]; // L6166
  hls::stream<float> &v4702 /* v4702[768] */ = A_fifo2[1][1]; // L6167
  hls::stream<float> &v4703 /* v4703[768] */ = B_fifo2[0][2]; // L6168
  PE_kernel_V_0_1(v4700, v4701, v4702, v4703, v4658, 1, 0);   // L6169
  hls::stream<float> &v4704 /* v4704[768] */ = A_fifo2[1][1]; // L6170
  hls::stream<float> &v4705 /* v4705[768] */ = B_fifo2[1][1]; // L6171
  hls::stream<float> &v4706 /* v4706[768] */ = A_fifo2[1][2]; // L6172
  hls::stream<float> &v4707 /* v4707[768] */ = B_fifo2[1][2]; // L6173
  PE_kernel_V_1_1(v4704, v4705, v4706, v4707, v4658, 1, 1);   // L6174
  hls::stream<float> &v4708 /* v4708[768] */ = A_fifo2[1][2]; // L6175
  hls::stream<float> &v4709 /* v4709[768] */ = B_fifo2[2][1]; // L6176
  hls::stream<float> &v4710 /* v4710[768] */ = A_fifo2[1][3]; // L6177
  hls::stream<float> &v4711 /* v4711[768] */ = B_fifo2[2][2]; // L6178
  PE_kernel_V_2_1(v4708, v4709, v4710, v4711, v4658, 1, 2);   // L6179
  hls::stream<float> &v4712 /* v4712[768] */ = A_fifo2[1][3]; // L6180
  hls::stream<float> &v4713 /* v4713[768] */ = B_fifo2[3][1]; // L6181
  hls::stream<float> &v4714 /* v4714[768] */ = A_fifo2[1][4]; // L6182
  hls::stream<float> &v4715 /* v4715[768] */ = B_fifo2[3][2]; // L6183
  PE_kernel_V_3_1(v4712, v4713, v4714, v4715, v4658, 1, 3);   // L6184
  hls::stream<float> &v4716 /* v4716[768] */ = A_fifo2[1][4]; // L6185
  hls::stream<float> &v4717 /* v4717[768] */ = B_fifo2[4][1]; // L6186
  hls::stream<float> &v4718 /* v4718[768] */ = A_fifo2[1][5]; // L6187
  hls::stream<float> &v4719 /* v4719[768] */ = B_fifo2[4][2]; // L6188
  PE_kernel_V_4_1(v4716, v4717, v4718, v4719, v4658, 1, 4);   // L6189
  hls::stream<float> &v4720 /* v4720[768] */ = A_fifo2[1][5]; // L6190
  hls::stream<float> &v4721 /* v4721[768] */ = B_fifo2[5][1]; // L6191
  hls::stream<float> &v4722 /* v4722[768] */ = A_fifo2[1][6]; // L6192
  hls::stream<float> &v4723 /* v4723[768] */ = B_fifo2[5][2]; // L6193
  PE_kernel_V_5_1(v4720, v4721, v4722, v4723, v4658, 1, 5);   // L6194
  hls::stream<float> &v4724 /* v4724[768] */ = A_fifo2[1][6]; // L6195
  hls::stream<float> &v4725 /* v4725[768] */ = B_fifo2[6][1]; // L6196
  hls::stream<float> &v4726 /* v4726[768] */ = A_fifo2[1][7]; // L6197
  hls::stream<float> &v4727 /* v4727[768] */ = B_fifo2[6][2]; // L6198
  PE_kernel_V_6_1(v4724, v4725, v4726, v4727, v4658, 1, 6);   // L6199
  hls::stream<float> &v4728 /* v4728[768] */ = A_fifo2[1][7]; // L6200
  hls::stream<float> &v4729 /* v4729[768] */ = B_fifo2[7][1]; // L6201
  hls::stream<float> &v4730 /* v4730[768] */ = A_fifo2[1][8]; // L6202
  hls::stream<float> &v4731 /* v4731[768] */ = B_fifo2[7][2]; // L6203
  PE_kernel_V_7_1(v4728, v4729, v4730, v4731, v4658, 1, 7);   // L6204
  hls::stream<float> &v4732 /* v4732[768] */ = A_fifo2[2][0]; // L6205
  hls::stream<float> &v4733 /* v4733[768] */ = B_fifo2[0][2]; // L6206
  hls::stream<float> &v4734 /* v4734[768] */ = A_fifo2[2][1]; // L6207
  hls::stream<float> &v4735 /* v4735[768] */ = B_fifo2[0][3]; // L6208
  PE_kernel_V_0_2(v4732, v4733, v4734, v4735, v4658, 2, 0);   // L6209
  hls::stream<float> &v4736 /* v4736[768] */ = A_fifo2[2][1]; // L6210
  hls::stream<float> &v4737 /* v4737[768] */ = B_fifo2[1][2]; // L6211
  hls::stream<float> &v4738 /* v4738[768] */ = A_fifo2[2][2]; // L6212
  hls::stream<float> &v4739 /* v4739[768] */ = B_fifo2[1][3]; // L6213
  PE_kernel_V_1_2(v4736, v4737, v4738, v4739, v4658, 2, 1);   // L6214
  hls::stream<float> &v4740 /* v4740[768] */ = A_fifo2[2][2]; // L6215
  hls::stream<float> &v4741 /* v4741[768] */ = B_fifo2[2][2]; // L6216
  hls::stream<float> &v4742 /* v4742[768] */ = A_fifo2[2][3]; // L6217
  hls::stream<float> &v4743 /* v4743[768] */ = B_fifo2[2][3]; // L6218
  PE_kernel_V_2_2(v4740, v4741, v4742, v4743, v4658, 2, 2);   // L6219
  hls::stream<float> &v4744 /* v4744[768] */ = A_fifo2[2][3]; // L6220
  hls::stream<float> &v4745 /* v4745[768] */ = B_fifo2[3][2]; // L6221
  hls::stream<float> &v4746 /* v4746[768] */ = A_fifo2[2][4]; // L6222
  hls::stream<float> &v4747 /* v4747[768] */ = B_fifo2[3][3]; // L6223
  PE_kernel_V_3_2(v4744, v4745, v4746, v4747, v4658, 2, 3);   // L6224
  hls::stream<float> &v4748 /* v4748[768] */ = A_fifo2[2][4]; // L6225
  hls::stream<float> &v4749 /* v4749[768] */ = B_fifo2[4][2]; // L6226
  hls::stream<float> &v4750 /* v4750[768] */ = A_fifo2[2][5]; // L6227
  hls::stream<float> &v4751 /* v4751[768] */ = B_fifo2[4][3]; // L6228
  PE_kernel_V_4_2(v4748, v4749, v4750, v4751, v4658, 2, 4);   // L6229
  hls::stream<float> &v4752 /* v4752[768] */ = A_fifo2[2][5]; // L6230
  hls::stream<float> &v4753 /* v4753[768] */ = B_fifo2[5][2]; // L6231
  hls::stream<float> &v4754 /* v4754[768] */ = A_fifo2[2][6]; // L6232
  hls::stream<float> &v4755 /* v4755[768] */ = B_fifo2[5][3]; // L6233
  PE_kernel_V_5_2(v4752, v4753, v4754, v4755, v4658, 2, 5);   // L6234
  hls::stream<float> &v4756 /* v4756[768] */ = A_fifo2[2][6]; // L6235
  hls::stream<float> &v4757 /* v4757[768] */ = B_fifo2[6][2]; // L6236
  hls::stream<float> &v4758 /* v4758[768] */ = A_fifo2[2][7]; // L6237
  hls::stream<float> &v4759 /* v4759[768] */ = B_fifo2[6][3]; // L6238
  PE_kernel_V_6_2(v4756, v4757, v4758, v4759, v4658, 2, 6);   // L6239
  hls::stream<float> &v4760 /* v4760[768] */ = A_fifo2[2][7]; // L6240
  hls::stream<float> &v4761 /* v4761[768] */ = B_fifo2[7][2]; // L6241
  hls::stream<float> &v4762 /* v4762[768] */ = A_fifo2[2][8]; // L6242
  hls::stream<float> &v4763 /* v4763[768] */ = B_fifo2[7][3]; // L6243
  PE_kernel_V_7_2(v4760, v4761, v4762, v4763, v4658, 2, 7);   // L6244
  hls::stream<float> &v4764 /* v4764[768] */ = A_fifo2[3][0]; // L6245
  hls::stream<float> &v4765 /* v4765[768] */ = B_fifo2[0][3]; // L6246
  hls::stream<float> &v4766 /* v4766[768] */ = A_fifo2[3][1]; // L6247
  hls::stream<float> &v4767 /* v4767[768] */ = B_fifo2[0][4]; // L6248
  PE_kernel_V_0_3(v4764, v4765, v4766, v4767, v4658, 3, 0);   // L6249
  hls::stream<float> &v4768 /* v4768[768] */ = A_fifo2[3][1]; // L6250
  hls::stream<float> &v4769 /* v4769[768] */ = B_fifo2[1][3]; // L6251
  hls::stream<float> &v4770 /* v4770[768] */ = A_fifo2[3][2]; // L6252
  hls::stream<float> &v4771 /* v4771[768] */ = B_fifo2[1][4]; // L6253
  PE_kernel_V_1_3(v4768, v4769, v4770, v4771, v4658, 3, 1);   // L6254
  hls::stream<float> &v4772 /* v4772[768] */ = A_fifo2[3][2]; // L6255
  hls::stream<float> &v4773 /* v4773[768] */ = B_fifo2[2][3]; // L6256
  hls::stream<float> &v4774 /* v4774[768] */ = A_fifo2[3][3]; // L6257
  hls::stream<float> &v4775 /* v4775[768] */ = B_fifo2[2][4]; // L6258
  PE_kernel_V_2_3(v4772, v4773, v4774, v4775, v4658, 3, 2);   // L6259
  hls::stream<float> &v4776 /* v4776[768] */ = A_fifo2[3][3]; // L6260
  hls::stream<float> &v4777 /* v4777[768] */ = B_fifo2[3][3]; // L6261
  hls::stream<float> &v4778 /* v4778[768] */ = A_fifo2[3][4]; // L6262
  hls::stream<float> &v4779 /* v4779[768] */ = B_fifo2[3][4]; // L6263
  PE_kernel_V_3_3(v4776, v4777, v4778, v4779, v4658, 3, 3);   // L6264
  hls::stream<float> &v4780 /* v4780[768] */ = A_fifo2[3][4]; // L6265
  hls::stream<float> &v4781 /* v4781[768] */ = B_fifo2[4][3]; // L6266
  hls::stream<float> &v4782 /* v4782[768] */ = A_fifo2[3][5]; // L6267
  hls::stream<float> &v4783 /* v4783[768] */ = B_fifo2[4][4]; // L6268
  PE_kernel_V_4_3(v4780, v4781, v4782, v4783, v4658, 3, 4);   // L6269
  hls::stream<float> &v4784 /* v4784[768] */ = A_fifo2[3][5]; // L6270
  hls::stream<float> &v4785 /* v4785[768] */ = B_fifo2[5][3]; // L6271
  hls::stream<float> &v4786 /* v4786[768] */ = A_fifo2[3][6]; // L6272
  hls::stream<float> &v4787 /* v4787[768] */ = B_fifo2[5][4]; // L6273
  PE_kernel_V_5_3(v4784, v4785, v4786, v4787, v4658, 3, 5);   // L6274
  hls::stream<float> &v4788 /* v4788[768] */ = A_fifo2[3][6]; // L6275
  hls::stream<float> &v4789 /* v4789[768] */ = B_fifo2[6][3]; // L6276
  hls::stream<float> &v4790 /* v4790[768] */ = A_fifo2[3][7]; // L6277
  hls::stream<float> &v4791 /* v4791[768] */ = B_fifo2[6][4]; // L6278
  PE_kernel_V_6_3(v4788, v4789, v4790, v4791, v4658, 3, 6);   // L6279
  hls::stream<float> &v4792 /* v4792[768] */ = A_fifo2[3][7]; // L6280
  hls::stream<float> &v4793 /* v4793[768] */ = B_fifo2[7][3]; // L6281
  hls::stream<float> &v4794 /* v4794[768] */ = A_fifo2[3][8]; // L6282
  hls::stream<float> &v4795 /* v4795[768] */ = B_fifo2[7][4]; // L6283
  PE_kernel_V_7_3(v4792, v4793, v4794, v4795, v4658, 3, 7);   // L6284
  hls::stream<float> &v4796 /* v4796[768] */ = A_fifo2[4][0]; // L6285
  hls::stream<float> &v4797 /* v4797[768] */ = B_fifo2[0][4]; // L6286
  hls::stream<float> &v4798 /* v4798[768] */ = A_fifo2[4][1]; // L6287
  hls::stream<float> &v4799 /* v4799[768] */ = B_fifo2[0][5]; // L6288
  PE_kernel_V_0_4(v4796, v4797, v4798, v4799, v4658, 4, 0);   // L6289
  hls::stream<float> &v4800 /* v4800[768] */ = A_fifo2[4][1]; // L6290
  hls::stream<float> &v4801 /* v4801[768] */ = B_fifo2[1][4]; // L6291
  hls::stream<float> &v4802 /* v4802[768] */ = A_fifo2[4][2]; // L6292
  hls::stream<float> &v4803 /* v4803[768] */ = B_fifo2[1][5]; // L6293
  PE_kernel_V_1_4(v4800, v4801, v4802, v4803, v4658, 4, 1);   // L6294
  hls::stream<float> &v4804 /* v4804[768] */ = A_fifo2[4][2]; // L6295
  hls::stream<float> &v4805 /* v4805[768] */ = B_fifo2[2][4]; // L6296
  hls::stream<float> &v4806 /* v4806[768] */ = A_fifo2[4][3]; // L6297
  hls::stream<float> &v4807 /* v4807[768] */ = B_fifo2[2][5]; // L6298
  PE_kernel_V_2_4(v4804, v4805, v4806, v4807, v4658, 4, 2);   // L6299
  hls::stream<float> &v4808 /* v4808[768] */ = A_fifo2[4][3]; // L6300
  hls::stream<float> &v4809 /* v4809[768] */ = B_fifo2[3][4]; // L6301
  hls::stream<float> &v4810 /* v4810[768] */ = A_fifo2[4][4]; // L6302
  hls::stream<float> &v4811 /* v4811[768] */ = B_fifo2[3][5]; // L6303
  PE_kernel_V_3_4(v4808, v4809, v4810, v4811, v4658, 4, 3);   // L6304
  hls::stream<float> &v4812 /* v4812[768] */ = A_fifo2[4][4]; // L6305
  hls::stream<float> &v4813 /* v4813[768] */ = B_fifo2[4][4]; // L6306
  hls::stream<float> &v4814 /* v4814[768] */ = A_fifo2[4][5]; // L6307
  hls::stream<float> &v4815 /* v4815[768] */ = B_fifo2[4][5]; // L6308
  PE_kernel_V_4_4(v4812, v4813, v4814, v4815, v4658, 4, 4);   // L6309
  hls::stream<float> &v4816 /* v4816[768] */ = A_fifo2[4][5]; // L6310
  hls::stream<float> &v4817 /* v4817[768] */ = B_fifo2[5][4]; // L6311
  hls::stream<float> &v4818 /* v4818[768] */ = A_fifo2[4][6]; // L6312
  hls::stream<float> &v4819 /* v4819[768] */ = B_fifo2[5][5]; // L6313
  PE_kernel_V_5_4(v4816, v4817, v4818, v4819, v4658, 4, 5);   // L6314
  hls::stream<float> &v4820 /* v4820[768] */ = A_fifo2[4][6]; // L6315
  hls::stream<float> &v4821 /* v4821[768] */ = B_fifo2[6][4]; // L6316
  hls::stream<float> &v4822 /* v4822[768] */ = A_fifo2[4][7]; // L6317
  hls::stream<float> &v4823 /* v4823[768] */ = B_fifo2[6][5]; // L6318
  PE_kernel_V_6_4(v4820, v4821, v4822, v4823, v4658, 4, 6);   // L6319
  hls::stream<float> &v4824 /* v4824[768] */ = A_fifo2[4][7]; // L6320
  hls::stream<float> &v4825 /* v4825[768] */ = B_fifo2[7][4]; // L6321
  hls::stream<float> &v4826 /* v4826[768] */ = A_fifo2[4][8]; // L6322
  hls::stream<float> &v4827 /* v4827[768] */ = B_fifo2[7][5]; // L6323
  PE_kernel_V_7_4(v4824, v4825, v4826, v4827, v4658, 4, 7);   // L6324
  hls::stream<float> &v4828 /* v4828[768] */ = A_fifo2[5][0]; // L6325
  hls::stream<float> &v4829 /* v4829[768] */ = B_fifo2[0][5]; // L6326
  hls::stream<float> &v4830 /* v4830[768] */ = A_fifo2[5][1]; // L6327
  hls::stream<float> &v4831 /* v4831[768] */ = B_fifo2[0][6]; // L6328
  PE_kernel_V_0_5(v4828, v4829, v4830, v4831, v4658, 5, 0);   // L6329
  hls::stream<float> &v4832 /* v4832[768] */ = A_fifo2[5][1]; // L6330
  hls::stream<float> &v4833 /* v4833[768] */ = B_fifo2[1][5]; // L6331
  hls::stream<float> &v4834 /* v4834[768] */ = A_fifo2[5][2]; // L6332
  hls::stream<float> &v4835 /* v4835[768] */ = B_fifo2[1][6]; // L6333
  PE_kernel_V_1_5(v4832, v4833, v4834, v4835, v4658, 5, 1);   // L6334
  hls::stream<float> &v4836 /* v4836[768] */ = A_fifo2[5][2]; // L6335
  hls::stream<float> &v4837 /* v4837[768] */ = B_fifo2[2][5]; // L6336
  hls::stream<float> &v4838 /* v4838[768] */ = A_fifo2[5][3]; // L6337
  hls::stream<float> &v4839 /* v4839[768] */ = B_fifo2[2][6]; // L6338
  PE_kernel_V_2_5(v4836, v4837, v4838, v4839, v4658, 5, 2);   // L6339
  hls::stream<float> &v4840 /* v4840[768] */ = A_fifo2[5][3]; // L6340
  hls::stream<float> &v4841 /* v4841[768] */ = B_fifo2[3][5]; // L6341
  hls::stream<float> &v4842 /* v4842[768] */ = A_fifo2[5][4]; // L6342
  hls::stream<float> &v4843 /* v4843[768] */ = B_fifo2[3][6]; // L6343
  PE_kernel_V_3_5(v4840, v4841, v4842, v4843, v4658, 5, 3);   // L6344
  hls::stream<float> &v4844 /* v4844[768] */ = A_fifo2[5][4]; // L6345
  hls::stream<float> &v4845 /* v4845[768] */ = B_fifo2[4][5]; // L6346
  hls::stream<float> &v4846 /* v4846[768] */ = A_fifo2[5][5]; // L6347
  hls::stream<float> &v4847 /* v4847[768] */ = B_fifo2[4][6]; // L6348
  PE_kernel_V_4_5(v4844, v4845, v4846, v4847, v4658, 5, 4);   // L6349
  hls::stream<float> &v4848 /* v4848[768] */ = A_fifo2[5][5]; // L6350
  hls::stream<float> &v4849 /* v4849[768] */ = B_fifo2[5][5]; // L6351
  hls::stream<float> &v4850 /* v4850[768] */ = A_fifo2[5][6]; // L6352
  hls::stream<float> &v4851 /* v4851[768] */ = B_fifo2[5][6]; // L6353
  PE_kernel_V_5_5(v4848, v4849, v4850, v4851, v4658, 5, 5);   // L6354
  hls::stream<float> &v4852 /* v4852[768] */ = A_fifo2[5][6]; // L6355
  hls::stream<float> &v4853 /* v4853[768] */ = B_fifo2[6][5]; // L6356
  hls::stream<float> &v4854 /* v4854[768] */ = A_fifo2[5][7]; // L6357
  hls::stream<float> &v4855 /* v4855[768] */ = B_fifo2[6][6]; // L6358
  PE_kernel_V_6_5(v4852, v4853, v4854, v4855, v4658, 5, 6);   // L6359
  hls::stream<float> &v4856 /* v4856[768] */ = A_fifo2[5][7]; // L6360
  hls::stream<float> &v4857 /* v4857[768] */ = B_fifo2[7][5]; // L6361
  hls::stream<float> &v4858 /* v4858[768] */ = A_fifo2[5][8]; // L6362
  hls::stream<float> &v4859 /* v4859[768] */ = B_fifo2[7][6]; // L6363
  PE_kernel_V_7_5(v4856, v4857, v4858, v4859, v4658, 5, 7);   // L6364
  hls::stream<float> &v4860 /* v4860[768] */ = A_fifo2[6][0]; // L6365
  hls::stream<float> &v4861 /* v4861[768] */ = B_fifo2[0][6]; // L6366
  hls::stream<float> &v4862 /* v4862[768] */ = A_fifo2[6][1]; // L6367
  hls::stream<float> &v4863 /* v4863[768] */ = B_fifo2[0][7]; // L6368
  PE_kernel_V_0_6(v4860, v4861, v4862, v4863, v4658, 6, 0);   // L6369
  hls::stream<float> &v4864 /* v4864[768] */ = A_fifo2[6][1]; // L6370
  hls::stream<float> &v4865 /* v4865[768] */ = B_fifo2[1][6]; // L6371
  hls::stream<float> &v4866 /* v4866[768] */ = A_fifo2[6][2]; // L6372
  hls::stream<float> &v4867 /* v4867[768] */ = B_fifo2[1][7]; // L6373
  PE_kernel_V_1_6(v4864, v4865, v4866, v4867, v4658, 6, 1);   // L6374
  hls::stream<float> &v4868 /* v4868[768] */ = A_fifo2[6][2]; // L6375
  hls::stream<float> &v4869 /* v4869[768] */ = B_fifo2[2][6]; // L6376
  hls::stream<float> &v4870 /* v4870[768] */ = A_fifo2[6][3]; // L6377
  hls::stream<float> &v4871 /* v4871[768] */ = B_fifo2[2][7]; // L6378
  PE_kernel_V_2_6(v4868, v4869, v4870, v4871, v4658, 6, 2);   // L6379
  hls::stream<float> &v4872 /* v4872[768] */ = A_fifo2[6][3]; // L6380
  hls::stream<float> &v4873 /* v4873[768] */ = B_fifo2[3][6]; // L6381
  hls::stream<float> &v4874 /* v4874[768] */ = A_fifo2[6][4]; // L6382
  hls::stream<float> &v4875 /* v4875[768] */ = B_fifo2[3][7]; // L6383
  PE_kernel_V_3_6(v4872, v4873, v4874, v4875, v4658, 6, 3);   // L6384
  hls::stream<float> &v4876 /* v4876[768] */ = A_fifo2[6][4]; // L6385
  hls::stream<float> &v4877 /* v4877[768] */ = B_fifo2[4][6]; // L6386
  hls::stream<float> &v4878 /* v4878[768] */ = A_fifo2[6][5]; // L6387
  hls::stream<float> &v4879 /* v4879[768] */ = B_fifo2[4][7]; // L6388
  PE_kernel_V_4_6(v4876, v4877, v4878, v4879, v4658, 6, 4);   // L6389
  hls::stream<float> &v4880 /* v4880[768] */ = A_fifo2[6][5]; // L6390
  hls::stream<float> &v4881 /* v4881[768] */ = B_fifo2[5][6]; // L6391
  hls::stream<float> &v4882 /* v4882[768] */ = A_fifo2[6][6]; // L6392
  hls::stream<float> &v4883 /* v4883[768] */ = B_fifo2[5][7]; // L6393
  PE_kernel_V_5_6(v4880, v4881, v4882, v4883, v4658, 6, 5);   // L6394
  hls::stream<float> &v4884 /* v4884[768] */ = A_fifo2[6][6]; // L6395
  hls::stream<float> &v4885 /* v4885[768] */ = B_fifo2[6][6]; // L6396
  hls::stream<float> &v4886 /* v4886[768] */ = A_fifo2[6][7]; // L6397
  hls::stream<float> &v4887 /* v4887[768] */ = B_fifo2[6][7]; // L6398
  PE_kernel_V_6_6(v4884, v4885, v4886, v4887, v4658, 6, 6);   // L6399
  hls::stream<float> &v4888 /* v4888[768] */ = A_fifo2[6][7]; // L6400
  hls::stream<float> &v4889 /* v4889[768] */ = B_fifo2[7][6]; // L6401
  hls::stream<float> &v4890 /* v4890[768] */ = A_fifo2[6][8]; // L6402
  hls::stream<float> &v4891 /* v4891[768] */ = B_fifo2[7][7]; // L6403
  PE_kernel_V_7_6(v4888, v4889, v4890, v4891, v4658, 6, 7);   // L6404
  hls::stream<float> &v4892 /* v4892[768] */ = A_fifo2[7][0]; // L6405
  hls::stream<float> &v4893 /* v4893[768] */ = B_fifo2[0][7]; // L6406
  hls::stream<float> &v4894 /* v4894[768] */ = A_fifo2[7][1]; // L6407
  hls::stream<float> &v4895 /* v4895[768] */ = B_fifo2[0][8]; // L6408
  PE_kernel_V_0_7(v4892, v4893, v4894, v4895, v4658, 7, 0);   // L6409
  hls::stream<float> &v4896 /* v4896[768] */ = A_fifo2[7][1]; // L6410
  hls::stream<float> &v4897 /* v4897[768] */ = B_fifo2[1][7]; // L6411
  hls::stream<float> &v4898 /* v4898[768] */ = A_fifo2[7][2]; // L6412
  hls::stream<float> &v4899 /* v4899[768] */ = B_fifo2[1][8]; // L6413
  PE_kernel_V_1_7(v4896, v4897, v4898, v4899, v4658, 7, 1);   // L6414
  hls::stream<float> &v4900 /* v4900[768] */ = A_fifo2[7][2]; // L6415
  hls::stream<float> &v4901 /* v4901[768] */ = B_fifo2[2][7]; // L6416
  hls::stream<float> &v4902 /* v4902[768] */ = A_fifo2[7][3]; // L6417
  hls::stream<float> &v4903 /* v4903[768] */ = B_fifo2[2][8]; // L6418
  PE_kernel_V_2_7(v4900, v4901, v4902, v4903, v4658, 7, 2);   // L6419
  hls::stream<float> &v4904 /* v4904[768] */ = A_fifo2[7][3]; // L6420
  hls::stream<float> &v4905 /* v4905[768] */ = B_fifo2[3][7]; // L6421
  hls::stream<float> &v4906 /* v4906[768] */ = A_fifo2[7][4]; // L6422
  hls::stream<float> &v4907 /* v4907[768] */ = B_fifo2[3][8]; // L6423
  PE_kernel_V_3_7(v4904, v4905, v4906, v4907, v4658, 7, 3);   // L6424
  hls::stream<float> &v4908 /* v4908[768] */ = A_fifo2[7][4]; // L6425
  hls::stream<float> &v4909 /* v4909[768] */ = B_fifo2[4][7]; // L6426
  hls::stream<float> &v4910 /* v4910[768] */ = A_fifo2[7][5]; // L6427
  hls::stream<float> &v4911 /* v4911[768] */ = B_fifo2[4][8]; // L6428
  PE_kernel_V_4_7(v4908, v4909, v4910, v4911, v4658, 7, 4);   // L6429
  hls::stream<float> &v4912 /* v4912[768] */ = A_fifo2[7][5]; // L6430
  hls::stream<float> &v4913 /* v4913[768] */ = B_fifo2[5][7]; // L6431
  hls::stream<float> &v4914 /* v4914[768] */ = A_fifo2[7][6]; // L6432
  hls::stream<float> &v4915 /* v4915[768] */ = B_fifo2[5][8]; // L6433
  PE_kernel_V_5_7(v4912, v4913, v4914, v4915, v4658, 7, 5);   // L6434
  hls::stream<float> &v4916 /* v4916[768] */ = A_fifo2[7][6]; // L6435
  hls::stream<float> &v4917 /* v4917[768] */ = B_fifo2[6][7]; // L6436
  hls::stream<float> &v4918 /* v4918[768] */ = A_fifo2[7][7]; // L6437
  hls::stream<float> &v4919 /* v4919[768] */ = B_fifo2[6][8]; // L6438
  PE_kernel_V_6_7(v4916, v4917, v4918, v4919, v4658, 7, 6);   // L6439
  hls::stream<float> &v4920 /* v4920[768] */ = A_fifo2[7][7]; // L6440
  hls::stream<float> &v4921 /* v4921[768] */ = B_fifo2[7][7]; // L6441
  hls::stream<float> &v4922 /* v4922[768] */ = A_fifo2[7][8]; // L6442
  hls::stream<float> &v4923 /* v4923[768] */ = B_fifo2[7][8]; // L6443
  PE_kernel_V_7_7(v4920, v4921, v4922, v4923, v4658, 7, 7);   // L6444
l_data_drain_k197:
  for (int k197 = 0; k197 < 768; k197++) { // L6445
  l_S_m_4_m5:
    for (int m5 = 0; m5 < 8; m5++) {       // L6446
      float v4926 = A_fifo2[m5][8].read(); // A_fifo2[m5][8][k197];	// L6447
      A_drain2[m5] = v4926;                // L6448
    }
  l_S_n_5_n5:
    for (int n5 = 0; n5 < 8; n5++) {       // L6450
      float v4928 = B_fifo2[n5][8].read(); // B_fifo2[n5][8][k197];	// L6451
      B_drain2[n5] = v4928;                // L6452
    }
  }
}

void systolic_V(float v4929[64][768], float v4930[768][768],
                float v4931[64][768]) { // L6457
  float local_A2[8][768];               // L6458
#pragma HLS array_partition variable = local_A2 complete dim = 1

  float local_B2[768][8]; // L6459
#pragma HLS array_partition variable = local_B2 complete dim = 2

  float local_C2[8][8]; // L6460
#pragma HLS array_partition variable = local_C2 complete dim = 1
#pragma HLS array_partition variable = local_C2 complete dim = 2

l_outer_tile_mi2:
  for (int mi2 = 0; mi2 < 8; mi2++) { // L6461
  l_ni2:
    for (int ni2 = 0; ni2 < 96; ni2++) { // L6462
                                         // #pragma HLS dataflow
    l_load_A_tile_ak2:
      for (int ak2 = 0; ak2 < 768; ak2++) { // L6463
      l_ai2:
        for (int ai2 = 0; ai2 < 8; ai2++) { // L6464
#pragma HLS pipeline II = 1
          ap_int<33> v4939 = ni2;                        // L6465
          bool v4940 = v4939 == 0;                       // L6468
          if (v4940) {                                   // L6469
            float v4941 = v4929[((mi2 * 8) + ai2)][ak2]; // L6470
            local_A2[ai2][ak2] = v4941;                  // L6471
          }
        }
      }
    l_load_B_tile_bk2:
      for (int bk2 = 0; bk2 < 768; bk2++) { // L6475
      l_bj2:
        for (int bj2 = 0; bj2 < 8; bj2++) { // L6476
#pragma HLS pipeline II = 1
          float v4944 = v4930[bk2][((ni2 * 8) + bj2)]; // L6477
          local_B2[bk2][bj2] = v4944;                  // L6478
        }
      }
      systolic_tile_V(local_A2, local_B2, local_C2); // L6481
    l_store_C_tile_sj2:
      for (int sj2 = 0; sj2 < 8; sj2++) { // L6482
      l_si2:
        for (int si2 = 0; si2 < 8; si2++) { // L6483
#pragma HLS pipeline II = 1
          float v4947 = local_C2[si2][sj2];                    // L6484
          v4931[((mi2 * 8) + si2)][((ni2 * 8) + sj2)] = v4947; // L6485
        }
      }
    }
  }
}

void PE_kernel_QKT_0_0(hls::stream<float> &v4948 /* v4948[64] */,
                       hls::stream<float> &v4949 /* v4949[64] */,
                       hls::stream<float> &v4950 /* v4950[64] */,
                       hls::stream<float> &v4951 /* v4951[64] */,
                       float v4952[8][8], int v4953,
                       int v4954) { // L6492
#pragma HLS stream variable = v4948 depth = 9
#pragma HLS stream variable = v4949 depth = 9
#pragma HLS stream variable = v4950 depth = 9
#pragma HLS stream variable = v4951 depth = 9
#pragma HLS array_partition variable = v4952 complete dim = 1
#pragma HLS array_partition variable = v4952 complete dim = 2

  float v192;      // L6495
  v192 = 0.000000; // L6496
l_S_k_0_k198:
  for (int k198 = 0; k198 < 64; k198++) { // L6497
    float v4957 = v4948.read();           // v4948[k198];	// L6498
    float a192;                           // L6499
    a192 = v4957;                         // L6500
    float v4959 = v4949.read();           // v4949[k198];	// L6501
    float b192;                           // L6502
    b192 = v4959;                         // L6503
    float v4961 = a192;                   // L6504
    float v4962 = b192;                   // L6505
    float v4963 = v4961 * v4962;          // L6506
    float v4964 = v192;                   // L6507
    float v4965 = v4964 + v4963;          // L6508
    v192 = v4965;                         // L6509
    float v4966 = a192;                   // L6510
    v4950.write(v4966);                   // v4950[k198] = v4966;	// L6511
    float v4967 = b192;                   // L6512
    v4951.write(v4967);                   // v4951[k198] = v4967;	// L6513
  }
  float v4968 = v192;          // L6515
  v4952[v4953][v4954] = v4968; // L6516
}

void PE_kernel_QKT_1_0(hls::stream<float> &v4969 /* v4969[64] */,
                       hls::stream<float> &v4970 /* v4970[64] */,
                       hls::stream<float> &v4971 /* v4971[64] */,
                       hls::stream<float> &v4972 /* v4972[64] */,
                       float v4973[8][8], int v4974,
                       int v4975) { // L6519
#pragma HLS stream variable = v4969 depth = 9
#pragma HLS stream variable = v4970 depth = 9
#pragma HLS stream variable = v4971 depth = 9
#pragma HLS stream variable = v4972 depth = 9
#pragma HLS array_partition variable = v4973 complete dim = 1
#pragma HLS array_partition variable = v4973 complete dim = 2

  float v193;      // L6522
  v193 = 0.000000; // L6523
l_S_k_0_k199:
  for (int k199 = 0; k199 < 64; k199++) { // L6524
    float v4978 = v4969.read();           // v4969[k199];	// L6525
    float a193;                           // L6526
    a193 = v4978;                         // L6527
    float v4980 = v4970.read();           // v4970[k199];	// L6528
    float b193;                           // L6529
    b193 = v4980;                         // L6530
    float v4982 = a193;                   // L6531
    float v4983 = b193;                   // L6532
    float v4984 = v4982 * v4983;          // L6533
    float v4985 = v193;                   // L6534
    float v4986 = v4985 + v4984;          // L6535
    v193 = v4986;                         // L6536
    float v4987 = a193;                   // L6537
    v4971.write(v4987);                   // v4971[k199] = v4987;	// L6538
    float v4988 = b193;                   // L6539
    v4972.write(v4988);                   // v4972[k199] = v4988;	// L6540
  }
  float v4989 = v193;          // L6542
  v4973[v4974][v4975] = v4989; // L6543
}

void PE_kernel_QKT_2_0(hls::stream<float> &v4990 /* v4990[64] */,
                       hls::stream<float> &v4991 /* v4991[64] */,
                       hls::stream<float> &v4992 /* v4992[64] */,
                       hls::stream<float> &v4993 /* v4993[64] */,
                       float v4994[8][8], int v4995,
                       int v4996) { // L6546
#pragma HLS stream variable = v4990 depth = 9
#pragma HLS stream variable = v4991 depth = 9
#pragma HLS stream variable = v4992 depth = 9
#pragma HLS stream variable = v4993 depth = 9
#pragma HLS array_partition variable = v4994 complete dim = 1
#pragma HLS array_partition variable = v4994 complete dim = 2

  float v194;      // L6549
  v194 = 0.000000; // L6550
l_S_k_0_k200:
  for (int k200 = 0; k200 < 64; k200++) { // L6551
    float v4999 = v4990.read();           // v4990[k200];	// L6552
    float a194;                           // L6553
    a194 = v4999;                         // L6554
    float v5001 = v4991.read();           // v4991[k200];	// L6555
    float b194;                           // L6556
    b194 = v5001;                         // L6557
    float v5003 = a194;                   // L6558
    float v5004 = b194;                   // L6559
    float v5005 = v5003 * v5004;          // L6560
    float v5006 = v194;                   // L6561
    float v5007 = v5006 + v5005;          // L6562
    v194 = v5007;                         // L6563
    float v5008 = a194;                   // L6564
    v4992.write(v5008);                   // v4992[k200] = v5008;	// L6565
    float v5009 = b194;                   // L6566
    v4993.write(v5009);                   // v4993[k200] = v5009;	// L6567
  }
  float v5010 = v194;          // L6569
  v4994[v4995][v4996] = v5010; // L6570
}

void PE_kernel_QKT_3_0(hls::stream<float> &v5011 /* v5011[64] */,
                       hls::stream<float> &v5012 /* v5012[64] */,
                       hls::stream<float> &v5013 /* v5013[64] */,
                       hls::stream<float> &v5014 /* v5014[64] */,
                       float v5015[8][8], int v5016,
                       int v5017) { // L6573
#pragma HLS stream variable = v5011 depth = 9
#pragma HLS stream variable = v5012 depth = 9
#pragma HLS stream variable = v5013 depth = 9
#pragma HLS stream variable = v5014 depth = 9
#pragma HLS array_partition variable = v5015 complete dim = 1
#pragma HLS array_partition variable = v5015 complete dim = 2

  float v195;      // L6576
  v195 = 0.000000; // L6577
l_S_k_0_k201:
  for (int k201 = 0; k201 < 64; k201++) { // L6578
    float v5020 = v5011.read();           // v5011[k201];	// L6579
    float a195;                           // L6580
    a195 = v5020;                         // L6581
    float v5022 = v5012.read();           // v5012[k201];	// L6582
    float b195;                           // L6583
    b195 = v5022;                         // L6584
    float v5024 = a195;                   // L6585
    float v5025 = b195;                   // L6586
    float v5026 = v5024 * v5025;          // L6587
    float v5027 = v195;                   // L6588
    float v5028 = v5027 + v5026;          // L6589
    v195 = v5028;                         // L6590
    float v5029 = a195;                   // L6591
    v5013.write(v5029);                   // v5013[k201] = v5029;	// L6592
    float v5030 = b195;                   // L6593
    v5014.write(v5030);                   // v5014[k201] = v5030;	// L6594
  }
  float v5031 = v195;          // L6596
  v5015[v5016][v5017] = v5031; // L6597
}

void PE_kernel_QKT_4_0(hls::stream<float> &v5032 /* v5032[64] */,
                       hls::stream<float> &v5033 /* v5033[64] */,
                       hls::stream<float> &v5034 /* v5034[64] */,
                       hls::stream<float> &v5035 /* v5035[64] */,
                       float v5036[8][8], int v5037,
                       int v5038) { // L6600
#pragma HLS stream variable = v5032 depth = 9
#pragma HLS stream variable = v5033 depth = 9
#pragma HLS stream variable = v5034 depth = 9
#pragma HLS stream variable = v5035 depth = 9
#pragma HLS array_partition variable = v5036 complete dim = 1
#pragma HLS array_partition variable = v5036 complete dim = 2

  float v196;      // L6603
  v196 = 0.000000; // L6604
l_S_k_0_k202:
  for (int k202 = 0; k202 < 64; k202++) { // L6605
    float v5041 = v5032.read();           // v5032[k202];	// L6606
    float a196;                           // L6607
    a196 = v5041;                         // L6608
    float v5043 = v5033.read();           // v5033[k202];	// L6609
    float b196;                           // L6610
    b196 = v5043;                         // L6611
    float v5045 = a196;                   // L6612
    float v5046 = b196;                   // L6613
    float v5047 = v5045 * v5046;          // L6614
    float v5048 = v196;                   // L6615
    float v5049 = v5048 + v5047;          // L6616
    v196 = v5049;                         // L6617
    float v5050 = a196;                   // L6618
    v5034.write(v5050);                   // v5034[k202] = v5050;	// L6619
    float v5051 = b196;                   // L6620
    v5035.write(v5051);                   // v5035[k202] = v5051;	// L6621
  }
  float v5052 = v196;          // L6623
  v5036[v5037][v5038] = v5052; // L6624
}

void PE_kernel_QKT_5_0(hls::stream<float> &v5053 /* v5053[64] */,
                       hls::stream<float> &v5054 /* v5054[64] */,
                       hls::stream<float> &v5055 /* v5055[64] */,
                       hls::stream<float> &v5056 /* v5056[64] */,
                       float v5057[8][8], int v5058,
                       int v5059) { // L6627
#pragma HLS stream variable = v5053 depth = 9
#pragma HLS stream variable = v5054 depth = 9
#pragma HLS stream variable = v5055 depth = 9
#pragma HLS stream variable = v5056 depth = 9
#pragma HLS array_partition variable = v5057 complete dim = 1
#pragma HLS array_partition variable = v5057 complete dim = 2

  float v197;      // L6630
  v197 = 0.000000; // L6631
l_S_k_0_k203:
  for (int k203 = 0; k203 < 64; k203++) { // L6632
    float v5062 = v5053.read();           // v5053[k203];	// L6633
    float a197;                           // L6634
    a197 = v5062;                         // L6635
    float v5064 = v5054.read();           // v5054[k203];	// L6636
    float b197;                           // L6637
    b197 = v5064;                         // L6638
    float v5066 = a197;                   // L6639
    float v5067 = b197;                   // L6640
    float v5068 = v5066 * v5067;          // L6641
    float v5069 = v197;                   // L6642
    float v5070 = v5069 + v5068;          // L6643
    v197 = v5070;                         // L6644
    float v5071 = a197;                   // L6645
    v5055.write(v5071);                   // v5055[k203] = v5071;	// L6646
    float v5072 = b197;                   // L6647
    v5056.write(v5072);                   // v5056[k203] = v5072;	// L6648
  }
  float v5073 = v197;          // L6650
  v5057[v5058][v5059] = v5073; // L6651
}

void PE_kernel_QKT_6_0(hls::stream<float> &v5074 /* v5074[64] */,
                       hls::stream<float> &v5075 /* v5075[64] */,
                       hls::stream<float> &v5076 /* v5076[64] */,
                       hls::stream<float> &v5077 /* v5077[64] */,
                       float v5078[8][8], int v5079,
                       int v5080) { // L6654
#pragma HLS stream variable = v5074 depth = 9
#pragma HLS stream variable = v5075 depth = 9
#pragma HLS stream variable = v5076 depth = 9
#pragma HLS stream variable = v5077 depth = 9
#pragma HLS array_partition variable = v5078 complete dim = 1
#pragma HLS array_partition variable = v5078 complete dim = 2

  float v198;      // L6657
  v198 = 0.000000; // L6658
l_S_k_0_k204:
  for (int k204 = 0; k204 < 64; k204++) { // L6659
    float v5083 = v5074.read();           // v5074[k204];	// L6660
    float a198;                           // L6661
    a198 = v5083;                         // L6662
    float v5085 = v5075.read();           // v5075[k204];	// L6663
    float b198;                           // L6664
    b198 = v5085;                         // L6665
    float v5087 = a198;                   // L6666
    float v5088 = b198;                   // L6667
    float v5089 = v5087 * v5088;          // L6668
    float v5090 = v198;                   // L6669
    float v5091 = v5090 + v5089;          // L6670
    v198 = v5091;                         // L6671
    float v5092 = a198;                   // L6672
    v5076.write(v5092);                   // v5076[k204] = v5092;	// L6673
    float v5093 = b198;                   // L6674
    v5077.write(v5093);                   // v5077[k204] = v5093;	// L6675
  }
  float v5094 = v198;          // L6677
  v5078[v5079][v5080] = v5094; // L6678
}

void PE_kernel_QKT_7_0(hls::stream<float> &v5095 /* v5095[64] */,
                       hls::stream<float> &v5096 /* v5096[64] */,
                       hls::stream<float> &v5097 /* v5097[64] */,
                       hls::stream<float> &v5098 /* v5098[64] */,
                       float v5099[8][8], int v5100,
                       int v5101) { // L6681
#pragma HLS stream variable = v5095 depth = 9
#pragma HLS stream variable = v5096 depth = 9
#pragma HLS stream variable = v5097 depth = 9
#pragma HLS stream variable = v5098 depth = 9
#pragma HLS array_partition variable = v5099 complete dim = 1
#pragma HLS array_partition variable = v5099 complete dim = 2

  float v199;      // L6684
  v199 = 0.000000; // L6685
l_S_k_0_k205:
  for (int k205 = 0; k205 < 64; k205++) { // L6686
    float v5104 = v5095.read();           // v5095[k205];	// L6687
    float a199;                           // L6688
    a199 = v5104;                         // L6689
    float v5106 = v5096.read();           // v5096[k205];	// L6690
    float b199;                           // L6691
    b199 = v5106;                         // L6692
    float v5108 = a199;                   // L6693
    float v5109 = b199;                   // L6694
    float v5110 = v5108 * v5109;          // L6695
    float v5111 = v199;                   // L6696
    float v5112 = v5111 + v5110;          // L6697
    v199 = v5112;                         // L6698
    float v5113 = a199;                   // L6699
    v5097.write(v5113);                   // v5097[k205] = v5113;	// L6700
    float v5114 = b199;                   // L6701
    v5098.write(v5114);                   // v5098[k205] = v5114;	// L6702
  }
  float v5115 = v199;          // L6704
  v5099[v5100][v5101] = v5115; // L6705
}

void PE_kernel_QKT_0_1(hls::stream<float> &v5116 /* v5116[64] */,
                       hls::stream<float> &v5117 /* v5117[64] */,
                       hls::stream<float> &v5118 /* v5118[64] */,
                       hls::stream<float> &v5119 /* v5119[64] */,
                       float v5120[8][8], int v5121,
                       int v5122) { // L6708
#pragma HLS stream variable = v5116 depth = 9
#pragma HLS stream variable = v5117 depth = 9
#pragma HLS stream variable = v5118 depth = 9
#pragma HLS stream variable = v5119 depth = 9
#pragma HLS array_partition variable = v5120 complete dim = 1
#pragma HLS array_partition variable = v5120 complete dim = 2

  float v200;      // L6711
  v200 = 0.000000; // L6712
l_S_k_0_k206:
  for (int k206 = 0; k206 < 64; k206++) { // L6713
    float v5125 = v5116.read();           // v5116[k206];	// L6714
    float a200;                           // L6715
    a200 = v5125;                         // L6716
    float v5127 = v5117.read();           // v5117[k206];	// L6717
    float b200;                           // L6718
    b200 = v5127;                         // L6719
    float v5129 = a200;                   // L6720
    float v5130 = b200;                   // L6721
    float v5131 = v5129 * v5130;          // L6722
    float v5132 = v200;                   // L6723
    float v5133 = v5132 + v5131;          // L6724
    v200 = v5133;                         // L6725
    float v5134 = a200;                   // L6726
    v5118.write(v5134);                   // v5118[k206] = v5134;	// L6727
    float v5135 = b200;                   // L6728
    v5119.write(v5135);                   // v5119[k206] = v5135;	// L6729
  }
  float v5136 = v200;          // L6731
  v5120[v5121][v5122] = v5136; // L6732
}

void PE_kernel_QKT_1_1(hls::stream<float> &v5137 /* v5137[64] */,
                       hls::stream<float> &v5138 /* v5138[64] */,
                       hls::stream<float> &v5139 /* v5139[64] */,
                       hls::stream<float> &v5140 /* v5140[64] */,
                       float v5141[8][8], int v5142,
                       int v5143) { // L6735
#pragma HLS stream variable = v5137 depth = 9
#pragma HLS stream variable = v5138 depth = 9
#pragma HLS stream variable = v5139 depth = 9
#pragma HLS stream variable = v5140 depth = 9
#pragma HLS array_partition variable = v5141 complete dim = 1
#pragma HLS array_partition variable = v5141 complete dim = 2

  float v201;      // L6738
  v201 = 0.000000; // L6739
l_S_k_0_k207:
  for (int k207 = 0; k207 < 64; k207++) { // L6740
    float v5146 = v5137.read();           // v5137[k207];	// L6741
    float a201;                           // L6742
    a201 = v5146;                         // L6743
    float v5148 = v5138.read();           // v5138[k207];	// L6744
    float b201;                           // L6745
    b201 = v5148;                         // L6746
    float v5150 = a201;                   // L6747
    float v5151 = b201;                   // L6748
    float v5152 = v5150 * v5151;          // L6749
    float v5153 = v201;                   // L6750
    float v5154 = v5153 + v5152;          // L6751
    v201 = v5154;                         // L6752
    float v5155 = a201;                   // L6753
    v5139.write(v5155);                   // v5139[k207] = v5155;	// L6754
    float v5156 = b201;                   // L6755
    v5140.write(v5156);                   // v5140[k207] = v5156;	// L6756
  }
  float v5157 = v201;          // L6758
  v5141[v5142][v5143] = v5157; // L6759
}

void PE_kernel_QKT_2_1(hls::stream<float> &v5158 /* v5158[64] */,
                       hls::stream<float> &v5159 /* v5159[64] */,
                       hls::stream<float> &v5160 /* v5160[64] */,
                       hls::stream<float> &v5161 /* v5161[64] */,
                       float v5162[8][8], int v5163,
                       int v5164) { // L6762
#pragma HLS stream variable = v5158 depth = 9
#pragma HLS stream variable = v5159 depth = 9
#pragma HLS stream variable = v5160 depth = 9
#pragma HLS stream variable = v5161 depth = 9
#pragma HLS array_partition variable = v5162 complete dim = 1
#pragma HLS array_partition variable = v5162 complete dim = 2

  float v202;      // L6765
  v202 = 0.000000; // L6766
l_S_k_0_k208:
  for (int k208 = 0; k208 < 64; k208++) { // L6767
    float v5167 = v5158.read();           // v5158[k208];	// L6768
    float a202;                           // L6769
    a202 = v5167;                         // L6770
    float v5169 = v5159.read();           // v5159[k208];	// L6771
    float b202;                           // L6772
    b202 = v5169;                         // L6773
    float v5171 = a202;                   // L6774
    float v5172 = b202;                   // L6775
    float v5173 = v5171 * v5172;          // L6776
    float v5174 = v202;                   // L6777
    float v5175 = v5174 + v5173;          // L6778
    v202 = v5175;                         // L6779
    float v5176 = a202;                   // L6780
    v5160.write(v5176);                   // v5160[k208] = v5176;	// L6781
    float v5177 = b202;                   // L6782
    v5161.write(v5177);                   // v5161[k208] = v5177;	// L6783
  }
  float v5178 = v202;          // L6785
  v5162[v5163][v5164] = v5178; // L6786
}

void PE_kernel_QKT_3_1(hls::stream<float> &v5179 /* v5179[64] */,
                       hls::stream<float> &v5180 /* v5180[64] */,
                       hls::stream<float> &v5181 /* v5181[64] */,
                       hls::stream<float> &v5182 /* v5182[64] */,
                       float v5183[8][8], int v5184,
                       int v5185) { // L6789
#pragma HLS stream variable = v5179 depth = 9
#pragma HLS stream variable = v5180 depth = 9
#pragma HLS stream variable = v5181 depth = 9
#pragma HLS stream variable = v5182 depth = 9
#pragma HLS array_partition variable = v5183 complete dim = 1
#pragma HLS array_partition variable = v5183 complete dim = 2

  float v203;      // L6792
  v203 = 0.000000; // L6793
l_S_k_0_k209:
  for (int k209 = 0; k209 < 64; k209++) { // L6794
    float v5188 = v5179.read();           // v5179[k209];	// L6795
    float a203;                           // L6796
    a203 = v5188;                         // L6797
    float v5190 = v5180.read();           // v5180[k209];	// L6798
    float b203;                           // L6799
    b203 = v5190;                         // L6800
    float v5192 = a203;                   // L6801
    float v5193 = b203;                   // L6802
    float v5194 = v5192 * v5193;          // L6803
    float v5195 = v203;                   // L6804
    float v5196 = v5195 + v5194;          // L6805
    v203 = v5196;                         // L6806
    float v5197 = a203;                   // L6807
    v5181.write(v5197);                   // v5181[k209] = v5197;	// L6808
    float v5198 = b203;                   // L6809
    v5182.write(v5198);                   // v5182[k209] = v5198;	// L6810
  }
  float v5199 = v203;          // L6812
  v5183[v5184][v5185] = v5199; // L6813
}

void PE_kernel_QKT_4_1(hls::stream<float> &v5200 /* v5200[64] */,
                       hls::stream<float> &v5201 /* v5201[64] */,
                       hls::stream<float> &v5202 /* v5202[64] */,
                       hls::stream<float> &v5203 /* v5203[64] */,
                       float v5204[8][8], int v5205,
                       int v5206) { // L6816
#pragma HLS stream variable = v5200 depth = 9
#pragma HLS stream variable = v5201 depth = 9
#pragma HLS stream variable = v5202 depth = 9
#pragma HLS stream variable = v5203 depth = 9
#pragma HLS array_partition variable = v5204 complete dim = 1
#pragma HLS array_partition variable = v5204 complete dim = 2

  float v204;      // L6819
  v204 = 0.000000; // L6820
l_S_k_0_k210:
  for (int k210 = 0; k210 < 64; k210++) { // L6821
    float v5209 = v5200.read();           // v5200[k210];	// L6822
    float a204;                           // L6823
    a204 = v5209;                         // L6824
    float v5211 = v5201.read();           // v5201[k210];	// L6825
    float b204;                           // L6826
    b204 = v5211;                         // L6827
    float v5213 = a204;                   // L6828
    float v5214 = b204;                   // L6829
    float v5215 = v5213 * v5214;          // L6830
    float v5216 = v204;                   // L6831
    float v5217 = v5216 + v5215;          // L6832
    v204 = v5217;                         // L6833
    float v5218 = a204;                   // L6834
    v5202.write(v5218);                   // v5202[k210] = v5218;	// L6835
    float v5219 = b204;                   // L6836
    v5203.write(v5219);                   // v5203[k210] = v5219;	// L6837
  }
  float v5220 = v204;          // L6839
  v5204[v5205][v5206] = v5220; // L6840
}

void PE_kernel_QKT_5_1(hls::stream<float> &v5221 /* v5221[64] */,
                       hls::stream<float> &v5222 /* v5222[64] */,
                       hls::stream<float> &v5223 /* v5223[64] */,
                       hls::stream<float> &v5224 /* v5224[64] */,
                       float v5225[8][8], int v5226,
                       int v5227) { // L6843
#pragma HLS stream variable = v5221 depth = 9
#pragma HLS stream variable = v5222 depth = 9
#pragma HLS stream variable = v5223 depth = 9
#pragma HLS stream variable = v5224 depth = 9
#pragma HLS array_partition variable = v5225 complete dim = 1
#pragma HLS array_partition variable = v5225 complete dim = 2

  float v205;      // L6846
  v205 = 0.000000; // L6847
l_S_k_0_k211:
  for (int k211 = 0; k211 < 64; k211++) { // L6848
    float v5230 = v5221.read();           // v5221[k211];	// L6849
    float a205;                           // L6850
    a205 = v5230;                         // L6851
    float v5232 = v5222.read();           // v5222[k211];	// L6852
    float b205;                           // L6853
    b205 = v5232;                         // L6854
    float v5234 = a205;                   // L6855
    float v5235 = b205;                   // L6856
    float v5236 = v5234 * v5235;          // L6857
    float v5237 = v205;                   // L6858
    float v5238 = v5237 + v5236;          // L6859
    v205 = v5238;                         // L6860
    float v5239 = a205;                   // L6861
    v5223.write(v5239);                   // v5223[k211] = v5239;	// L6862
    float v5240 = b205;                   // L6863
    v5224.write(v5240);                   // v5224[k211] = v5240;	// L6864
  }
  float v5241 = v205;          // L6866
  v5225[v5226][v5227] = v5241; // L6867
}

void PE_kernel_QKT_6_1(hls::stream<float> &v5242 /* v5242[64] */,
                       hls::stream<float> &v5243 /* v5243[64] */,
                       hls::stream<float> &v5244 /* v5244[64] */,
                       hls::stream<float> &v5245 /* v5245[64] */,
                       float v5246[8][8], int v5247,
                       int v5248) { // L6870
#pragma HLS stream variable = v5242 depth = 9
#pragma HLS stream variable = v5243 depth = 9
#pragma HLS stream variable = v5244 depth = 9
#pragma HLS stream variable = v5245 depth = 9
#pragma HLS array_partition variable = v5246 complete dim = 1
#pragma HLS array_partition variable = v5246 complete dim = 2

  float v206;      // L6873
  v206 = 0.000000; // L6874
l_S_k_0_k212:
  for (int k212 = 0; k212 < 64; k212++) { // L6875
    float v5251 = v5242.read();           // v5242[k212];	// L6876
    float a206;                           // L6877
    a206 = v5251;                         // L6878
    float v5253 = v5243.read();           // v5243[k212];	// L6879
    float b206;                           // L6880
    b206 = v5253;                         // L6881
    float v5255 = a206;                   // L6882
    float v5256 = b206;                   // L6883
    float v5257 = v5255 * v5256;          // L6884
    float v5258 = v206;                   // L6885
    float v5259 = v5258 + v5257;          // L6886
    v206 = v5259;                         // L6887
    float v5260 = a206;                   // L6888
    v5244.write(v5260);                   // v5244[k212] = v5260;	// L6889
    float v5261 = b206;                   // L6890
    v5245.write(v5261);                   // v5245[k212] = v5261;	// L6891
  }
  float v5262 = v206;          // L6893
  v5246[v5247][v5248] = v5262; // L6894
}

void PE_kernel_QKT_7_1(hls::stream<float> &v5263 /* v5263[64] */,
                       hls::stream<float> &v5264 /* v5264[64] */,
                       hls::stream<float> &v5265 /* v5265[64] */,
                       hls::stream<float> &v5266 /* v5266[64] */,
                       float v5267[8][8], int v5268,
                       int v5269) { // L6897
#pragma HLS stream variable = v5263 depth = 9
#pragma HLS stream variable = v5264 depth = 9
#pragma HLS stream variable = v5265 depth = 9
#pragma HLS stream variable = v5266 depth = 9
#pragma HLS array_partition variable = v5267 complete dim = 1
#pragma HLS array_partition variable = v5267 complete dim = 2

  float v207;      // L6900
  v207 = 0.000000; // L6901
l_S_k_0_k213:
  for (int k213 = 0; k213 < 64; k213++) { // L6902
    float v5272 = v5263.read();           // v5263[k213];	// L6903
    float a207;                           // L6904
    a207 = v5272;                         // L6905
    float v5274 = v5264.read();           // v5264[k213];	// L6906
    float b207;                           // L6907
    b207 = v5274;                         // L6908
    float v5276 = a207;                   // L6909
    float v5277 = b207;                   // L6910
    float v5278 = v5276 * v5277;          // L6911
    float v5279 = v207;                   // L6912
    float v5280 = v5279 + v5278;          // L6913
    v207 = v5280;                         // L6914
    float v5281 = a207;                   // L6915
    v5265.write(v5281);                   // v5265[k213] = v5281;	// L6916
    float v5282 = b207;                   // L6917
    v5266.write(v5282);                   // v5266[k213] = v5282;	// L6918
  }
  float v5283 = v207;          // L6920
  v5267[v5268][v5269] = v5283; // L6921
}

void PE_kernel_QKT_0_2(hls::stream<float> &v5284 /* v5284[64] */,
                       hls::stream<float> &v5285 /* v5285[64] */,
                       hls::stream<float> &v5286 /* v5286[64] */,
                       hls::stream<float> &v5287 /* v5287[64] */,
                       float v5288[8][8], int v5289,
                       int v5290) { // L6924
#pragma HLS stream variable = v5284 depth = 9
#pragma HLS stream variable = v5285 depth = 9
#pragma HLS stream variable = v5286 depth = 9
#pragma HLS stream variable = v5287 depth = 9
#pragma HLS array_partition variable = v5288 complete dim = 1
#pragma HLS array_partition variable = v5288 complete dim = 2

  float v208;      // L6927
  v208 = 0.000000; // L6928
l_S_k_0_k214:
  for (int k214 = 0; k214 < 64; k214++) { // L6929
    float v5293 = v5284.read();           // v5284[k214];	// L6930
    float a208;                           // L6931
    a208 = v5293;                         // L6932
    float v5295 = v5285.read();           // v5285[k214];	// L6933
    float b208;                           // L6934
    b208 = v5295;                         // L6935
    float v5297 = a208;                   // L6936
    float v5298 = b208;                   // L6937
    float v5299 = v5297 * v5298;          // L6938
    float v5300 = v208;                   // L6939
    float v5301 = v5300 + v5299;          // L6940
    v208 = v5301;                         // L6941
    float v5302 = a208;                   // L6942
    v5286.write(v5302);                   // v5286[k214] = v5302;	// L6943
    float v5303 = b208;                   // L6944
    v5287.write(v5303);                   // v5287[k214] = v5303;	// L6945
  }
  float v5304 = v208;          // L6947
  v5288[v5289][v5290] = v5304; // L6948
}

void PE_kernel_QKT_1_2(hls::stream<float> &v5305 /* v5305[64] */,
                       hls::stream<float> &v5306 /* v5306[64] */,
                       hls::stream<float> &v5307 /* v5307[64] */,
                       hls::stream<float> &v5308 /* v5308[64] */,
                       float v5309[8][8], int v5310,
                       int v5311) { // L6951
#pragma HLS stream variable = v5305 depth = 9
#pragma HLS stream variable = v5306 depth = 9
#pragma HLS stream variable = v5307 depth = 9
#pragma HLS stream variable = v5308 depth = 9
#pragma HLS array_partition variable = v5309 complete dim = 1
#pragma HLS array_partition variable = v5309 complete dim = 2

  float v209;      // L6954
  v209 = 0.000000; // L6955
l_S_k_0_k215:
  for (int k215 = 0; k215 < 64; k215++) { // L6956
    float v5314 = v5305.read();           // v5305[k215];	// L6957
    float a209;                           // L6958
    a209 = v5314;                         // L6959
    float v5316 = v5306.read();           // v5306[k215];	// L6960
    float b209;                           // L6961
    b209 = v5316;                         // L6962
    float v5318 = a209;                   // L6963
    float v5319 = b209;                   // L6964
    float v5320 = v5318 * v5319;          // L6965
    float v5321 = v209;                   // L6966
    float v5322 = v5321 + v5320;          // L6967
    v209 = v5322;                         // L6968
    float v5323 = a209;                   // L6969
    v5307.write(v5323);                   // v5307[k215] = v5323;	// L6970
    float v5324 = b209;                   // L6971
    v5308.write(v5324);                   // v5308[k215] = v5324;	// L6972
  }
  float v5325 = v209;          // L6974
  v5309[v5310][v5311] = v5325; // L6975
}

void PE_kernel_QKT_2_2(hls::stream<float> &v5326 /* v5326[64] */,
                       hls::stream<float> &v5327 /* v5327[64] */,
                       hls::stream<float> &v5328 /* v5328[64] */,
                       hls::stream<float> &v5329 /* v5329[64] */,
                       float v5330[8][8], int v5331,
                       int v5332) { // L6978
#pragma HLS stream variable = v5326 depth = 9
#pragma HLS stream variable = v5327 depth = 9
#pragma HLS stream variable = v5328 depth = 9
#pragma HLS stream variable = v5329 depth = 9
#pragma HLS array_partition variable = v5330 complete dim = 1
#pragma HLS array_partition variable = v5330 complete dim = 2

  float v210;      // L6981
  v210 = 0.000000; // L6982
l_S_k_0_k216:
  for (int k216 = 0; k216 < 64; k216++) { // L6983
    float v5335 = v5326.read();           // v5326[k216];	// L6984
    float a210;                           // L6985
    a210 = v5335;                         // L6986
    float v5337 = v5327.read();           // v5327[k216];	// L6987
    float b210;                           // L6988
    b210 = v5337;                         // L6989
    float v5339 = a210;                   // L6990
    float v5340 = b210;                   // L6991
    float v5341 = v5339 * v5340;          // L6992
    float v5342 = v210;                   // L6993
    float v5343 = v5342 + v5341;          // L6994
    v210 = v5343;                         // L6995
    float v5344 = a210;                   // L6996
    v5328.write(v5344);                   // v5328[k216] = v5344;	// L6997
    float v5345 = b210;                   // L6998
    v5329.write(v5345);                   // v5329[k216] = v5345;	// L6999
  }
  float v5346 = v210;          // L7001
  v5330[v5331][v5332] = v5346; // L7002
}

void PE_kernel_QKT_3_2(hls::stream<float> &v5347 /* v5347[64] */,
                       hls::stream<float> &v5348 /* v5348[64] */,
                       hls::stream<float> &v5349 /* v5349[64] */,
                       hls::stream<float> &v5350 /* v5350[64] */,
                       float v5351[8][8], int v5352,
                       int v5353) { // L7005
#pragma HLS stream variable = v5347 depth = 9
#pragma HLS stream variable = v5348 depth = 9
#pragma HLS stream variable = v5349 depth = 9
#pragma HLS stream variable = v5350 depth = 9
#pragma HLS array_partition variable = v5351 complete dim = 1
#pragma HLS array_partition variable = v5351 complete dim = 2

  float v211;      // L7008
  v211 = 0.000000; // L7009
l_S_k_0_k217:
  for (int k217 = 0; k217 < 64; k217++) { // L7010
    float v5356 = v5347.read();           // v5347[k217];	// L7011
    float a211;                           // L7012
    a211 = v5356;                         // L7013
    float v5358 = v5348.read();           // v5348[k217];	// L7014
    float b211;                           // L7015
    b211 = v5358;                         // L7016
    float v5360 = a211;                   // L7017
    float v5361 = b211;                   // L7018
    float v5362 = v5360 * v5361;          // L7019
    float v5363 = v211;                   // L7020
    float v5364 = v5363 + v5362;          // L7021
    v211 = v5364;                         // L7022
    float v5365 = a211;                   // L7023
    v5349.write(v5365);                   // v5349[k217] = v5365;	// L7024
    float v5366 = b211;                   // L7025
    v5350.write(v5366);                   // v5350[k217] = v5366;	// L7026
  }
  float v5367 = v211;          // L7028
  v5351[v5352][v5353] = v5367; // L7029
}

void PE_kernel_QKT_4_2(hls::stream<float> &v5368 /* v5368[64] */,
                       hls::stream<float> &v5369 /* v5369[64] */,
                       hls::stream<float> &v5370 /* v5370[64] */,
                       hls::stream<float> &v5371 /* v5371[64] */,
                       float v5372[8][8], int v5373,
                       int v5374) { // L7032
#pragma HLS stream variable = v5368 depth = 9
#pragma HLS stream variable = v5369 depth = 9
#pragma HLS stream variable = v5370 depth = 9
#pragma HLS stream variable = v5371 depth = 9
#pragma HLS array_partition variable = v5372 complete dim = 1
#pragma HLS array_partition variable = v5372 complete dim = 2

  float v212;      // L7035
  v212 = 0.000000; // L7036
l_S_k_0_k218:
  for (int k218 = 0; k218 < 64; k218++) { // L7037
    float v5377 = v5368.read();           // v5368[k218];	// L7038
    float a212;                           // L7039
    a212 = v5377;                         // L7040
    float v5379 = v5369.read();           // v5369[k218];	// L7041
    float b212;                           // L7042
    b212 = v5379;                         // L7043
    float v5381 = a212;                   // L7044
    float v5382 = b212;                   // L7045
    float v5383 = v5381 * v5382;          // L7046
    float v5384 = v212;                   // L7047
    float v5385 = v5384 + v5383;          // L7048
    v212 = v5385;                         // L7049
    float v5386 = a212;                   // L7050
    v5370.write(v5386);                   // v5370[k218] = v5386;	// L7051
    float v5387 = b212;                   // L7052
    v5371.write(v5387);                   // v5371[k218] = v5387;	// L7053
  }
  float v5388 = v212;          // L7055
  v5372[v5373][v5374] = v5388; // L7056
}

void PE_kernel_QKT_5_2(hls::stream<float> &v5389 /* v5389[64] */,
                       hls::stream<float> &v5390 /* v5390[64] */,
                       hls::stream<float> &v5391 /* v5391[64] */,
                       hls::stream<float> &v5392 /* v5392[64] */,
                       float v5393[8][8], int v5394,
                       int v5395) { // L7059
#pragma HLS stream variable = v5389 depth = 9
#pragma HLS stream variable = v5390 depth = 9
#pragma HLS stream variable = v5391 depth = 9
#pragma HLS stream variable = v5392 depth = 9
#pragma HLS array_partition variable = v5393 complete dim = 1
#pragma HLS array_partition variable = v5393 complete dim = 2

  float v213;      // L7062
  v213 = 0.000000; // L7063
l_S_k_0_k219:
  for (int k219 = 0; k219 < 64; k219++) { // L7064
    float v5398 = v5389.read();           // v5389[k219];	// L7065
    float a213;                           // L7066
    a213 = v5398;                         // L7067
    float v5400 = v5390.read();           // v5390[k219];	// L7068
    float b213;                           // L7069
    b213 = v5400;                         // L7070
    float v5402 = a213;                   // L7071
    float v5403 = b213;                   // L7072
    float v5404 = v5402 * v5403;          // L7073
    float v5405 = v213;                   // L7074
    float v5406 = v5405 + v5404;          // L7075
    v213 = v5406;                         // L7076
    float v5407 = a213;                   // L7077
    v5391.write(v5407);                   // v5391[k219] = v5407;	// L7078
    float v5408 = b213;                   // L7079
    v5392.write(v5408);                   // v5392[k219] = v5408;	// L7080
  }
  float v5409 = v213;          // L7082
  v5393[v5394][v5395] = v5409; // L7083
}

void PE_kernel_QKT_6_2(hls::stream<float> &v5410 /* v5410[64] */,
                       hls::stream<float> &v5411 /* v5411[64] */,
                       hls::stream<float> &v5412 /* v5412[64] */,
                       hls::stream<float> &v5413 /* v5413[64] */,
                       float v5414[8][8], int v5415,
                       int v5416) { // L7086
#pragma HLS stream variable = v5410 depth = 9
#pragma HLS stream variable = v5411 depth = 9
#pragma HLS stream variable = v5412 depth = 9
#pragma HLS stream variable = v5413 depth = 9
#pragma HLS array_partition variable = v5414 complete dim = 1
#pragma HLS array_partition variable = v5414 complete dim = 2

  float v214;      // L7089
  v214 = 0.000000; // L7090
l_S_k_0_k220:
  for (int k220 = 0; k220 < 64; k220++) { // L7091
    float v5419 = v5410.read();           // v5410[k220];	// L7092
    float a214;                           // L7093
    a214 = v5419;                         // L7094
    float v5421 = v5411.read();           // v5411[k220];	// L7095
    float b214;                           // L7096
    b214 = v5421;                         // L7097
    float v5423 = a214;                   // L7098
    float v5424 = b214;                   // L7099
    float v5425 = v5423 * v5424;          // L7100
    float v5426 = v214;                   // L7101
    float v5427 = v5426 + v5425;          // L7102
    v214 = v5427;                         // L7103
    float v5428 = a214;                   // L7104
    v5412.write(v5428);                   // v5412[k220] = v5428;	// L7105
    float v5429 = b214;                   // L7106
    v5413.write(v5429);                   // v5413[k220] = v5429;	// L7107
  }
  float v5430 = v214;          // L7109
  v5414[v5415][v5416] = v5430; // L7110
}

void PE_kernel_QKT_7_2(hls::stream<float> &v5431 /* v5431[64] */,
                       hls::stream<float> &v5432 /* v5432[64] */,
                       hls::stream<float> &v5433 /* v5433[64] */,
                       hls::stream<float> &v5434 /* v5434[64] */,
                       float v5435[8][8], int v5436,
                       int v5437) { // L7113
#pragma HLS stream variable = v5431 depth = 9
#pragma HLS stream variable = v5432 depth = 9
#pragma HLS stream variable = v5433 depth = 9
#pragma HLS stream variable = v5434 depth = 9
#pragma HLS array_partition variable = v5435 complete dim = 1
#pragma HLS array_partition variable = v5435 complete dim = 2

  float v215;      // L7116
  v215 = 0.000000; // L7117
l_S_k_0_k221:
  for (int k221 = 0; k221 < 64; k221++) { // L7118
    float v5440 = v5431.read();           // v5431[k221];	// L7119
    float a215;                           // L7120
    a215 = v5440;                         // L7121
    float v5442 = v5432.read();           // v5432[k221];	// L7122
    float b215;                           // L7123
    b215 = v5442;                         // L7124
    float v5444 = a215;                   // L7125
    float v5445 = b215;                   // L7126
    float v5446 = v5444 * v5445;          // L7127
    float v5447 = v215;                   // L7128
    float v5448 = v5447 + v5446;          // L7129
    v215 = v5448;                         // L7130
    float v5449 = a215;                   // L7131
    v5433.write(v5449);                   // v5433[k221] = v5449;	// L7132
    float v5450 = b215;                   // L7133
    v5434.write(v5450);                   // v5434[k221] = v5450;	// L7134
  }
  float v5451 = v215;          // L7136
  v5435[v5436][v5437] = v5451; // L7137
}

void PE_kernel_QKT_0_3(hls::stream<float> &v5452 /* v5452[64] */,
                       hls::stream<float> &v5453 /* v5453[64] */,
                       hls::stream<float> &v5454 /* v5454[64] */,
                       hls::stream<float> &v5455 /* v5455[64] */,
                       float v5456[8][8], int v5457,
                       int v5458) { // L7140
#pragma HLS stream variable = v5452 depth = 9
#pragma HLS stream variable = v5453 depth = 9
#pragma HLS stream variable = v5454 depth = 9
#pragma HLS stream variable = v5455 depth = 9
#pragma HLS array_partition variable = v5456 complete dim = 1
#pragma HLS array_partition variable = v5456 complete dim = 2

  float v216;      // L7143
  v216 = 0.000000; // L7144
l_S_k_0_k222:
  for (int k222 = 0; k222 < 64; k222++) { // L7145
    float v5461 = v5452.read();           // v5452[k222];	// L7146
    float a216;                           // L7147
    a216 = v5461;                         // L7148
    float v5463 = v5453.read();           // v5453[k222];	// L7149
    float b216;                           // L7150
    b216 = v5463;                         // L7151
    float v5465 = a216;                   // L7152
    float v5466 = b216;                   // L7153
    float v5467 = v5465 * v5466;          // L7154
    float v5468 = v216;                   // L7155
    float v5469 = v5468 + v5467;          // L7156
    v216 = v5469;                         // L7157
    float v5470 = a216;                   // L7158
    v5454.write(v5470);                   // v5454[k222] = v5470;	// L7159
    float v5471 = b216;                   // L7160
    v5455.write(v5471);                   // v5455[k222] = v5471;	// L7161
  }
  float v5472 = v216;          // L7163
  v5456[v5457][v5458] = v5472; // L7164
}

void PE_kernel_QKT_1_3(hls::stream<float> &v5473 /* v5473[64] */,
                       hls::stream<float> &v5474 /* v5474[64] */,
                       hls::stream<float> &v5475 /* v5475[64] */,
                       hls::stream<float> &v5476 /* v5476[64] */,
                       float v5477[8][8], int v5478,
                       int v5479) { // L7167
#pragma HLS stream variable = v5473 depth = 9
#pragma HLS stream variable = v5474 depth = 9
#pragma HLS stream variable = v5475 depth = 9
#pragma HLS stream variable = v5476 depth = 9
#pragma HLS array_partition variable = v5477 complete dim = 1
#pragma HLS array_partition variable = v5477 complete dim = 2

  float v217;      // L7170
  v217 = 0.000000; // L7171
l_S_k_0_k223:
  for (int k223 = 0; k223 < 64; k223++) { // L7172
    float v5482 = v5473.read();           // v5473[k223];	// L7173
    float a217;                           // L7174
    a217 = v5482;                         // L7175
    float v5484 = v5474.read();           // v5474[k223];	// L7176
    float b217;                           // L7177
    b217 = v5484;                         // L7178
    float v5486 = a217;                   // L7179
    float v5487 = b217;                   // L7180
    float v5488 = v5486 * v5487;          // L7181
    float v5489 = v217;                   // L7182
    float v5490 = v5489 + v5488;          // L7183
    v217 = v5490;                         // L7184
    float v5491 = a217;                   // L7185
    v5475.write(v5491);                   // v5475[k223] = v5491;	// L7186
    float v5492 = b217;                   // L7187
    v5476.write(v5492);                   // v5476[k223] = v5492;	// L7188
  }
  float v5493 = v217;          // L7190
  v5477[v5478][v5479] = v5493; // L7191
}

void PE_kernel_QKT_2_3(hls::stream<float> &v5494 /* v5494[64] */,
                       hls::stream<float> &v5495 /* v5495[64] */,
                       hls::stream<float> &v5496 /* v5496[64] */,
                       hls::stream<float> &v5497 /* v5497[64] */,
                       float v5498[8][8], int v5499,
                       int v5500) { // L7194
#pragma HLS stream variable = v5494 depth = 9
#pragma HLS stream variable = v5495 depth = 9
#pragma HLS stream variable = v5496 depth = 9
#pragma HLS stream variable = v5497 depth = 9
#pragma HLS array_partition variable = v5498 complete dim = 1
#pragma HLS array_partition variable = v5498 complete dim = 2

  float v218;      // L7197
  v218 = 0.000000; // L7198
l_S_k_0_k224:
  for (int k224 = 0; k224 < 64; k224++) { // L7199
    float v5503 = v5494.read();           // v5494[k224];	// L7200
    float a218;                           // L7201
    a218 = v5503;                         // L7202
    float v5505 = v5495.read();           // v5495[k224];	// L7203
    float b218;                           // L7204
    b218 = v5505;                         // L7205
    float v5507 = a218;                   // L7206
    float v5508 = b218;                   // L7207
    float v5509 = v5507 * v5508;          // L7208
    float v5510 = v218;                   // L7209
    float v5511 = v5510 + v5509;          // L7210
    v218 = v5511;                         // L7211
    float v5512 = a218;                   // L7212
    v5496.write(v5512);                   // v5496[k224] = v5512;	// L7213
    float v5513 = b218;                   // L7214
    v5497.write(v5513);                   // v5497[k224] = v5513;	// L7215
  }
  float v5514 = v218;          // L7217
  v5498[v5499][v5500] = v5514; // L7218
}

void PE_kernel_QKT_3_3(hls::stream<float> &v5515 /* v5515[64] */,
                       hls::stream<float> &v5516 /* v5516[64] */,
                       hls::stream<float> &v5517 /* v5517[64] */,
                       hls::stream<float> &v5518 /* v5518[64] */,
                       float v5519[8][8], int v5520,
                       int v5521) { // L7221
#pragma HLS stream variable = v5515 depth = 9
#pragma HLS stream variable = v5516 depth = 9
#pragma HLS stream variable = v5517 depth = 9
#pragma HLS stream variable = v5518 depth = 9
#pragma HLS array_partition variable = v5519 complete dim = 1
#pragma HLS array_partition variable = v5519 complete dim = 2

  float v219;      // L7224
  v219 = 0.000000; // L7225
l_S_k_0_k225:
  for (int k225 = 0; k225 < 64; k225++) { // L7226
    float v5524 = v5515.read();           // v5515[k225];	// L7227
    float a219;                           // L7228
    a219 = v5524;                         // L7229
    float v5526 = v5516.read();           // v5516[k225];	// L7230
    float b219;                           // L7231
    b219 = v5526;                         // L7232
    float v5528 = a219;                   // L7233
    float v5529 = b219;                   // L7234
    float v5530 = v5528 * v5529;          // L7235
    float v5531 = v219;                   // L7236
    float v5532 = v5531 + v5530;          // L7237
    v219 = v5532;                         // L7238
    float v5533 = a219;                   // L7239
    v5517.write(v5533);                   // v5517[k225] = v5533;	// L7240
    float v5534 = b219;                   // L7241
    v5518.write(v5534);                   // v5518[k225] = v5534;	// L7242
  }
  float v5535 = v219;          // L7244
  v5519[v5520][v5521] = v5535; // L7245
}

void PE_kernel_QKT_4_3(hls::stream<float> &v5536 /* v5536[64] */,
                       hls::stream<float> &v5537 /* v5537[64] */,
                       hls::stream<float> &v5538 /* v5538[64] */,
                       hls::stream<float> &v5539 /* v5539[64] */,
                       float v5540[8][8], int v5541,
                       int v5542) { // L7248
#pragma HLS stream variable = v5536 depth = 9
#pragma HLS stream variable = v5537 depth = 9
#pragma HLS stream variable = v5538 depth = 9
#pragma HLS stream variable = v5539 depth = 9
#pragma HLS array_partition variable = v5540 complete dim = 1
#pragma HLS array_partition variable = v5540 complete dim = 2

  float v220;      // L7251
  v220 = 0.000000; // L7252
l_S_k_0_k226:
  for (int k226 = 0; k226 < 64; k226++) { // L7253
    float v5545 = v5536.read();           // v5536[k226];	// L7254
    float a220;                           // L7255
    a220 = v5545;                         // L7256
    float v5547 = v5537.read();           // v5537[k226];	// L7257
    float b220;                           // L7258
    b220 = v5547;                         // L7259
    float v5549 = a220;                   // L7260
    float v5550 = b220;                   // L7261
    float v5551 = v5549 * v5550;          // L7262
    float v5552 = v220;                   // L7263
    float v5553 = v5552 + v5551;          // L7264
    v220 = v5553;                         // L7265
    float v5554 = a220;                   // L7266
    v5538.write(v5554);                   // v5538[k226] = v5554;	// L7267
    float v5555 = b220;                   // L7268
    v5539.write(v5555);                   // v5539[k226] = v5555;	// L7269
  }
  float v5556 = v220;          // L7271
  v5540[v5541][v5542] = v5556; // L7272
}

void PE_kernel_QKT_5_3(hls::stream<float> &v5557 /* v5557[64] */,
                       hls::stream<float> &v5558 /* v5558[64] */,
                       hls::stream<float> &v5559 /* v5559[64] */,
                       hls::stream<float> &v5560 /* v5560[64] */,
                       float v5561[8][8], int v5562,
                       int v5563) { // L7275
#pragma HLS stream variable = v5557 depth = 9
#pragma HLS stream variable = v5558 depth = 9
#pragma HLS stream variable = v5559 depth = 9
#pragma HLS stream variable = v5560 depth = 9
#pragma HLS array_partition variable = v5561 complete dim = 1
#pragma HLS array_partition variable = v5561 complete dim = 2

  float v221;      // L7278
  v221 = 0.000000; // L7279
l_S_k_0_k227:
  for (int k227 = 0; k227 < 64; k227++) { // L7280
    float v5566 = v5557.read();           // v5557[k227];	// L7281
    float a221;                           // L7282
    a221 = v5566;                         // L7283
    float v5568 = v5558.read();           // v5558[k227];	// L7284
    float b221;                           // L7285
    b221 = v5568;                         // L7286
    float v5570 = a221;                   // L7287
    float v5571 = b221;                   // L7288
    float v5572 = v5570 * v5571;          // L7289
    float v5573 = v221;                   // L7290
    float v5574 = v5573 + v5572;          // L7291
    v221 = v5574;                         // L7292
    float v5575 = a221;                   // L7293
    v5559.write(v5575);                   // v5559[k227] = v5575;	// L7294
    float v5576 = b221;                   // L7295
    v5560.write(v5576);                   // v5560[k227] = v5576;	// L7296
  }
  float v5577 = v221;          // L7298
  v5561[v5562][v5563] = v5577; // L7299
}

void PE_kernel_QKT_6_3(hls::stream<float> &v5578 /* v5578[64] */,
                       hls::stream<float> &v5579 /* v5579[64] */,
                       hls::stream<float> &v5580 /* v5580[64] */,
                       hls::stream<float> &v5581 /* v5581[64] */,
                       float v5582[8][8], int v5583,
                       int v5584) { // L7302
#pragma HLS stream variable = v5578 depth = 9
#pragma HLS stream variable = v5579 depth = 9
#pragma HLS stream variable = v5580 depth = 9
#pragma HLS stream variable = v5581 depth = 9
#pragma HLS array_partition variable = v5582 complete dim = 1
#pragma HLS array_partition variable = v5582 complete dim = 2

  float v222;      // L7305
  v222 = 0.000000; // L7306
l_S_k_0_k228:
  for (int k228 = 0; k228 < 64; k228++) { // L7307
    float v5587 = v5578.read();           // v5578[k228];	// L7308
    float a222;                           // L7309
    a222 = v5587;                         // L7310
    float v5589 = v5579.read();           // v5579[k228];	// L7311
    float b222;                           // L7312
    b222 = v5589;                         // L7313
    float v5591 = a222;                   // L7314
    float v5592 = b222;                   // L7315
    float v5593 = v5591 * v5592;          // L7316
    float v5594 = v222;                   // L7317
    float v5595 = v5594 + v5593;          // L7318
    v222 = v5595;                         // L7319
    float v5596 = a222;                   // L7320
    v5580.write(v5596);                   // v5580[k228] = v5596;	// L7321
    float v5597 = b222;                   // L7322
    v5581.write(v5597);                   // v5581[k228] = v5597;	// L7323
  }
  float v5598 = v222;          // L7325
  v5582[v5583][v5584] = v5598; // L7326
}

void PE_kernel_QKT_7_3(hls::stream<float> &v5599 /* v5599[64] */,
                       hls::stream<float> &v5600 /* v5600[64] */,
                       hls::stream<float> &v5601 /* v5601[64] */,
                       hls::stream<float> &v5602 /* v5602[64] */,
                       float v5603[8][8], int v5604,
                       int v5605) { // L7329
#pragma HLS stream variable = v5599 depth = 9
#pragma HLS stream variable = v5600 depth = 9
#pragma HLS stream variable = v5601 depth = 9
#pragma HLS stream variable = v5602 depth = 9
#pragma HLS array_partition variable = v5603 complete dim = 1
#pragma HLS array_partition variable = v5603 complete dim = 2

  float v223;      // L7332
  v223 = 0.000000; // L7333
l_S_k_0_k229:
  for (int k229 = 0; k229 < 64; k229++) { // L7334
    float v5608 = v5599.read();           // v5599[k229];	// L7335
    float a223;                           // L7336
    a223 = v5608;                         // L7337
    float v5610 = v5600.read();           // v5600[k229];	// L7338
    float b223;                           // L7339
    b223 = v5610;                         // L7340
    float v5612 = a223;                   // L7341
    float v5613 = b223;                   // L7342
    float v5614 = v5612 * v5613;          // L7343
    float v5615 = v223;                   // L7344
    float v5616 = v5615 + v5614;          // L7345
    v223 = v5616;                         // L7346
    float v5617 = a223;                   // L7347
    v5601.write(v5617);                   // v5601[k229] = v5617;	// L7348
    float v5618 = b223;                   // L7349
    v5602.write(v5618);                   // v5602[k229] = v5618;	// L7350
  }
  float v5619 = v223;          // L7352
  v5603[v5604][v5605] = v5619; // L7353
}

void PE_kernel_QKT_0_4(hls::stream<float> &v5620 /* v5620[64] */,
                       hls::stream<float> &v5621 /* v5621[64] */,
                       hls::stream<float> &v5622 /* v5622[64] */,
                       hls::stream<float> &v5623 /* v5623[64] */,
                       float v5624[8][8], int v5625,
                       int v5626) { // L7356
#pragma HLS stream variable = v5620 depth = 9
#pragma HLS stream variable = v5621 depth = 9
#pragma HLS stream variable = v5622 depth = 9
#pragma HLS stream variable = v5623 depth = 9
#pragma HLS array_partition variable = v5624 complete dim = 1
#pragma HLS array_partition variable = v5624 complete dim = 2

  float v224;      // L7359
  v224 = 0.000000; // L7360
l_S_k_0_k230:
  for (int k230 = 0; k230 < 64; k230++) { // L7361
    float v5629 = v5620.read();           // v5620[k230];	// L7362
    float a224;                           // L7363
    a224 = v5629;                         // L7364
    float v5631 = v5621.read();           // v5621[k230];	// L7365
    float b224;                           // L7366
    b224 = v5631;                         // L7367
    float v5633 = a224;                   // L7368
    float v5634 = b224;                   // L7369
    float v5635 = v5633 * v5634;          // L7370
    float v5636 = v224;                   // L7371
    float v5637 = v5636 + v5635;          // L7372
    v224 = v5637;                         // L7373
    float v5638 = a224;                   // L7374
    v5622.write(v5638);                   // v5622[k230] = v5638;	// L7375
    float v5639 = b224;                   // L7376
    v5623.write(v5639);                   // v5623[k230] = v5639;	// L7377
  }
  float v5640 = v224;          // L7379
  v5624[v5625][v5626] = v5640; // L7380
}

void PE_kernel_QKT_1_4(hls::stream<float> &v5641 /* v5641[64] */,
                       hls::stream<float> &v5642 /* v5642[64] */,
                       hls::stream<float> &v5643 /* v5643[64] */,
                       hls::stream<float> &v5644 /* v5644[64] */,
                       float v5645[8][8], int v5646,
                       int v5647) { // L7383
#pragma HLS stream variable = v5641 depth = 9
#pragma HLS stream variable = v5642 depth = 9
#pragma HLS stream variable = v5643 depth = 9
#pragma HLS stream variable = v5644 depth = 9
#pragma HLS array_partition variable = v5645 complete dim = 1
#pragma HLS array_partition variable = v5645 complete dim = 2

  float v225;      // L7386
  v225 = 0.000000; // L7387
l_S_k_0_k231:
  for (int k231 = 0; k231 < 64; k231++) { // L7388
    float v5650 = v5641.read();           // v5641[k231];	// L7389
    float a225;                           // L7390
    a225 = v5650;                         // L7391
    float v5652 = v5642.read();           // v5642[k231];	// L7392
    float b225;                           // L7393
    b225 = v5652;                         // L7394
    float v5654 = a225;                   // L7395
    float v5655 = b225;                   // L7396
    float v5656 = v5654 * v5655;          // L7397
    float v5657 = v225;                   // L7398
    float v5658 = v5657 + v5656;          // L7399
    v225 = v5658;                         // L7400
    float v5659 = a225;                   // L7401
    v5643.write(v5659);                   // v5643[k231] = v5659;	// L7402
    float v5660 = b225;                   // L7403
    v5644.write(v5660);                   // v5644[k231] = v5660;	// L7404
  }
  float v5661 = v225;          // L7406
  v5645[v5646][v5647] = v5661; // L7407
}

void PE_kernel_QKT_2_4(hls::stream<float> &v5662 /* v5662[64] */,
                       hls::stream<float> &v5663 /* v5663[64] */,
                       hls::stream<float> &v5664 /* v5664[64] */,
                       hls::stream<float> &v5665 /* v5665[64] */,
                       float v5666[8][8], int v5667,
                       int v5668) { // L7410
#pragma HLS stream variable = v5662 depth = 9
#pragma HLS stream variable = v5663 depth = 9
#pragma HLS stream variable = v5664 depth = 9
#pragma HLS stream variable = v5665 depth = 9
#pragma HLS array_partition variable = v5666 complete dim = 1
#pragma HLS array_partition variable = v5666 complete dim = 2

  float v226;      // L7413
  v226 = 0.000000; // L7414
l_S_k_0_k232:
  for (int k232 = 0; k232 < 64; k232++) { // L7415
    float v5671 = v5662.read();           // v5662[k232];	// L7416
    float a226;                           // L7417
    a226 = v5671;                         // L7418
    float v5673 = v5663.read();           // v5663[k232];	// L7419
    float b226;                           // L7420
    b226 = v5673;                         // L7421
    float v5675 = a226;                   // L7422
    float v5676 = b226;                   // L7423
    float v5677 = v5675 * v5676;          // L7424
    float v5678 = v226;                   // L7425
    float v5679 = v5678 + v5677;          // L7426
    v226 = v5679;                         // L7427
    float v5680 = a226;                   // L7428
    v5664.write(v5680);                   // v5664[k232] = v5680;	// L7429
    float v5681 = b226;                   // L7430
    v5665.write(v5681);                   // v5665[k232] = v5681;	// L7431
  }
  float v5682 = v226;          // L7433
  v5666[v5667][v5668] = v5682; // L7434
}

void PE_kernel_QKT_3_4(hls::stream<float> &v5683 /* v5683[64] */,
                       hls::stream<float> &v5684 /* v5684[64] */,
                       hls::stream<float> &v5685 /* v5685[64] */,
                       hls::stream<float> &v5686 /* v5686[64] */,
                       float v5687[8][8], int v5688,
                       int v5689) { // L7437
#pragma HLS stream variable = v5683 depth = 9
#pragma HLS stream variable = v5684 depth = 9
#pragma HLS stream variable = v5685 depth = 9
#pragma HLS stream variable = v5686 depth = 9
#pragma HLS array_partition variable = v5687 complete dim = 1
#pragma HLS array_partition variable = v5687 complete dim = 2

  float v227;      // L7440
  v227 = 0.000000; // L7441
l_S_k_0_k233:
  for (int k233 = 0; k233 < 64; k233++) { // L7442
    float v5692 = v5683.read();           // v5683[k233];	// L7443
    float a227;                           // L7444
    a227 = v5692;                         // L7445
    float v5694 = v5684.read();           // v5684[k233];	// L7446
    float b227;                           // L7447
    b227 = v5694;                         // L7448
    float v5696 = a227;                   // L7449
    float v5697 = b227;                   // L7450
    float v5698 = v5696 * v5697;          // L7451
    float v5699 = v227;                   // L7452
    float v5700 = v5699 + v5698;          // L7453
    v227 = v5700;                         // L7454
    float v5701 = a227;                   // L7455
    v5685.write(v5701);                   // v5685[k233] = v5701;	// L7456
    float v5702 = b227;                   // L7457
    v5686.write(v5702);                   // v5686[k233] = v5702;	// L7458
  }
  float v5703 = v227;          // L7460
  v5687[v5688][v5689] = v5703; // L7461
}

void PE_kernel_QKT_4_4(hls::stream<float> &v5704 /* v5704[64] */,
                       hls::stream<float> &v5705 /* v5705[64] */,
                       hls::stream<float> &v5706 /* v5706[64] */,
                       hls::stream<float> &v5707 /* v5707[64] */,
                       float v5708[8][8], int v5709,
                       int v5710) { // L7464
#pragma HLS stream variable = v5704 depth = 9
#pragma HLS stream variable = v5705 depth = 9
#pragma HLS stream variable = v5706 depth = 9
#pragma HLS stream variable = v5707 depth = 9
#pragma HLS array_partition variable = v5708 complete dim = 1
#pragma HLS array_partition variable = v5708 complete dim = 2

  float v228;      // L7467
  v228 = 0.000000; // L7468
l_S_k_0_k234:
  for (int k234 = 0; k234 < 64; k234++) { // L7469
    float v5713 = v5704.read();           // v5704[k234];	// L7470
    float a228;                           // L7471
    a228 = v5713;                         // L7472
    float v5715 = v5705.read();           // v5705[k234];	// L7473
    float b228;                           // L7474
    b228 = v5715;                         // L7475
    float v5717 = a228;                   // L7476
    float v5718 = b228;                   // L7477
    float v5719 = v5717 * v5718;          // L7478
    float v5720 = v228;                   // L7479
    float v5721 = v5720 + v5719;          // L7480
    v228 = v5721;                         // L7481
    float v5722 = a228;                   // L7482
    v5706.write(v5722);                   // v5706[k234] = v5722;	// L7483
    float v5723 = b228;                   // L7484
    v5707.write(v5723);                   // v5707[k234] = v5723;	// L7485
  }
  float v5724 = v228;          // L7487
  v5708[v5709][v5710] = v5724; // L7488
}

void PE_kernel_QKT_5_4(hls::stream<float> &v5725 /* v5725[64] */,
                       hls::stream<float> &v5726 /* v5726[64] */,
                       hls::stream<float> &v5727 /* v5727[64] */,
                       hls::stream<float> &v5728 /* v5728[64] */,
                       float v5729[8][8], int v5730,
                       int v5731) { // L7491
#pragma HLS stream variable = v5725 depth = 9
#pragma HLS stream variable = v5726 depth = 9
#pragma HLS stream variable = v5727 depth = 9
#pragma HLS stream variable = v5728 depth = 9
#pragma HLS array_partition variable = v5729 complete dim = 1
#pragma HLS array_partition variable = v5729 complete dim = 2

  float v229;      // L7494
  v229 = 0.000000; // L7495
l_S_k_0_k235:
  for (int k235 = 0; k235 < 64; k235++) { // L7496
    float v5734 = v5725.read();           // v5725[k235];	// L7497
    float a229;                           // L7498
    a229 = v5734;                         // L7499
    float v5736 = v5726.read();           // v5726[k235];	// L7500
    float b229;                           // L7501
    b229 = v5736;                         // L7502
    float v5738 = a229;                   // L7503
    float v5739 = b229;                   // L7504
    float v5740 = v5738 * v5739;          // L7505
    float v5741 = v229;                   // L7506
    float v5742 = v5741 + v5740;          // L7507
    v229 = v5742;                         // L7508
    float v5743 = a229;                   // L7509
    v5727.write(v5743);                   // v5727[k235] = v5743;	// L7510
    float v5744 = b229;                   // L7511
    v5728.write(v5744);                   // v5728[k235] = v5744;	// L7512
  }
  float v5745 = v229;          // L7514
  v5729[v5730][v5731] = v5745; // L7515
}

void PE_kernel_QKT_6_4(hls::stream<float> &v5746 /* v5746[64] */,
                       hls::stream<float> &v5747 /* v5747[64] */,
                       hls::stream<float> &v5748 /* v5748[64] */,
                       hls::stream<float> &v5749 /* v5749[64] */,
                       float v5750[8][8], int v5751,
                       int v5752) { // L7518
#pragma HLS stream variable = v5746 depth = 9
#pragma HLS stream variable = v5747 depth = 9
#pragma HLS stream variable = v5748 depth = 9
#pragma HLS stream variable = v5749 depth = 9
#pragma HLS array_partition variable = v5750 complete dim = 1
#pragma HLS array_partition variable = v5750 complete dim = 2

  float v230;      // L7521
  v230 = 0.000000; // L7522
l_S_k_0_k236:
  for (int k236 = 0; k236 < 64; k236++) { // L7523
    float v5755 = v5746.read();           // v5746[k236];	// L7524
    float a230;                           // L7525
    a230 = v5755;                         // L7526
    float v5757 = v5747.read();           // v5747[k236];	// L7527
    float b230;                           // L7528
    b230 = v5757;                         // L7529
    float v5759 = a230;                   // L7530
    float v5760 = b230;                   // L7531
    float v5761 = v5759 * v5760;          // L7532
    float v5762 = v230;                   // L7533
    float v5763 = v5762 + v5761;          // L7534
    v230 = v5763;                         // L7535
    float v5764 = a230;                   // L7536
    v5748.write(v5764);                   // v5748[k236] = v5764;	// L7537
    float v5765 = b230;                   // L7538
    v5749.write(v5765);                   // v5749[k236] = v5765;	// L7539
  }
  float v5766 = v230;          // L7541
  v5750[v5751][v5752] = v5766; // L7542
}

void PE_kernel_QKT_7_4(hls::stream<float> &v5767 /* v5767[64] */,
                       hls::stream<float> &v5768 /* v5768[64] */,
                       hls::stream<float> &v5769 /* v5769[64] */,
                       hls::stream<float> &v5770 /* v5770[64] */,
                       float v5771[8][8], int v5772,
                       int v5773) { // L7545
#pragma HLS stream variable = v5767 depth = 9
#pragma HLS stream variable = v5768 depth = 9
#pragma HLS stream variable = v5769 depth = 9
#pragma HLS stream variable = v5770 depth = 9
#pragma HLS array_partition variable = v5771 complete dim = 1
#pragma HLS array_partition variable = v5771 complete dim = 2

  float v231;      // L7548
  v231 = 0.000000; // L7549
l_S_k_0_k237:
  for (int k237 = 0; k237 < 64; k237++) { // L7550
    float v5776 = v5767.read();           // v5767[k237];	// L7551
    float a231;                           // L7552
    a231 = v5776;                         // L7553
    float v5778 = v5768.read();           // v5768[k237];	// L7554
    float b231;                           // L7555
    b231 = v5778;                         // L7556
    float v5780 = a231;                   // L7557
    float v5781 = b231;                   // L7558
    float v5782 = v5780 * v5781;          // L7559
    float v5783 = v231;                   // L7560
    float v5784 = v5783 + v5782;          // L7561
    v231 = v5784;                         // L7562
    float v5785 = a231;                   // L7563
    v5769.write(v5785);                   // v5769[k237] = v5785;	// L7564
    float v5786 = b231;                   // L7565
    v5770.write(v5786);                   // v5770[k237] = v5786;	// L7566
  }
  float v5787 = v231;          // L7568
  v5771[v5772][v5773] = v5787; // L7569
}

void PE_kernel_QKT_0_5(hls::stream<float> &v5788 /* v5788[64] */,
                       hls::stream<float> &v5789 /* v5789[64] */,
                       hls::stream<float> &v5790 /* v5790[64] */,
                       hls::stream<float> &v5791 /* v5791[64] */,
                       float v5792[8][8], int v5793,
                       int v5794) { // L7572
#pragma HLS stream variable = v5788 depth = 9
#pragma HLS stream variable = v5789 depth = 9
#pragma HLS stream variable = v5790 depth = 9
#pragma HLS stream variable = v5791 depth = 9
#pragma HLS array_partition variable = v5792 complete dim = 1
#pragma HLS array_partition variable = v5792 complete dim = 2

  float v232;      // L7575
  v232 = 0.000000; // L7576
l_S_k_0_k238:
  for (int k238 = 0; k238 < 64; k238++) { // L7577
    float v5797 = v5788.read();           // v5788[k238];	// L7578
    float a232;                           // L7579
    a232 = v5797;                         // L7580
    float v5799 = v5789.read();           // v5789[k238];	// L7581
    float b232;                           // L7582
    b232 = v5799;                         // L7583
    float v5801 = a232;                   // L7584
    float v5802 = b232;                   // L7585
    float v5803 = v5801 * v5802;          // L7586
    float v5804 = v232;                   // L7587
    float v5805 = v5804 + v5803;          // L7588
    v232 = v5805;                         // L7589
    float v5806 = a232;                   // L7590
    v5790.write(v5806);                   // v5790[k238] = v5806;	// L7591
    float v5807 = b232;                   // L7592
    v5791.write(v5807);                   // v5791[k238] = v5807;	// L7593
  }
  float v5808 = v232;          // L7595
  v5792[v5793][v5794] = v5808; // L7596
}

void PE_kernel_QKT_1_5(hls::stream<float> &v5809 /* v5809[64] */,
                       hls::stream<float> &v5810 /* v5810[64] */,
                       hls::stream<float> &v5811 /* v5811[64] */,
                       hls::stream<float> &v5812 /* v5812[64] */,
                       float v5813[8][8], int v5814,
                       int v5815) { // L7599
#pragma HLS stream variable = v5809 depth = 9
#pragma HLS stream variable = v5810 depth = 9
#pragma HLS stream variable = v5811 depth = 9
#pragma HLS stream variable = v5812 depth = 9
#pragma HLS array_partition variable = v5813 complete dim = 1
#pragma HLS array_partition variable = v5813 complete dim = 2

  float v233;      // L7602
  v233 = 0.000000; // L7603
l_S_k_0_k239:
  for (int k239 = 0; k239 < 64; k239++) { // L7604
    float v5818 = v5809.read();           // v5809[k239];	// L7605
    float a233;                           // L7606
    a233 = v5818;                         // L7607
    float v5820 = v5810.read();           // v5810[k239];	// L7608
    float b233;                           // L7609
    b233 = v5820;                         // L7610
    float v5822 = a233;                   // L7611
    float v5823 = b233;                   // L7612
    float v5824 = v5822 * v5823;          // L7613
    float v5825 = v233;                   // L7614
    float v5826 = v5825 + v5824;          // L7615
    v233 = v5826;                         // L7616
    float v5827 = a233;                   // L7617
    v5811.write(v5827);                   // v5811[k239] = v5827;	// L7618
    float v5828 = b233;                   // L7619
    v5812.write(v5828);                   // v5812[k239] = v5828;	// L7620
  }
  float v5829 = v233;          // L7622
  v5813[v5814][v5815] = v5829; // L7623
}

void PE_kernel_QKT_2_5(hls::stream<float> &v5830 /* v5830[64] */,
                       hls::stream<float> &v5831 /* v5831[64] */,
                       hls::stream<float> &v5832 /* v5832[64] */,
                       hls::stream<float> &v5833 /* v5833[64] */,
                       float v5834[8][8], int v5835,
                       int v5836) { // L7626
#pragma HLS stream variable = v5830 depth = 9
#pragma HLS stream variable = v5831 depth = 9
#pragma HLS stream variable = v5832 depth = 9
#pragma HLS stream variable = v5833 depth = 9
#pragma HLS array_partition variable = v5834 complete dim = 1
#pragma HLS array_partition variable = v5834 complete dim = 2

  float v234;      // L7629
  v234 = 0.000000; // L7630
l_S_k_0_k240:
  for (int k240 = 0; k240 < 64; k240++) { // L7631
    float v5839 = v5830.read();           // v5830[k240];	// L7632
    float a234;                           // L7633
    a234 = v5839;                         // L7634
    float v5841 = v5831.read();           // v5831[k240];	// L7635
    float b234;                           // L7636
    b234 = v5841;                         // L7637
    float v5843 = a234;                   // L7638
    float v5844 = b234;                   // L7639
    float v5845 = v5843 * v5844;          // L7640
    float v5846 = v234;                   // L7641
    float v5847 = v5846 + v5845;          // L7642
    v234 = v5847;                         // L7643
    float v5848 = a234;                   // L7644
    v5832.write(v5848);                   // v5832[k240] = v5848;	// L7645
    float v5849 = b234;                   // L7646
    v5833.write(v5849);                   // v5833[k240] = v5849;	// L7647
  }
  float v5850 = v234;          // L7649
  v5834[v5835][v5836] = v5850; // L7650
}

void PE_kernel_QKT_3_5(hls::stream<float> &v5851 /* v5851[64] */,
                       hls::stream<float> &v5852 /* v5852[64] */,
                       hls::stream<float> &v5853 /* v5853[64] */,
                       hls::stream<float> &v5854 /* v5854[64] */,
                       float v5855[8][8], int v5856,
                       int v5857) { // L7653
#pragma HLS stream variable = v5851 depth = 9
#pragma HLS stream variable = v5852 depth = 9
#pragma HLS stream variable = v5853 depth = 9
#pragma HLS stream variable = v5854 depth = 9
#pragma HLS array_partition variable = v5855 complete dim = 1
#pragma HLS array_partition variable = v5855 complete dim = 2

  float v235;      // L7656
  v235 = 0.000000; // L7657
l_S_k_0_k241:
  for (int k241 = 0; k241 < 64; k241++) { // L7658
    float v5860 = v5851.read();           // v5851[k241];	// L7659
    float a235;                           // L7660
    a235 = v5860;                         // L7661
    float v5862 = v5852.read();           // v5852[k241];	// L7662
    float b235;                           // L7663
    b235 = v5862;                         // L7664
    float v5864 = a235;                   // L7665
    float v5865 = b235;                   // L7666
    float v5866 = v5864 * v5865;          // L7667
    float v5867 = v235;                   // L7668
    float v5868 = v5867 + v5866;          // L7669
    v235 = v5868;                         // L7670
    float v5869 = a235;                   // L7671
    v5853.write(v5869);                   // v5853[k241] = v5869;	// L7672
    float v5870 = b235;                   // L7673
    v5854.write(v5870);                   // v5854[k241] = v5870;	// L7674
  }
  float v5871 = v235;          // L7676
  v5855[v5856][v5857] = v5871; // L7677
}

void PE_kernel_QKT_4_5(hls::stream<float> &v5872 /* v5872[64] */,
                       hls::stream<float> &v5873 /* v5873[64] */,
                       hls::stream<float> &v5874 /* v5874[64] */,
                       hls::stream<float> &v5875 /* v5875[64] */,
                       float v5876[8][8], int v5877,
                       int v5878) { // L7680
#pragma HLS stream variable = v5872 depth = 9
#pragma HLS stream variable = v5873 depth = 9
#pragma HLS stream variable = v5874 depth = 9
#pragma HLS stream variable = v5875 depth = 9
#pragma HLS array_partition variable = v5876 complete dim = 1
#pragma HLS array_partition variable = v5876 complete dim = 2

  float v236;      // L7683
  v236 = 0.000000; // L7684
l_S_k_0_k242:
  for (int k242 = 0; k242 < 64; k242++) { // L7685
    float v5881 = v5872.read();           // v5872[k242];	// L7686
    float a236;                           // L7687
    a236 = v5881;                         // L7688
    float v5883 = v5873.read();           // v5873[k242];	// L7689
    float b236;                           // L7690
    b236 = v5883;                         // L7691
    float v5885 = a236;                   // L7692
    float v5886 = b236;                   // L7693
    float v5887 = v5885 * v5886;          // L7694
    float v5888 = v236;                   // L7695
    float v5889 = v5888 + v5887;          // L7696
    v236 = v5889;                         // L7697
    float v5890 = a236;                   // L7698
    v5874.write(v5890);                   // v5874[k242] = v5890;	// L7699
    float v5891 = b236;                   // L7700
    v5875.write(v5891);                   // v5875[k242] = v5891;	// L7701
  }
  float v5892 = v236;          // L7703
  v5876[v5877][v5878] = v5892; // L7704
}

void PE_kernel_QKT_5_5(hls::stream<float> &v5893 /* v5893[64] */,
                       hls::stream<float> &v5894 /* v5894[64] */,
                       hls::stream<float> &v5895 /* v5895[64] */,
                       hls::stream<float> &v5896 /* v5896[64] */,
                       float v5897[8][8], int v5898,
                       int v5899) { // L7707
#pragma HLS stream variable = v5893 depth = 9
#pragma HLS stream variable = v5894 depth = 9
#pragma HLS stream variable = v5895 depth = 9
#pragma HLS stream variable = v5896 depth = 9
#pragma HLS array_partition variable = v5897 complete dim = 1
#pragma HLS array_partition variable = v5897 complete dim = 2

  float v237;      // L7710
  v237 = 0.000000; // L7711
l_S_k_0_k243:
  for (int k243 = 0; k243 < 64; k243++) { // L7712
    float v5902 = v5893.read();           // v5893[k243];	// L7713
    float a237;                           // L7714
    a237 = v5902;                         // L7715
    float v5904 = v5894.read();           // v5894[k243];	// L7716
    float b237;                           // L7717
    b237 = v5904;                         // L7718
    float v5906 = a237;                   // L7719
    float v5907 = b237;                   // L7720
    float v5908 = v5906 * v5907;          // L7721
    float v5909 = v237;                   // L7722
    float v5910 = v5909 + v5908;          // L7723
    v237 = v5910;                         // L7724
    float v5911 = a237;                   // L7725
    v5895.write(v5911);                   // v5895[k243] = v5911;	// L7726
    float v5912 = b237;                   // L7727
    v5896.write(v5912);                   // v5896[k243] = v5912;	// L7728
  }
  float v5913 = v237;          // L7730
  v5897[v5898][v5899] = v5913; // L7731
}

void PE_kernel_QKT_6_5(hls::stream<float> &v5914 /* v5914[64] */,
                       hls::stream<float> &v5915 /* v5915[64] */,
                       hls::stream<float> &v5916 /* v5916[64] */,
                       hls::stream<float> &v5917 /* v5917[64] */,
                       float v5918[8][8], int v5919,
                       int v5920) { // L7734
#pragma HLS stream variable = v5914 depth = 9
#pragma HLS stream variable = v5915 depth = 9
#pragma HLS stream variable = v5916 depth = 9
#pragma HLS stream variable = v5917 depth = 9
#pragma HLS array_partition variable = v5918 complete dim = 1
#pragma HLS array_partition variable = v5918 complete dim = 2

  float v238;      // L7737
  v238 = 0.000000; // L7738
l_S_k_0_k244:
  for (int k244 = 0; k244 < 64; k244++) { // L7739
    float v5923 = v5914.read();           // v5914[k244];	// L7740
    float a238;                           // L7741
    a238 = v5923;                         // L7742
    float v5925 = v5915.read();           // v5915[k244];	// L7743
    float b238;                           // L7744
    b238 = v5925;                         // L7745
    float v5927 = a238;                   // L7746
    float v5928 = b238;                   // L7747
    float v5929 = v5927 * v5928;          // L7748
    float v5930 = v238;                   // L7749
    float v5931 = v5930 + v5929;          // L7750
    v238 = v5931;                         // L7751
    float v5932 = a238;                   // L7752
    v5916.write(v5932);                   // v5916[k244] = v5932;	// L7753
    float v5933 = b238;                   // L7754
    v5917.write(v5933);                   // v5917[k244] = v5933;	// L7755
  }
  float v5934 = v238;          // L7757
  v5918[v5919][v5920] = v5934; // L7758
}

void PE_kernel_QKT_7_5(hls::stream<float> &v5935 /* v5935[64] */,
                       hls::stream<float> &v5936 /* v5936[64] */,
                       hls::stream<float> &v5937 /* v5937[64] */,
                       hls::stream<float> &v5938 /* v5938[64] */,
                       float v5939[8][8], int v5940,
                       int v5941) { // L7761
#pragma HLS stream variable = v5935 depth = 9
#pragma HLS stream variable = v5936 depth = 9
#pragma HLS stream variable = v5937 depth = 9
#pragma HLS stream variable = v5938 depth = 9
#pragma HLS array_partition variable = v5939 complete dim = 1
#pragma HLS array_partition variable = v5939 complete dim = 2

  float v239;      // L7764
  v239 = 0.000000; // L7765
l_S_k_0_k245:
  for (int k245 = 0; k245 < 64; k245++) { // L7766
    float v5944 = v5935.read();           // v5935[k245];	// L7767
    float a239;                           // L7768
    a239 = v5944;                         // L7769
    float v5946 = v5936.read();           // v5936[k245];	// L7770
    float b239;                           // L7771
    b239 = v5946;                         // L7772
    float v5948 = a239;                   // L7773
    float v5949 = b239;                   // L7774
    float v5950 = v5948 * v5949;          // L7775
    float v5951 = v239;                   // L7776
    float v5952 = v5951 + v5950;          // L7777
    v239 = v5952;                         // L7778
    float v5953 = a239;                   // L7779
    v5937.write(v5953);                   // v5937[k245] = v5953;	// L7780
    float v5954 = b239;                   // L7781
    v5938.write(v5954);                   // v5938[k245] = v5954;	// L7782
  }
  float v5955 = v239;          // L7784
  v5939[v5940][v5941] = v5955; // L7785
}

void PE_kernel_QKT_0_6(hls::stream<float> &v5956 /* v5956[64] */,
                       hls::stream<float> &v5957 /* v5957[64] */,
                       hls::stream<float> &v5958 /* v5958[64] */,
                       hls::stream<float> &v5959 /* v5959[64] */,
                       float v5960[8][8], int v5961,
                       int v5962) { // L7788
#pragma HLS stream variable = v5956 depth = 9
#pragma HLS stream variable = v5957 depth = 9
#pragma HLS stream variable = v5958 depth = 9
#pragma HLS stream variable = v5959 depth = 9
#pragma HLS array_partition variable = v5960 complete dim = 1
#pragma HLS array_partition variable = v5960 complete dim = 2

  float v240;      // L7791
  v240 = 0.000000; // L7792
l_S_k_0_k246:
  for (int k246 = 0; k246 < 64; k246++) { // L7793
    float v5965 = v5956.read();           // v5956[k246];	// L7794
    float a240;                           // L7795
    a240 = v5965;                         // L7796
    float v5967 = v5957.read();           // v5957[k246];	// L7797
    float b240;                           // L7798
    b240 = v5967;                         // L7799
    float v5969 = a240;                   // L7800
    float v5970 = b240;                   // L7801
    float v5971 = v5969 * v5970;          // L7802
    float v5972 = v240;                   // L7803
    float v5973 = v5972 + v5971;          // L7804
    v240 = v5973;                         // L7805
    float v5974 = a240;                   // L7806
    v5958.write(v5974);                   // v5958[k246] = v5974;	// L7807
    float v5975 = b240;                   // L7808
    v5959.write(v5975);                   // v5959[k246] = v5975;	// L7809
  }
  float v5976 = v240;          // L7811
  v5960[v5961][v5962] = v5976; // L7812
}

void PE_kernel_QKT_1_6(hls::stream<float> &v5977 /* v5977[64] */,
                       hls::stream<float> &v5978 /* v5978[64] */,
                       hls::stream<float> &v5979 /* v5979[64] */,
                       hls::stream<float> &v5980 /* v5980[64] */,
                       float v5981[8][8], int v5982,
                       int v5983) { // L7815
#pragma HLS stream variable = v5977 depth = 9
#pragma HLS stream variable = v5978 depth = 9
#pragma HLS stream variable = v5979 depth = 9
#pragma HLS stream variable = v5980 depth = 9
#pragma HLS array_partition variable = v5981 complete dim = 1
#pragma HLS array_partition variable = v5981 complete dim = 2

  float v241;      // L7818
  v241 = 0.000000; // L7819
l_S_k_0_k247:
  for (int k247 = 0; k247 < 64; k247++) { // L7820
    float v5986 = v5977.read();           // v5977[k247];	// L7821
    float a241;                           // L7822
    a241 = v5986;                         // L7823
    float v5988 = v5978.read();           // v5978[k247];	// L7824
    float b241;                           // L7825
    b241 = v5988;                         // L7826
    float v5990 = a241;                   // L7827
    float v5991 = b241;                   // L7828
    float v5992 = v5990 * v5991;          // L7829
    float v5993 = v241;                   // L7830
    float v5994 = v5993 + v5992;          // L7831
    v241 = v5994;                         // L7832
    float v5995 = a241;                   // L7833
    v5979.write(v5995);                   // v5979[k247] = v5995;	// L7834
    float v5996 = b241;                   // L7835
    v5980.write(v5996);                   // v5980[k247] = v5996;	// L7836
  }
  float v5997 = v241;          // L7838
  v5981[v5982][v5983] = v5997; // L7839
}

void PE_kernel_QKT_2_6(hls::stream<float> &v5998 /* v5998[64] */,
                       hls::stream<float> &v5999 /* v5999[64] */,
                       hls::stream<float> &v6000 /* v6000[64] */,
                       hls::stream<float> &v6001 /* v6001[64] */,
                       float v6002[8][8], int v6003,
                       int v6004) { // L7842
#pragma HLS stream variable = v5998 depth = 9
#pragma HLS stream variable = v5999 depth = 9
#pragma HLS stream variable = v6000 depth = 9
#pragma HLS stream variable = v6001 depth = 9
#pragma HLS array_partition variable = v6002 complete dim = 1
#pragma HLS array_partition variable = v6002 complete dim = 2

  float v242;      // L7845
  v242 = 0.000000; // L7846
l_S_k_0_k248:
  for (int k248 = 0; k248 < 64; k248++) { // L7847
    float v6007 = v5998.read();           // v5998[k248];	// L7848
    float a242;                           // L7849
    a242 = v6007;                         // L7850
    float v6009 = v5999.read();           // v5999[k248];	// L7851
    float b242;                           // L7852
    b242 = v6009;                         // L7853
    float v6011 = a242;                   // L7854
    float v6012 = b242;                   // L7855
    float v6013 = v6011 * v6012;          // L7856
    float v6014 = v242;                   // L7857
    float v6015 = v6014 + v6013;          // L7858
    v242 = v6015;                         // L7859
    float v6016 = a242;                   // L7860
    v6000.write(v6016);                   // v6000[k248] = v6016;	// L7861
    float v6017 = b242;                   // L7862
    v6001.write(v6017);                   // v6001[k248] = v6017;	// L7863
  }
  float v6018 = v242;          // L7865
  v6002[v6003][v6004] = v6018; // L7866
}

void PE_kernel_QKT_3_6(hls::stream<float> &v6019 /* v6019[64] */,
                       hls::stream<float> &v6020 /* v6020[64] */,
                       hls::stream<float> &v6021 /* v6021[64] */,
                       hls::stream<float> &v6022 /* v6022[64] */,
                       float v6023[8][8], int v6024,
                       int v6025) { // L7869
#pragma HLS stream variable = v6019 depth = 9
#pragma HLS stream variable = v6020 depth = 9
#pragma HLS stream variable = v6021 depth = 9
#pragma HLS stream variable = v6022 depth = 9
#pragma HLS array_partition variable = v6023 complete dim = 1
#pragma HLS array_partition variable = v6023 complete dim = 2

  float v243;      // L7872
  v243 = 0.000000; // L7873
l_S_k_0_k249:
  for (int k249 = 0; k249 < 64; k249++) { // L7874
    float v6028 = v6019.read();           // v6019[k249];	// L7875
    float a243;                           // L7876
    a243 = v6028;                         // L7877
    float v6030 = v6020.read();           // v6020[k249];	// L7878
    float b243;                           // L7879
    b243 = v6030;                         // L7880
    float v6032 = a243;                   // L7881
    float v6033 = b243;                   // L7882
    float v6034 = v6032 * v6033;          // L7883
    float v6035 = v243;                   // L7884
    float v6036 = v6035 + v6034;          // L7885
    v243 = v6036;                         // L7886
    float v6037 = a243;                   // L7887
    v6021.write(v6037);                   // v6021[k249] = v6037;	// L7888
    float v6038 = b243;                   // L7889
    v6022.write(v6038);                   // v6022[k249] = v6038;	// L7890
  }
  float v6039 = v243;          // L7892
  v6023[v6024][v6025] = v6039; // L7893
}

void PE_kernel_QKT_4_6(hls::stream<float> &v6040 /* v6040[64] */,
                       hls::stream<float> &v6041 /* v6041[64] */,
                       hls::stream<float> &v6042 /* v6042[64] */,
                       hls::stream<float> &v6043 /* v6043[64] */,
                       float v6044[8][8], int v6045,
                       int v6046) { // L7896
#pragma HLS stream variable = v6040 depth = 9
#pragma HLS stream variable = v6041 depth = 9
#pragma HLS stream variable = v6042 depth = 9
#pragma HLS stream variable = v6043 depth = 9
#pragma HLS array_partition variable = v6044 complete dim = 1
#pragma HLS array_partition variable = v6044 complete dim = 2

  float v244;      // L7899
  v244 = 0.000000; // L7900
l_S_k_0_k250:
  for (int k250 = 0; k250 < 64; k250++) { // L7901
    float v6049 = v6040.read();           // v6040[k250];	// L7902
    float a244;                           // L7903
    a244 = v6049;                         // L7904
    float v6051 = v6041.read();           // v6041[k250];	// L7905
    float b244;                           // L7906
    b244 = v6051;                         // L7907
    float v6053 = a244;                   // L7908
    float v6054 = b244;                   // L7909
    float v6055 = v6053 * v6054;          // L7910
    float v6056 = v244;                   // L7911
    float v6057 = v6056 + v6055;          // L7912
    v244 = v6057;                         // L7913
    float v6058 = a244;                   // L7914
    v6042.write(v6058);                   // v6042[k250] = v6058;	// L7915
    float v6059 = b244;                   // L7916
    v6043.write(v6059);                   // v6043[k250] = v6059;	// L7917
  }
  float v6060 = v244;          // L7919
  v6044[v6045][v6046] = v6060; // L7920
}

void PE_kernel_QKT_5_6(hls::stream<float> &v6061 /* v6061[64] */,
                       hls::stream<float> &v6062 /* v6062[64] */,
                       hls::stream<float> &v6063 /* v6063[64] */,
                       hls::stream<float> &v6064 /* v6064[64] */,
                       float v6065[8][8], int v6066,
                       int v6067) { // L7923
#pragma HLS stream variable = v6061 depth = 9
#pragma HLS stream variable = v6062 depth = 9
#pragma HLS stream variable = v6063 depth = 9
#pragma HLS stream variable = v6064 depth = 9
#pragma HLS array_partition variable = v6065 complete dim = 1
#pragma HLS array_partition variable = v6065 complete dim = 2

  float v245;      // L7926
  v245 = 0.000000; // L7927
l_S_k_0_k251:
  for (int k251 = 0; k251 < 64; k251++) { // L7928
    float v6070 = v6061.read();           // v6061[k251];	// L7929
    float a245;                           // L7930
    a245 = v6070;                         // L7931
    float v6072 = v6062.read();           // v6062[k251];	// L7932
    float b245;                           // L7933
    b245 = v6072;                         // L7934
    float v6074 = a245;                   // L7935
    float v6075 = b245;                   // L7936
    float v6076 = v6074 * v6075;          // L7937
    float v6077 = v245;                   // L7938
    float v6078 = v6077 + v6076;          // L7939
    v245 = v6078;                         // L7940
    float v6079 = a245;                   // L7941
    v6063.write(v6079);                   // v6063[k251] = v6079;	// L7942
    float v6080 = b245;                   // L7943
    v6064.write(v6080);                   // v6064[k251] = v6080;	// L7944
  }
  float v6081 = v245;          // L7946
  v6065[v6066][v6067] = v6081; // L7947
}

void PE_kernel_QKT_6_6(hls::stream<float> &v6082 /* v6082[64] */,
                       hls::stream<float> &v6083 /* v6083[64] */,
                       hls::stream<float> &v6084 /* v6084[64] */,
                       hls::stream<float> &v6085 /* v6085[64] */,
                       float v6086[8][8], int v6087,
                       int v6088) { // L7950
#pragma HLS stream variable = v6082 depth = 9
#pragma HLS stream variable = v6083 depth = 9
#pragma HLS stream variable = v6084 depth = 9
#pragma HLS stream variable = v6085 depth = 9
#pragma HLS array_partition variable = v6086 complete dim = 1
#pragma HLS array_partition variable = v6086 complete dim = 2

  float v246;      // L7953
  v246 = 0.000000; // L7954
l_S_k_0_k252:
  for (int k252 = 0; k252 < 64; k252++) { // L7955
    float v6091 = v6082.read();           // v6082[k252];	// L7956
    float a246;                           // L7957
    a246 = v6091;                         // L7958
    float v6093 = v6083.read();           // v6083[k252];	// L7959
    float b246;                           // L7960
    b246 = v6093;                         // L7961
    float v6095 = a246;                   // L7962
    float v6096 = b246;                   // L7963
    float v6097 = v6095 * v6096;          // L7964
    float v6098 = v246;                   // L7965
    float v6099 = v6098 + v6097;          // L7966
    v246 = v6099;                         // L7967
    float v6100 = a246;                   // L7968
    v6084.write(v6100);                   // v6084[k252] = v6100;	// L7969
    float v6101 = b246;                   // L7970
    v6085.write(v6101);                   // v6085[k252] = v6101;	// L7971
  }
  float v6102 = v246;          // L7973
  v6086[v6087][v6088] = v6102; // L7974
}

void PE_kernel_QKT_7_6(hls::stream<float> &v6103 /* v6103[64] */,
                       hls::stream<float> &v6104 /* v6104[64] */,
                       hls::stream<float> &v6105 /* v6105[64] */,
                       hls::stream<float> &v6106 /* v6106[64] */,
                       float v6107[8][8], int v6108,
                       int v6109) { // L7977
#pragma HLS stream variable = v6103 depth = 9
#pragma HLS stream variable = v6104 depth = 9
#pragma HLS stream variable = v6105 depth = 9
#pragma HLS stream variable = v6106 depth = 9
#pragma HLS array_partition variable = v6107 complete dim = 1
#pragma HLS array_partition variable = v6107 complete dim = 2

  float v247;      // L7980
  v247 = 0.000000; // L7981
l_S_k_0_k253:
  for (int k253 = 0; k253 < 64; k253++) { // L7982
    float v6112 = v6103.read();           // v6103[k253];	// L7983
    float a247;                           // L7984
    a247 = v6112;                         // L7985
    float v6114 = v6104.read();           // v6104[k253];	// L7986
    float b247;                           // L7987
    b247 = v6114;                         // L7988
    float v6116 = a247;                   // L7989
    float v6117 = b247;                   // L7990
    float v6118 = v6116 * v6117;          // L7991
    float v6119 = v247;                   // L7992
    float v6120 = v6119 + v6118;          // L7993
    v247 = v6120;                         // L7994
    float v6121 = a247;                   // L7995
    v6105.write(v6121);                   // v6105[k253] = v6121;	// L7996
    float v6122 = b247;                   // L7997
    v6106.write(v6122);                   // v6106[k253] = v6122;	// L7998
  }
  float v6123 = v247;          // L8000
  v6107[v6108][v6109] = v6123; // L8001
}

void PE_kernel_QKT_0_7(hls::stream<float> &v6124 /* v6124[64] */,
                       hls::stream<float> &v6125 /* v6125[64] */,
                       hls::stream<float> &v6126 /* v6126[64] */,
                       hls::stream<float> &v6127 /* v6127[64] */,
                       float v6128[8][8], int v6129,
                       int v6130) { // L8004
#pragma HLS stream variable = v6124 depth = 9
#pragma HLS stream variable = v6125 depth = 9
#pragma HLS stream variable = v6126 depth = 9
#pragma HLS stream variable = v6127 depth = 9
#pragma HLS array_partition variable = v6128 complete dim = 1
#pragma HLS array_partition variable = v6128 complete dim = 2

  float v248;      // L8007
  v248 = 0.000000; // L8008
l_S_k_0_k254:
  for (int k254 = 0; k254 < 64; k254++) { // L8009
    float v6133 = v6124.read();           // v6124[k254];	// L8010
    float a248;                           // L8011
    a248 = v6133;                         // L8012
    float v6135 = v6125.read();           // v6125[k254];	// L8013
    float b248;                           // L8014
    b248 = v6135;                         // L8015
    float v6137 = a248;                   // L8016
    float v6138 = b248;                   // L8017
    float v6139 = v6137 * v6138;          // L8018
    float v6140 = v248;                   // L8019
    float v6141 = v6140 + v6139;          // L8020
    v248 = v6141;                         // L8021
    float v6142 = a248;                   // L8022
    v6126.write(v6142);                   // v6126[k254] = v6142;	// L8023
    float v6143 = b248;                   // L8024
    v6127.write(v6143);                   // v6127[k254] = v6143;	// L8025
  }
  float v6144 = v248;          // L8027
  v6128[v6129][v6130] = v6144; // L8028
}

void PE_kernel_QKT_1_7(hls::stream<float> &v6145 /* v6145[64] */,
                       hls::stream<float> &v6146 /* v6146[64] */,
                       hls::stream<float> &v6147 /* v6147[64] */,
                       hls::stream<float> &v6148 /* v6148[64] */,
                       float v6149[8][8], int v6150,
                       int v6151) { // L8031
#pragma HLS stream variable = v6145 depth = 9
#pragma HLS stream variable = v6146 depth = 9
#pragma HLS stream variable = v6147 depth = 9
#pragma HLS stream variable = v6148 depth = 9
#pragma HLS array_partition variable = v6149 complete dim = 1
#pragma HLS array_partition variable = v6149 complete dim = 2

  float v249;      // L8034
  v249 = 0.000000; // L8035
l_S_k_0_k255:
  for (int k255 = 0; k255 < 64; k255++) { // L8036
    float v6154 = v6145.read();           // v6145[k255];	// L8037
    float a249;                           // L8038
    a249 = v6154;                         // L8039
    float v6156 = v6146.read();           // v6146[k255];	// L8040
    float b249;                           // L8041
    b249 = v6156;                         // L8042
    float v6158 = a249;                   // L8043
    float v6159 = b249;                   // L8044
    float v6160 = v6158 * v6159;          // L8045
    float v6161 = v249;                   // L8046
    float v6162 = v6161 + v6160;          // L8047
    v249 = v6162;                         // L8048
    float v6163 = a249;                   // L8049
    v6147.write(v6163);                   // v6147[k255] = v6163;	// L8050
    float v6164 = b249;                   // L8051
    v6148.write(v6164);                   // v6148[k255] = v6164;	// L8052
  }
  float v6165 = v249;          // L8054
  v6149[v6150][v6151] = v6165; // L8055
}

void PE_kernel_QKT_2_7(hls::stream<float> &v6166 /* v6166[64] */,
                       hls::stream<float> &v6167 /* v6167[64] */,
                       hls::stream<float> &v6168 /* v6168[64] */,
                       hls::stream<float> &v6169 /* v6169[64] */,
                       float v6170[8][8], int v6171,
                       int v6172) { // L8058
#pragma HLS stream variable = v6166 depth = 9
#pragma HLS stream variable = v6167 depth = 9
#pragma HLS stream variable = v6168 depth = 9
#pragma HLS stream variable = v6169 depth = 9
#pragma HLS array_partition variable = v6170 complete dim = 1
#pragma HLS array_partition variable = v6170 complete dim = 2

  float v250;      // L8061
  v250 = 0.000000; // L8062
l_S_k_0_k256:
  for (int k256 = 0; k256 < 64; k256++) { // L8063
    float v6175 = v6166.read();           // v6166[k256];	// L8064
    float a250;                           // L8065
    a250 = v6175;                         // L8066
    float v6177 = v6167.read();           // v6167[k256];	// L8067
    float b250;                           // L8068
    b250 = v6177;                         // L8069
    float v6179 = a250;                   // L8070
    float v6180 = b250;                   // L8071
    float v6181 = v6179 * v6180;          // L8072
    float v6182 = v250;                   // L8073
    float v6183 = v6182 + v6181;          // L8074
    v250 = v6183;                         // L8075
    float v6184 = a250;                   // L8076
    v6168.write(v6184);                   // v6168[k256] = v6184;	// L8077
    float v6185 = b250;                   // L8078
    v6169.write(v6185);                   // v6169[k256] = v6185;	// L8079
  }
  float v6186 = v250;          // L8081
  v6170[v6171][v6172] = v6186; // L8082
}

void PE_kernel_QKT_3_7(hls::stream<float> &v6187 /* v6187[64] */,
                       hls::stream<float> &v6188 /* v6188[64] */,
                       hls::stream<float> &v6189 /* v6189[64] */,
                       hls::stream<float> &v6190 /* v6190[64] */,
                       float v6191[8][8], int v6192,
                       int v6193) { // L8085
#pragma HLS stream variable = v6187 depth = 9
#pragma HLS stream variable = v6188 depth = 9
#pragma HLS stream variable = v6189 depth = 9
#pragma HLS stream variable = v6190 depth = 9
#pragma HLS array_partition variable = v6191 complete dim = 1
#pragma HLS array_partition variable = v6191 complete dim = 2

  float v251;      // L8088
  v251 = 0.000000; // L8089
l_S_k_0_k257:
  for (int k257 = 0; k257 < 64; k257++) { // L8090
    float v6196 = v6187.read();           // v6187[k257];	// L8091
    float a251;                           // L8092
    a251 = v6196;                         // L8093
    float v6198 = v6188.read();           // v6188[k257];	// L8094
    float b251;                           // L8095
    b251 = v6198;                         // L8096
    float v6200 = a251;                   // L8097
    float v6201 = b251;                   // L8098
    float v6202 = v6200 * v6201;          // L8099
    float v6203 = v251;                   // L8100
    float v6204 = v6203 + v6202;          // L8101
    v251 = v6204;                         // L8102
    float v6205 = a251;                   // L8103
    v6189.write(v6205);                   // v6189[k257] = v6205;	// L8104
    float v6206 = b251;                   // L8105
    v6190.write(v6206);                   // v6190[k257] = v6206;	// L8106
  }
  float v6207 = v251;          // L8108
  v6191[v6192][v6193] = v6207; // L8109
}

void PE_kernel_QKT_4_7(hls::stream<float> &v6208 /* v6208[64] */,
                       hls::stream<float> &v6209 /* v6209[64] */,
                       hls::stream<float> &v6210 /* v6210[64] */,
                       hls::stream<float> &v6211 /* v6211[64] */,
                       float v6212[8][8], int v6213,
                       int v6214) { // L8112
#pragma HLS stream variable = v6208 depth = 9
#pragma HLS stream variable = v6209 depth = 9
#pragma HLS stream variable = v6210 depth = 9
#pragma HLS stream variable = v6211 depth = 9
#pragma HLS array_partition variable = v6212 complete dim = 1
#pragma HLS array_partition variable = v6212 complete dim = 2

  float v252;      // L8115
  v252 = 0.000000; // L8116
l_S_k_0_k258:
  for (int k258 = 0; k258 < 64; k258++) { // L8117
    float v6217 = v6208.read();           // v6208[k258];	// L8118
    float a252;                           // L8119
    a252 = v6217;                         // L8120
    float v6219 = v6209.read();           // v6209[k258];	// L8121
    float b252;                           // L8122
    b252 = v6219;                         // L8123
    float v6221 = a252;                   // L8124
    float v6222 = b252;                   // L8125
    float v6223 = v6221 * v6222;          // L8126
    float v6224 = v252;                   // L8127
    float v6225 = v6224 + v6223;          // L8128
    v252 = v6225;                         // L8129
    float v6226 = a252;                   // L8130
    v6210.write(v6226);                   // v6210[k258] = v6226;	// L8131
    float v6227 = b252;                   // L8132
    v6211.write(v6227);                   // v6211[k258] = v6227;	// L8133
  }
  float v6228 = v252;          // L8135
  v6212[v6213][v6214] = v6228; // L8136
}

void PE_kernel_QKT_5_7(hls::stream<float> &v6229 /* v6229[64] */,
                       hls::stream<float> &v6230 /* v6230[64] */,
                       hls::stream<float> &v6231 /* v6231[64] */,
                       hls::stream<float> &v6232 /* v6232[64] */,
                       float v6233[8][8], int v6234,
                       int v6235) { // L8139
#pragma HLS stream variable = v6229 depth = 9
#pragma HLS stream variable = v6230 depth = 9
#pragma HLS stream variable = v6231 depth = 9
#pragma HLS stream variable = v6232 depth = 9
#pragma HLS array_partition variable = v6233 complete dim = 1
#pragma HLS array_partition variable = v6233 complete dim = 2

  float v253;      // L8142
  v253 = 0.000000; // L8143
l_S_k_0_k259:
  for (int k259 = 0; k259 < 64; k259++) { // L8144
    float v6238 = v6229.read();           // v6229[k259];	// L8145
    float a253;                           // L8146
    a253 = v6238;                         // L8147
    float v6240 = v6230.read();           // v6230[k259];	// L8148
    float b253;                           // L8149
    b253 = v6240;                         // L8150
    float v6242 = a253;                   // L8151
    float v6243 = b253;                   // L8152
    float v6244 = v6242 * v6243;          // L8153
    float v6245 = v253;                   // L8154
    float v6246 = v6245 + v6244;          // L8155
    v253 = v6246;                         // L8156
    float v6247 = a253;                   // L8157
    v6231.write(v6247);                   // v6231[k259] = v6247;	// L8158
    float v6248 = b253;                   // L8159
    v6232.write(v6248);                   // v6232[k259] = v6248;	// L8160
  }
  float v6249 = v253;          // L8162
  v6233[v6234][v6235] = v6249; // L8163
}

void PE_kernel_QKT_6_7(hls::stream<float> &v6250 /* v6250[64] */,
                       hls::stream<float> &v6251 /* v6251[64] */,
                       hls::stream<float> &v6252 /* v6252[64] */,
                       hls::stream<float> &v6253 /* v6253[64] */,
                       float v6254[8][8], int v6255,
                       int v6256) { // L8166
#pragma HLS stream variable = v6250 depth = 9
#pragma HLS stream variable = v6251 depth = 9
#pragma HLS stream variable = v6252 depth = 9
#pragma HLS stream variable = v6253 depth = 9
#pragma HLS array_partition variable = v6254 complete dim = 1
#pragma HLS array_partition variable = v6254 complete dim = 2

  float v254;      // L8169
  v254 = 0.000000; // L8170
l_S_k_0_k260:
  for (int k260 = 0; k260 < 64; k260++) { // L8171
    float v6259 = v6250.read();           // v6250[k260];	// L8172
    float a254;                           // L8173
    a254 = v6259;                         // L8174
    float v6261 = v6251.read();           // v6251[k260];	// L8175
    float b254;                           // L8176
    b254 = v6261;                         // L8177
    float v6263 = a254;                   // L8178
    float v6264 = b254;                   // L8179
    float v6265 = v6263 * v6264;          // L8180
    float v6266 = v254;                   // L8181
    float v6267 = v6266 + v6265;          // L8182
    v254 = v6267;                         // L8183
    float v6268 = a254;                   // L8184
    v6252.write(v6268);                   // v6252[k260] = v6268;	// L8185
    float v6269 = b254;                   // L8186
    v6253.write(v6269);                   // v6253[k260] = v6269;	// L8187
  }
  float v6270 = v254;          // L8189
  v6254[v6255][v6256] = v6270; // L8190
}

void PE_kernel_QKT_7_7(hls::stream<float> &v6271 /* v6271[64] */,
                       hls::stream<float> &v6272 /* v6272[64] */,
                       hls::stream<float> &v6273 /* v6273[64] */,
                       hls::stream<float> &v6274 /* v6274[64] */,
                       float v6275[8][8], int v6276,
                       int v6277) { // L8193
#pragma HLS stream variable = v6271 depth = 9
#pragma HLS stream variable = v6272 depth = 9
#pragma HLS stream variable = v6273 depth = 9
#pragma HLS stream variable = v6274 depth = 9
#pragma HLS array_partition variable = v6275 complete dim = 1
#pragma HLS array_partition variable = v6275 complete dim = 2

  float v255;      // L8196
  v255 = 0.000000; // L8197
l_S_k_0_k261:
  for (int k261 = 0; k261 < 64; k261++) { // L8198
    float v6280 = v6271.read();           // v6271[k261];	// L8199
    float a255;                           // L8200
    a255 = v6280;                         // L8201
    float v6282 = v6272.read();           // v6272[k261];	// L8202
    float b255;                           // L8203
    b255 = v6282;                         // L8204
    float v6284 = a255;                   // L8205
    float v6285 = b255;                   // L8206
    float v6286 = v6284 * v6285;          // L8207
    float v6287 = v255;                   // L8208
    float v6288 = v6287 + v6286;          // L8209
    v255 = v6288;                         // L8210
    float v6289 = a255;                   // L8211
    v6273.write(v6289);                   // v6273[k261] = v6289;	// L8212
    float v6290 = b255;                   // L8213
    v6274.write(v6290);                   // v6274[k261] = v6290;	// L8214
  }
  float v6291 = v255;          // L8216
  v6275[v6276][v6277] = v6291; // L8217
}

void systolic_tile_QKT(float v6292[8][64], float v6293[64][8],
                       float v6294[8][8]) { // L8220
#pragma HLS dataflow
#pragma HLS array_partition variable = v6292 complete dim = 1

#pragma HLS array_partition variable = v6293 complete dim = 2

#pragma HLS array_partition variable = v6294 complete dim = 1
#pragma HLS array_partition variable = v6294 complete dim = 2

  hls::stream<float> A_fifo3[8][9] /* A_fifo3[8][9][64] */; // L8221
#pragma HLS stream variable = A_fifo3 depth = 9
  hls::stream<float> B_fifo3[8][9] /* B_fifo3[8][9][64] */; // L8222
#pragma HLS stream variable = B_fifo3 depth = 9
  float A_drain3[8]; // L8223
  float B_drain3[8]; // L8224
l_data_load_k262:
  for (int k262 = 0; k262 < 64; k262++) { // L8225
  l_S_m_0_m6:
    for (int m6 = 0; m6 < 8; m6++) { // L8226
      float v6301 = v6292[m6][k262]; // L8227
      A_fifo3[m6][0].write(v6301);   // A_fifo3[m6][0][k262] = v6301;	// L8228
    }
  l_S_n_1_n6:
    for (int n6 = 0; n6 < 8; n6++) { // L8230
      float v6303 = v6293[k262][n6]; // L8231
      B_fifo3[n6][0].write(v6303);   // B_fifo3[n6][0][k262] = v6303;	// L8232
    }
  }
  hls::stream<float> &v6304 /* v6304[64] */ = A_fifo3[0][0];  // L8236
  hls::stream<float> &v6305 /* v6305[64] */ = B_fifo3[0][0];  // L8237
  hls::stream<float> &v6306 /* v6306[64] */ = A_fifo3[0][1];  // L8243
  hls::stream<float> &v6307 /* v6307[64] */ = B_fifo3[0][1];  // L8244
  PE_kernel_QKT_0_0(v6304, v6305, v6306, v6307, v6294, 0, 0); // L8245
  hls::stream<float> &v6308 /* v6308[64] */ = A_fifo3[0][1];  // L8247
  hls::stream<float> &v6309 /* v6309[64] */ = B_fifo3[1][0];  // L8248
  hls::stream<float> &v6310 /* v6310[64] */ = A_fifo3[0][2];  // L8252
  hls::stream<float> &v6311 /* v6311[64] */ = B_fifo3[1][1];  // L8253
  PE_kernel_QKT_1_0(v6308, v6309, v6310, v6311, v6294, 0, 1); // L8254
  hls::stream<float> &v6312 /* v6312[64] */ = A_fifo3[0][2];  // L8256
  hls::stream<float> &v6313 /* v6313[64] */ = B_fifo3[2][0];  // L8257
  hls::stream<float> &v6314 /* v6314[64] */ = A_fifo3[0][3];  // L8261
  hls::stream<float> &v6315 /* v6315[64] */ = B_fifo3[2][1];  // L8262
  PE_kernel_QKT_2_0(v6312, v6313, v6314, v6315, v6294, 0, 2); // L8263
  hls::stream<float> &v6316 /* v6316[64] */ = A_fifo3[0][3];  // L8265
  hls::stream<float> &v6317 /* v6317[64] */ = B_fifo3[3][0];  // L8266
  hls::stream<float> &v6318 /* v6318[64] */ = A_fifo3[0][4];  // L8270
  hls::stream<float> &v6319 /* v6319[64] */ = B_fifo3[3][1];  // L8271
  PE_kernel_QKT_3_0(v6316, v6317, v6318, v6319, v6294, 0, 3); // L8272
  hls::stream<float> &v6320 /* v6320[64] */ = A_fifo3[0][4];  // L8274
  hls::stream<float> &v6321 /* v6321[64] */ = B_fifo3[4][0];  // L8275
  hls::stream<float> &v6322 /* v6322[64] */ = A_fifo3[0][5];  // L8279
  hls::stream<float> &v6323 /* v6323[64] */ = B_fifo3[4][1];  // L8280
  PE_kernel_QKT_4_0(v6320, v6321, v6322, v6323, v6294, 0, 4); // L8281
  hls::stream<float> &v6324 /* v6324[64] */ = A_fifo3[0][5];  // L8283
  hls::stream<float> &v6325 /* v6325[64] */ = B_fifo3[5][0];  // L8284
  hls::stream<float> &v6326 /* v6326[64] */ = A_fifo3[0][6];  // L8288
  hls::stream<float> &v6327 /* v6327[64] */ = B_fifo3[5][1];  // L8289
  PE_kernel_QKT_5_0(v6324, v6325, v6326, v6327, v6294, 0, 5); // L8290
  hls::stream<float> &v6328 /* v6328[64] */ = A_fifo3[0][6];  // L8292
  hls::stream<float> &v6329 /* v6329[64] */ = B_fifo3[6][0];  // L8293
  hls::stream<float> &v6330 /* v6330[64] */ = A_fifo3[0][7];  // L8297
  hls::stream<float> &v6331 /* v6331[64] */ = B_fifo3[6][1];  // L8298
  PE_kernel_QKT_6_0(v6328, v6329, v6330, v6331, v6294, 0, 6); // L8299
  hls::stream<float> &v6332 /* v6332[64] */ = A_fifo3[0][7];  // L8301
  hls::stream<float> &v6333 /* v6333[64] */ = B_fifo3[7][0];  // L8302
  hls::stream<float> &v6334 /* v6334[64] */ = A_fifo3[0][8];  // L8306
  hls::stream<float> &v6335 /* v6335[64] */ = B_fifo3[7][1];  // L8307
  PE_kernel_QKT_7_0(v6332, v6333, v6334, v6335, v6294, 0, 7); // L8308
  hls::stream<float> &v6336 /* v6336[64] */ = A_fifo3[1][0];  // L8309
  hls::stream<float> &v6337 /* v6337[64] */ = B_fifo3[0][1];  // L8310
  hls::stream<float> &v6338 /* v6338[64] */ = A_fifo3[1][1];  // L8311
  hls::stream<float> &v6339 /* v6339[64] */ = B_fifo3[0][2];  // L8312
  PE_kernel_QKT_0_1(v6336, v6337, v6338, v6339, v6294, 1, 0); // L8313
  hls::stream<float> &v6340 /* v6340[64] */ = A_fifo3[1][1];  // L8314
  hls::stream<float> &v6341 /* v6341[64] */ = B_fifo3[1][1];  // L8315
  hls::stream<float> &v6342 /* v6342[64] */ = A_fifo3[1][2];  // L8316
  hls::stream<float> &v6343 /* v6343[64] */ = B_fifo3[1][2];  // L8317
  PE_kernel_QKT_1_1(v6340, v6341, v6342, v6343, v6294, 1, 1); // L8318
  hls::stream<float> &v6344 /* v6344[64] */ = A_fifo3[1][2];  // L8319
  hls::stream<float> &v6345 /* v6345[64] */ = B_fifo3[2][1];  // L8320
  hls::stream<float> &v6346 /* v6346[64] */ = A_fifo3[1][3];  // L8321
  hls::stream<float> &v6347 /* v6347[64] */ = B_fifo3[2][2];  // L8322
  PE_kernel_QKT_2_1(v6344, v6345, v6346, v6347, v6294, 1, 2); // L8323
  hls::stream<float> &v6348 /* v6348[64] */ = A_fifo3[1][3];  // L8324
  hls::stream<float> &v6349 /* v6349[64] */ = B_fifo3[3][1];  // L8325
  hls::stream<float> &v6350 /* v6350[64] */ = A_fifo3[1][4];  // L8326
  hls::stream<float> &v6351 /* v6351[64] */ = B_fifo3[3][2];  // L8327
  PE_kernel_QKT_3_1(v6348, v6349, v6350, v6351, v6294, 1, 3); // L8328
  hls::stream<float> &v6352 /* v6352[64] */ = A_fifo3[1][4];  // L8329
  hls::stream<float> &v6353 /* v6353[64] */ = B_fifo3[4][1];  // L8330
  hls::stream<float> &v6354 /* v6354[64] */ = A_fifo3[1][5];  // L8331
  hls::stream<float> &v6355 /* v6355[64] */ = B_fifo3[4][2];  // L8332
  PE_kernel_QKT_4_1(v6352, v6353, v6354, v6355, v6294, 1, 4); // L8333
  hls::stream<float> &v6356 /* v6356[64] */ = A_fifo3[1][5];  // L8334
  hls::stream<float> &v6357 /* v6357[64] */ = B_fifo3[5][1];  // L8335
  hls::stream<float> &v6358 /* v6358[64] */ = A_fifo3[1][6];  // L8336
  hls::stream<float> &v6359 /* v6359[64] */ = B_fifo3[5][2];  // L8337
  PE_kernel_QKT_5_1(v6356, v6357, v6358, v6359, v6294, 1, 5); // L8338
  hls::stream<float> &v6360 /* v6360[64] */ = A_fifo3[1][6];  // L8339
  hls::stream<float> &v6361 /* v6361[64] */ = B_fifo3[6][1];  // L8340
  hls::stream<float> &v6362 /* v6362[64] */ = A_fifo3[1][7];  // L8341
  hls::stream<float> &v6363 /* v6363[64] */ = B_fifo3[6][2];  // L8342
  PE_kernel_QKT_6_1(v6360, v6361, v6362, v6363, v6294, 1, 6); // L8343
  hls::stream<float> &v6364 /* v6364[64] */ = A_fifo3[1][7];  // L8344
  hls::stream<float> &v6365 /* v6365[64] */ = B_fifo3[7][1];  // L8345
  hls::stream<float> &v6366 /* v6366[64] */ = A_fifo3[1][8];  // L8346
  hls::stream<float> &v6367 /* v6367[64] */ = B_fifo3[7][2];  // L8347
  PE_kernel_QKT_7_1(v6364, v6365, v6366, v6367, v6294, 1, 7); // L8348
  hls::stream<float> &v6368 /* v6368[64] */ = A_fifo3[2][0];  // L8349
  hls::stream<float> &v6369 /* v6369[64] */ = B_fifo3[0][2];  // L8350
  hls::stream<float> &v6370 /* v6370[64] */ = A_fifo3[2][1];  // L8351
  hls::stream<float> &v6371 /* v6371[64] */ = B_fifo3[0][3];  // L8352
  PE_kernel_QKT_0_2(v6368, v6369, v6370, v6371, v6294, 2, 0); // L8353
  hls::stream<float> &v6372 /* v6372[64] */ = A_fifo3[2][1];  // L8354
  hls::stream<float> &v6373 /* v6373[64] */ = B_fifo3[1][2];  // L8355
  hls::stream<float> &v6374 /* v6374[64] */ = A_fifo3[2][2];  // L8356
  hls::stream<float> &v6375 /* v6375[64] */ = B_fifo3[1][3];  // L8357
  PE_kernel_QKT_1_2(v6372, v6373, v6374, v6375, v6294, 2, 1); // L8358
  hls::stream<float> &v6376 /* v6376[64] */ = A_fifo3[2][2];  // L8359
  hls::stream<float> &v6377 /* v6377[64] */ = B_fifo3[2][2];  // L8360
  hls::stream<float> &v6378 /* v6378[64] */ = A_fifo3[2][3];  // L8361
  hls::stream<float> &v6379 /* v6379[64] */ = B_fifo3[2][3];  // L8362
  PE_kernel_QKT_2_2(v6376, v6377, v6378, v6379, v6294, 2, 2); // L8363
  hls::stream<float> &v6380 /* v6380[64] */ = A_fifo3[2][3];  // L8364
  hls::stream<float> &v6381 /* v6381[64] */ = B_fifo3[3][2];  // L8365
  hls::stream<float> &v6382 /* v6382[64] */ = A_fifo3[2][4];  // L8366
  hls::stream<float> &v6383 /* v6383[64] */ = B_fifo3[3][3];  // L8367
  PE_kernel_QKT_3_2(v6380, v6381, v6382, v6383, v6294, 2, 3); // L8368
  hls::stream<float> &v6384 /* v6384[64] */ = A_fifo3[2][4];  // L8369
  hls::stream<float> &v6385 /* v6385[64] */ = B_fifo3[4][2];  // L8370
  hls::stream<float> &v6386 /* v6386[64] */ = A_fifo3[2][5];  // L8371
  hls::stream<float> &v6387 /* v6387[64] */ = B_fifo3[4][3];  // L8372
  PE_kernel_QKT_4_2(v6384, v6385, v6386, v6387, v6294, 2, 4); // L8373
  hls::stream<float> &v6388 /* v6388[64] */ = A_fifo3[2][5];  // L8374
  hls::stream<float> &v6389 /* v6389[64] */ = B_fifo3[5][2];  // L8375
  hls::stream<float> &v6390 /* v6390[64] */ = A_fifo3[2][6];  // L8376
  hls::stream<float> &v6391 /* v6391[64] */ = B_fifo3[5][3];  // L8377
  PE_kernel_QKT_5_2(v6388, v6389, v6390, v6391, v6294, 2, 5); // L8378
  hls::stream<float> &v6392 /* v6392[64] */ = A_fifo3[2][6];  // L8379
  hls::stream<float> &v6393 /* v6393[64] */ = B_fifo3[6][2];  // L8380
  hls::stream<float> &v6394 /* v6394[64] */ = A_fifo3[2][7];  // L8381
  hls::stream<float> &v6395 /* v6395[64] */ = B_fifo3[6][3];  // L8382
  PE_kernel_QKT_6_2(v6392, v6393, v6394, v6395, v6294, 2, 6); // L8383
  hls::stream<float> &v6396 /* v6396[64] */ = A_fifo3[2][7];  // L8384
  hls::stream<float> &v6397 /* v6397[64] */ = B_fifo3[7][2];  // L8385
  hls::stream<float> &v6398 /* v6398[64] */ = A_fifo3[2][8];  // L8386
  hls::stream<float> &v6399 /* v6399[64] */ = B_fifo3[7][3];  // L8387
  PE_kernel_QKT_7_2(v6396, v6397, v6398, v6399, v6294, 2, 7); // L8388
  hls::stream<float> &v6400 /* v6400[64] */ = A_fifo3[3][0];  // L8389
  hls::stream<float> &v6401 /* v6401[64] */ = B_fifo3[0][3];  // L8390
  hls::stream<float> &v6402 /* v6402[64] */ = A_fifo3[3][1];  // L8391
  hls::stream<float> &v6403 /* v6403[64] */ = B_fifo3[0][4];  // L8392
  PE_kernel_QKT_0_3(v6400, v6401, v6402, v6403, v6294, 3, 0); // L8393
  hls::stream<float> &v6404 /* v6404[64] */ = A_fifo3[3][1];  // L8394
  hls::stream<float> &v6405 /* v6405[64] */ = B_fifo3[1][3];  // L8395
  hls::stream<float> &v6406 /* v6406[64] */ = A_fifo3[3][2];  // L8396
  hls::stream<float> &v6407 /* v6407[64] */ = B_fifo3[1][4];  // L8397
  PE_kernel_QKT_1_3(v6404, v6405, v6406, v6407, v6294, 3, 1); // L8398
  hls::stream<float> &v6408 /* v6408[64] */ = A_fifo3[3][2];  // L8399
  hls::stream<float> &v6409 /* v6409[64] */ = B_fifo3[2][3];  // L8400
  hls::stream<float> &v6410 /* v6410[64] */ = A_fifo3[3][3];  // L8401
  hls::stream<float> &v6411 /* v6411[64] */ = B_fifo3[2][4];  // L8402
  PE_kernel_QKT_2_3(v6408, v6409, v6410, v6411, v6294, 3, 2); // L8403
  hls::stream<float> &v6412 /* v6412[64] */ = A_fifo3[3][3];  // L8404
  hls::stream<float> &v6413 /* v6413[64] */ = B_fifo3[3][3];  // L8405
  hls::stream<float> &v6414 /* v6414[64] */ = A_fifo3[3][4];  // L8406
  hls::stream<float> &v6415 /* v6415[64] */ = B_fifo3[3][4];  // L8407
  PE_kernel_QKT_3_3(v6412, v6413, v6414, v6415, v6294, 3, 3); // L8408
  hls::stream<float> &v6416 /* v6416[64] */ = A_fifo3[3][4];  // L8409
  hls::stream<float> &v6417 /* v6417[64] */ = B_fifo3[4][3];  // L8410
  hls::stream<float> &v6418 /* v6418[64] */ = A_fifo3[3][5];  // L8411
  hls::stream<float> &v6419 /* v6419[64] */ = B_fifo3[4][4];  // L8412
  PE_kernel_QKT_4_3(v6416, v6417, v6418, v6419, v6294, 3, 4); // L8413
  hls::stream<float> &v6420 /* v6420[64] */ = A_fifo3[3][5];  // L8414
  hls::stream<float> &v6421 /* v6421[64] */ = B_fifo3[5][3];  // L8415
  hls::stream<float> &v6422 /* v6422[64] */ = A_fifo3[3][6];  // L8416
  hls::stream<float> &v6423 /* v6423[64] */ = B_fifo3[5][4];  // L8417
  PE_kernel_QKT_5_3(v6420, v6421, v6422, v6423, v6294, 3, 5); // L8418
  hls::stream<float> &v6424 /* v6424[64] */ = A_fifo3[3][6];  // L8419
  hls::stream<float> &v6425 /* v6425[64] */ = B_fifo3[6][3];  // L8420
  hls::stream<float> &v6426 /* v6426[64] */ = A_fifo3[3][7];  // L8421
  hls::stream<float> &v6427 /* v6427[64] */ = B_fifo3[6][4];  // L8422
  PE_kernel_QKT_6_3(v6424, v6425, v6426, v6427, v6294, 3, 6); // L8423
  hls::stream<float> &v6428 /* v6428[64] */ = A_fifo3[3][7];  // L8424
  hls::stream<float> &v6429 /* v6429[64] */ = B_fifo3[7][3];  // L8425
  hls::stream<float> &v6430 /* v6430[64] */ = A_fifo3[3][8];  // L8426
  hls::stream<float> &v6431 /* v6431[64] */ = B_fifo3[7][4];  // L8427
  PE_kernel_QKT_7_3(v6428, v6429, v6430, v6431, v6294, 3, 7); // L8428
  hls::stream<float> &v6432 /* v6432[64] */ = A_fifo3[4][0];  // L8429
  hls::stream<float> &v6433 /* v6433[64] */ = B_fifo3[0][4];  // L8430
  hls::stream<float> &v6434 /* v6434[64] */ = A_fifo3[4][1];  // L8431
  hls::stream<float> &v6435 /* v6435[64] */ = B_fifo3[0][5];  // L8432
  PE_kernel_QKT_0_4(v6432, v6433, v6434, v6435, v6294, 4, 0); // L8433
  hls::stream<float> &v6436 /* v6436[64] */ = A_fifo3[4][1];  // L8434
  hls::stream<float> &v6437 /* v6437[64] */ = B_fifo3[1][4];  // L8435
  hls::stream<float> &v6438 /* v6438[64] */ = A_fifo3[4][2];  // L8436
  hls::stream<float> &v6439 /* v6439[64] */ = B_fifo3[1][5];  // L8437
  PE_kernel_QKT_1_4(v6436, v6437, v6438, v6439, v6294, 4, 1); // L8438
  hls::stream<float> &v6440 /* v6440[64] */ = A_fifo3[4][2];  // L8439
  hls::stream<float> &v6441 /* v6441[64] */ = B_fifo3[2][4];  // L8440
  hls::stream<float> &v6442 /* v6442[64] */ = A_fifo3[4][3];  // L8441
  hls::stream<float> &v6443 /* v6443[64] */ = B_fifo3[2][5];  // L8442
  PE_kernel_QKT_2_4(v6440, v6441, v6442, v6443, v6294, 4, 2); // L8443
  hls::stream<float> &v6444 /* v6444[64] */ = A_fifo3[4][3];  // L8444
  hls::stream<float> &v6445 /* v6445[64] */ = B_fifo3[3][4];  // L8445
  hls::stream<float> &v6446 /* v6446[64] */ = A_fifo3[4][4];  // L8446
  hls::stream<float> &v6447 /* v6447[64] */ = B_fifo3[3][5];  // L8447
  PE_kernel_QKT_3_4(v6444, v6445, v6446, v6447, v6294, 4, 3); // L8448
  hls::stream<float> &v6448 /* v6448[64] */ = A_fifo3[4][4];  // L8449
  hls::stream<float> &v6449 /* v6449[64] */ = B_fifo3[4][4];  // L8450
  hls::stream<float> &v6450 /* v6450[64] */ = A_fifo3[4][5];  // L8451
  hls::stream<float> &v6451 /* v6451[64] */ = B_fifo3[4][5];  // L8452
  PE_kernel_QKT_4_4(v6448, v6449, v6450, v6451, v6294, 4, 4); // L8453
  hls::stream<float> &v6452 /* v6452[64] */ = A_fifo3[4][5];  // L8454
  hls::stream<float> &v6453 /* v6453[64] */ = B_fifo3[5][4];  // L8455
  hls::stream<float> &v6454 /* v6454[64] */ = A_fifo3[4][6];  // L8456
  hls::stream<float> &v6455 /* v6455[64] */ = B_fifo3[5][5];  // L8457
  PE_kernel_QKT_5_4(v6452, v6453, v6454, v6455, v6294, 4, 5); // L8458
  hls::stream<float> &v6456 /* v6456[64] */ = A_fifo3[4][6];  // L8459
  hls::stream<float> &v6457 /* v6457[64] */ = B_fifo3[6][4];  // L8460
  hls::stream<float> &v6458 /* v6458[64] */ = A_fifo3[4][7];  // L8461
  hls::stream<float> &v6459 /* v6459[64] */ = B_fifo3[6][5];  // L8462
  PE_kernel_QKT_6_4(v6456, v6457, v6458, v6459, v6294, 4, 6); // L8463
  hls::stream<float> &v6460 /* v6460[64] */ = A_fifo3[4][7];  // L8464
  hls::stream<float> &v6461 /* v6461[64] */ = B_fifo3[7][4];  // L8465
  hls::stream<float> &v6462 /* v6462[64] */ = A_fifo3[4][8];  // L8466
  hls::stream<float> &v6463 /* v6463[64] */ = B_fifo3[7][5];  // L8467
  PE_kernel_QKT_7_4(v6460, v6461, v6462, v6463, v6294, 4, 7); // L8468
  hls::stream<float> &v6464 /* v6464[64] */ = A_fifo3[5][0];  // L8469
  hls::stream<float> &v6465 /* v6465[64] */ = B_fifo3[0][5];  // L8470
  hls::stream<float> &v6466 /* v6466[64] */ = A_fifo3[5][1];  // L8471
  hls::stream<float> &v6467 /* v6467[64] */ = B_fifo3[0][6];  // L8472
  PE_kernel_QKT_0_5(v6464, v6465, v6466, v6467, v6294, 5, 0); // L8473
  hls::stream<float> &v6468 /* v6468[64] */ = A_fifo3[5][1];  // L8474
  hls::stream<float> &v6469 /* v6469[64] */ = B_fifo3[1][5];  // L8475
  hls::stream<float> &v6470 /* v6470[64] */ = A_fifo3[5][2];  // L8476
  hls::stream<float> &v6471 /* v6471[64] */ = B_fifo3[1][6];  // L8477
  PE_kernel_QKT_1_5(v6468, v6469, v6470, v6471, v6294, 5, 1); // L8478
  hls::stream<float> &v6472 /* v6472[64] */ = A_fifo3[5][2];  // L8479
  hls::stream<float> &v6473 /* v6473[64] */ = B_fifo3[2][5];  // L8480
  hls::stream<float> &v6474 /* v6474[64] */ = A_fifo3[5][3];  // L8481
  hls::stream<float> &v6475 /* v6475[64] */ = B_fifo3[2][6];  // L8482
  PE_kernel_QKT_2_5(v6472, v6473, v6474, v6475, v6294, 5, 2); // L8483
  hls::stream<float> &v6476 /* v6476[64] */ = A_fifo3[5][3];  // L8484
  hls::stream<float> &v6477 /* v6477[64] */ = B_fifo3[3][5];  // L8485
  hls::stream<float> &v6478 /* v6478[64] */ = A_fifo3[5][4];  // L8486
  hls::stream<float> &v6479 /* v6479[64] */ = B_fifo3[3][6];  // L8487
  PE_kernel_QKT_3_5(v6476, v6477, v6478, v6479, v6294, 5, 3); // L8488
  hls::stream<float> &v6480 /* v6480[64] */ = A_fifo3[5][4];  // L8489
  hls::stream<float> &v6481 /* v6481[64] */ = B_fifo3[4][5];  // L8490
  hls::stream<float> &v6482 /* v6482[64] */ = A_fifo3[5][5];  // L8491
  hls::stream<float> &v6483 /* v6483[64] */ = B_fifo3[4][6];  // L8492
  PE_kernel_QKT_4_5(v6480, v6481, v6482, v6483, v6294, 5, 4); // L8493
  hls::stream<float> &v6484 /* v6484[64] */ = A_fifo3[5][5];  // L8494
  hls::stream<float> &v6485 /* v6485[64] */ = B_fifo3[5][5];  // L8495
  hls::stream<float> &v6486 /* v6486[64] */ = A_fifo3[5][6];  // L8496
  hls::stream<float> &v6487 /* v6487[64] */ = B_fifo3[5][6];  // L8497
  PE_kernel_QKT_5_5(v6484, v6485, v6486, v6487, v6294, 5, 5); // L8498
  hls::stream<float> &v6488 /* v6488[64] */ = A_fifo3[5][6];  // L8499
  hls::stream<float> &v6489 /* v6489[64] */ = B_fifo3[6][5];  // L8500
  hls::stream<float> &v6490 /* v6490[64] */ = A_fifo3[5][7];  // L8501
  hls::stream<float> &v6491 /* v6491[64] */ = B_fifo3[6][6];  // L8502
  PE_kernel_QKT_6_5(v6488, v6489, v6490, v6491, v6294, 5, 6); // L8503
  hls::stream<float> &v6492 /* v6492[64] */ = A_fifo3[5][7];  // L8504
  hls::stream<float> &v6493 /* v6493[64] */ = B_fifo3[7][5];  // L8505
  hls::stream<float> &v6494 /* v6494[64] */ = A_fifo3[5][8];  // L8506
  hls::stream<float> &v6495 /* v6495[64] */ = B_fifo3[7][6];  // L8507
  PE_kernel_QKT_7_5(v6492, v6493, v6494, v6495, v6294, 5, 7); // L8508
  hls::stream<float> &v6496 /* v6496[64] */ = A_fifo3[6][0];  // L8509
  hls::stream<float> &v6497 /* v6497[64] */ = B_fifo3[0][6];  // L8510
  hls::stream<float> &v6498 /* v6498[64] */ = A_fifo3[6][1];  // L8511
  hls::stream<float> &v6499 /* v6499[64] */ = B_fifo3[0][7];  // L8512
  PE_kernel_QKT_0_6(v6496, v6497, v6498, v6499, v6294, 6, 0); // L8513
  hls::stream<float> &v6500 /* v6500[64] */ = A_fifo3[6][1];  // L8514
  hls::stream<float> &v6501 /* v6501[64] */ = B_fifo3[1][6];  // L8515
  hls::stream<float> &v6502 /* v6502[64] */ = A_fifo3[6][2];  // L8516
  hls::stream<float> &v6503 /* v6503[64] */ = B_fifo3[1][7];  // L8517
  PE_kernel_QKT_1_6(v6500, v6501, v6502, v6503, v6294, 6, 1); // L8518
  hls::stream<float> &v6504 /* v6504[64] */ = A_fifo3[6][2];  // L8519
  hls::stream<float> &v6505 /* v6505[64] */ = B_fifo3[2][6];  // L8520
  hls::stream<float> &v6506 /* v6506[64] */ = A_fifo3[6][3];  // L8521
  hls::stream<float> &v6507 /* v6507[64] */ = B_fifo3[2][7];  // L8522
  PE_kernel_QKT_2_6(v6504, v6505, v6506, v6507, v6294, 6, 2); // L8523
  hls::stream<float> &v6508 /* v6508[64] */ = A_fifo3[6][3];  // L8524
  hls::stream<float> &v6509 /* v6509[64] */ = B_fifo3[3][6];  // L8525
  hls::stream<float> &v6510 /* v6510[64] */ = A_fifo3[6][4];  // L8526
  hls::stream<float> &v6511 /* v6511[64] */ = B_fifo3[3][7];  // L8527
  PE_kernel_QKT_3_6(v6508, v6509, v6510, v6511, v6294, 6, 3); // L8528
  hls::stream<float> &v6512 /* v6512[64] */ = A_fifo3[6][4];  // L8529
  hls::stream<float> &v6513 /* v6513[64] */ = B_fifo3[4][6];  // L8530
  hls::stream<float> &v6514 /* v6514[64] */ = A_fifo3[6][5];  // L8531
  hls::stream<float> &v6515 /* v6515[64] */ = B_fifo3[4][7];  // L8532
  PE_kernel_QKT_4_6(v6512, v6513, v6514, v6515, v6294, 6, 4); // L8533
  hls::stream<float> &v6516 /* v6516[64] */ = A_fifo3[6][5];  // L8534
  hls::stream<float> &v6517 /* v6517[64] */ = B_fifo3[5][6];  // L8535
  hls::stream<float> &v6518 /* v6518[64] */ = A_fifo3[6][6];  // L8536
  hls::stream<float> &v6519 /* v6519[64] */ = B_fifo3[5][7];  // L8537
  PE_kernel_QKT_5_6(v6516, v6517, v6518, v6519, v6294, 6, 5); // L8538
  hls::stream<float> &v6520 /* v6520[64] */ = A_fifo3[6][6];  // L8539
  hls::stream<float> &v6521 /* v6521[64] */ = B_fifo3[6][6];  // L8540
  hls::stream<float> &v6522 /* v6522[64] */ = A_fifo3[6][7];  // L8541
  hls::stream<float> &v6523 /* v6523[64] */ = B_fifo3[6][7];  // L8542
  PE_kernel_QKT_6_6(v6520, v6521, v6522, v6523, v6294, 6, 6); // L8543
  hls::stream<float> &v6524 /* v6524[64] */ = A_fifo3[6][7];  // L8544
  hls::stream<float> &v6525 /* v6525[64] */ = B_fifo3[7][6];  // L8545
  hls::stream<float> &v6526 /* v6526[64] */ = A_fifo3[6][8];  // L8546
  hls::stream<float> &v6527 /* v6527[64] */ = B_fifo3[7][7];  // L8547
  PE_kernel_QKT_7_6(v6524, v6525, v6526, v6527, v6294, 6, 7); // L8548
  hls::stream<float> &v6528 /* v6528[64] */ = A_fifo3[7][0];  // L8549
  hls::stream<float> &v6529 /* v6529[64] */ = B_fifo3[0][7];  // L8550
  hls::stream<float> &v6530 /* v6530[64] */ = A_fifo3[7][1];  // L8551
  hls::stream<float> &v6531 /* v6531[64] */ = B_fifo3[0][8];  // L8552
  PE_kernel_QKT_0_7(v6528, v6529, v6530, v6531, v6294, 7, 0); // L8553
  hls::stream<float> &v6532 /* v6532[64] */ = A_fifo3[7][1];  // L8554
  hls::stream<float> &v6533 /* v6533[64] */ = B_fifo3[1][7];  // L8555
  hls::stream<float> &v6534 /* v6534[64] */ = A_fifo3[7][2];  // L8556
  hls::stream<float> &v6535 /* v6535[64] */ = B_fifo3[1][8];  // L8557
  PE_kernel_QKT_1_7(v6532, v6533, v6534, v6535, v6294, 7, 1); // L8558
  hls::stream<float> &v6536 /* v6536[64] */ = A_fifo3[7][2];  // L8559
  hls::stream<float> &v6537 /* v6537[64] */ = B_fifo3[2][7];  // L8560
  hls::stream<float> &v6538 /* v6538[64] */ = A_fifo3[7][3];  // L8561
  hls::stream<float> &v6539 /* v6539[64] */ = B_fifo3[2][8];  // L8562
  PE_kernel_QKT_2_7(v6536, v6537, v6538, v6539, v6294, 7, 2); // L8563
  hls::stream<float> &v6540 /* v6540[64] */ = A_fifo3[7][3];  // L8564
  hls::stream<float> &v6541 /* v6541[64] */ = B_fifo3[3][7];  // L8565
  hls::stream<float> &v6542 /* v6542[64] */ = A_fifo3[7][4];  // L8566
  hls::stream<float> &v6543 /* v6543[64] */ = B_fifo3[3][8];  // L8567
  PE_kernel_QKT_3_7(v6540, v6541, v6542, v6543, v6294, 7, 3); // L8568
  hls::stream<float> &v6544 /* v6544[64] */ = A_fifo3[7][4];  // L8569
  hls::stream<float> &v6545 /* v6545[64] */ = B_fifo3[4][7];  // L8570
  hls::stream<float> &v6546 /* v6546[64] */ = A_fifo3[7][5];  // L8571
  hls::stream<float> &v6547 /* v6547[64] */ = B_fifo3[4][8];  // L8572
  PE_kernel_QKT_4_7(v6544, v6545, v6546, v6547, v6294, 7, 4); // L8573
  hls::stream<float> &v6548 /* v6548[64] */ = A_fifo3[7][5];  // L8574
  hls::stream<float> &v6549 /* v6549[64] */ = B_fifo3[5][7];  // L8575
  hls::stream<float> &v6550 /* v6550[64] */ = A_fifo3[7][6];  // L8576
  hls::stream<float> &v6551 /* v6551[64] */ = B_fifo3[5][8];  // L8577
  PE_kernel_QKT_5_7(v6548, v6549, v6550, v6551, v6294, 7, 5); // L8578
  hls::stream<float> &v6552 /* v6552[64] */ = A_fifo3[7][6];  // L8579
  hls::stream<float> &v6553 /* v6553[64] */ = B_fifo3[6][7];  // L8580
  hls::stream<float> &v6554 /* v6554[64] */ = A_fifo3[7][7];  // L8581
  hls::stream<float> &v6555 /* v6555[64] */ = B_fifo3[6][8];  // L8582
  PE_kernel_QKT_6_7(v6552, v6553, v6554, v6555, v6294, 7, 6); // L8583
  hls::stream<float> &v6556 /* v6556[64] */ = A_fifo3[7][7];  // L8584
  hls::stream<float> &v6557 /* v6557[64] */ = B_fifo3[7][7];  // L8585
  hls::stream<float> &v6558 /* v6558[64] */ = A_fifo3[7][8];  // L8586
  hls::stream<float> &v6559 /* v6559[64] */ = B_fifo3[7][8];  // L8587
  PE_kernel_QKT_7_7(v6556, v6557, v6558, v6559, v6294, 7, 7); // L8588
l_data_drain_k263:
  for (int k263 = 0; k263 < 64; k263++) { // L8589
  l_S_m_4_m7:
    for (int m7 = 0; m7 < 8; m7++) {       // L8590
      float v6562 = A_fifo3[m7][8].read(); // A_fifo3[m7][8][k263];	// L8591
      A_drain3[m7] = v6562;                // L8592
    }
  l_S_n_5_n7:
    for (int n7 = 0; n7 < 8; n7++) {       // L8594
      float v6564 = B_fifo3[n7][8].read(); // B_fifo3[n7][8][k263];	// L8595
      B_drain3[n7] = v6564;                // L8596
    }
  }
}

void systolic_QKT(float v6565[64][64], float v6566[64][64],
                  float v6567[64][64]) { // L8601
  float local_A3[8][64];                 // L8602
#pragma HLS array_partition variable = local_A3 complete dim = 1

  float local_B3[64][8]; // L8603
#pragma HLS array_partition variable = local_B3 complete dim = 2

  float local_C3[8][8]; // L8604
#pragma HLS array_partition variable = local_C3 complete dim = 1
#pragma HLS array_partition variable = local_C3 complete dim = 2

l_outer_tile_mi3:
  for (int mi3 = 0; mi3 < 8; mi3++) { // L8605
  l_ni3:
    for (int ni3 = 0; ni3 < 8; ni3++) { // L8606
                                        // #pragma HLS dataflow
    l_load_A_tile_ak3:
      for (int ak3 = 0; ak3 < 64; ak3++) { // L8607
      l_ai3:
        for (int ai3 = 0; ai3 < 8; ai3++) { // L8608
#pragma HLS pipeline II = 1
          ap_int<33> v6575 = ni3;                        // L8609
          bool v6576 = v6575 == 0;                       // L8612
          if (v6576) {                                   // L8613
            float v6577 = v6565[((mi3 * 8) + ai3)][ak3]; // L8614
            local_A3[ai3][ak3] = v6577;                  // L8615
          }
        }
      }
    l_load_B_tile_bk3:
      for (int bk3 = 0; bk3 < 64; bk3++) { // L8619
      l_bj3:
        for (int bj3 = 0; bj3 < 8; bj3++) { // L8620
#pragma HLS pipeline II = 1
          float v6580 = v6566[bk3][((ni3 * 8) + bj3)]; // L8621
          local_B3[bk3][bj3] = v6580;                  // L8622
        }
      }
      systolic_tile_QKT(local_A3, local_B3, local_C3); // L8625
    l_store_C_tile_sj3:
      for (int sj3 = 0; sj3 < 8; sj3++) { // L8626
      l_si3:
        for (int si3 = 0; si3 < 8; si3++) { // L8627
#pragma HLS pipeline II = 1
          float v6583 = local_C3[si3][sj3];                    // L8628
          v6567[((mi3 * 8) + si3)][((ni3 * 8) + sj3)] = v6583; // L8629
        }
      }
    }
  }
}

void mask_sft_head_sft_Y(float v6584[64][64], int32_t v6585[2],
                         float v6586[64][64]) { // L8636
  float E[64][64];                              // L8638
  float S[64];                                  // L8639
  for (int v6589 = 0; v6589 < 64; v6589++) {    // L8641
    S[v6589] = 0.000000;                        // L8641
  }
  float M[64];                               // L8644
  for (int v6591 = 0; v6591 < 64; v6591++) { // L8645
    M[v6591] = -10000000272564224.000000;    // L8645
  }
l_row_max_i3:
  for (int i3 = 0; i3 < 64; i3++) { // L8646
  l_j2:
    for (int j2 = 0; j2 < 64; j2++) { // L8647
#pragma HLS pipeline II = 1
      bool v6594 = i3 >= j2;               // L8648
      if (v6594) {                         // L8649
        int32_t v6595 = v6585[0];          // L8650
        ap_int<33> v6596 = v6595;          // L8653
        ap_int<33> v6597 = 64 - v6596;     // L8654
        ap_int<33> v6598 = i3;             // L8655
        bool v6599 = v6598 >= v6597;       // L8656
        if (v6599) {                       // L8657
          int32_t v6600 = v6585[0];        // L8658
          ap_int<33> v6601 = v6600;        // L8659
          ap_int<33> v6602 = 64 - v6601;   // L8660
          ap_int<33> v6603 = j2;           // L8661
          bool v6604 = v6603 >= v6602;     // L8662
          if (v6604) {                     // L8663
            float v6605 = v6584[i3][j2];   // L8664
            float v6606 = M[i3];           // L8665
            bool v6607 = v6605 > v6606;    // L8666
            if (v6607) {                   // L8667
              float v6608 = v6584[i3][j2]; // L8668
              M[i3] = v6608;               // L8669
            }
          }
        }
      }
    }
  }
l_exp_sum_i4:
  for (int i4 = 0; i4 < 64; i4++) { // L8676
  l_j3:
    for (int j3 = 0; j3 < 64; j3++) { // L8677
#pragma HLS pipeline II = 1
      bool v6611 = i4 >= j3;             // L8678
      if (v6611) {                       // L8679
        int32_t v6612 = v6585[0];        // L8680
        ap_int<33> v6613 = v6612;        // L8683
        ap_int<33> v6614 = 64 - v6613;   // L8684
        ap_int<33> v6615 = i4;           // L8685
        bool v6616 = v6615 >= v6614;     // L8686
        if (v6616) {                     // L8687
          int32_t v6617 = v6585[0];      // L8688
          ap_int<33> v6618 = v6617;      // L8689
          ap_int<33> v6619 = 64 - v6618; // L8690
          ap_int<33> v6620 = j3;         // L8691
          bool v6621 = v6620 >= v6619;   // L8692
          if (v6621) {                   // L8693
            float v6622 = v6584[i4][j3]; // L8694
            float v6623 = M[i4];         // L8695
            float v6624 = v6622 - v6623; // L8696
            float v6625 = exp(v6624);    // L8697
            E[i4][j3] = v6625;           // L8698
            float v6626 = E[i4][j3];     // L8699
            float v6627 = S[i4];         // L8700
            float v6628 = v6627 + v6626; // L8701
            S[i4] = v6628;               // L8702
          }
        }
      }
    }
  }
l_update_i5:
  for (int i5 = 0; i5 < 64; i5++) { // L8708
  l_j4:
    for (int j4 = 0; j4 < 64; j4++) { // L8709
#pragma HLS pipeline II = 1
      bool v6631 = i5 >= j4;             // L8710
      if (v6631) {                       // L8711
        int32_t v6632 = v6585[0];        // L8712
        ap_int<33> v6633 = v6632;        // L8715
        ap_int<33> v6634 = 64 - v6633;   // L8716
        ap_int<33> v6635 = i5;           // L8717
        bool v6636 = v6635 >= v6634;     // L8718
        if (v6636) {                     // L8719
          int32_t v6637 = v6585[0];      // L8720
          ap_int<33> v6638 = v6637;      // L8721
          ap_int<33> v6639 = 64 - v6638; // L8722
          ap_int<33> v6640 = j4;         // L8723
          bool v6641 = v6640 >= v6639;   // L8724
          if (v6641) {                   // L8725
            float v6642 = E[i5][j4];     // L8726
            float v6643 = S[i5];         // L8727
            float v6644 = v6642 / v6643; // L8728
            v6586[i5][j4] = v6644;       // L8729
          } else {
            v6586[i5][j4] = 0.000000; // L8733
          }
        } else {
          ap_int<34> v6645 = i5;            // L8736
          ap_int<34> v6646 = v6645 + 1;     // L8739
          int32_t v6647 = v6585[0];         // L8740
          ap_int<35> v6648 = v6646;         // L8741
          ap_int<35> v6649 = v6647;         // L8742
          ap_int<35> v6650 = v6648 + v6649; // L8743
          float v6651 = v6650;              // L8744
          float v6652 = 1.000000 / v6651;   // L8746
          v6586[i5][j4] = v6652;            // L8747
        }
      } else {
        int32_t v6653 = v6585[0];           // L8750
        ap_int<33> v6654 = v6653;           // L8753
        ap_int<33> v6655 = 64 - v6654;      // L8754
        ap_int<33> v6656 = i5;              // L8755
        bool v6657 = v6656 < v6655;         // L8756
        ap_int<33> v6658 = j4;              // L8757
        bool v6659 = v6658 >= v6655;        // L8758
        bool v6660 = v6657 & v6659;         // L8759
        if (v6660) {                        // L8760
          ap_int<34> v6661 = i5;            // L8761
          ap_int<34> v6662 = v6661 + 1;     // L8764
          int32_t v6663 = v6585[0];         // L8765
          ap_int<35> v6664 = v6662;         // L8766
          ap_int<35> v6665 = v6663;         // L8767
          ap_int<35> v6666 = v6664 + v6665; // L8768
          float v6667 = v6666;              // L8769
          float v6668 = 1.000000 / v6667;   // L8771
          v6586[i5][j4] = v6668;            // L8772
        } else {
          v6586[i5][j4] = 0.000000; // L8776
        }
      }
    }
  }
}

void PE_kernel_YV_0_0(hls::stream<float> &v6669 /* v6669[64] */,
                      hls::stream<float> &v6670 /* v6670[64] */,
                      hls::stream<float> &v6671 /* v6671[64] */,
                      hls::stream<float> &v6672 /* v6672[64] */,
                      float v6673[8][8], int v6674,
                      int v6675) { // L8783
#pragma HLS stream variable = v6669 depth = 9
#pragma HLS stream variable = v6670 depth = 9
#pragma HLS stream variable = v6671 depth = 9
#pragma HLS stream variable = v6672 depth = 9
#pragma HLS array_partition variable = v6673 complete dim = 1
#pragma HLS array_partition variable = v6673 complete dim = 2

  float v256;      // L8786
  v256 = 0.000000; // L8787
l_S_k_0_k264:
  for (int k264 = 0; k264 < 64; k264++) { // L8788
    float v6678 = v6669.read();           // v6669[k264];	// L8789
    float a256;                           // L8790
    a256 = v6678;                         // L8791
    float v6680 = v6670.read();           // v6670[k264];	// L8792
    float b256;                           // L8793
    b256 = v6680;                         // L8794
    float v6682 = a256;                   // L8795
    float v6683 = b256;                   // L8796
    float v6684 = v6682 * v6683;          // L8797
    float v6685 = v256;                   // L8798
    float v6686 = v6685 + v6684;          // L8799
    v256 = v6686;                         // L8800
    float v6687 = a256;                   // L8801
    v6671.write(v6687);                   // v6671[k264] = v6687;	// L8802
    float v6688 = b256;                   // L8803
    v6672.write(v6688);                   // v6672[k264] = v6688;	// L8804
  }
  float v6689 = v256;          // L8806
  v6673[v6674][v6675] = v6689; // L8807
}

void PE_kernel_YV_1_0(hls::stream<float> &v6690 /* v6690[64] */,
                      hls::stream<float> &v6691 /* v6691[64] */,
                      hls::stream<float> &v6692 /* v6692[64] */,
                      hls::stream<float> &v6693 /* v6693[64] */,
                      float v6694[8][8], int v6695,
                      int v6696) { // L8810
#pragma HLS stream variable = v6690 depth = 9
#pragma HLS stream variable = v6691 depth = 9
#pragma HLS stream variable = v6692 depth = 9
#pragma HLS stream variable = v6693 depth = 9
#pragma HLS array_partition variable = v6694 complete dim = 1
#pragma HLS array_partition variable = v6694 complete dim = 2

  float v257;      // L8813
  v257 = 0.000000; // L8814
l_S_k_0_k265:
  for (int k265 = 0; k265 < 64; k265++) { // L8815
    float v6699 = v6690.read();           // v6690[k265];	// L8816
    float a257;                           // L8817
    a257 = v6699;                         // L8818
    float v6701 = v6691.read();           // v6691[k265];	// L8819
    float b257;                           // L8820
    b257 = v6701;                         // L8821
    float v6703 = a257;                   // L8822
    float v6704 = b257;                   // L8823
    float v6705 = v6703 * v6704;          // L8824
    float v6706 = v257;                   // L8825
    float v6707 = v6706 + v6705;          // L8826
    v257 = v6707;                         // L8827
    float v6708 = a257;                   // L8828
    v6692.write(v6708);                   // v6692[k265] = v6708;	// L8829
    float v6709 = b257;                   // L8830
    v6693.write(v6709);                   // v6693[k265] = v6709;	// L8831
  }
  float v6710 = v257;          // L8833
  v6694[v6695][v6696] = v6710; // L8834
}

void PE_kernel_YV_2_0(hls::stream<float> &v6711 /* v6711[64] */,
                      hls::stream<float> &v6712 /* v6712[64] */,
                      hls::stream<float> &v6713 /* v6713[64] */,
                      hls::stream<float> &v6714 /* v6714[64] */,
                      float v6715[8][8], int v6716,
                      int v6717) { // L8837
#pragma HLS stream variable = v6711 depth = 9
#pragma HLS stream variable = v6712 depth = 9
#pragma HLS stream variable = v6713 depth = 9
#pragma HLS stream variable = v6714 depth = 9
#pragma HLS array_partition variable = v6715 complete dim = 1
#pragma HLS array_partition variable = v6715 complete dim = 2

  float v258;      // L8840
  v258 = 0.000000; // L8841
l_S_k_0_k266:
  for (int k266 = 0; k266 < 64; k266++) { // L8842
    float v6720 = v6711.read();           // v6711[k266];	// L8843
    float a258;                           // L8844
    a258 = v6720;                         // L8845
    float v6722 = v6712.read();           // v6712[k266];	// L8846
    float b258;                           // L8847
    b258 = v6722;                         // L8848
    float v6724 = a258;                   // L8849
    float v6725 = b258;                   // L8850
    float v6726 = v6724 * v6725;          // L8851
    float v6727 = v258;                   // L8852
    float v6728 = v6727 + v6726;          // L8853
    v258 = v6728;                         // L8854
    float v6729 = a258;                   // L8855
    v6713.write(v6729);                   // v6713[k266] = v6729;	// L8856
    float v6730 = b258;                   // L8857
    v6714.write(v6730);                   // v6714[k266] = v6730;	// L8858
  }
  float v6731 = v258;          // L8860
  v6715[v6716][v6717] = v6731; // L8861
}

void PE_kernel_YV_3_0(hls::stream<float> &v6732 /* v6732[64] */,
                      hls::stream<float> &v6733 /* v6733[64] */,
                      hls::stream<float> &v6734 /* v6734[64] */,
                      hls::stream<float> &v6735 /* v6735[64] */,
                      float v6736[8][8], int v6737,
                      int v6738) { // L8864
#pragma HLS stream variable = v6732 depth = 9
#pragma HLS stream variable = v6733 depth = 9
#pragma HLS stream variable = v6734 depth = 9
#pragma HLS stream variable = v6735 depth = 9
#pragma HLS array_partition variable = v6736 complete dim = 1
#pragma HLS array_partition variable = v6736 complete dim = 2

  float v259;      // L8867
  v259 = 0.000000; // L8868
l_S_k_0_k267:
  for (int k267 = 0; k267 < 64; k267++) { // L8869
    float v6741 = v6732.read();           // v6732[k267];	// L8870
    float a259;                           // L8871
    a259 = v6741;                         // L8872
    float v6743 = v6733.read();           // v6733[k267];	// L8873
    float b259;                           // L8874
    b259 = v6743;                         // L8875
    float v6745 = a259;                   // L8876
    float v6746 = b259;                   // L8877
    float v6747 = v6745 * v6746;          // L8878
    float v6748 = v259;                   // L8879
    float v6749 = v6748 + v6747;          // L8880
    v259 = v6749;                         // L8881
    float v6750 = a259;                   // L8882
    v6734.write(v6750);                   // v6734[k267] = v6750;	// L8883
    float v6751 = b259;                   // L8884
    v6735.write(v6751);                   // v6735[k267] = v6751;	// L8885
  }
  float v6752 = v259;          // L8887
  v6736[v6737][v6738] = v6752; // L8888
}

void PE_kernel_YV_4_0(hls::stream<float> &v6753 /* v6753[64] */,
                      hls::stream<float> &v6754 /* v6754[64] */,
                      hls::stream<float> &v6755 /* v6755[64] */,
                      hls::stream<float> &v6756 /* v6756[64] */,
                      float v6757[8][8], int v6758,
                      int v6759) { // L8891
#pragma HLS stream variable = v6753 depth = 9
#pragma HLS stream variable = v6754 depth = 9
#pragma HLS stream variable = v6755 depth = 9
#pragma HLS stream variable = v6756 depth = 9
#pragma HLS array_partition variable = v6757 complete dim = 1
#pragma HLS array_partition variable = v6757 complete dim = 2

  float v260;      // L8894
  v260 = 0.000000; // L8895
l_S_k_0_k268:
  for (int k268 = 0; k268 < 64; k268++) { // L8896
    float v6762 = v6753.read();           // v6753[k268];	// L8897
    float a260;                           // L8898
    a260 = v6762;                         // L8899
    float v6764 = v6754.read();           // v6754[k268];	// L8900
    float b260;                           // L8901
    b260 = v6764;                         // L8902
    float v6766 = a260;                   // L8903
    float v6767 = b260;                   // L8904
    float v6768 = v6766 * v6767;          // L8905
    float v6769 = v260;                   // L8906
    float v6770 = v6769 + v6768;          // L8907
    v260 = v6770;                         // L8908
    float v6771 = a260;                   // L8909
    v6755.write(v6771);                   // v6755[k268] = v6771;	// L8910
    float v6772 = b260;                   // L8911
    v6756.write(v6772);                   // v6756[k268] = v6772;	// L8912
  }
  float v6773 = v260;          // L8914
  v6757[v6758][v6759] = v6773; // L8915
}

void PE_kernel_YV_5_0(hls::stream<float> &v6774 /* v6774[64] */,
                      hls::stream<float> &v6775 /* v6775[64] */,
                      hls::stream<float> &v6776 /* v6776[64] */,
                      hls::stream<float> &v6777 /* v6777[64] */,
                      float v6778[8][8], int v6779,
                      int v6780) { // L8918
#pragma HLS stream variable = v6774 depth = 9
#pragma HLS stream variable = v6775 depth = 9
#pragma HLS stream variable = v6776 depth = 9
#pragma HLS stream variable = v6777 depth = 9
#pragma HLS array_partition variable = v6778 complete dim = 1
#pragma HLS array_partition variable = v6778 complete dim = 2

  float v261;      // L8921
  v261 = 0.000000; // L8922
l_S_k_0_k269:
  for (int k269 = 0; k269 < 64; k269++) { // L8923
    float v6783 = v6774.read();           // v6774[k269];	// L8924
    float a261;                           // L8925
    a261 = v6783;                         // L8926
    float v6785 = v6775.read();           // v6775[k269];	// L8927
    float b261;                           // L8928
    b261 = v6785;                         // L8929
    float v6787 = a261;                   // L8930
    float v6788 = b261;                   // L8931
    float v6789 = v6787 * v6788;          // L8932
    float v6790 = v261;                   // L8933
    float v6791 = v6790 + v6789;          // L8934
    v261 = v6791;                         // L8935
    float v6792 = a261;                   // L8936
    v6776.write(v6792);                   // v6776[k269] = v6792;	// L8937
    float v6793 = b261;                   // L8938
    v6777.write(v6793);                   // v6777[k269] = v6793;	// L8939
  }
  float v6794 = v261;          // L8941
  v6778[v6779][v6780] = v6794; // L8942
}

void PE_kernel_YV_6_0(hls::stream<float> &v6795 /* v6795[64] */,
                      hls::stream<float> &v6796 /* v6796[64] */,
                      hls::stream<float> &v6797 /* v6797[64] */,
                      hls::stream<float> &v6798 /* v6798[64] */,
                      float v6799[8][8], int v6800,
                      int v6801) { // L8945
#pragma HLS stream variable = v6795 depth = 9
#pragma HLS stream variable = v6796 depth = 9
#pragma HLS stream variable = v6797 depth = 9
#pragma HLS stream variable = v6798 depth = 9
#pragma HLS array_partition variable = v6799 complete dim = 1
#pragma HLS array_partition variable = v6799 complete dim = 2

  float v262;      // L8948
  v262 = 0.000000; // L8949
l_S_k_0_k270:
  for (int k270 = 0; k270 < 64; k270++) { // L8950
    float v6804 = v6795.read();           // v6795[k270];	// L8951
    float a262;                           // L8952
    a262 = v6804;                         // L8953
    float v6806 = v6796.read();           // v6796[k270];	// L8954
    float b262;                           // L8955
    b262 = v6806;                         // L8956
    float v6808 = a262;                   // L8957
    float v6809 = b262;                   // L8958
    float v6810 = v6808 * v6809;          // L8959
    float v6811 = v262;                   // L8960
    float v6812 = v6811 + v6810;          // L8961
    v262 = v6812;                         // L8962
    float v6813 = a262;                   // L8963
    v6797.write(v6813);                   // v6797[k270] = v6813;	// L8964
    float v6814 = b262;                   // L8965
    v6798.write(v6814);                   // v6798[k270] = v6814;	// L8966
  }
  float v6815 = v262;          // L8968
  v6799[v6800][v6801] = v6815; // L8969
}

void PE_kernel_YV_7_0(hls::stream<float> &v6816 /* v6816[64] */,
                      hls::stream<float> &v6817 /* v6817[64] */,
                      hls::stream<float> &v6818 /* v6818[64] */,
                      hls::stream<float> &v6819 /* v6819[64] */,
                      float v6820[8][8], int v6821,
                      int v6822) { // L8972
#pragma HLS stream variable = v6816 depth = 9
#pragma HLS stream variable = v6817 depth = 9
#pragma HLS stream variable = v6818 depth = 9
#pragma HLS stream variable = v6819 depth = 9
#pragma HLS array_partition variable = v6820 complete dim = 1
#pragma HLS array_partition variable = v6820 complete dim = 2

  float v263;      // L8975
  v263 = 0.000000; // L8976
l_S_k_0_k271:
  for (int k271 = 0; k271 < 64; k271++) { // L8977
    float v6825 = v6816.read();           // v6816[k271];	// L8978
    float a263;                           // L8979
    a263 = v6825;                         // L8980
    float v6827 = v6817.read();           // v6817[k271];	// L8981
    float b263;                           // L8982
    b263 = v6827;                         // L8983
    float v6829 = a263;                   // L8984
    float v6830 = b263;                   // L8985
    float v6831 = v6829 * v6830;          // L8986
    float v6832 = v263;                   // L8987
    float v6833 = v6832 + v6831;          // L8988
    v263 = v6833;                         // L8989
    float v6834 = a263;                   // L8990
    v6818.write(v6834);                   // v6818[k271] = v6834;	// L8991
    float v6835 = b263;                   // L8992
    v6819.write(v6835);                   // v6819[k271] = v6835;	// L8993
  }
  float v6836 = v263;          // L8995
  v6820[v6821][v6822] = v6836; // L8996
}

void PE_kernel_YV_0_1(hls::stream<float> &v6837 /* v6837[64] */,
                      hls::stream<float> &v6838 /* v6838[64] */,
                      hls::stream<float> &v6839 /* v6839[64] */,
                      hls::stream<float> &v6840 /* v6840[64] */,
                      float v6841[8][8], int v6842,
                      int v6843) { // L8999
#pragma HLS stream variable = v6837 depth = 9
#pragma HLS stream variable = v6838 depth = 9
#pragma HLS stream variable = v6839 depth = 9
#pragma HLS stream variable = v6840 depth = 9
#pragma HLS array_partition variable = v6841 complete dim = 1
#pragma HLS array_partition variable = v6841 complete dim = 2

  float v264;      // L9002
  v264 = 0.000000; // L9003
l_S_k_0_k272:
  for (int k272 = 0; k272 < 64; k272++) { // L9004
    float v6846 = v6837.read();           // v6837[k272];	// L9005
    float a264;                           // L9006
    a264 = v6846;                         // L9007
    float v6848 = v6838.read();           // v6838[k272];	// L9008
    float b264;                           // L9009
    b264 = v6848;                         // L9010
    float v6850 = a264;                   // L9011
    float v6851 = b264;                   // L9012
    float v6852 = v6850 * v6851;          // L9013
    float v6853 = v264;                   // L9014
    float v6854 = v6853 + v6852;          // L9015
    v264 = v6854;                         // L9016
    float v6855 = a264;                   // L9017
    v6839.write(v6855);                   // v6839[k272] = v6855;	// L9018
    float v6856 = b264;                   // L9019
    v6840.write(v6856);                   // v6840[k272] = v6856;	// L9020
  }
  float v6857 = v264;          // L9022
  v6841[v6842][v6843] = v6857; // L9023
}

void PE_kernel_YV_1_1(hls::stream<float> &v6858 /* v6858[64] */,
                      hls::stream<float> &v6859 /* v6859[64] */,
                      hls::stream<float> &v6860 /* v6860[64] */,
                      hls::stream<float> &v6861 /* v6861[64] */,
                      float v6862[8][8], int v6863,
                      int v6864) { // L9026
#pragma HLS stream variable = v6858 depth = 9
#pragma HLS stream variable = v6859 depth = 9
#pragma HLS stream variable = v6860 depth = 9
#pragma HLS stream variable = v6861 depth = 9
#pragma HLS array_partition variable = v6862 complete dim = 1
#pragma HLS array_partition variable = v6862 complete dim = 2

  float v265;      // L9029
  v265 = 0.000000; // L9030
l_S_k_0_k273:
  for (int k273 = 0; k273 < 64; k273++) { // L9031
    float v6867 = v6858.read();           // v6858[k273];	// L9032
    float a265;                           // L9033
    a265 = v6867;                         // L9034
    float v6869 = v6859.read();           // v6859[k273];	// L9035
    float b265;                           // L9036
    b265 = v6869;                         // L9037
    float v6871 = a265;                   // L9038
    float v6872 = b265;                   // L9039
    float v6873 = v6871 * v6872;          // L9040
    float v6874 = v265;                   // L9041
    float v6875 = v6874 + v6873;          // L9042
    v265 = v6875;                         // L9043
    float v6876 = a265;                   // L9044
    v6860.write(v6876);                   // v6860[k273] = v6876;	// L9045
    float v6877 = b265;                   // L9046
    v6861.write(v6877);                   // v6861[k273] = v6877;	// L9047
  }
  float v6878 = v265;          // L9049
  v6862[v6863][v6864] = v6878; // L9050
}

void PE_kernel_YV_2_1(hls::stream<float> &v6879 /* v6879[64] */,
                      hls::stream<float> &v6880 /* v6880[64] */,
                      hls::stream<float> &v6881 /* v6881[64] */,
                      hls::stream<float> &v6882 /* v6882[64] */,
                      float v6883[8][8], int v6884,
                      int v6885) { // L9053
#pragma HLS stream variable = v6879 depth = 9
#pragma HLS stream variable = v6880 depth = 9
#pragma HLS stream variable = v6881 depth = 9
#pragma HLS stream variable = v6882 depth = 9
#pragma HLS array_partition variable = v6883 complete dim = 1
#pragma HLS array_partition variable = v6883 complete dim = 2

  float v266;      // L9056
  v266 = 0.000000; // L9057
l_S_k_0_k274:
  for (int k274 = 0; k274 < 64; k274++) { // L9058
    float v6888 = v6879.read();           // v6879[k274];	// L9059
    float a266;                           // L9060
    a266 = v6888;                         // L9061
    float v6890 = v6880.read();           // v6880[k274];	// L9062
    float b266;                           // L9063
    b266 = v6890;                         // L9064
    float v6892 = a266;                   // L9065
    float v6893 = b266;                   // L9066
    float v6894 = v6892 * v6893;          // L9067
    float v6895 = v266;                   // L9068
    float v6896 = v6895 + v6894;          // L9069
    v266 = v6896;                         // L9070
    float v6897 = a266;                   // L9071
    v6881.write(v6897);                   // v6881[k274] = v6897;	// L9072
    float v6898 = b266;                   // L9073
    v6882.write(v6898);                   // v6882[k274] = v6898;	// L9074
  }
  float v6899 = v266;          // L9076
  v6883[v6884][v6885] = v6899; // L9077
}

void PE_kernel_YV_3_1(hls::stream<float> &v6900 /* v6900[64] */,
                      hls::stream<float> &v6901 /* v6901[64] */,
                      hls::stream<float> &v6902 /* v6902[64] */,
                      hls::stream<float> &v6903 /* v6903[64] */,
                      float v6904[8][8], int v6905,
                      int v6906) { // L9080
#pragma HLS stream variable = v6900 depth = 9
#pragma HLS stream variable = v6901 depth = 9
#pragma HLS stream variable = v6902 depth = 9
#pragma HLS stream variable = v6903 depth = 9
#pragma HLS array_partition variable = v6904 complete dim = 1
#pragma HLS array_partition variable = v6904 complete dim = 2

  float v267;      // L9083
  v267 = 0.000000; // L9084
l_S_k_0_k275:
  for (int k275 = 0; k275 < 64; k275++) { // L9085
    float v6909 = v6900.read();           // v6900[k275];	// L9086
    float a267;                           // L9087
    a267 = v6909;                         // L9088
    float v6911 = v6901.read();           // v6901[k275];	// L9089
    float b267;                           // L9090
    b267 = v6911;                         // L9091
    float v6913 = a267;                   // L9092
    float v6914 = b267;                   // L9093
    float v6915 = v6913 * v6914;          // L9094
    float v6916 = v267;                   // L9095
    float v6917 = v6916 + v6915;          // L9096
    v267 = v6917;                         // L9097
    float v6918 = a267;                   // L9098
    v6902.write(v6918);                   // v6902[k275] = v6918;	// L9099
    float v6919 = b267;                   // L9100
    v6903.write(v6919);                   // v6903[k275] = v6919;	// L9101
  }
  float v6920 = v267;          // L9103
  v6904[v6905][v6906] = v6920; // L9104
}

void PE_kernel_YV_4_1(hls::stream<float> &v6921 /* v6921[64] */,
                      hls::stream<float> &v6922 /* v6922[64] */,
                      hls::stream<float> &v6923 /* v6923[64] */,
                      hls::stream<float> &v6924 /* v6924[64] */,
                      float v6925[8][8], int v6926,
                      int v6927) { // L9107
#pragma HLS stream variable = v6921 depth = 9
#pragma HLS stream variable = v6922 depth = 9
#pragma HLS stream variable = v6923 depth = 9
#pragma HLS stream variable = v6924 depth = 9
#pragma HLS array_partition variable = v6925 complete dim = 1
#pragma HLS array_partition variable = v6925 complete dim = 2

  float v268;      // L9110
  v268 = 0.000000; // L9111
l_S_k_0_k276:
  for (int k276 = 0; k276 < 64; k276++) { // L9112
    float v6930 = v6921.read();           // v6921[k276];	// L9113
    float a268;                           // L9114
    a268 = v6930;                         // L9115
    float v6932 = v6922.read();           // v6922[k276];	// L9116
    float b268;                           // L9117
    b268 = v6932;                         // L9118
    float v6934 = a268;                   // L9119
    float v6935 = b268;                   // L9120
    float v6936 = v6934 * v6935;          // L9121
    float v6937 = v268;                   // L9122
    float v6938 = v6937 + v6936;          // L9123
    v268 = v6938;                         // L9124
    float v6939 = a268;                   // L9125
    v6923.write(v6939);                   // v6923[k276] = v6939;	// L9126
    float v6940 = b268;                   // L9127
    v6924.write(v6940);                   // v6924[k276] = v6940;	// L9128
  }
  float v6941 = v268;          // L9130
  v6925[v6926][v6927] = v6941; // L9131
}

void PE_kernel_YV_5_1(hls::stream<float> &v6942 /* v6942[64] */,
                      hls::stream<float> &v6943 /* v6943[64] */,
                      hls::stream<float> &v6944 /* v6944[64] */,
                      hls::stream<float> &v6945 /* v6945[64] */,
                      float v6946[8][8], int v6947,
                      int v6948) { // L9134
#pragma HLS stream variable = v6942 depth = 9
#pragma HLS stream variable = v6943 depth = 9
#pragma HLS stream variable = v6944 depth = 9
#pragma HLS stream variable = v6945 depth = 9
#pragma HLS array_partition variable = v6946 complete dim = 1
#pragma HLS array_partition variable = v6946 complete dim = 2

  float v269;      // L9137
  v269 = 0.000000; // L9138
l_S_k_0_k277:
  for (int k277 = 0; k277 < 64; k277++) { // L9139
    float v6951 = v6942.read();           // v6942[k277];	// L9140
    float a269;                           // L9141
    a269 = v6951;                         // L9142
    float v6953 = v6943.read();           // v6943[k277];	// L9143
    float b269;                           // L9144
    b269 = v6953;                         // L9145
    float v6955 = a269;                   // L9146
    float v6956 = b269;                   // L9147
    float v6957 = v6955 * v6956;          // L9148
    float v6958 = v269;                   // L9149
    float v6959 = v6958 + v6957;          // L9150
    v269 = v6959;                         // L9151
    float v6960 = a269;                   // L9152
    v6944.write(v6960);                   // v6944[k277] = v6960;	// L9153
    float v6961 = b269;                   // L9154
    v6945.write(v6961);                   // v6945[k277] = v6961;	// L9155
  }
  float v6962 = v269;          // L9157
  v6946[v6947][v6948] = v6962; // L9158
}

void PE_kernel_YV_6_1(hls::stream<float> &v6963 /* v6963[64] */,
                      hls::stream<float> &v6964 /* v6964[64] */,
                      hls::stream<float> &v6965 /* v6965[64] */,
                      hls::stream<float> &v6966 /* v6966[64] */,
                      float v6967[8][8], int v6968,
                      int v6969) { // L9161
#pragma HLS stream variable = v6963 depth = 9
#pragma HLS stream variable = v6964 depth = 9
#pragma HLS stream variable = v6965 depth = 9
#pragma HLS stream variable = v6966 depth = 9
#pragma HLS array_partition variable = v6967 complete dim = 1
#pragma HLS array_partition variable = v6967 complete dim = 2

  float v270;      // L9164
  v270 = 0.000000; // L9165
l_S_k_0_k278:
  for (int k278 = 0; k278 < 64; k278++) { // L9166
    float v6972 = v6963.read();           // v6963[k278];	// L9167
    float a270;                           // L9168
    a270 = v6972;                         // L9169
    float v6974 = v6964.read();           // v6964[k278];	// L9170
    float b270;                           // L9171
    b270 = v6974;                         // L9172
    float v6976 = a270;                   // L9173
    float v6977 = b270;                   // L9174
    float v6978 = v6976 * v6977;          // L9175
    float v6979 = v270;                   // L9176
    float v6980 = v6979 + v6978;          // L9177
    v270 = v6980;                         // L9178
    float v6981 = a270;                   // L9179
    v6965.write(v6981);                   // v6965[k278] = v6981;	// L9180
    float v6982 = b270;                   // L9181
    v6966.write(v6982);                   // v6966[k278] = v6982;	// L9182
  }
  float v6983 = v270;          // L9184
  v6967[v6968][v6969] = v6983; // L9185
}

void PE_kernel_YV_7_1(hls::stream<float> &v6984 /* v6984[64] */,
                      hls::stream<float> &v6985 /* v6985[64] */,
                      hls::stream<float> &v6986 /* v6986[64] */,
                      hls::stream<float> &v6987 /* v6987[64] */,
                      float v6988[8][8], int v6989,
                      int v6990) { // L9188
#pragma HLS stream variable = v6984 depth = 9
#pragma HLS stream variable = v6985 depth = 9
#pragma HLS stream variable = v6986 depth = 9
#pragma HLS stream variable = v6987 depth = 9
#pragma HLS array_partition variable = v6988 complete dim = 1
#pragma HLS array_partition variable = v6988 complete dim = 2

  float v271;      // L9191
  v271 = 0.000000; // L9192
l_S_k_0_k279:
  for (int k279 = 0; k279 < 64; k279++) { // L9193
    float v6993 = v6984.read();           // v6984[k279];	// L9194
    float a271;                           // L9195
    a271 = v6993;                         // L9196
    float v6995 = v6985.read();           // v6985[k279];	// L9197
    float b271;                           // L9198
    b271 = v6995;                         // L9199
    float v6997 = a271;                   // L9200
    float v6998 = b271;                   // L9201
    float v6999 = v6997 * v6998;          // L9202
    float v7000 = v271;                   // L9203
    float v7001 = v7000 + v6999;          // L9204
    v271 = v7001;                         // L9205
    float v7002 = a271;                   // L9206
    v6986.write(v7002);                   // v6986[k279] = v7002;	// L9207
    float v7003 = b271;                   // L9208
    v6987.write(v7003);                   // v6987[k279] = v7003;	// L9209
  }
  float v7004 = v271;          // L9211
  v6988[v6989][v6990] = v7004; // L9212
}

void PE_kernel_YV_0_2(hls::stream<float> &v7005 /* v7005[64] */,
                      hls::stream<float> &v7006 /* v7006[64] */,
                      hls::stream<float> &v7007 /* v7007[64] */,
                      hls::stream<float> &v7008 /* v7008[64] */,
                      float v7009[8][8], int v7010,
                      int v7011) { // L9215
#pragma HLS stream variable = v7005 depth = 9
#pragma HLS stream variable = v7006 depth = 9
#pragma HLS stream variable = v7007 depth = 9
#pragma HLS stream variable = v7008 depth = 9
#pragma HLS array_partition variable = v7009 complete dim = 1
#pragma HLS array_partition variable = v7009 complete dim = 2

  float v272;      // L9218
  v272 = 0.000000; // L9219
l_S_k_0_k280:
  for (int k280 = 0; k280 < 64; k280++) { // L9220
    float v7014 = v7005.read();           // v7005[k280];	// L9221
    float a272;                           // L9222
    a272 = v7014;                         // L9223
    float v7016 = v7006.read();           // v7006[k280];	// L9224
    float b272;                           // L9225
    b272 = v7016;                         // L9226
    float v7018 = a272;                   // L9227
    float v7019 = b272;                   // L9228
    float v7020 = v7018 * v7019;          // L9229
    float v7021 = v272;                   // L9230
    float v7022 = v7021 + v7020;          // L9231
    v272 = v7022;                         // L9232
    float v7023 = a272;                   // L9233
    v7007.write(v7023);                   // v7007[k280] = v7023;	// L9234
    float v7024 = b272;                   // L9235
    v7008.write(v7024);                   // v7008[k280] = v7024;	// L9236
  }
  float v7025 = v272;          // L9238
  v7009[v7010][v7011] = v7025; // L9239
}

void PE_kernel_YV_1_2(hls::stream<float> &v7026 /* v7026[64] */,
                      hls::stream<float> &v7027 /* v7027[64] */,
                      hls::stream<float> &v7028 /* v7028[64] */,
                      hls::stream<float> &v7029 /* v7029[64] */,
                      float v7030[8][8], int v7031,
                      int v7032) { // L9242
#pragma HLS stream variable = v7026 depth = 9
#pragma HLS stream variable = v7027 depth = 9
#pragma HLS stream variable = v7028 depth = 9
#pragma HLS stream variable = v7029 depth = 9
#pragma HLS array_partition variable = v7030 complete dim = 1
#pragma HLS array_partition variable = v7030 complete dim = 2

  float v273;      // L9245
  v273 = 0.000000; // L9246
l_S_k_0_k281:
  for (int k281 = 0; k281 < 64; k281++) { // L9247
    float v7035 = v7026.read();           // v7026[k281];	// L9248
    float a273;                           // L9249
    a273 = v7035;                         // L9250
    float v7037 = v7027.read();           // v7027[k281];	// L9251
    float b273;                           // L9252
    b273 = v7037;                         // L9253
    float v7039 = a273;                   // L9254
    float v7040 = b273;                   // L9255
    float v7041 = v7039 * v7040;          // L9256
    float v7042 = v273;                   // L9257
    float v7043 = v7042 + v7041;          // L9258
    v273 = v7043;                         // L9259
    float v7044 = a273;                   // L9260
    v7028.write(v7044);                   // v7028[k281] = v7044;	// L9261
    float v7045 = b273;                   // L9262
    v7029.write(v7045);                   // v7029[k281] = v7045;	// L9263
  }
  float v7046 = v273;          // L9265
  v7030[v7031][v7032] = v7046; // L9266
}

void PE_kernel_YV_2_2(hls::stream<float> &v7047 /* v7047[64] */,
                      hls::stream<float> &v7048 /* v7048[64] */,
                      hls::stream<float> &v7049 /* v7049[64] */,
                      hls::stream<float> &v7050 /* v7050[64] */,
                      float v7051[8][8], int v7052,
                      int v7053) { // L9269
#pragma HLS stream variable = v7047 depth = 9
#pragma HLS stream variable = v7048 depth = 9
#pragma HLS stream variable = v7049 depth = 9
#pragma HLS stream variable = v7050 depth = 9
#pragma HLS array_partition variable = v7051 complete dim = 1
#pragma HLS array_partition variable = v7051 complete dim = 2

  float v274;      // L9272
  v274 = 0.000000; // L9273
l_S_k_0_k282:
  for (int k282 = 0; k282 < 64; k282++) { // L9274
    float v7056 = v7047.read();           // v7047[k282];	// L9275
    float a274;                           // L9276
    a274 = v7056;                         // L9277
    float v7058 = v7048.read();           // v7048[k282];	// L9278
    float b274;                           // L9279
    b274 = v7058;                         // L9280
    float v7060 = a274;                   // L9281
    float v7061 = b274;                   // L9282
    float v7062 = v7060 * v7061;          // L9283
    float v7063 = v274;                   // L9284
    float v7064 = v7063 + v7062;          // L9285
    v274 = v7064;                         // L9286
    float v7065 = a274;                   // L9287
    v7049.write(v7065);                   // v7049[k282] = v7065;	// L9288
    float v7066 = b274;                   // L9289
    v7050.write(v7066);                   // v7050[k282] = v7066;	// L9290
  }
  float v7067 = v274;          // L9292
  v7051[v7052][v7053] = v7067; // L9293
}

void PE_kernel_YV_3_2(hls::stream<float> &v7068 /* v7068[64] */,
                      hls::stream<float> &v7069 /* v7069[64] */,
                      hls::stream<float> &v7070 /* v7070[64] */,
                      hls::stream<float> &v7071 /* v7071[64] */,
                      float v7072[8][8], int v7073,
                      int v7074) { // L9296
#pragma HLS stream variable = v7068 depth = 9
#pragma HLS stream variable = v7069 depth = 9
#pragma HLS stream variable = v7070 depth = 9
#pragma HLS stream variable = v7071 depth = 9
#pragma HLS array_partition variable = v7072 complete dim = 1
#pragma HLS array_partition variable = v7072 complete dim = 2

  float v275;      // L9299
  v275 = 0.000000; // L9300
l_S_k_0_k283:
  for (int k283 = 0; k283 < 64; k283++) { // L9301
    float v7077 = v7068.read();           // v7068[k283];	// L9302
    float a275;                           // L9303
    a275 = v7077;                         // L9304
    float v7079 = v7069.read();           // v7069[k283];	// L9305
    float b275;                           // L9306
    b275 = v7079;                         // L9307
    float v7081 = a275;                   // L9308
    float v7082 = b275;                   // L9309
    float v7083 = v7081 * v7082;          // L9310
    float v7084 = v275;                   // L9311
    float v7085 = v7084 + v7083;          // L9312
    v275 = v7085;                         // L9313
    float v7086 = a275;                   // L9314
    v7070.write(v7086);                   // v7070[k283] = v7086;	// L9315
    float v7087 = b275;                   // L9316
    v7071.write(v7087);                   // v7071[k283] = v7087;	// L9317
  }
  float v7088 = v275;          // L9319
  v7072[v7073][v7074] = v7088; // L9320
}

void PE_kernel_YV_4_2(hls::stream<float> &v7089 /* v7089[64] */,
                      hls::stream<float> &v7090 /* v7090[64] */,
                      hls::stream<float> &v7091 /* v7091[64] */,
                      hls::stream<float> &v7092 /* v7092[64] */,
                      float v7093[8][8], int v7094,
                      int v7095) { // L9323
#pragma HLS stream variable = v7089 depth = 9
#pragma HLS stream variable = v7090 depth = 9
#pragma HLS stream variable = v7091 depth = 9
#pragma HLS stream variable = v7092 depth = 9
#pragma HLS array_partition variable = v7093 complete dim = 1
#pragma HLS array_partition variable = v7093 complete dim = 2

  float v276;      // L9326
  v276 = 0.000000; // L9327
l_S_k_0_k284:
  for (int k284 = 0; k284 < 64; k284++) { // L9328
    float v7098 = v7089.read();           // v7089[k284];	// L9329
    float a276;                           // L9330
    a276 = v7098;                         // L9331
    float v7100 = v7090.read();           // v7090[k284];	// L9332
    float b276;                           // L9333
    b276 = v7100;                         // L9334
    float v7102 = a276;                   // L9335
    float v7103 = b276;                   // L9336
    float v7104 = v7102 * v7103;          // L9337
    float v7105 = v276;                   // L9338
    float v7106 = v7105 + v7104;          // L9339
    v276 = v7106;                         // L9340
    float v7107 = a276;                   // L9341
    v7091.write(v7107);                   // v7091[k284] = v7107;	// L9342
    float v7108 = b276;                   // L9343
    v7092.write(v7108);                   // v7092[k284] = v7108;	// L9344
  }
  float v7109 = v276;          // L9346
  v7093[v7094][v7095] = v7109; // L9347
}

void PE_kernel_YV_5_2(hls::stream<float> &v7110 /* v7110[64] */,
                      hls::stream<float> &v7111 /* v7111[64] */,
                      hls::stream<float> &v7112 /* v7112[64] */,
                      hls::stream<float> &v7113 /* v7113[64] */,
                      float v7114[8][8], int v7115,
                      int v7116) { // L9350
#pragma HLS stream variable = v7110 depth = 9
#pragma HLS stream variable = v7111 depth = 9
#pragma HLS stream variable = v7112 depth = 9
#pragma HLS stream variable = v7113 depth = 9
#pragma HLS array_partition variable = v7114 complete dim = 1
#pragma HLS array_partition variable = v7114 complete dim = 2

  float v277;      // L9353
  v277 = 0.000000; // L9354
l_S_k_0_k285:
  for (int k285 = 0; k285 < 64; k285++) { // L9355
    float v7119 = v7110.read();           // v7110[k285];	// L9356
    float a277;                           // L9357
    a277 = v7119;                         // L9358
    float v7121 = v7111.read();           // v7111[k285];	// L9359
    float b277;                           // L9360
    b277 = v7121;                         // L9361
    float v7123 = a277;                   // L9362
    float v7124 = b277;                   // L9363
    float v7125 = v7123 * v7124;          // L9364
    float v7126 = v277;                   // L9365
    float v7127 = v7126 + v7125;          // L9366
    v277 = v7127;                         // L9367
    float v7128 = a277;                   // L9368
    v7112.write(v7128);                   // v7112[k285] = v7128;	// L9369
    float v7129 = b277;                   // L9370
    v7113.write(v7129);                   // v7113[k285] = v7129;	// L9371
  }
  float v7130 = v277;          // L9373
  v7114[v7115][v7116] = v7130; // L9374
}

void PE_kernel_YV_6_2(hls::stream<float> &v7131 /* v7131[64] */,
                      hls::stream<float> &v7132 /* v7132[64] */,
                      hls::stream<float> &v7133 /* v7133[64] */,
                      hls::stream<float> &v7134 /* v7134[64] */,
                      float v7135[8][8], int v7136,
                      int v7137) { // L9377
#pragma HLS stream variable = v7131 depth = 9
#pragma HLS stream variable = v7132 depth = 9
#pragma HLS stream variable = v7133 depth = 9
#pragma HLS stream variable = v7134 depth = 9
#pragma HLS array_partition variable = v7135 complete dim = 1
#pragma HLS array_partition variable = v7135 complete dim = 2

  float v278;      // L9380
  v278 = 0.000000; // L9381
l_S_k_0_k286:
  for (int k286 = 0; k286 < 64; k286++) { // L9382
    float v7140 = v7131.read();           // v7131[k286];	// L9383
    float a278;                           // L9384
    a278 = v7140;                         // L9385
    float v7142 = v7132.read();           // v7132[k286];	// L9386
    float b278;                           // L9387
    b278 = v7142;                         // L9388
    float v7144 = a278;                   // L9389
    float v7145 = b278;                   // L9390
    float v7146 = v7144 * v7145;          // L9391
    float v7147 = v278;                   // L9392
    float v7148 = v7147 + v7146;          // L9393
    v278 = v7148;                         // L9394
    float v7149 = a278;                   // L9395
    v7133.write(v7149);                   // v7133[k286] = v7149;	// L9396
    float v7150 = b278;                   // L9397
    v7134.write(v7150);                   // v7134[k286] = v7150;	// L9398
  }
  float v7151 = v278;          // L9400
  v7135[v7136][v7137] = v7151; // L9401
}

void PE_kernel_YV_7_2(hls::stream<float> &v7152 /* v7152[64] */,
                      hls::stream<float> &v7153 /* v7153[64] */,
                      hls::stream<float> &v7154 /* v7154[64] */,
                      hls::stream<float> &v7155 /* v7155[64] */,
                      float v7156[8][8], int v7157,
                      int v7158) { // L9404
#pragma HLS stream variable = v7152 depth = 9
#pragma HLS stream variable = v7153 depth = 9
#pragma HLS stream variable = v7154 depth = 9
#pragma HLS stream variable = v7155 depth = 9
#pragma HLS array_partition variable = v7156 complete dim = 1
#pragma HLS array_partition variable = v7156 complete dim = 2

  float v279;      // L9407
  v279 = 0.000000; // L9408
l_S_k_0_k287:
  for (int k287 = 0; k287 < 64; k287++) { // L9409
    float v7161 = v7152.read();           // v7152[k287];	// L9410
    float a279;                           // L9411
    a279 = v7161;                         // L9412
    float v7163 = v7153.read();           // v7153[k287];	// L9413
    float b279;                           // L9414
    b279 = v7163;                         // L9415
    float v7165 = a279;                   // L9416
    float v7166 = b279;                   // L9417
    float v7167 = v7165 * v7166;          // L9418
    float v7168 = v279;                   // L9419
    float v7169 = v7168 + v7167;          // L9420
    v279 = v7169;                         // L9421
    float v7170 = a279;                   // L9422
    v7154.write(v7170);                   // v7154[k287] = v7170;	// L9423
    float v7171 = b279;                   // L9424
    v7155.write(v7171);                   // v7155[k287] = v7171;	// L9425
  }
  float v7172 = v279;          // L9427
  v7156[v7157][v7158] = v7172; // L9428
}

void PE_kernel_YV_0_3(hls::stream<float> &v7173 /* v7173[64] */,
                      hls::stream<float> &v7174 /* v7174[64] */,
                      hls::stream<float> &v7175 /* v7175[64] */,
                      hls::stream<float> &v7176 /* v7176[64] */,
                      float v7177[8][8], int v7178,
                      int v7179) { // L9431
#pragma HLS stream variable = v7173 depth = 9
#pragma HLS stream variable = v7174 depth = 9
#pragma HLS stream variable = v7175 depth = 9
#pragma HLS stream variable = v7176 depth = 9
#pragma HLS array_partition variable = v7177 complete dim = 1
#pragma HLS array_partition variable = v7177 complete dim = 2

  float v280;      // L9434
  v280 = 0.000000; // L9435
l_S_k_0_k288:
  for (int k288 = 0; k288 < 64; k288++) { // L9436
    float v7182 = v7173.read();           // v7173[k288];	// L9437
    float a280;                           // L9438
    a280 = v7182;                         // L9439
    float v7184 = v7174.read();           // v7174[k288];	// L9440
    float b280;                           // L9441
    b280 = v7184;                         // L9442
    float v7186 = a280;                   // L9443
    float v7187 = b280;                   // L9444
    float v7188 = v7186 * v7187;          // L9445
    float v7189 = v280;                   // L9446
    float v7190 = v7189 + v7188;          // L9447
    v280 = v7190;                         // L9448
    float v7191 = a280;                   // L9449
    v7175.write(v7191);                   // v7175[k288] = v7191;	// L9450
    float v7192 = b280;                   // L9451
    v7176.write(v7192);                   // v7176[k288] = v7192;	// L9452
  }
  float v7193 = v280;          // L9454
  v7177[v7178][v7179] = v7193; // L9455
}

void PE_kernel_YV_1_3(hls::stream<float> &v7194 /* v7194[64] */,
                      hls::stream<float> &v7195 /* v7195[64] */,
                      hls::stream<float> &v7196 /* v7196[64] */,
                      hls::stream<float> &v7197 /* v7197[64] */,
                      float v7198[8][8], int v7199,
                      int v7200) { // L9458
#pragma HLS stream variable = v7194 depth = 9
#pragma HLS stream variable = v7195 depth = 9
#pragma HLS stream variable = v7196 depth = 9
#pragma HLS stream variable = v7197 depth = 9
#pragma HLS array_partition variable = v7198 complete dim = 1
#pragma HLS array_partition variable = v7198 complete dim = 2

  float v281;      // L9461
  v281 = 0.000000; // L9462
l_S_k_0_k289:
  for (int k289 = 0; k289 < 64; k289++) { // L9463
    float v7203 = v7194.read();           // v7194[k289];	// L9464
    float a281;                           // L9465
    a281 = v7203;                         // L9466
    float v7205 = v7195.read();           // v7195[k289];	// L9467
    float b281;                           // L9468
    b281 = v7205;                         // L9469
    float v7207 = a281;                   // L9470
    float v7208 = b281;                   // L9471
    float v7209 = v7207 * v7208;          // L9472
    float v7210 = v281;                   // L9473
    float v7211 = v7210 + v7209;          // L9474
    v281 = v7211;                         // L9475
    float v7212 = a281;                   // L9476
    v7196.write(v7212);                   // v7196[k289] = v7212;	// L9477
    float v7213 = b281;                   // L9478
    v7197.write(v7213);                   // v7197[k289] = v7213;	// L9479
  }
  float v7214 = v281;          // L9481
  v7198[v7199][v7200] = v7214; // L9482
}

void PE_kernel_YV_2_3(hls::stream<float> &v7215 /* v7215[64] */,
                      hls::stream<float> &v7216 /* v7216[64] */,
                      hls::stream<float> &v7217 /* v7217[64] */,
                      hls::stream<float> &v7218 /* v7218[64] */,
                      float v7219[8][8], int v7220,
                      int v7221) { // L9485
#pragma HLS stream variable = v7215 depth = 9
#pragma HLS stream variable = v7216 depth = 9
#pragma HLS stream variable = v7217 depth = 9
#pragma HLS stream variable = v7218 depth = 9
#pragma HLS array_partition variable = v7219 complete dim = 1
#pragma HLS array_partition variable = v7219 complete dim = 2

  float v282;      // L9488
  v282 = 0.000000; // L9489
l_S_k_0_k290:
  for (int k290 = 0; k290 < 64; k290++) { // L9490
    float v7224 = v7215.read();           // v7215[k290];	// L9491
    float a282;                           // L9492
    a282 = v7224;                         // L9493
    float v7226 = v7216.read();           // v7216[k290];	// L9494
    float b282;                           // L9495
    b282 = v7226;                         // L9496
    float v7228 = a282;                   // L9497
    float v7229 = b282;                   // L9498
    float v7230 = v7228 * v7229;          // L9499
    float v7231 = v282;                   // L9500
    float v7232 = v7231 + v7230;          // L9501
    v282 = v7232;                         // L9502
    float v7233 = a282;                   // L9503
    v7217.write(v7233);                   // v7217[k290] = v7233;	// L9504
    float v7234 = b282;                   // L9505
    v7218.write(v7234);                   // v7218[k290] = v7234;	// L9506
  }
  float v7235 = v282;          // L9508
  v7219[v7220][v7221] = v7235; // L9509
}

void PE_kernel_YV_3_3(hls::stream<float> &v7236 /* v7236[64] */,
                      hls::stream<float> &v7237 /* v7237[64] */,
                      hls::stream<float> &v7238 /* v7238[64] */,
                      hls::stream<float> &v7239 /* v7239[64] */,
                      float v7240[8][8], int v7241,
                      int v7242) { // L9512
#pragma HLS stream variable = v7236 depth = 9
#pragma HLS stream variable = v7237 depth = 9
#pragma HLS stream variable = v7238 depth = 9
#pragma HLS stream variable = v7239 depth = 9
#pragma HLS array_partition variable = v7240 complete dim = 1
#pragma HLS array_partition variable = v7240 complete dim = 2

  float v283;      // L9515
  v283 = 0.000000; // L9516
l_S_k_0_k291:
  for (int k291 = 0; k291 < 64; k291++) { // L9517
    float v7245 = v7236.read();           // v7236[k291];	// L9518
    float a283;                           // L9519
    a283 = v7245;                         // L9520
    float v7247 = v7237.read();           // v7237[k291];	// L9521
    float b283;                           // L9522
    b283 = v7247;                         // L9523
    float v7249 = a283;                   // L9524
    float v7250 = b283;                   // L9525
    float v7251 = v7249 * v7250;          // L9526
    float v7252 = v283;                   // L9527
    float v7253 = v7252 + v7251;          // L9528
    v283 = v7253;                         // L9529
    float v7254 = a283;                   // L9530
    v7238.write(v7254);                   // v7238[k291] = v7254;	// L9531
    float v7255 = b283;                   // L9532
    v7239.write(v7255);                   // v7239[k291] = v7255;	// L9533
  }
  float v7256 = v283;          // L9535
  v7240[v7241][v7242] = v7256; // L9536
}

void PE_kernel_YV_4_3(hls::stream<float> &v7257 /* v7257[64] */,
                      hls::stream<float> &v7258 /* v7258[64] */,
                      hls::stream<float> &v7259 /* v7259[64] */,
                      hls::stream<float> &v7260 /* v7260[64] */,
                      float v7261[8][8], int v7262,
                      int v7263) { // L9539
#pragma HLS stream variable = v7257 depth = 9
#pragma HLS stream variable = v7258 depth = 9
#pragma HLS stream variable = v7259 depth = 9
#pragma HLS stream variable = v7260 depth = 9
#pragma HLS array_partition variable = v7261 complete dim = 1
#pragma HLS array_partition variable = v7261 complete dim = 2

  float v284;      // L9542
  v284 = 0.000000; // L9543
l_S_k_0_k292:
  for (int k292 = 0; k292 < 64; k292++) { // L9544
    float v7266 = v7257.read();           // v7257[k292];	// L9545
    float a284;                           // L9546
    a284 = v7266;                         // L9547
    float v7268 = v7258.read();           // v7258[k292];	// L9548
    float b284;                           // L9549
    b284 = v7268;                         // L9550
    float v7270 = a284;                   // L9551
    float v7271 = b284;                   // L9552
    float v7272 = v7270 * v7271;          // L9553
    float v7273 = v284;                   // L9554
    float v7274 = v7273 + v7272;          // L9555
    v284 = v7274;                         // L9556
    float v7275 = a284;                   // L9557
    v7259.write(v7275);                   // v7259[k292] = v7275;	// L9558
    float v7276 = b284;                   // L9559
    v7260.write(v7276);                   // v7260[k292] = v7276;	// L9560
  }
  float v7277 = v284;          // L9562
  v7261[v7262][v7263] = v7277; // L9563
}

void PE_kernel_YV_5_3(hls::stream<float> &v7278 /* v7278[64] */,
                      hls::stream<float> &v7279 /* v7279[64] */,
                      hls::stream<float> &v7280 /* v7280[64] */,
                      hls::stream<float> &v7281 /* v7281[64] */,
                      float v7282[8][8], int v7283,
                      int v7284) { // L9566
#pragma HLS stream variable = v7278 depth = 9
#pragma HLS stream variable = v7279 depth = 9
#pragma HLS stream variable = v7280 depth = 9
#pragma HLS stream variable = v7281 depth = 9
#pragma HLS array_partition variable = v7282 complete dim = 1
#pragma HLS array_partition variable = v7282 complete dim = 2

  float v285;      // L9569
  v285 = 0.000000; // L9570
l_S_k_0_k293:
  for (int k293 = 0; k293 < 64; k293++) { // L9571
    float v7287 = v7278.read();           // v7278[k293];	// L9572
    float a285;                           // L9573
    a285 = v7287;                         // L9574
    float v7289 = v7279.read();           // v7279[k293];	// L9575
    float b285;                           // L9576
    b285 = v7289;                         // L9577
    float v7291 = a285;                   // L9578
    float v7292 = b285;                   // L9579
    float v7293 = v7291 * v7292;          // L9580
    float v7294 = v285;                   // L9581
    float v7295 = v7294 + v7293;          // L9582
    v285 = v7295;                         // L9583
    float v7296 = a285;                   // L9584
    v7280.write(v7296);                   // v7280[k293] = v7296;	// L9585
    float v7297 = b285;                   // L9586
    v7281.write(v7297);                   // v7281[k293] = v7297;	// L9587
  }
  float v7298 = v285;          // L9589
  v7282[v7283][v7284] = v7298; // L9590
}

void PE_kernel_YV_6_3(hls::stream<float> &v7299 /* v7299[64] */,
                      hls::stream<float> &v7300 /* v7300[64] */,
                      hls::stream<float> &v7301 /* v7301[64] */,
                      hls::stream<float> &v7302 /* v7302[64] */,
                      float v7303[8][8], int v7304,
                      int v7305) { // L9593
#pragma HLS stream variable = v7299 depth = 9
#pragma HLS stream variable = v7300 depth = 9
#pragma HLS stream variable = v7301 depth = 9
#pragma HLS stream variable = v7302 depth = 9
#pragma HLS array_partition variable = v7303 complete dim = 1
#pragma HLS array_partition variable = v7303 complete dim = 2

  float v286;      // L9596
  v286 = 0.000000; // L9597
l_S_k_0_k294:
  for (int k294 = 0; k294 < 64; k294++) { // L9598
    float v7308 = v7299.read();           // v7299[k294];	// L9599
    float a286;                           // L9600
    a286 = v7308;                         // L9601
    float v7310 = v7300.read();           // v7300[k294];	// L9602
    float b286;                           // L9603
    b286 = v7310;                         // L9604
    float v7312 = a286;                   // L9605
    float v7313 = b286;                   // L9606
    float v7314 = v7312 * v7313;          // L9607
    float v7315 = v286;                   // L9608
    float v7316 = v7315 + v7314;          // L9609
    v286 = v7316;                         // L9610
    float v7317 = a286;                   // L9611
    v7301.write(v7317);                   // v7301[k294] = v7317;	// L9612
    float v7318 = b286;                   // L9613
    v7302.write(v7318);                   // v7302[k294] = v7318;	// L9614
  }
  float v7319 = v286;          // L9616
  v7303[v7304][v7305] = v7319; // L9617
}

void PE_kernel_YV_7_3(hls::stream<float> &v7320 /* v7320[64] */,
                      hls::stream<float> &v7321 /* v7321[64] */,
                      hls::stream<float> &v7322 /* v7322[64] */,
                      hls::stream<float> &v7323 /* v7323[64] */,
                      float v7324[8][8], int v7325,
                      int v7326) { // L9620
#pragma HLS stream variable = v7320 depth = 9
#pragma HLS stream variable = v7321 depth = 9
#pragma HLS stream variable = v7322 depth = 9
#pragma HLS stream variable = v7323 depth = 9
#pragma HLS array_partition variable = v7324 complete dim = 1
#pragma HLS array_partition variable = v7324 complete dim = 2

  float v287;      // L9623
  v287 = 0.000000; // L9624
l_S_k_0_k295:
  for (int k295 = 0; k295 < 64; k295++) { // L9625
    float v7329 = v7320.read();           // v7320[k295];	// L9626
    float a287;                           // L9627
    a287 = v7329;                         // L9628
    float v7331 = v7321.read();           // v7321[k295];	// L9629
    float b287;                           // L9630
    b287 = v7331;                         // L9631
    float v7333 = a287;                   // L9632
    float v7334 = b287;                   // L9633
    float v7335 = v7333 * v7334;          // L9634
    float v7336 = v287;                   // L9635
    float v7337 = v7336 + v7335;          // L9636
    v287 = v7337;                         // L9637
    float v7338 = a287;                   // L9638
    v7322.write(v7338);                   // v7322[k295] = v7338;	// L9639
    float v7339 = b287;                   // L9640
    v7323.write(v7339);                   // v7323[k295] = v7339;	// L9641
  }
  float v7340 = v287;          // L9643
  v7324[v7325][v7326] = v7340; // L9644
}

void PE_kernel_YV_0_4(hls::stream<float> &v7341 /* v7341[64] */,
                      hls::stream<float> &v7342 /* v7342[64] */,
                      hls::stream<float> &v7343 /* v7343[64] */,
                      hls::stream<float> &v7344 /* v7344[64] */,
                      float v7345[8][8], int v7346,
                      int v7347) { // L9647
#pragma HLS stream variable = v7341 depth = 9
#pragma HLS stream variable = v7342 depth = 9
#pragma HLS stream variable = v7343 depth = 9
#pragma HLS stream variable = v7344 depth = 9
#pragma HLS array_partition variable = v7345 complete dim = 1
#pragma HLS array_partition variable = v7345 complete dim = 2

  float v288;      // L9650
  v288 = 0.000000; // L9651
l_S_k_0_k296:
  for (int k296 = 0; k296 < 64; k296++) { // L9652
    float v7350 = v7341.read();           // v7341[k296];	// L9653
    float a288;                           // L9654
    a288 = v7350;                         // L9655
    float v7352 = v7342.read();           // v7342[k296];	// L9656
    float b288;                           // L9657
    b288 = v7352;                         // L9658
    float v7354 = a288;                   // L9659
    float v7355 = b288;                   // L9660
    float v7356 = v7354 * v7355;          // L9661
    float v7357 = v288;                   // L9662
    float v7358 = v7357 + v7356;          // L9663
    v288 = v7358;                         // L9664
    float v7359 = a288;                   // L9665
    v7343.write(v7359);                   // v7343[k296] = v7359;	// L9666
    float v7360 = b288;                   // L9667
    v7344.write(v7360);                   // v7344[k296] = v7360;	// L9668
  }
  float v7361 = v288;          // L9670
  v7345[v7346][v7347] = v7361; // L9671
}

void PE_kernel_YV_1_4(hls::stream<float> &v7362 /* v7362[64] */,
                      hls::stream<float> &v7363 /* v7363[64] */,
                      hls::stream<float> &v7364 /* v7364[64] */,
                      hls::stream<float> &v7365 /* v7365[64] */,
                      float v7366[8][8], int v7367,
                      int v7368) { // L9674
#pragma HLS stream variable = v7362 depth = 9
#pragma HLS stream variable = v7363 depth = 9
#pragma HLS stream variable = v7364 depth = 9
#pragma HLS stream variable = v7365 depth = 9
#pragma HLS array_partition variable = v7366 complete dim = 1
#pragma HLS array_partition variable = v7366 complete dim = 2

  float v289;      // L9677
  v289 = 0.000000; // L9678
l_S_k_0_k297:
  for (int k297 = 0; k297 < 64; k297++) { // L9679
    float v7371 = v7362.read();           // v7362[k297];	// L9680
    float a289;                           // L9681
    a289 = v7371;                         // L9682
    float v7373 = v7363.read();           // v7363[k297];	// L9683
    float b289;                           // L9684
    b289 = v7373;                         // L9685
    float v7375 = a289;                   // L9686
    float v7376 = b289;                   // L9687
    float v7377 = v7375 * v7376;          // L9688
    float v7378 = v289;                   // L9689
    float v7379 = v7378 + v7377;          // L9690
    v289 = v7379;                         // L9691
    float v7380 = a289;                   // L9692
    v7364.write(v7380);                   // v7364[k297] = v7380;	// L9693
    float v7381 = b289;                   // L9694
    v7365.write(v7381);                   // v7365[k297] = v7381;	// L9695
  }
  float v7382 = v289;          // L9697
  v7366[v7367][v7368] = v7382; // L9698
}

void PE_kernel_YV_2_4(hls::stream<float> &v7383 /* v7383[64] */,
                      hls::stream<float> &v7384 /* v7384[64] */,
                      hls::stream<float> &v7385 /* v7385[64] */,
                      hls::stream<float> &v7386 /* v7386[64] */,
                      float v7387[8][8], int v7388,
                      int v7389) { // L9701
#pragma HLS stream variable = v7383 depth = 9
#pragma HLS stream variable = v7384 depth = 9
#pragma HLS stream variable = v7385 depth = 9
#pragma HLS stream variable = v7386 depth = 9
#pragma HLS array_partition variable = v7387 complete dim = 1
#pragma HLS array_partition variable = v7387 complete dim = 2

  float v290;      // L9704
  v290 = 0.000000; // L9705
l_S_k_0_k298:
  for (int k298 = 0; k298 < 64; k298++) { // L9706
    float v7392 = v7383.read();           // v7383[k298];	// L9707
    float a290;                           // L9708
    a290 = v7392;                         // L9709
    float v7394 = v7384.read();           // v7384[k298];	// L9710
    float b290;                           // L9711
    b290 = v7394;                         // L9712
    float v7396 = a290;                   // L9713
    float v7397 = b290;                   // L9714
    float v7398 = v7396 * v7397;          // L9715
    float v7399 = v290;                   // L9716
    float v7400 = v7399 + v7398;          // L9717
    v290 = v7400;                         // L9718
    float v7401 = a290;                   // L9719
    v7385.write(v7401);                   // v7385[k298] = v7401;	// L9720
    float v7402 = b290;                   // L9721
    v7386.write(v7402);                   // v7386[k298] = v7402;	// L9722
  }
  float v7403 = v290;          // L9724
  v7387[v7388][v7389] = v7403; // L9725
}

void PE_kernel_YV_3_4(hls::stream<float> &v7404 /* v7404[64] */,
                      hls::stream<float> &v7405 /* v7405[64] */,
                      hls::stream<float> &v7406 /* v7406[64] */,
                      hls::stream<float> &v7407 /* v7407[64] */,
                      float v7408[8][8], int v7409,
                      int v7410) { // L9728
#pragma HLS stream variable = v7404 depth = 9
#pragma HLS stream variable = v7405 depth = 9
#pragma HLS stream variable = v7406 depth = 9
#pragma HLS stream variable = v7407 depth = 9
#pragma HLS array_partition variable = v7408 complete dim = 1
#pragma HLS array_partition variable = v7408 complete dim = 2

  float v291;      // L9731
  v291 = 0.000000; // L9732
l_S_k_0_k299:
  for (int k299 = 0; k299 < 64; k299++) { // L9733
    float v7413 = v7404.read();           // v7404[k299];	// L9734
    float a291;                           // L9735
    a291 = v7413;                         // L9736
    float v7415 = v7405.read();           // v7405[k299];	// L9737
    float b291;                           // L9738
    b291 = v7415;                         // L9739
    float v7417 = a291;                   // L9740
    float v7418 = b291;                   // L9741
    float v7419 = v7417 * v7418;          // L9742
    float v7420 = v291;                   // L9743
    float v7421 = v7420 + v7419;          // L9744
    v291 = v7421;                         // L9745
    float v7422 = a291;                   // L9746
    v7406.write(v7422);                   // v7406[k299] = v7422;	// L9747
    float v7423 = b291;                   // L9748
    v7407.write(v7423);                   // v7407[k299] = v7423;	// L9749
  }
  float v7424 = v291;          // L9751
  v7408[v7409][v7410] = v7424; // L9752
}

void PE_kernel_YV_4_4(hls::stream<float> &v7425 /* v7425[64] */,
                      hls::stream<float> &v7426 /* v7426[64] */,
                      hls::stream<float> &v7427 /* v7427[64] */,
                      hls::stream<float> &v7428 /* v7428[64] */,
                      float v7429[8][8], int v7430,
                      int v7431) { // L9755
#pragma HLS stream variable = v7425 depth = 9
#pragma HLS stream variable = v7426 depth = 9
#pragma HLS stream variable = v7427 depth = 9
#pragma HLS stream variable = v7428 depth = 9
#pragma HLS array_partition variable = v7429 complete dim = 1
#pragma HLS array_partition variable = v7429 complete dim = 2

  float v292;      // L9758
  v292 = 0.000000; // L9759
l_S_k_0_k300:
  for (int k300 = 0; k300 < 64; k300++) { // L9760
    float v7434 = v7425.read();           // v7425[k300];	// L9761
    float a292;                           // L9762
    a292 = v7434;                         // L9763
    float v7436 = v7426.read();           // v7426[k300];	// L9764
    float b292;                           // L9765
    b292 = v7436;                         // L9766
    float v7438 = a292;                   // L9767
    float v7439 = b292;                   // L9768
    float v7440 = v7438 * v7439;          // L9769
    float v7441 = v292;                   // L9770
    float v7442 = v7441 + v7440;          // L9771
    v292 = v7442;                         // L9772
    float v7443 = a292;                   // L9773
    v7427.write(v7443);                   // v7427[k300] = v7443;	// L9774
    float v7444 = b292;                   // L9775
    v7428.write(v7444);                   // v7428[k300] = v7444;	// L9776
  }
  float v7445 = v292;          // L9778
  v7429[v7430][v7431] = v7445; // L9779
}

void PE_kernel_YV_5_4(hls::stream<float> &v7446 /* v7446[64] */,
                      hls::stream<float> &v7447 /* v7447[64] */,
                      hls::stream<float> &v7448 /* v7448[64] */,
                      hls::stream<float> &v7449 /* v7449[64] */,
                      float v7450[8][8], int v7451,
                      int v7452) { // L9782
#pragma HLS stream variable = v7446 depth = 9
#pragma HLS stream variable = v7447 depth = 9
#pragma HLS stream variable = v7448 depth = 9
#pragma HLS stream variable = v7449 depth = 9
#pragma HLS array_partition variable = v7450 complete dim = 1
#pragma HLS array_partition variable = v7450 complete dim = 2

  float v293;      // L9785
  v293 = 0.000000; // L9786
l_S_k_0_k301:
  for (int k301 = 0; k301 < 64; k301++) { // L9787
    float v7455 = v7446.read();           // v7446[k301];	// L9788
    float a293;                           // L9789
    a293 = v7455;                         // L9790
    float v7457 = v7447.read();           // v7447[k301];	// L9791
    float b293;                           // L9792
    b293 = v7457;                         // L9793
    float v7459 = a293;                   // L9794
    float v7460 = b293;                   // L9795
    float v7461 = v7459 * v7460;          // L9796
    float v7462 = v293;                   // L9797
    float v7463 = v7462 + v7461;          // L9798
    v293 = v7463;                         // L9799
    float v7464 = a293;                   // L9800
    v7448.write(v7464);                   // v7448[k301] = v7464;	// L9801
    float v7465 = b293;                   // L9802
    v7449.write(v7465);                   // v7449[k301] = v7465;	// L9803
  }
  float v7466 = v293;          // L9805
  v7450[v7451][v7452] = v7466; // L9806
}

void PE_kernel_YV_6_4(hls::stream<float> &v7467 /* v7467[64] */,
                      hls::stream<float> &v7468 /* v7468[64] */,
                      hls::stream<float> &v7469 /* v7469[64] */,
                      hls::stream<float> &v7470 /* v7470[64] */,
                      float v7471[8][8], int v7472,
                      int v7473) { // L9809
#pragma HLS stream variable = v7467 depth = 9
#pragma HLS stream variable = v7468 depth = 9
#pragma HLS stream variable = v7469 depth = 9
#pragma HLS stream variable = v7470 depth = 9
#pragma HLS array_partition variable = v7471 complete dim = 1
#pragma HLS array_partition variable = v7471 complete dim = 2

  float v294;      // L9812
  v294 = 0.000000; // L9813
l_S_k_0_k302:
  for (int k302 = 0; k302 < 64; k302++) { // L9814
    float v7476 = v7467.read();           // v7467[k302];	// L9815
    float a294;                           // L9816
    a294 = v7476;                         // L9817
    float v7478 = v7468.read();           // v7468[k302];	// L9818
    float b294;                           // L9819
    b294 = v7478;                         // L9820
    float v7480 = a294;                   // L9821
    float v7481 = b294;                   // L9822
    float v7482 = v7480 * v7481;          // L9823
    float v7483 = v294;                   // L9824
    float v7484 = v7483 + v7482;          // L9825
    v294 = v7484;                         // L9826
    float v7485 = a294;                   // L9827
    v7469.write(v7485);                   // v7469[k302] = v7485;	// L9828
    float v7486 = b294;                   // L9829
    v7470.write(v7486);                   // v7470[k302] = v7486;	// L9830
  }
  float v7487 = v294;          // L9832
  v7471[v7472][v7473] = v7487; // L9833
}

void PE_kernel_YV_7_4(hls::stream<float> &v7488 /* v7488[64] */,
                      hls::stream<float> &v7489 /* v7489[64] */,
                      hls::stream<float> &v7490 /* v7490[64] */,
                      hls::stream<float> &v7491 /* v7491[64] */,
                      float v7492[8][8], int v7493,
                      int v7494) { // L9836
#pragma HLS stream variable = v7488 depth = 9
#pragma HLS stream variable = v7489 depth = 9
#pragma HLS stream variable = v7490 depth = 9
#pragma HLS stream variable = v7491 depth = 9
#pragma HLS array_partition variable = v7492 complete dim = 1
#pragma HLS array_partition variable = v7492 complete dim = 2

  float v295;      // L9839
  v295 = 0.000000; // L9840
l_S_k_0_k303:
  for (int k303 = 0; k303 < 64; k303++) { // L9841
    float v7497 = v7488.read();           // v7488[k303];	// L9842
    float a295;                           // L9843
    a295 = v7497;                         // L9844
    float v7499 = v7489.read();           // v7489[k303];	// L9845
    float b295;                           // L9846
    b295 = v7499;                         // L9847
    float v7501 = a295;                   // L9848
    float v7502 = b295;                   // L9849
    float v7503 = v7501 * v7502;          // L9850
    float v7504 = v295;                   // L9851
    float v7505 = v7504 + v7503;          // L9852
    v295 = v7505;                         // L9853
    float v7506 = a295;                   // L9854
    v7490.write(v7506);                   // v7490[k303] = v7506;	// L9855
    float v7507 = b295;                   // L9856
    v7491.write(v7507);                   // v7491[k303] = v7507;	// L9857
  }
  float v7508 = v295;          // L9859
  v7492[v7493][v7494] = v7508; // L9860
}

void PE_kernel_YV_0_5(hls::stream<float> &v7509 /* v7509[64] */,
                      hls::stream<float> &v7510 /* v7510[64] */,
                      hls::stream<float> &v7511 /* v7511[64] */,
                      hls::stream<float> &v7512 /* v7512[64] */,
                      float v7513[8][8], int v7514,
                      int v7515) { // L9863
#pragma HLS stream variable = v7509 depth = 9
#pragma HLS stream variable = v7510 depth = 9
#pragma HLS stream variable = v7511 depth = 9
#pragma HLS stream variable = v7512 depth = 9
#pragma HLS array_partition variable = v7513 complete dim = 1
#pragma HLS array_partition variable = v7513 complete dim = 2

  float v296;      // L9866
  v296 = 0.000000; // L9867
l_S_k_0_k304:
  for (int k304 = 0; k304 < 64; k304++) { // L9868
    float v7518 = v7509.read();           // v7509[k304];	// L9869
    float a296;                           // L9870
    a296 = v7518;                         // L9871
    float v7520 = v7510.read();           // v7510[k304];	// L9872
    float b296;                           // L9873
    b296 = v7520;                         // L9874
    float v7522 = a296;                   // L9875
    float v7523 = b296;                   // L9876
    float v7524 = v7522 * v7523;          // L9877
    float v7525 = v296;                   // L9878
    float v7526 = v7525 + v7524;          // L9879
    v296 = v7526;                         // L9880
    float v7527 = a296;                   // L9881
    v7511.write(v7527);                   // v7511[k304] = v7527;	// L9882
    float v7528 = b296;                   // L9883
    v7512.write(v7528);                   // v7512[k304] = v7528;	// L9884
  }
  float v7529 = v296;          // L9886
  v7513[v7514][v7515] = v7529; // L9887
}

void PE_kernel_YV_1_5(hls::stream<float> &v7530 /* v7530[64] */,
                      hls::stream<float> &v7531 /* v7531[64] */,
                      hls::stream<float> &v7532 /* v7532[64] */,
                      hls::stream<float> &v7533 /* v7533[64] */,
                      float v7534[8][8], int v7535,
                      int v7536) { // L9890
#pragma HLS stream variable = v7530 depth = 9
#pragma HLS stream variable = v7531 depth = 9
#pragma HLS stream variable = v7532 depth = 9
#pragma HLS stream variable = v7533 depth = 9
#pragma HLS array_partition variable = v7534 complete dim = 1
#pragma HLS array_partition variable = v7534 complete dim = 2

  float v297;      // L9893
  v297 = 0.000000; // L9894
l_S_k_0_k305:
  for (int k305 = 0; k305 < 64; k305++) { // L9895
    float v7539 = v7530.read();           // v7530[k305];	// L9896
    float a297;                           // L9897
    a297 = v7539;                         // L9898
    float v7541 = v7531.read();           // v7531[k305];	// L9899
    float b297;                           // L9900
    b297 = v7541;                         // L9901
    float v7543 = a297;                   // L9902
    float v7544 = b297;                   // L9903
    float v7545 = v7543 * v7544;          // L9904
    float v7546 = v297;                   // L9905
    float v7547 = v7546 + v7545;          // L9906
    v297 = v7547;                         // L9907
    float v7548 = a297;                   // L9908
    v7532.write(v7548);                   // v7532[k305] = v7548;	// L9909
    float v7549 = b297;                   // L9910
    v7533.write(v7549);                   // v7533[k305] = v7549;	// L9911
  }
  float v7550 = v297;          // L9913
  v7534[v7535][v7536] = v7550; // L9914
}

void PE_kernel_YV_2_5(hls::stream<float> &v7551 /* v7551[64] */,
                      hls::stream<float> &v7552 /* v7552[64] */,
                      hls::stream<float> &v7553 /* v7553[64] */,
                      hls::stream<float> &v7554 /* v7554[64] */,
                      float v7555[8][8], int v7556,
                      int v7557) { // L9917
#pragma HLS stream variable = v7551 depth = 9
#pragma HLS stream variable = v7552 depth = 9
#pragma HLS stream variable = v7553 depth = 9
#pragma HLS stream variable = v7554 depth = 9
#pragma HLS array_partition variable = v7555 complete dim = 1
#pragma HLS array_partition variable = v7555 complete dim = 2

  float v298;      // L9920
  v298 = 0.000000; // L9921
l_S_k_0_k306:
  for (int k306 = 0; k306 < 64; k306++) { // L9922
    float v7560 = v7551.read();           // v7551[k306];	// L9923
    float a298;                           // L9924
    a298 = v7560;                         // L9925
    float v7562 = v7552.read();           // v7552[k306];	// L9926
    float b298;                           // L9927
    b298 = v7562;                         // L9928
    float v7564 = a298;                   // L9929
    float v7565 = b298;                   // L9930
    float v7566 = v7564 * v7565;          // L9931
    float v7567 = v298;                   // L9932
    float v7568 = v7567 + v7566;          // L9933
    v298 = v7568;                         // L9934
    float v7569 = a298;                   // L9935
    v7553.write(v7569);                   // v7553[k306] = v7569;	// L9936
    float v7570 = b298;                   // L9937
    v7554.write(v7570);                   // v7554[k306] = v7570;	// L9938
  }
  float v7571 = v298;          // L9940
  v7555[v7556][v7557] = v7571; // L9941
}

void PE_kernel_YV_3_5(hls::stream<float> &v7572 /* v7572[64] */,
                      hls::stream<float> &v7573 /* v7573[64] */,
                      hls::stream<float> &v7574 /* v7574[64] */,
                      hls::stream<float> &v7575 /* v7575[64] */,
                      float v7576[8][8], int v7577,
                      int v7578) { // L9944
#pragma HLS stream variable = v7572 depth = 9
#pragma HLS stream variable = v7573 depth = 9
#pragma HLS stream variable = v7574 depth = 9
#pragma HLS stream variable = v7575 depth = 9
#pragma HLS array_partition variable = v7576 complete dim = 1
#pragma HLS array_partition variable = v7576 complete dim = 2

  float v299;      // L9947
  v299 = 0.000000; // L9948
l_S_k_0_k307:
  for (int k307 = 0; k307 < 64; k307++) { // L9949
    float v7581 = v7572.read();           // v7572[k307];	// L9950
    float a299;                           // L9951
    a299 = v7581;                         // L9952
    float v7583 = v7573.read();           // v7573[k307];	// L9953
    float b299;                           // L9954
    b299 = v7583;                         // L9955
    float v7585 = a299;                   // L9956
    float v7586 = b299;                   // L9957
    float v7587 = v7585 * v7586;          // L9958
    float v7588 = v299;                   // L9959
    float v7589 = v7588 + v7587;          // L9960
    v299 = v7589;                         // L9961
    float v7590 = a299;                   // L9962
    v7574.write(v7590);                   // v7574[k307] = v7590;	// L9963
    float v7591 = b299;                   // L9964
    v7575.write(v7591);                   // v7575[k307] = v7591;	// L9965
  }
  float v7592 = v299;          // L9967
  v7576[v7577][v7578] = v7592; // L9968
}

void PE_kernel_YV_4_5(hls::stream<float> &v7593 /* v7593[64] */,
                      hls::stream<float> &v7594 /* v7594[64] */,
                      hls::stream<float> &v7595 /* v7595[64] */,
                      hls::stream<float> &v7596 /* v7596[64] */,
                      float v7597[8][8], int v7598,
                      int v7599) { // L9971
#pragma HLS stream variable = v7593 depth = 9
#pragma HLS stream variable = v7594 depth = 9
#pragma HLS stream variable = v7595 depth = 9
#pragma HLS stream variable = v7596 depth = 9
#pragma HLS array_partition variable = v7597 complete dim = 1
#pragma HLS array_partition variable = v7597 complete dim = 2

  float v300;      // L9974
  v300 = 0.000000; // L9975
l_S_k_0_k308:
  for (int k308 = 0; k308 < 64; k308++) { // L9976
    float v7602 = v7593.read();           // v7593[k308];	// L9977
    float a300;                           // L9978
    a300 = v7602;                         // L9979
    float v7604 = v7594.read();           // v7594[k308];	// L9980
    float b300;                           // L9981
    b300 = v7604;                         // L9982
    float v7606 = a300;                   // L9983
    float v7607 = b300;                   // L9984
    float v7608 = v7606 * v7607;          // L9985
    float v7609 = v300;                   // L9986
    float v7610 = v7609 + v7608;          // L9987
    v300 = v7610;                         // L9988
    float v7611 = a300;                   // L9989
    v7595.write(v7611);                   // v7595[k308] = v7611;	// L9990
    float v7612 = b300;                   // L9991
    v7596.write(v7612);                   // v7596[k308] = v7612;	// L9992
  }
  float v7613 = v300;          // L9994
  v7597[v7598][v7599] = v7613; // L9995
}

void PE_kernel_YV_5_5(hls::stream<float> &v7614 /* v7614[64] */,
                      hls::stream<float> &v7615 /* v7615[64] */,
                      hls::stream<float> &v7616 /* v7616[64] */,
                      hls::stream<float> &v7617 /* v7617[64] */,
                      float v7618[8][8], int v7619,
                      int v7620) { // L9998
#pragma HLS stream variable = v7614 depth = 9
#pragma HLS stream variable = v7615 depth = 9
#pragma HLS stream variable = v7616 depth = 9
#pragma HLS stream variable = v7617 depth = 9
#pragma HLS array_partition variable = v7618 complete dim = 1
#pragma HLS array_partition variable = v7618 complete dim = 2

  float v301;      // L10001
  v301 = 0.000000; // L10002
l_S_k_0_k309:
  for (int k309 = 0; k309 < 64; k309++) { // L10003
    float v7623 = v7614.read();           // v7614[k309];	// L10004
    float a301;                           // L10005
    a301 = v7623;                         // L10006
    float v7625 = v7615.read();           // v7615[k309];	// L10007
    float b301;                           // L10008
    b301 = v7625;                         // L10009
    float v7627 = a301;                   // L10010
    float v7628 = b301;                   // L10011
    float v7629 = v7627 * v7628;          // L10012
    float v7630 = v301;                   // L10013
    float v7631 = v7630 + v7629;          // L10014
    v301 = v7631;                         // L10015
    float v7632 = a301;                   // L10016
    v7616.write(v7632);                   // v7616[k309] = v7632;	// L10017
    float v7633 = b301;                   // L10018
    v7617.write(v7633);                   // v7617[k309] = v7633;	// L10019
  }
  float v7634 = v301;          // L10021
  v7618[v7619][v7620] = v7634; // L10022
}

void PE_kernel_YV_6_5(hls::stream<float> &v7635 /* v7635[64] */,
                      hls::stream<float> &v7636 /* v7636[64] */,
                      hls::stream<float> &v7637 /* v7637[64] */,
                      hls::stream<float> &v7638 /* v7638[64] */,
                      float v7639[8][8], int v7640,
                      int v7641) { // L10025
#pragma HLS stream variable = v7635 depth = 9
#pragma HLS stream variable = v7636 depth = 9
#pragma HLS stream variable = v7637 depth = 9
#pragma HLS stream variable = v7638 depth = 9
#pragma HLS array_partition variable = v7639 complete dim = 1
#pragma HLS array_partition variable = v7639 complete dim = 2

  float v302;      // L10028
  v302 = 0.000000; // L10029
l_S_k_0_k310:
  for (int k310 = 0; k310 < 64; k310++) { // L10030
    float v7644 = v7635.read();           // v7635[k310];	// L10031
    float a302;                           // L10032
    a302 = v7644;                         // L10033
    float v7646 = v7636.read();           // v7636[k310];	// L10034
    float b302;                           // L10035
    b302 = v7646;                         // L10036
    float v7648 = a302;                   // L10037
    float v7649 = b302;                   // L10038
    float v7650 = v7648 * v7649;          // L10039
    float v7651 = v302;                   // L10040
    float v7652 = v7651 + v7650;          // L10041
    v302 = v7652;                         // L10042
    float v7653 = a302;                   // L10043
    v7637.write(v7653);                   // v7637[k310] = v7653;	// L10044
    float v7654 = b302;                   // L10045
    v7638.write(v7654);                   // v7638[k310] = v7654;	// L10046
  }
  float v7655 = v302;          // L10048
  v7639[v7640][v7641] = v7655; // L10049
}

void PE_kernel_YV_7_5(hls::stream<float> &v7656 /* v7656[64] */,
                      hls::stream<float> &v7657 /* v7657[64] */,
                      hls::stream<float> &v7658 /* v7658[64] */,
                      hls::stream<float> &v7659 /* v7659[64] */,
                      float v7660[8][8], int v7661,
                      int v7662) { // L10052
#pragma HLS stream variable = v7656 depth = 9
#pragma HLS stream variable = v7657 depth = 9
#pragma HLS stream variable = v7658 depth = 9
#pragma HLS stream variable = v7659 depth = 9
#pragma HLS array_partition variable = v7660 complete dim = 1
#pragma HLS array_partition variable = v7660 complete dim = 2

  float v303;      // L10055
  v303 = 0.000000; // L10056
l_S_k_0_k311:
  for (int k311 = 0; k311 < 64; k311++) { // L10057
    float v7665 = v7656.read();           // v7656[k311];	// L10058
    float a303;                           // L10059
    a303 = v7665;                         // L10060
    float v7667 = v7657.read();           // v7657[k311];	// L10061
    float b303;                           // L10062
    b303 = v7667;                         // L10063
    float v7669 = a303;                   // L10064
    float v7670 = b303;                   // L10065
    float v7671 = v7669 * v7670;          // L10066
    float v7672 = v303;                   // L10067
    float v7673 = v7672 + v7671;          // L10068
    v303 = v7673;                         // L10069
    float v7674 = a303;                   // L10070
    v7658.write(v7674);                   // v7658[k311] = v7674;	// L10071
    float v7675 = b303;                   // L10072
    v7659.write(v7675);                   // v7659[k311] = v7675;	// L10073
  }
  float v7676 = v303;          // L10075
  v7660[v7661][v7662] = v7676; // L10076
}

void PE_kernel_YV_0_6(hls::stream<float> &v7677 /* v7677[64] */,
                      hls::stream<float> &v7678 /* v7678[64] */,
                      hls::stream<float> &v7679 /* v7679[64] */,
                      hls::stream<float> &v7680 /* v7680[64] */,
                      float v7681[8][8], int v7682,
                      int v7683) { // L10079
#pragma HLS stream variable = v7677 depth = 9
#pragma HLS stream variable = v7678 depth = 9
#pragma HLS stream variable = v7679 depth = 9
#pragma HLS stream variable = v7680 depth = 9
#pragma HLS array_partition variable = v7681 complete dim = 1
#pragma HLS array_partition variable = v7681 complete dim = 2

  float v304;      // L10082
  v304 = 0.000000; // L10083
l_S_k_0_k312:
  for (int k312 = 0; k312 < 64; k312++) { // L10084
    float v7686 = v7677.read();           // v7677[k312];	// L10085
    float a304;                           // L10086
    a304 = v7686;                         // L10087
    float v7688 = v7678.read();           // v7678[k312];	// L10088
    float b304;                           // L10089
    b304 = v7688;                         // L10090
    float v7690 = a304;                   // L10091
    float v7691 = b304;                   // L10092
    float v7692 = v7690 * v7691;          // L10093
    float v7693 = v304;                   // L10094
    float v7694 = v7693 + v7692;          // L10095
    v304 = v7694;                         // L10096
    float v7695 = a304;                   // L10097
    v7679.write(v7695);                   // v7679[k312] = v7695;	// L10098
    float v7696 = b304;                   // L10099
    v7680.write(v7696);                   // v7680[k312] = v7696;	// L10100
  }
  float v7697 = v304;          // L10102
  v7681[v7682][v7683] = v7697; // L10103
}

void PE_kernel_YV_1_6(hls::stream<float> &v7698 /* v7698[64] */,
                      hls::stream<float> &v7699 /* v7699[64] */,
                      hls::stream<float> &v7700 /* v7700[64] */,
                      hls::stream<float> &v7701 /* v7701[64] */,
                      float v7702[8][8], int v7703,
                      int v7704) { // L10106
#pragma HLS stream variable = v7698 depth = 9
#pragma HLS stream variable = v7699 depth = 9
#pragma HLS stream variable = v7700 depth = 9
#pragma HLS stream variable = v7701 depth = 9
#pragma HLS array_partition variable = v7702 complete dim = 1
#pragma HLS array_partition variable = v7702 complete dim = 2

  float v305;      // L10109
  v305 = 0.000000; // L10110
l_S_k_0_k313:
  for (int k313 = 0; k313 < 64; k313++) { // L10111
    float v7707 = v7698.read();           // v7698[k313];	// L10112
    float a305;                           // L10113
    a305 = v7707;                         // L10114
    float v7709 = v7699.read();           // v7699[k313];	// L10115
    float b305;                           // L10116
    b305 = v7709;                         // L10117
    float v7711 = a305;                   // L10118
    float v7712 = b305;                   // L10119
    float v7713 = v7711 * v7712;          // L10120
    float v7714 = v305;                   // L10121
    float v7715 = v7714 + v7713;          // L10122
    v305 = v7715;                         // L10123
    float v7716 = a305;                   // L10124
    v7700.write(v7716);                   // v7700[k313] = v7716;	// L10125
    float v7717 = b305;                   // L10126
    v7701.write(v7717);                   // v7701[k313] = v7717;	// L10127
  }
  float v7718 = v305;          // L10129
  v7702[v7703][v7704] = v7718; // L10130
}

void PE_kernel_YV_2_6(hls::stream<float> &v7719 /* v7719[64] */,
                      hls::stream<float> &v7720 /* v7720[64] */,
                      hls::stream<float> &v7721 /* v7721[64] */,
                      hls::stream<float> &v7722 /* v7722[64] */,
                      float v7723[8][8], int v7724,
                      int v7725) { // L10133
#pragma HLS stream variable = v7719 depth = 9
#pragma HLS stream variable = v7720 depth = 9
#pragma HLS stream variable = v7721 depth = 9
#pragma HLS stream variable = v7722 depth = 9
#pragma HLS array_partition variable = v7723 complete dim = 1
#pragma HLS array_partition variable = v7723 complete dim = 2

  float v306;      // L10136
  v306 = 0.000000; // L10137
l_S_k_0_k314:
  for (int k314 = 0; k314 < 64; k314++) { // L10138
    float v7728 = v7719.read();           // v7719[k314];	// L10139
    float a306;                           // L10140
    a306 = v7728;                         // L10141
    float v7730 = v7720.read();           // v7720[k314];	// L10142
    float b306;                           // L10143
    b306 = v7730;                         // L10144
    float v7732 = a306;                   // L10145
    float v7733 = b306;                   // L10146
    float v7734 = v7732 * v7733;          // L10147
    float v7735 = v306;                   // L10148
    float v7736 = v7735 + v7734;          // L10149
    v306 = v7736;                         // L10150
    float v7737 = a306;                   // L10151
    v7721.write(v7737);                   // v7721[k314] = v7737;	// L10152
    float v7738 = b306;                   // L10153
    v7722.write(v7738);                   // v7722[k314] = v7738;	// L10154
  }
  float v7739 = v306;          // L10156
  v7723[v7724][v7725] = v7739; // L10157
}

void PE_kernel_YV_3_6(hls::stream<float> &v7740 /* v7740[64] */,
                      hls::stream<float> &v7741 /* v7741[64] */,
                      hls::stream<float> &v7742 /* v7742[64] */,
                      hls::stream<float> &v7743 /* v7743[64] */,
                      float v7744[8][8], int v7745,
                      int v7746) { // L10160
#pragma HLS stream variable = v7740 depth = 9
#pragma HLS stream variable = v7741 depth = 9
#pragma HLS stream variable = v7742 depth = 9
#pragma HLS stream variable = v7743 depth = 9
#pragma HLS array_partition variable = v7744 complete dim = 1
#pragma HLS array_partition variable = v7744 complete dim = 2

  float v307;      // L10163
  v307 = 0.000000; // L10164
l_S_k_0_k315:
  for (int k315 = 0; k315 < 64; k315++) { // L10165
    float v7749 = v7740.read();           // v7740[k315];	// L10166
    float a307;                           // L10167
    a307 = v7749;                         // L10168
    float v7751 = v7741.read();           // v7741[k315];	// L10169
    float b307;                           // L10170
    b307 = v7751;                         // L10171
    float v7753 = a307;                   // L10172
    float v7754 = b307;                   // L10173
    float v7755 = v7753 * v7754;          // L10174
    float v7756 = v307;                   // L10175
    float v7757 = v7756 + v7755;          // L10176
    v307 = v7757;                         // L10177
    float v7758 = a307;                   // L10178
    v7742.write(v7758);                   // v7742[k315] = v7758;	// L10179
    float v7759 = b307;                   // L10180
    v7743.write(v7759);                   // v7743[k315] = v7759;	// L10181
  }
  float v7760 = v307;          // L10183
  v7744[v7745][v7746] = v7760; // L10184
}

void PE_kernel_YV_4_6(hls::stream<float> &v7761 /* v7761[64] */,
                      hls::stream<float> &v7762 /* v7762[64] */,
                      hls::stream<float> &v7763 /* v7763[64] */,
                      hls::stream<float> &v7764 /* v7764[64] */,
                      float v7765[8][8], int v7766,
                      int v7767) { // L10187
#pragma HLS stream variable = v7761 depth = 9
#pragma HLS stream variable = v7762 depth = 9
#pragma HLS stream variable = v7763 depth = 9
#pragma HLS stream variable = v7764 depth = 9
#pragma HLS array_partition variable = v7765 complete dim = 1
#pragma HLS array_partition variable = v7765 complete dim = 2

  float v308;      // L10190
  v308 = 0.000000; // L10191
l_S_k_0_k316:
  for (int k316 = 0; k316 < 64; k316++) { // L10192
    float v7770 = v7761.read();           // v7761[k316];	// L10193
    float a308;                           // L10194
    a308 = v7770;                         // L10195
    float v7772 = v7762.read();           // v7762[k316];	// L10196
    float b308;                           // L10197
    b308 = v7772;                         // L10198
    float v7774 = a308;                   // L10199
    float v7775 = b308;                   // L10200
    float v7776 = v7774 * v7775;          // L10201
    float v7777 = v308;                   // L10202
    float v7778 = v7777 + v7776;          // L10203
    v308 = v7778;                         // L10204
    float v7779 = a308;                   // L10205
    v7763.write(v7779);                   // v7763[k316] = v7779;	// L10206
    float v7780 = b308;                   // L10207
    v7764.write(v7780);                   // v7764[k316] = v7780;	// L10208
  }
  float v7781 = v308;          // L10210
  v7765[v7766][v7767] = v7781; // L10211
}

void PE_kernel_YV_5_6(hls::stream<float> &v7782 /* v7782[64] */,
                      hls::stream<float> &v7783 /* v7783[64] */,
                      hls::stream<float> &v7784 /* v7784[64] */,
                      hls::stream<float> &v7785 /* v7785[64] */,
                      float v7786[8][8], int v7787,
                      int v7788) { // L10214
#pragma HLS stream variable = v7782 depth = 9
#pragma HLS stream variable = v7783 depth = 9
#pragma HLS stream variable = v7784 depth = 9
#pragma HLS stream variable = v7785 depth = 9
#pragma HLS array_partition variable = v7786 complete dim = 1
#pragma HLS array_partition variable = v7786 complete dim = 2

  float v309;      // L10217
  v309 = 0.000000; // L10218
l_S_k_0_k317:
  for (int k317 = 0; k317 < 64; k317++) { // L10219
    float v7791 = v7782.read();           // v7782[k317];	// L10220
    float a309;                           // L10221
    a309 = v7791;                         // L10222
    float v7793 = v7783.read();           // v7783[k317];	// L10223
    float b309;                           // L10224
    b309 = v7793;                         // L10225
    float v7795 = a309;                   // L10226
    float v7796 = b309;                   // L10227
    float v7797 = v7795 * v7796;          // L10228
    float v7798 = v309;                   // L10229
    float v7799 = v7798 + v7797;          // L10230
    v309 = v7799;                         // L10231
    float v7800 = a309;                   // L10232
    v7784.write(v7800);                   // v7784[k317] = v7800;	// L10233
    float v7801 = b309;                   // L10234
    v7785.write(v7801);                   // v7785[k317] = v7801;	// L10235
  }
  float v7802 = v309;          // L10237
  v7786[v7787][v7788] = v7802; // L10238
}

void PE_kernel_YV_6_6(hls::stream<float> &v7803 /* v7803[64] */,
                      hls::stream<float> &v7804 /* v7804[64] */,
                      hls::stream<float> &v7805 /* v7805[64] */,
                      hls::stream<float> &v7806 /* v7806[64] */,
                      float v7807[8][8], int v7808,
                      int v7809) { // L10241
#pragma HLS stream variable = v7803 depth = 9
#pragma HLS stream variable = v7804 depth = 9
#pragma HLS stream variable = v7805 depth = 9
#pragma HLS stream variable = v7806 depth = 9
#pragma HLS array_partition variable = v7807 complete dim = 1
#pragma HLS array_partition variable = v7807 complete dim = 2

  float v310;      // L10244
  v310 = 0.000000; // L10245
l_S_k_0_k318:
  for (int k318 = 0; k318 < 64; k318++) { // L10246
    float v7812 = v7803.read();           // v7803[k318];	// L10247
    float a310;                           // L10248
    a310 = v7812;                         // L10249
    float v7814 = v7804.read();           // v7804[k318];	// L10250
    float b310;                           // L10251
    b310 = v7814;                         // L10252
    float v7816 = a310;                   // L10253
    float v7817 = b310;                   // L10254
    float v7818 = v7816 * v7817;          // L10255
    float v7819 = v310;                   // L10256
    float v7820 = v7819 + v7818;          // L10257
    v310 = v7820;                         // L10258
    float v7821 = a310;                   // L10259
    v7805.write(v7821);                   // v7805[k318] = v7821;	// L10260
    float v7822 = b310;                   // L10261
    v7806.write(v7822);                   // v7806[k318] = v7822;	// L10262
  }
  float v7823 = v310;          // L10264
  v7807[v7808][v7809] = v7823; // L10265
}

void PE_kernel_YV_7_6(hls::stream<float> &v7824 /* v7824[64] */,
                      hls::stream<float> &v7825 /* v7825[64] */,
                      hls::stream<float> &v7826 /* v7826[64] */,
                      hls::stream<float> &v7827 /* v7827[64] */,
                      float v7828[8][8], int v7829,
                      int v7830) { // L10268
#pragma HLS stream variable = v7824 depth = 9
#pragma HLS stream variable = v7825 depth = 9
#pragma HLS stream variable = v7826 depth = 9
#pragma HLS stream variable = v7827 depth = 9
#pragma HLS array_partition variable = v7828 complete dim = 1
#pragma HLS array_partition variable = v7828 complete dim = 2

  float v311;      // L10271
  v311 = 0.000000; // L10272
l_S_k_0_k319:
  for (int k319 = 0; k319 < 64; k319++) { // L10273
    float v7833 = v7824.read();           // v7824[k319];	// L10274
    float a311;                           // L10275
    a311 = v7833;                         // L10276
    float v7835 = v7825.read();           // v7825[k319];	// L10277
    float b311;                           // L10278
    b311 = v7835;                         // L10279
    float v7837 = a311;                   // L10280
    float v7838 = b311;                   // L10281
    float v7839 = v7837 * v7838;          // L10282
    float v7840 = v311;                   // L10283
    float v7841 = v7840 + v7839;          // L10284
    v311 = v7841;                         // L10285
    float v7842 = a311;                   // L10286
    v7826.write(v7842);                   // v7826[k319] = v7842;	// L10287
    float v7843 = b311;                   // L10288
    v7827.write(v7843);                   // v7827[k319] = v7843;	// L10289
  }
  float v7844 = v311;          // L10291
  v7828[v7829][v7830] = v7844; // L10292
}

void PE_kernel_YV_0_7(hls::stream<float> &v7845 /* v7845[64] */,
                      hls::stream<float> &v7846 /* v7846[64] */,
                      hls::stream<float> &v7847 /* v7847[64] */,
                      hls::stream<float> &v7848 /* v7848[64] */,
                      float v7849[8][8], int v7850,
                      int v7851) { // L10295
#pragma HLS stream variable = v7845 depth = 9
#pragma HLS stream variable = v7846 depth = 9
#pragma HLS stream variable = v7847 depth = 9
#pragma HLS stream variable = v7848 depth = 9
#pragma HLS array_partition variable = v7849 complete dim = 1
#pragma HLS array_partition variable = v7849 complete dim = 2

  float v312;      // L10298
  v312 = 0.000000; // L10299
l_S_k_0_k320:
  for (int k320 = 0; k320 < 64; k320++) { // L10300
    float v7854 = v7845.read();           // v7845[k320];	// L10301
    float a312;                           // L10302
    a312 = v7854;                         // L10303
    float v7856 = v7846.read();           // v7846[k320];	// L10304
    float b312;                           // L10305
    b312 = v7856;                         // L10306
    float v7858 = a312;                   // L10307
    float v7859 = b312;                   // L10308
    float v7860 = v7858 * v7859;          // L10309
    float v7861 = v312;                   // L10310
    float v7862 = v7861 + v7860;          // L10311
    v312 = v7862;                         // L10312
    float v7863 = a312;                   // L10313
    v7847.write(v7863);                   // v7847[k320] = v7863;	// L10314
    float v7864 = b312;                   // L10315
    v7848.write(v7864);                   // v7848[k320] = v7864;	// L10316
  }
  float v7865 = v312;          // L10318
  v7849[v7850][v7851] = v7865; // L10319
}

void PE_kernel_YV_1_7(hls::stream<float> &v7866 /* v7866[64] */,
                      hls::stream<float> &v7867 /* v7867[64] */,
                      hls::stream<float> &v7868 /* v7868[64] */,
                      hls::stream<float> &v7869 /* v7869[64] */,
                      float v7870[8][8], int v7871,
                      int v7872) { // L10322
#pragma HLS stream variable = v7866 depth = 9
#pragma HLS stream variable = v7867 depth = 9
#pragma HLS stream variable = v7868 depth = 9
#pragma HLS stream variable = v7869 depth = 9
#pragma HLS array_partition variable = v7870 complete dim = 1
#pragma HLS array_partition variable = v7870 complete dim = 2

  float v313;      // L10325
  v313 = 0.000000; // L10326
l_S_k_0_k321:
  for (int k321 = 0; k321 < 64; k321++) { // L10327
    float v7875 = v7866.read();           // v7866[k321];	// L10328
    float a313;                           // L10329
    a313 = v7875;                         // L10330
    float v7877 = v7867.read();           // v7867[k321];	// L10331
    float b313;                           // L10332
    b313 = v7877;                         // L10333
    float v7879 = a313;                   // L10334
    float v7880 = b313;                   // L10335
    float v7881 = v7879 * v7880;          // L10336
    float v7882 = v313;                   // L10337
    float v7883 = v7882 + v7881;          // L10338
    v313 = v7883;                         // L10339
    float v7884 = a313;                   // L10340
    v7868.write(v7884);                   // v7868[k321] = v7884;	// L10341
    float v7885 = b313;                   // L10342
    v7869.write(v7885);                   // v7869[k321] = v7885;	// L10343
  }
  float v7886 = v313;          // L10345
  v7870[v7871][v7872] = v7886; // L10346
}

void PE_kernel_YV_2_7(hls::stream<float> &v7887 /* v7887[64] */,
                      hls::stream<float> &v7888 /* v7888[64] */,
                      hls::stream<float> &v7889 /* v7889[64] */,
                      hls::stream<float> &v7890 /* v7890[64] */,
                      float v7891[8][8], int v7892,
                      int v7893) { // L10349
#pragma HLS stream variable = v7887 depth = 9
#pragma HLS stream variable = v7888 depth = 9
#pragma HLS stream variable = v7889 depth = 9
#pragma HLS stream variable = v7890 depth = 9
#pragma HLS array_partition variable = v7891 complete dim = 1
#pragma HLS array_partition variable = v7891 complete dim = 2

  float v314;      // L10352
  v314 = 0.000000; // L10353
l_S_k_0_k322:
  for (int k322 = 0; k322 < 64; k322++) { // L10354
    float v7896 = v7887.read();           // v7887[k322];	// L10355
    float a314;                           // L10356
    a314 = v7896;                         // L10357
    float v7898 = v7888.read();           // v7888[k322];	// L10358
    float b314;                           // L10359
    b314 = v7898;                         // L10360
    float v7900 = a314;                   // L10361
    float v7901 = b314;                   // L10362
    float v7902 = v7900 * v7901;          // L10363
    float v7903 = v314;                   // L10364
    float v7904 = v7903 + v7902;          // L10365
    v314 = v7904;                         // L10366
    float v7905 = a314;                   // L10367
    v7889.write(v7905);                   // v7889[k322] = v7905;	// L10368
    float v7906 = b314;                   // L10369
    v7890.write(v7906);                   // v7890[k322] = v7906;	// L10370
  }
  float v7907 = v314;          // L10372
  v7891[v7892][v7893] = v7907; // L10373
}

void PE_kernel_YV_3_7(hls::stream<float> &v7908 /* v7908[64] */,
                      hls::stream<float> &v7909 /* v7909[64] */,
                      hls::stream<float> &v7910 /* v7910[64] */,
                      hls::stream<float> &v7911 /* v7911[64] */,
                      float v7912[8][8], int v7913,
                      int v7914) { // L10376
#pragma HLS stream variable = v7908 depth = 9
#pragma HLS stream variable = v7909 depth = 9
#pragma HLS stream variable = v7910 depth = 9
#pragma HLS stream variable = v7911 depth = 9
#pragma HLS array_partition variable = v7912 complete dim = 1
#pragma HLS array_partition variable = v7912 complete dim = 2

  float v315;      // L10379
  v315 = 0.000000; // L10380
l_S_k_0_k323:
  for (int k323 = 0; k323 < 64; k323++) { // L10381
    float v7917 = v7908.read();           // v7908[k323];	// L10382
    float a315;                           // L10383
    a315 = v7917;                         // L10384
    float v7919 = v7909.read();           // v7909[k323];	// L10385
    float b315;                           // L10386
    b315 = v7919;                         // L10387
    float v7921 = a315;                   // L10388
    float v7922 = b315;                   // L10389
    float v7923 = v7921 * v7922;          // L10390
    float v7924 = v315;                   // L10391
    float v7925 = v7924 + v7923;          // L10392
    v315 = v7925;                         // L10393
    float v7926 = a315;                   // L10394
    v7910.write(v7926);                   // v7910[k323] = v7926;	// L10395
    float v7927 = b315;                   // L10396
    v7911.write(v7927);                   // v7911[k323] = v7927;	// L10397
  }
  float v7928 = v315;          // L10399
  v7912[v7913][v7914] = v7928; // L10400
}

void PE_kernel_YV_4_7(hls::stream<float> &v7929 /* v7929[64] */,
                      hls::stream<float> &v7930 /* v7930[64] */,
                      hls::stream<float> &v7931 /* v7931[64] */,
                      hls::stream<float> &v7932 /* v7932[64] */,
                      float v7933[8][8], int v7934,
                      int v7935) { // L10403
#pragma HLS stream variable = v7929 depth = 9
#pragma HLS stream variable = v7930 depth = 9
#pragma HLS stream variable = v7931 depth = 9
#pragma HLS stream variable = v7932 depth = 9
#pragma HLS array_partition variable = v7933 complete dim = 1
#pragma HLS array_partition variable = v7933 complete dim = 2

  float v316;      // L10406
  v316 = 0.000000; // L10407
l_S_k_0_k324:
  for (int k324 = 0; k324 < 64; k324++) { // L10408
    float v7938 = v7929.read();           // v7929[k324];	// L10409
    float a316;                           // L10410
    a316 = v7938;                         // L10411
    float v7940 = v7930.read();           // v7930[k324];	// L10412
    float b316;                           // L10413
    b316 = v7940;                         // L10414
    float v7942 = a316;                   // L10415
    float v7943 = b316;                   // L10416
    float v7944 = v7942 * v7943;          // L10417
    float v7945 = v316;                   // L10418
    float v7946 = v7945 + v7944;          // L10419
    v316 = v7946;                         // L10420
    float v7947 = a316;                   // L10421
    v7931.write(v7947);                   // v7931[k324] = v7947;	// L10422
    float v7948 = b316;                   // L10423
    v7932.write(v7948);                   // v7932[k324] = v7948;	// L10424
  }
  float v7949 = v316;          // L10426
  v7933[v7934][v7935] = v7949; // L10427
}

void PE_kernel_YV_5_7(hls::stream<float> &v7950 /* v7950[64] */,
                      hls::stream<float> &v7951 /* v7951[64] */,
                      hls::stream<float> &v7952 /* v7952[64] */,
                      hls::stream<float> &v7953 /* v7953[64] */,
                      float v7954[8][8], int v7955,
                      int v7956) { // L10430
#pragma HLS stream variable = v7950 depth = 9
#pragma HLS stream variable = v7951 depth = 9
#pragma HLS stream variable = v7952 depth = 9
#pragma HLS stream variable = v7953 depth = 9
#pragma HLS array_partition variable = v7954 complete dim = 1
#pragma HLS array_partition variable = v7954 complete dim = 2

  float v317;      // L10433
  v317 = 0.000000; // L10434
l_S_k_0_k325:
  for (int k325 = 0; k325 < 64; k325++) { // L10435
    float v7959 = v7950.read();           // v7950[k325];	// L10436
    float a317;                           // L10437
    a317 = v7959;                         // L10438
    float v7961 = v7951.read();           // v7951[k325];	// L10439
    float b317;                           // L10440
    b317 = v7961;                         // L10441
    float v7963 = a317;                   // L10442
    float v7964 = b317;                   // L10443
    float v7965 = v7963 * v7964;          // L10444
    float v7966 = v317;                   // L10445
    float v7967 = v7966 + v7965;          // L10446
    v317 = v7967;                         // L10447
    float v7968 = a317;                   // L10448
    v7952.write(v7968);                   // v7952[k325] = v7968;	// L10449
    float v7969 = b317;                   // L10450
    v7953.write(v7969);                   // v7953[k325] = v7969;	// L10451
  }
  float v7970 = v317;          // L10453
  v7954[v7955][v7956] = v7970; // L10454
}

void PE_kernel_YV_6_7(hls::stream<float> &v7971 /* v7971[64] */,
                      hls::stream<float> &v7972 /* v7972[64] */,
                      hls::stream<float> &v7973 /* v7973[64] */,
                      hls::stream<float> &v7974 /* v7974[64] */,
                      float v7975[8][8], int v7976,
                      int v7977) { // L10457
#pragma HLS stream variable = v7971 depth = 9
#pragma HLS stream variable = v7972 depth = 9
#pragma HLS stream variable = v7973 depth = 9
#pragma HLS stream variable = v7974 depth = 9
#pragma HLS array_partition variable = v7975 complete dim = 1
#pragma HLS array_partition variable = v7975 complete dim = 2

  float v318;      // L10460
  v318 = 0.000000; // L10461
l_S_k_0_k326:
  for (int k326 = 0; k326 < 64; k326++) { // L10462
    float v7980 = v7971.read();           // v7971[k326];	// L10463
    float a318;                           // L10464
    a318 = v7980;                         // L10465
    float v7982 = v7972.read();           // v7972[k326];	// L10466
    float b318;                           // L10467
    b318 = v7982;                         // L10468
    float v7984 = a318;                   // L10469
    float v7985 = b318;                   // L10470
    float v7986 = v7984 * v7985;          // L10471
    float v7987 = v318;                   // L10472
    float v7988 = v7987 + v7986;          // L10473
    v318 = v7988;                         // L10474
    float v7989 = a318;                   // L10475
    v7973.write(v7989);                   // v7973[k326] = v7989;	// L10476
    float v7990 = b318;                   // L10477
    v7974.write(v7990);                   // v7974[k326] = v7990;	// L10478
  }
  float v7991 = v318;          // L10480
  v7975[v7976][v7977] = v7991; // L10481
}

void PE_kernel_YV_7_7(hls::stream<float> &v7992 /* v7992[64] */,
                      hls::stream<float> &v7993 /* v7993[64] */,
                      hls::stream<float> &v7994 /* v7994[64] */,
                      hls::stream<float> &v7995 /* v7995[64] */,
                      float v7996[8][8], int v7997,
                      int v7998) { // L10484
#pragma HLS stream variable = v7992 depth = 9
#pragma HLS stream variable = v7993 depth = 9
#pragma HLS stream variable = v7994 depth = 9
#pragma HLS stream variable = v7995 depth = 9
#pragma HLS array_partition variable = v7996 complete dim = 1
#pragma HLS array_partition variable = v7996 complete dim = 2

  float v319;      // L10487
  v319 = 0.000000; // L10488
l_S_k_0_k327:
  for (int k327 = 0; k327 < 64; k327++) { // L10489
    float v8001 = v7992.read();           // v7992[k327];	// L10490
    float a319;                           // L10491
    a319 = v8001;                         // L10492
    float v8003 = v7993.read();           // v7993[k327];	// L10493
    float b319;                           // L10494
    b319 = v8003;                         // L10495
    float v8005 = a319;                   // L10496
    float v8006 = b319;                   // L10497
    float v8007 = v8005 * v8006;          // L10498
    float v8008 = v319;                   // L10499
    float v8009 = v8008 + v8007;          // L10500
    v319 = v8009;                         // L10501
    float v8010 = a319;                   // L10502
    v7994.write(v8010);                   // v7994[k327] = v8010;	// L10503
    float v8011 = b319;                   // L10504
    v7995.write(v8011);                   // v7995[k327] = v8011;	// L10505
  }
  float v8012 = v319;          // L10507
  v7996[v7997][v7998] = v8012; // L10508
}

void systolic_tile_YV(float v8013[8][64], float v8014[64][8],
                      float v8015[8][8]) { // L10511
#pragma HLS dataflow
#pragma HLS array_partition variable = v8013 complete dim = 1

#pragma HLS array_partition variable = v8014 complete dim = 2

#pragma HLS array_partition variable = v8015 complete dim = 1
#pragma HLS array_partition variable = v8015 complete dim = 2

  hls::stream<float> A_fifo4[8][9] /* A_fifo4[8][9][64] */; // L10512
#pragma HLS stream variable = A_fifo4 depth = 9
  hls::stream<float> B_fifo4[8][9] /* B_fifo4[8][9][64] */; // L10513
#pragma HLS stream variable = B_fifo4 depth = 9
  float A_drain4[8]; // L10514
  float B_drain4[8]; // L10515
l_data_load_k328:
  for (int k328 = 0; k328 < 64; k328++) { // L10516
  l_S_m_0_m8:
    for (int m8 = 0; m8 < 8; m8++) { // L10517
      float v8022 = v8013[m8][k328]; // L10518
      A_fifo4[m8][0].write(
          v8022); // A_fifo4[m8][0][k328] = v8022;	// L10519
    }
  l_S_n_1_n8:
    for (int n8 = 0; n8 < 8; n8++) { // L10521
      float v8024 = v8014[k328][n8]; // L10522
      B_fifo4[n8][0].write(
          v8024); // B_fifo4[n8][0][k328] = v8024;	// L10523
    }
  }
  hls::stream<float> &v8025 /* v8025[64] */ = A_fifo4[0][0]; // L10527
  hls::stream<float> &v8026 /* v8026[64] */ = B_fifo4[0][0]; // L10528
  hls::stream<float> &v8027 /* v8027[64] */ = A_fifo4[0][1]; // L10534
  hls::stream<float> &v8028 /* v8028[64] */ = B_fifo4[0][1]; // L10535
  PE_kernel_YV_0_0(v8025, v8026, v8027, v8028, v8015, 0, 0); // L10536
  hls::stream<float> &v8029 /* v8029[64] */ = A_fifo4[0][1]; // L10538
  hls::stream<float> &v8030 /* v8030[64] */ = B_fifo4[1][0]; // L10539
  hls::stream<float> &v8031 /* v8031[64] */ = A_fifo4[0][2]; // L10543
  hls::stream<float> &v8032 /* v8032[64] */ = B_fifo4[1][1]; // L10544
  PE_kernel_YV_1_0(v8029, v8030, v8031, v8032, v8015, 0, 1); // L10545
  hls::stream<float> &v8033 /* v8033[64] */ = A_fifo4[0][2]; // L10547
  hls::stream<float> &v8034 /* v8034[64] */ = B_fifo4[2][0]; // L10548
  hls::stream<float> &v8035 /* v8035[64] */ = A_fifo4[0][3]; // L10552
  hls::stream<float> &v8036 /* v8036[64] */ = B_fifo4[2][1]; // L10553
  PE_kernel_YV_2_0(v8033, v8034, v8035, v8036, v8015, 0, 2); // L10554
  hls::stream<float> &v8037 /* v8037[64] */ = A_fifo4[0][3]; // L10556
  hls::stream<float> &v8038 /* v8038[64] */ = B_fifo4[3][0]; // L10557
  hls::stream<float> &v8039 /* v8039[64] */ = A_fifo4[0][4]; // L10561
  hls::stream<float> &v8040 /* v8040[64] */ = B_fifo4[3][1]; // L10562
  PE_kernel_YV_3_0(v8037, v8038, v8039, v8040, v8015, 0, 3); // L10563
  hls::stream<float> &v8041 /* v8041[64] */ = A_fifo4[0][4]; // L10565
  hls::stream<float> &v8042 /* v8042[64] */ = B_fifo4[4][0]; // L10566
  hls::stream<float> &v8043 /* v8043[64] */ = A_fifo4[0][5]; // L10570
  hls::stream<float> &v8044 /* v8044[64] */ = B_fifo4[4][1]; // L10571
  PE_kernel_YV_4_0(v8041, v8042, v8043, v8044, v8015, 0, 4); // L10572
  hls::stream<float> &v8045 /* v8045[64] */ = A_fifo4[0][5]; // L10574
  hls::stream<float> &v8046 /* v8046[64] */ = B_fifo4[5][0]; // L10575
  hls::stream<float> &v8047 /* v8047[64] */ = A_fifo4[0][6]; // L10579
  hls::stream<float> &v8048 /* v8048[64] */ = B_fifo4[5][1]; // L10580
  PE_kernel_YV_5_0(v8045, v8046, v8047, v8048, v8015, 0, 5); // L10581
  hls::stream<float> &v8049 /* v8049[64] */ = A_fifo4[0][6]; // L10583
  hls::stream<float> &v8050 /* v8050[64] */ = B_fifo4[6][0]; // L10584
  hls::stream<float> &v8051 /* v8051[64] */ = A_fifo4[0][7]; // L10588
  hls::stream<float> &v8052 /* v8052[64] */ = B_fifo4[6][1]; // L10589
  PE_kernel_YV_6_0(v8049, v8050, v8051, v8052, v8015, 0, 6); // L10590
  hls::stream<float> &v8053 /* v8053[64] */ = A_fifo4[0][7]; // L10592
  hls::stream<float> &v8054 /* v8054[64] */ = B_fifo4[7][0]; // L10593
  hls::stream<float> &v8055 /* v8055[64] */ = A_fifo4[0][8]; // L10597
  hls::stream<float> &v8056 /* v8056[64] */ = B_fifo4[7][1]; // L10598
  PE_kernel_YV_7_0(v8053, v8054, v8055, v8056, v8015, 0, 7); // L10599
  hls::stream<float> &v8057 /* v8057[64] */ = A_fifo4[1][0]; // L10600
  hls::stream<float> &v8058 /* v8058[64] */ = B_fifo4[0][1]; // L10601
  hls::stream<float> &v8059 /* v8059[64] */ = A_fifo4[1][1]; // L10602
  hls::stream<float> &v8060 /* v8060[64] */ = B_fifo4[0][2]; // L10603
  PE_kernel_YV_0_1(v8057, v8058, v8059, v8060, v8015, 1, 0); // L10604
  hls::stream<float> &v8061 /* v8061[64] */ = A_fifo4[1][1]; // L10605
  hls::stream<float> &v8062 /* v8062[64] */ = B_fifo4[1][1]; // L10606
  hls::stream<float> &v8063 /* v8063[64] */ = A_fifo4[1][2]; // L10607
  hls::stream<float> &v8064 /* v8064[64] */ = B_fifo4[1][2]; // L10608
  PE_kernel_YV_1_1(v8061, v8062, v8063, v8064, v8015, 1, 1); // L10609
  hls::stream<float> &v8065 /* v8065[64] */ = A_fifo4[1][2]; // L10610
  hls::stream<float> &v8066 /* v8066[64] */ = B_fifo4[2][1]; // L10611
  hls::stream<float> &v8067 /* v8067[64] */ = A_fifo4[1][3]; // L10612
  hls::stream<float> &v8068 /* v8068[64] */ = B_fifo4[2][2]; // L10613
  PE_kernel_YV_2_1(v8065, v8066, v8067, v8068, v8015, 1, 2); // L10614
  hls::stream<float> &v8069 /* v8069[64] */ = A_fifo4[1][3]; // L10615
  hls::stream<float> &v8070 /* v8070[64] */ = B_fifo4[3][1]; // L10616
  hls::stream<float> &v8071 /* v8071[64] */ = A_fifo4[1][4]; // L10617
  hls::stream<float> &v8072 /* v8072[64] */ = B_fifo4[3][2]; // L10618
  PE_kernel_YV_3_1(v8069, v8070, v8071, v8072, v8015, 1, 3); // L10619
  hls::stream<float> &v8073 /* v8073[64] */ = A_fifo4[1][4]; // L10620
  hls::stream<float> &v8074 /* v8074[64] */ = B_fifo4[4][1]; // L10621
  hls::stream<float> &v8075 /* v8075[64] */ = A_fifo4[1][5]; // L10622
  hls::stream<float> &v8076 /* v8076[64] */ = B_fifo4[4][2]; // L10623
  PE_kernel_YV_4_1(v8073, v8074, v8075, v8076, v8015, 1, 4); // L10624
  hls::stream<float> &v8077 /* v8077[64] */ = A_fifo4[1][5]; // L10625
  hls::stream<float> &v8078 /* v8078[64] */ = B_fifo4[5][1]; // L10626
  hls::stream<float> &v8079 /* v8079[64] */ = A_fifo4[1][6]; // L10627
  hls::stream<float> &v8080 /* v8080[64] */ = B_fifo4[5][2]; // L10628
  PE_kernel_YV_5_1(v8077, v8078, v8079, v8080, v8015, 1, 5); // L10629
  hls::stream<float> &v8081 /* v8081[64] */ = A_fifo4[1][6]; // L10630
  hls::stream<float> &v8082 /* v8082[64] */ = B_fifo4[6][1]; // L10631
  hls::stream<float> &v8083 /* v8083[64] */ = A_fifo4[1][7]; // L10632
  hls::stream<float> &v8084 /* v8084[64] */ = B_fifo4[6][2]; // L10633
  PE_kernel_YV_6_1(v8081, v8082, v8083, v8084, v8015, 1, 6); // L10634
  hls::stream<float> &v8085 /* v8085[64] */ = A_fifo4[1][7]; // L10635
  hls::stream<float> &v8086 /* v8086[64] */ = B_fifo4[7][1]; // L10636
  hls::stream<float> &v8087 /* v8087[64] */ = A_fifo4[1][8]; // L10637
  hls::stream<float> &v8088 /* v8088[64] */ = B_fifo4[7][2]; // L10638
  PE_kernel_YV_7_1(v8085, v8086, v8087, v8088, v8015, 1, 7); // L10639
  hls::stream<float> &v8089 /* v8089[64] */ = A_fifo4[2][0]; // L10640
  hls::stream<float> &v8090 /* v8090[64] */ = B_fifo4[0][2]; // L10641
  hls::stream<float> &v8091 /* v8091[64] */ = A_fifo4[2][1]; // L10642
  hls::stream<float> &v8092 /* v8092[64] */ = B_fifo4[0][3]; // L10643
  PE_kernel_YV_0_2(v8089, v8090, v8091, v8092, v8015, 2, 0); // L10644
  hls::stream<float> &v8093 /* v8093[64] */ = A_fifo4[2][1]; // L10645
  hls::stream<float> &v8094 /* v8094[64] */ = B_fifo4[1][2]; // L10646
  hls::stream<float> &v8095 /* v8095[64] */ = A_fifo4[2][2]; // L10647
  hls::stream<float> &v8096 /* v8096[64] */ = B_fifo4[1][3]; // L10648
  PE_kernel_YV_1_2(v8093, v8094, v8095, v8096, v8015, 2, 1); // L10649
  hls::stream<float> &v8097 /* v8097[64] */ = A_fifo4[2][2]; // L10650
  hls::stream<float> &v8098 /* v8098[64] */ = B_fifo4[2][2]; // L10651
  hls::stream<float> &v8099 /* v8099[64] */ = A_fifo4[2][3]; // L10652
  hls::stream<float> &v8100 /* v8100[64] */ = B_fifo4[2][3]; // L10653
  PE_kernel_YV_2_2(v8097, v8098, v8099, v8100, v8015, 2, 2); // L10654
  hls::stream<float> &v8101 /* v8101[64] */ = A_fifo4[2][3]; // L10655
  hls::stream<float> &v8102 /* v8102[64] */ = B_fifo4[3][2]; // L10656
  hls::stream<float> &v8103 /* v8103[64] */ = A_fifo4[2][4]; // L10657
  hls::stream<float> &v8104 /* v8104[64] */ = B_fifo4[3][3]; // L10658
  PE_kernel_YV_3_2(v8101, v8102, v8103, v8104, v8015, 2, 3); // L10659
  hls::stream<float> &v8105 /* v8105[64] */ = A_fifo4[2][4]; // L10660
  hls::stream<float> &v8106 /* v8106[64] */ = B_fifo4[4][2]; // L10661
  hls::stream<float> &v8107 /* v8107[64] */ = A_fifo4[2][5]; // L10662
  hls::stream<float> &v8108 /* v8108[64] */ = B_fifo4[4][3]; // L10663
  PE_kernel_YV_4_2(v8105, v8106, v8107, v8108, v8015, 2, 4); // L10664
  hls::stream<float> &v8109 /* v8109[64] */ = A_fifo4[2][5]; // L10665
  hls::stream<float> &v8110 /* v8110[64] */ = B_fifo4[5][2]; // L10666
  hls::stream<float> &v8111 /* v8111[64] */ = A_fifo4[2][6]; // L10667
  hls::stream<float> &v8112 /* v8112[64] */ = B_fifo4[5][3]; // L10668
  PE_kernel_YV_5_2(v8109, v8110, v8111, v8112, v8015, 2, 5); // L10669
  hls::stream<float> &v8113 /* v8113[64] */ = A_fifo4[2][6]; // L10670
  hls::stream<float> &v8114 /* v8114[64] */ = B_fifo4[6][2]; // L10671
  hls::stream<float> &v8115 /* v8115[64] */ = A_fifo4[2][7]; // L10672
  hls::stream<float> &v8116 /* v8116[64] */ = B_fifo4[6][3]; // L10673
  PE_kernel_YV_6_2(v8113, v8114, v8115, v8116, v8015, 2, 6); // L10674
  hls::stream<float> &v8117 /* v8117[64] */ = A_fifo4[2][7]; // L10675
  hls::stream<float> &v8118 /* v8118[64] */ = B_fifo4[7][2]; // L10676
  hls::stream<float> &v8119 /* v8119[64] */ = A_fifo4[2][8]; // L10677
  hls::stream<float> &v8120 /* v8120[64] */ = B_fifo4[7][3]; // L10678
  PE_kernel_YV_7_2(v8117, v8118, v8119, v8120, v8015, 2, 7); // L10679
  hls::stream<float> &v8121 /* v8121[64] */ = A_fifo4[3][0]; // L10680
  hls::stream<float> &v8122 /* v8122[64] */ = B_fifo4[0][3]; // L10681
  hls::stream<float> &v8123 /* v8123[64] */ = A_fifo4[3][1]; // L10682
  hls::stream<float> &v8124 /* v8124[64] */ = B_fifo4[0][4]; // L10683
  PE_kernel_YV_0_3(v8121, v8122, v8123, v8124, v8015, 3, 0); // L10684
  hls::stream<float> &v8125 /* v8125[64] */ = A_fifo4[3][1]; // L10685
  hls::stream<float> &v8126 /* v8126[64] */ = B_fifo4[1][3]; // L10686
  hls::stream<float> &v8127 /* v8127[64] */ = A_fifo4[3][2]; // L10687
  hls::stream<float> &v8128 /* v8128[64] */ = B_fifo4[1][4]; // L10688
  PE_kernel_YV_1_3(v8125, v8126, v8127, v8128, v8015, 3, 1); // L10689
  hls::stream<float> &v8129 /* v8129[64] */ = A_fifo4[3][2]; // L10690
  hls::stream<float> &v8130 /* v8130[64] */ = B_fifo4[2][3]; // L10691
  hls::stream<float> &v8131 /* v8131[64] */ = A_fifo4[3][3]; // L10692
  hls::stream<float> &v8132 /* v8132[64] */ = B_fifo4[2][4]; // L10693
  PE_kernel_YV_2_3(v8129, v8130, v8131, v8132, v8015, 3, 2); // L10694
  hls::stream<float> &v8133 /* v8133[64] */ = A_fifo4[3][3]; // L10695
  hls::stream<float> &v8134 /* v8134[64] */ = B_fifo4[3][3]; // L10696
  hls::stream<float> &v8135 /* v8135[64] */ = A_fifo4[3][4]; // L10697
  hls::stream<float> &v8136 /* v8136[64] */ = B_fifo4[3][4]; // L10698
  PE_kernel_YV_3_3(v8133, v8134, v8135, v8136, v8015, 3, 3); // L10699
  hls::stream<float> &v8137 /* v8137[64] */ = A_fifo4[3][4]; // L10700
  hls::stream<float> &v8138 /* v8138[64] */ = B_fifo4[4][3]; // L10701
  hls::stream<float> &v8139 /* v8139[64] */ = A_fifo4[3][5]; // L10702
  hls::stream<float> &v8140 /* v8140[64] */ = B_fifo4[4][4]; // L10703
  PE_kernel_YV_4_3(v8137, v8138, v8139, v8140, v8015, 3, 4); // L10704
  hls::stream<float> &v8141 /* v8141[64] */ = A_fifo4[3][5]; // L10705
  hls::stream<float> &v8142 /* v8142[64] */ = B_fifo4[5][3]; // L10706
  hls::stream<float> &v8143 /* v8143[64] */ = A_fifo4[3][6]; // L10707
  hls::stream<float> &v8144 /* v8144[64] */ = B_fifo4[5][4]; // L10708
  PE_kernel_YV_5_3(v8141, v8142, v8143, v8144, v8015, 3, 5); // L10709
  hls::stream<float> &v8145 /* v8145[64] */ = A_fifo4[3][6]; // L10710
  hls::stream<float> &v8146 /* v8146[64] */ = B_fifo4[6][3]; // L10711
  hls::stream<float> &v8147 /* v8147[64] */ = A_fifo4[3][7]; // L10712
  hls::stream<float> &v8148 /* v8148[64] */ = B_fifo4[6][4]; // L10713
  PE_kernel_YV_6_3(v8145, v8146, v8147, v8148, v8015, 3, 6); // L10714
  hls::stream<float> &v8149 /* v8149[64] */ = A_fifo4[3][7]; // L10715
  hls::stream<float> &v8150 /* v8150[64] */ = B_fifo4[7][3]; // L10716
  hls::stream<float> &v8151 /* v8151[64] */ = A_fifo4[3][8]; // L10717
  hls::stream<float> &v8152 /* v8152[64] */ = B_fifo4[7][4]; // L10718
  PE_kernel_YV_7_3(v8149, v8150, v8151, v8152, v8015, 3, 7); // L10719
  hls::stream<float> &v8153 /* v8153[64] */ = A_fifo4[4][0]; // L10720
  hls::stream<float> &v8154 /* v8154[64] */ = B_fifo4[0][4]; // L10721
  hls::stream<float> &v8155 /* v8155[64] */ = A_fifo4[4][1]; // L10722
  hls::stream<float> &v8156 /* v8156[64] */ = B_fifo4[0][5]; // L10723
  PE_kernel_YV_0_4(v8153, v8154, v8155, v8156, v8015, 4, 0); // L10724
  hls::stream<float> &v8157 /* v8157[64] */ = A_fifo4[4][1]; // L10725
  hls::stream<float> &v8158 /* v8158[64] */ = B_fifo4[1][4]; // L10726
  hls::stream<float> &v8159 /* v8159[64] */ = A_fifo4[4][2]; // L10727
  hls::stream<float> &v8160 /* v8160[64] */ = B_fifo4[1][5]; // L10728
  PE_kernel_YV_1_4(v8157, v8158, v8159, v8160, v8015, 4, 1); // L10729
  hls::stream<float> &v8161 /* v8161[64] */ = A_fifo4[4][2]; // L10730
  hls::stream<float> &v8162 /* v8162[64] */ = B_fifo4[2][4]; // L10731
  hls::stream<float> &v8163 /* v8163[64] */ = A_fifo4[4][3]; // L10732
  hls::stream<float> &v8164 /* v8164[64] */ = B_fifo4[2][5]; // L10733
  PE_kernel_YV_2_4(v8161, v8162, v8163, v8164, v8015, 4, 2); // L10734
  hls::stream<float> &v8165 /* v8165[64] */ = A_fifo4[4][3]; // L10735
  hls::stream<float> &v8166 /* v8166[64] */ = B_fifo4[3][4]; // L10736
  hls::stream<float> &v8167 /* v8167[64] */ = A_fifo4[4][4]; // L10737
  hls::stream<float> &v8168 /* v8168[64] */ = B_fifo4[3][5]; // L10738
  PE_kernel_YV_3_4(v8165, v8166, v8167, v8168, v8015, 4, 3); // L10739
  hls::stream<float> &v8169 /* v8169[64] */ = A_fifo4[4][4]; // L10740
  hls::stream<float> &v8170 /* v8170[64] */ = B_fifo4[4][4]; // L10741
  hls::stream<float> &v8171 /* v8171[64] */ = A_fifo4[4][5]; // L10742
  hls::stream<float> &v8172 /* v8172[64] */ = B_fifo4[4][5]; // L10743
  PE_kernel_YV_4_4(v8169, v8170, v8171, v8172, v8015, 4, 4); // L10744
  hls::stream<float> &v8173 /* v8173[64] */ = A_fifo4[4][5]; // L10745
  hls::stream<float> &v8174 /* v8174[64] */ = B_fifo4[5][4]; // L10746
  hls::stream<float> &v8175 /* v8175[64] */ = A_fifo4[4][6]; // L10747
  hls::stream<float> &v8176 /* v8176[64] */ = B_fifo4[5][5]; // L10748
  PE_kernel_YV_5_4(v8173, v8174, v8175, v8176, v8015, 4, 5); // L10749
  hls::stream<float> &v8177 /* v8177[64] */ = A_fifo4[4][6]; // L10750
  hls::stream<float> &v8178 /* v8178[64] */ = B_fifo4[6][4]; // L10751
  hls::stream<float> &v8179 /* v8179[64] */ = A_fifo4[4][7]; // L10752
  hls::stream<float> &v8180 /* v8180[64] */ = B_fifo4[6][5]; // L10753
  PE_kernel_YV_6_4(v8177, v8178, v8179, v8180, v8015, 4, 6); // L10754
  hls::stream<float> &v8181 /* v8181[64] */ = A_fifo4[4][7]; // L10755
  hls::stream<float> &v8182 /* v8182[64] */ = B_fifo4[7][4]; // L10756
  hls::stream<float> &v8183 /* v8183[64] */ = A_fifo4[4][8]; // L10757
  hls::stream<float> &v8184 /* v8184[64] */ = B_fifo4[7][5]; // L10758
  PE_kernel_YV_7_4(v8181, v8182, v8183, v8184, v8015, 4, 7); // L10759
  hls::stream<float> &v8185 /* v8185[64] */ = A_fifo4[5][0]; // L10760
  hls::stream<float> &v8186 /* v8186[64] */ = B_fifo4[0][5]; // L10761
  hls::stream<float> &v8187 /* v8187[64] */ = A_fifo4[5][1]; // L10762
  hls::stream<float> &v8188 /* v8188[64] */ = B_fifo4[0][6]; // L10763
  PE_kernel_YV_0_5(v8185, v8186, v8187, v8188, v8015, 5, 0); // L10764
  hls::stream<float> &v8189 /* v8189[64] */ = A_fifo4[5][1]; // L10765
  hls::stream<float> &v8190 /* v8190[64] */ = B_fifo4[1][5]; // L10766
  hls::stream<float> &v8191 /* v8191[64] */ = A_fifo4[5][2]; // L10767
  hls::stream<float> &v8192 /* v8192[64] */ = B_fifo4[1][6]; // L10768
  PE_kernel_YV_1_5(v8189, v8190, v8191, v8192, v8015, 5, 1); // L10769
  hls::stream<float> &v8193 /* v8193[64] */ = A_fifo4[5][2]; // L10770
  hls::stream<float> &v8194 /* v8194[64] */ = B_fifo4[2][5]; // L10771
  hls::stream<float> &v8195 /* v8195[64] */ = A_fifo4[5][3]; // L10772
  hls::stream<float> &v8196 /* v8196[64] */ = B_fifo4[2][6]; // L10773
  PE_kernel_YV_2_5(v8193, v8194, v8195, v8196, v8015, 5, 2); // L10774
  hls::stream<float> &v8197 /* v8197[64] */ = A_fifo4[5][3]; // L10775
  hls::stream<float> &v8198 /* v8198[64] */ = B_fifo4[3][5]; // L10776
  hls::stream<float> &v8199 /* v8199[64] */ = A_fifo4[5][4]; // L10777
  hls::stream<float> &v8200 /* v8200[64] */ = B_fifo4[3][6]; // L10778
  PE_kernel_YV_3_5(v8197, v8198, v8199, v8200, v8015, 5, 3); // L10779
  hls::stream<float> &v8201 /* v8201[64] */ = A_fifo4[5][4]; // L10780
  hls::stream<float> &v8202 /* v8202[64] */ = B_fifo4[4][5]; // L10781
  hls::stream<float> &v8203 /* v8203[64] */ = A_fifo4[5][5]; // L10782
  hls::stream<float> &v8204 /* v8204[64] */ = B_fifo4[4][6]; // L10783
  PE_kernel_YV_4_5(v8201, v8202, v8203, v8204, v8015, 5, 4); // L10784
  hls::stream<float> &v8205 /* v8205[64] */ = A_fifo4[5][5]; // L10785
  hls::stream<float> &v8206 /* v8206[64] */ = B_fifo4[5][5]; // L10786
  hls::stream<float> &v8207 /* v8207[64] */ = A_fifo4[5][6]; // L10787
  hls::stream<float> &v8208 /* v8208[64] */ = B_fifo4[5][6]; // L10788
  PE_kernel_YV_5_5(v8205, v8206, v8207, v8208, v8015, 5, 5); // L10789
  hls::stream<float> &v8209 /* v8209[64] */ = A_fifo4[5][6]; // L10790
  hls::stream<float> &v8210 /* v8210[64] */ = B_fifo4[6][5]; // L10791
  hls::stream<float> &v8211 /* v8211[64] */ = A_fifo4[5][7]; // L10792
  hls::stream<float> &v8212 /* v8212[64] */ = B_fifo4[6][6]; // L10793
  PE_kernel_YV_6_5(v8209, v8210, v8211, v8212, v8015, 5, 6); // L10794
  hls::stream<float> &v8213 /* v8213[64] */ = A_fifo4[5][7]; // L10795
  hls::stream<float> &v8214 /* v8214[64] */ = B_fifo4[7][5]; // L10796
  hls::stream<float> &v8215 /* v8215[64] */ = A_fifo4[5][8]; // L10797
  hls::stream<float> &v8216 /* v8216[64] */ = B_fifo4[7][6]; // L10798
  PE_kernel_YV_7_5(v8213, v8214, v8215, v8216, v8015, 5, 7); // L10799
  hls::stream<float> &v8217 /* v8217[64] */ = A_fifo4[6][0]; // L10800
  hls::stream<float> &v8218 /* v8218[64] */ = B_fifo4[0][6]; // L10801
  hls::stream<float> &v8219 /* v8219[64] */ = A_fifo4[6][1]; // L10802
  hls::stream<float> &v8220 /* v8220[64] */ = B_fifo4[0][7]; // L10803
  PE_kernel_YV_0_6(v8217, v8218, v8219, v8220, v8015, 6, 0); // L10804
  hls::stream<float> &v8221 /* v8221[64] */ = A_fifo4[6][1]; // L10805
  hls::stream<float> &v8222 /* v8222[64] */ = B_fifo4[1][6]; // L10806
  hls::stream<float> &v8223 /* v8223[64] */ = A_fifo4[6][2]; // L10807
  hls::stream<float> &v8224 /* v8224[64] */ = B_fifo4[1][7]; // L10808
  PE_kernel_YV_1_6(v8221, v8222, v8223, v8224, v8015, 6, 1); // L10809
  hls::stream<float> &v8225 /* v8225[64] */ = A_fifo4[6][2]; // L10810
  hls::stream<float> &v8226 /* v8226[64] */ = B_fifo4[2][6]; // L10811
  hls::stream<float> &v8227 /* v8227[64] */ = A_fifo4[6][3]; // L10812
  hls::stream<float> &v8228 /* v8228[64] */ = B_fifo4[2][7]; // L10813
  PE_kernel_YV_2_6(v8225, v8226, v8227, v8228, v8015, 6, 2); // L10814
  hls::stream<float> &v8229 /* v8229[64] */ = A_fifo4[6][3]; // L10815
  hls::stream<float> &v8230 /* v8230[64] */ = B_fifo4[3][6]; // L10816
  hls::stream<float> &v8231 /* v8231[64] */ = A_fifo4[6][4]; // L10817
  hls::stream<float> &v8232 /* v8232[64] */ = B_fifo4[3][7]; // L10818
  PE_kernel_YV_3_6(v8229, v8230, v8231, v8232, v8015, 6, 3); // L10819
  hls::stream<float> &v8233 /* v8233[64] */ = A_fifo4[6][4]; // L10820
  hls::stream<float> &v8234 /* v8234[64] */ = B_fifo4[4][6]; // L10821
  hls::stream<float> &v8235 /* v8235[64] */ = A_fifo4[6][5]; // L10822
  hls::stream<float> &v8236 /* v8236[64] */ = B_fifo4[4][7]; // L10823
  PE_kernel_YV_4_6(v8233, v8234, v8235, v8236, v8015, 6, 4); // L10824
  hls::stream<float> &v8237 /* v8237[64] */ = A_fifo4[6][5]; // L10825
  hls::stream<float> &v8238 /* v8238[64] */ = B_fifo4[5][6]; // L10826
  hls::stream<float> &v8239 /* v8239[64] */ = A_fifo4[6][6]; // L10827
  hls::stream<float> &v8240 /* v8240[64] */ = B_fifo4[5][7]; // L10828
  PE_kernel_YV_5_6(v8237, v8238, v8239, v8240, v8015, 6, 5); // L10829
  hls::stream<float> &v8241 /* v8241[64] */ = A_fifo4[6][6]; // L10830
  hls::stream<float> &v8242 /* v8242[64] */ = B_fifo4[6][6]; // L10831
  hls::stream<float> &v8243 /* v8243[64] */ = A_fifo4[6][7]; // L10832
  hls::stream<float> &v8244 /* v8244[64] */ = B_fifo4[6][7]; // L10833
  PE_kernel_YV_6_6(v8241, v8242, v8243, v8244, v8015, 6, 6); // L10834
  hls::stream<float> &v8245 /* v8245[64] */ = A_fifo4[6][7]; // L10835
  hls::stream<float> &v8246 /* v8246[64] */ = B_fifo4[7][6]; // L10836
  hls::stream<float> &v8247 /* v8247[64] */ = A_fifo4[6][8]; // L10837
  hls::stream<float> &v8248 /* v8248[64] */ = B_fifo4[7][7]; // L10838
  PE_kernel_YV_7_6(v8245, v8246, v8247, v8248, v8015, 6, 7); // L10839
  hls::stream<float> &v8249 /* v8249[64] */ = A_fifo4[7][0]; // L10840
  hls::stream<float> &v8250 /* v8250[64] */ = B_fifo4[0][7]; // L10841
  hls::stream<float> &v8251 /* v8251[64] */ = A_fifo4[7][1]; // L10842
  hls::stream<float> &v8252 /* v8252[64] */ = B_fifo4[0][8]; // L10843
  PE_kernel_YV_0_7(v8249, v8250, v8251, v8252, v8015, 7, 0); // L10844
  hls::stream<float> &v8253 /* v8253[64] */ = A_fifo4[7][1]; // L10845
  hls::stream<float> &v8254 /* v8254[64] */ = B_fifo4[1][7]; // L10846
  hls::stream<float> &v8255 /* v8255[64] */ = A_fifo4[7][2]; // L10847
  hls::stream<float> &v8256 /* v8256[64] */ = B_fifo4[1][8]; // L10848
  PE_kernel_YV_1_7(v8253, v8254, v8255, v8256, v8015, 7, 1); // L10849
  hls::stream<float> &v8257 /* v8257[64] */ = A_fifo4[7][2]; // L10850
  hls::stream<float> &v8258 /* v8258[64] */ = B_fifo4[2][7]; // L10851
  hls::stream<float> &v8259 /* v8259[64] */ = A_fifo4[7][3]; // L10852
  hls::stream<float> &v8260 /* v8260[64] */ = B_fifo4[2][8]; // L10853
  PE_kernel_YV_2_7(v8257, v8258, v8259, v8260, v8015, 7, 2); // L10854
  hls::stream<float> &v8261 /* v8261[64] */ = A_fifo4[7][3]; // L10855
  hls::stream<float> &v8262 /* v8262[64] */ = B_fifo4[3][7]; // L10856
  hls::stream<float> &v8263 /* v8263[64] */ = A_fifo4[7][4]; // L10857
  hls::stream<float> &v8264 /* v8264[64] */ = B_fifo4[3][8]; // L10858
  PE_kernel_YV_3_7(v8261, v8262, v8263, v8264, v8015, 7, 3); // L10859
  hls::stream<float> &v8265 /* v8265[64] */ = A_fifo4[7][4]; // L10860
  hls::stream<float> &v8266 /* v8266[64] */ = B_fifo4[4][7]; // L10861
  hls::stream<float> &v8267 /* v8267[64] */ = A_fifo4[7][5]; // L10862
  hls::stream<float> &v8268 /* v8268[64] */ = B_fifo4[4][8]; // L10863
  PE_kernel_YV_4_7(v8265, v8266, v8267, v8268, v8015, 7, 4); // L10864
  hls::stream<float> &v8269 /* v8269[64] */ = A_fifo4[7][5]; // L10865
  hls::stream<float> &v8270 /* v8270[64] */ = B_fifo4[5][7]; // L10866
  hls::stream<float> &v8271 /* v8271[64] */ = A_fifo4[7][6]; // L10867
  hls::stream<float> &v8272 /* v8272[64] */ = B_fifo4[5][8]; // L10868
  PE_kernel_YV_5_7(v8269, v8270, v8271, v8272, v8015, 7, 5); // L10869
  hls::stream<float> &v8273 /* v8273[64] */ = A_fifo4[7][6]; // L10870
  hls::stream<float> &v8274 /* v8274[64] */ = B_fifo4[6][7]; // L10871
  hls::stream<float> &v8275 /* v8275[64] */ = A_fifo4[7][7]; // L10872
  hls::stream<float> &v8276 /* v8276[64] */ = B_fifo4[6][8]; // L10873
  PE_kernel_YV_6_7(v8273, v8274, v8275, v8276, v8015, 7, 6); // L10874
  hls::stream<float> &v8277 /* v8277[64] */ = A_fifo4[7][7]; // L10875
  hls::stream<float> &v8278 /* v8278[64] */ = B_fifo4[7][7]; // L10876
  hls::stream<float> &v8279 /* v8279[64] */ = A_fifo4[7][8]; // L10877
  hls::stream<float> &v8280 /* v8280[64] */ = B_fifo4[7][8]; // L10878
  PE_kernel_YV_7_7(v8277, v8278, v8279, v8280, v8015, 7, 7); // L10879
l_data_drain_k329:
  for (int k329 = 0; k329 < 64; k329++) { // L10880
  l_S_m_4_m9:
    for (int m9 = 0; m9 < 8; m9++) { // L10881
      float v8283 =
          A_fifo4[m9][8].read(); // A_fifo4[m9][8][k329];	// L10882
      A_drain4[m9] = v8283;      // L10883
    }
  l_S_n_5_n9:
    for (int n9 = 0; n9 < 8; n9++) { // L10885
      float v8285 =
          B_fifo4[n9][8].read(); // B_fifo4[n9][8][k329];	// L10886
      B_drain4[n9] = v8285;      // L10887
    }
  }
}

void systolic_YV(float v8286[64][64], float v8287[64][64],
                 float v8288[64][64]) { // L10892
  float local_A4[8][64];                // L10893
#pragma HLS array_partition variable = local_A4 complete dim = 1

  float local_B4[64][8]; // L10894
#pragma HLS array_partition variable = local_B4 complete dim = 2

  float local_C4[8][8]; // L10895
#pragma HLS array_partition variable = local_C4 complete dim = 1
#pragma HLS array_partition variable = local_C4 complete dim = 2

l_outer_tile_mi4:
  for (int mi4 = 0; mi4 < 8; mi4++) { // L10896
  l_ni4:
    for (int ni4 = 0; ni4 < 8; ni4++) { // L10897
                                        // #pragma HLS dataflow
    l_load_A_tile_ak4:
      for (int ak4 = 0; ak4 < 64; ak4++) { // L10898
      l_ai4:
        for (int ai4 = 0; ai4 < 8; ai4++) { // L10899
#pragma HLS pipeline II = 1
          ap_int<33> v8296 = ni4;                        // L10900
          bool v8297 = v8296 == 0;                       // L10903
          if (v8297) {                                   // L10904
            float v8298 = v8286[((mi4 * 8) + ai4)][ak4]; // L10905
            local_A4[ai4][ak4] = v8298;                  // L10906
          }
        }
      }
    l_load_B_tile_bk4:
      for (int bk4 = 0; bk4 < 64; bk4++) { // L10910
      l_bj4:
        for (int bj4 = 0; bj4 < 8; bj4++) { // L10911
#pragma HLS pipeline II = 1
          float v8301 = v8287[bk4][((ni4 * 8) + bj4)]; // L10912
          local_B4[bk4][bj4] = v8301;                  // L10913
        }
      }
      systolic_tile_YV(local_A4, local_B4, local_C4); // L10916
    l_store_C_tile_sj4:
      for (int sj4 = 0; sj4 < 8; sj4++) { // L10917
      l_si4:
        for (int si4 = 0; si4 < 8; si4++) { // L10918
#pragma HLS pipeline II = 1
          float v8304 = local_C4[si4][sj4];                    // L10919
          v8288[((mi4 * 8) + si4)][((ni4 * 8) + sj4)] = v8304; // L10920
        }
      }
    }
  }
}

void masked_casual_sdp(float v8305[64][768], float v8306[64][768],
                       float v8307[64][768], int32_t v8308[2],
                       float v8309[64][768]) { // L10927
l_S_h_0_h:
  for (int h = 0; h < 12; h++) { // L10929
    float Q_h[64][64];           // L10930
    float K_h[64][64];           // L10931
    float V_h[64][64];           // L10932
  l_mha_split_i6:
    for (int i6 = 0; i6 < 64; i6++) { // L10933
    l_j5:
      for (int j5 = 0; j5 < 64; j5++) {           // L10934
        float v8316 = v8305[i6][((h * 64) + j5)]; // L10935
        Q_h[i6][j5] = v8316;                      // L10936
        float v8317 = v8306[i6][((h * 64) + j5)]; // L10937
        K_h[j5][i6] = v8317;                      // L10938
        float v8318 = v8307[i6][((h * 64) + j5)]; // L10939
        V_h[i6][j5] = v8318;                      // L10940
      }
    }
    float C_h[64][64];                           // L10945
    for (int v8320 = 0; v8320 < 64; v8320++) {   // L10946
      for (int v8321 = 0; v8321 < 64; v8321++) { // L10946
        C_h[v8320][v8321] = 0.000000;            // L10946
      }
    }
    float Y[64][64];                             // L10947
    for (int v8323 = 0; v8323 < 64; v8323++) {   // L10948
      for (int v8324 = 0; v8324 < 64; v8324++) { // L10948
        Y[v8323][v8324] = 0.000000;              // L10948
      }
    }
    systolic_QKT(Q_h, K_h, Y); // L10949
    float v8325[64][64];
    mask_sft_head_sft_Y(Y, v8308, v8325); // L10950
    systolic_YV(v8325, V_h, C_h);         // L10951
  l_mha_merge_i7:
    for (int i7 = 0; i7 < 64; i7++) { // L10952
    l_j6:
      for (int j6 = 0; j6 < 64; j6++) {     // L10953
        float v8328 = C_h[i7][j6];          // L10954
        v8309[i7][((h * 64) + j6)] = v8328; // L10955
      }
    }
  }
}

void PE_kernel_P_0_0(hls::stream<float> &v8329 /* v8329[768] */,
                     hls::stream<float> &v8330 /* v8330[768] */,
                     hls::stream<float> &v8331 /* v8331[768] */,
                     hls::stream<float> &v8332 /* v8332[768] */,
                     float v8333[8][8], int v8334,
                     int v8335) { // L10961
#pragma HLS stream variable = v8329 depth = 9
#pragma HLS stream variable = v8330 depth = 9
#pragma HLS stream variable = v8331 depth = 9
#pragma HLS stream variable = v8332 depth = 9
#pragma HLS array_partition variable = v8333 complete dim = 1
#pragma HLS array_partition variable = v8333 complete dim = 2

  float v320;      // L10964
  v320 = 0.000000; // L10965
l_S_k_0_k330:
  for (int k330 = 0; k330 < 768; k330++) { // L10966
    float v8338 = v8329.read();            // v8329[k330];	// L10967
    float a320;                            // L10968
    a320 = v8338;                          // L10969
    float v8340 = v8330.read();            // v8330[k330];	// L10970
    float b320;                            // L10971
    b320 = v8340;                          // L10972
    float v8342 = a320;                    // L10973
    float v8343 = b320;                    // L10974
    float v8344 = v8342 * v8343;           // L10975
    float v8345 = v320;                    // L10976
    float v8346 = v8345 + v8344;           // L10977
    v320 = v8346;                          // L10978
    float v8347 = a320;                    // L10979
    v8331.write(v8347);                    // v8331[k330] = v8347;	// L10980
    float v8348 = b320;                    // L10981
    v8332.write(v8348);                    // v8332[k330] = v8348;	// L10982
  }
  float v8349 = v320;          // L10984
  v8333[v8334][v8335] = v8349; // L10985
}

void PE_kernel_P_1_0(hls::stream<float> &v8350 /* v8350[768] */,
                     hls::stream<float> &v8351 /* v8351[768] */,
                     hls::stream<float> &v8352 /* v8352[768] */,
                     hls::stream<float> &v8353 /* v8353[768] */,
                     float v8354[8][8], int v8355,
                     int v8356) { // L10988
#pragma HLS stream variable = v8350 depth = 9
#pragma HLS stream variable = v8351 depth = 9
#pragma HLS stream variable = v8352 depth = 9
#pragma HLS stream variable = v8353 depth = 9
#pragma HLS array_partition variable = v8354 complete dim = 1
#pragma HLS array_partition variable = v8354 complete dim = 2

  float v321;      // L10991
  v321 = 0.000000; // L10992
l_S_k_0_k331:
  for (int k331 = 0; k331 < 768; k331++) { // L10993
    float v8359 = v8350.read();            // v8350[k331];	// L10994
    float a321;                            // L10995
    a321 = v8359;                          // L10996
    float v8361 = v8351.read();            // v8351[k331];	// L10997
    float b321;                            // L10998
    b321 = v8361;                          // L10999
    float v8363 = a321;                    // L11000
    float v8364 = b321;                    // L11001
    float v8365 = v8363 * v8364;           // L11002
    float v8366 = v321;                    // L11003
    float v8367 = v8366 + v8365;           // L11004
    v321 = v8367;                          // L11005
    float v8368 = a321;                    // L11006
    v8352.write(v8368);                    // v8352[k331] = v8368;	// L11007
    float v8369 = b321;                    // L11008
    v8353.write(v8369);                    // v8353[k331] = v8369;	// L11009
  }
  float v8370 = v321;          // L11011
  v8354[v8355][v8356] = v8370; // L11012
}

void PE_kernel_P_2_0(hls::stream<float> &v8371 /* v8371[768] */,
                     hls::stream<float> &v8372 /* v8372[768] */,
                     hls::stream<float> &v8373 /* v8373[768] */,
                     hls::stream<float> &v8374 /* v8374[768] */,
                     float v8375[8][8], int v8376,
                     int v8377) { // L11015
#pragma HLS stream variable = v8371 depth = 9
#pragma HLS stream variable = v8372 depth = 9
#pragma HLS stream variable = v8373 depth = 9
#pragma HLS stream variable = v8374 depth = 9
#pragma HLS array_partition variable = v8375 complete dim = 1
#pragma HLS array_partition variable = v8375 complete dim = 2

  float v322;      // L11018
  v322 = 0.000000; // L11019
l_S_k_0_k332:
  for (int k332 = 0; k332 < 768; k332++) { // L11020
    float v8380 = v8371.read();            // v8371[k332];	// L11021
    float a322;                            // L11022
    a322 = v8380;                          // L11023
    float v8382 = v8372.read();            // v8372[k332];	// L11024
    float b322;                            // L11025
    b322 = v8382;                          // L11026
    float v8384 = a322;                    // L11027
    float v8385 = b322;                    // L11028
    float v8386 = v8384 * v8385;           // L11029
    float v8387 = v322;                    // L11030
    float v8388 = v8387 + v8386;           // L11031
    v322 = v8388;                          // L11032
    float v8389 = a322;                    // L11033
    v8373.write(v8389);                    // v8373[k332] = v8389;	// L11034
    float v8390 = b322;                    // L11035
    v8374.write(v8390);                    // v8374[k332] = v8390;	// L11036
  }
  float v8391 = v322;          // L11038
  v8375[v8376][v8377] = v8391; // L11039
}

void PE_kernel_P_3_0(hls::stream<float> &v8392 /* v8392[768] */,
                     hls::stream<float> &v8393 /* v8393[768] */,
                     hls::stream<float> &v8394 /* v8394[768] */,
                     hls::stream<float> &v8395 /* v8395[768] */,
                     float v8396[8][8], int v8397,
                     int v8398) { // L11042
#pragma HLS stream variable = v8392 depth = 9
#pragma HLS stream variable = v8393 depth = 9
#pragma HLS stream variable = v8394 depth = 9
#pragma HLS stream variable = v8395 depth = 9
#pragma HLS array_partition variable = v8396 complete dim = 1
#pragma HLS array_partition variable = v8396 complete dim = 2

  float v323;      // L11045
  v323 = 0.000000; // L11046
l_S_k_0_k333:
  for (int k333 = 0; k333 < 768; k333++) { // L11047
    float v8401 = v8392.read();            // v8392[k333];	// L11048
    float a323;                            // L11049
    a323 = v8401;                          // L11050
    float v8403 = v8393.read();            // v8393[k333];	// L11051
    float b323;                            // L11052
    b323 = v8403;                          // L11053
    float v8405 = a323;                    // L11054
    float v8406 = b323;                    // L11055
    float v8407 = v8405 * v8406;           // L11056
    float v8408 = v323;                    // L11057
    float v8409 = v8408 + v8407;           // L11058
    v323 = v8409;                          // L11059
    float v8410 = a323;                    // L11060
    v8394.write(v8410);                    // v8394[k333] = v8410;	// L11061
    float v8411 = b323;                    // L11062
    v8395.write(v8411);                    // v8395[k333] = v8411;	// L11063
  }
  float v8412 = v323;          // L11065
  v8396[v8397][v8398] = v8412; // L11066
}

void PE_kernel_P_4_0(hls::stream<float> &v8413 /* v8413[768] */,
                     hls::stream<float> &v8414 /* v8414[768] */,
                     hls::stream<float> &v8415 /* v8415[768] */,
                     hls::stream<float> &v8416 /* v8416[768] */,
                     float v8417[8][8], int v8418,
                     int v8419) { // L11069
#pragma HLS stream variable = v8413 depth = 9
#pragma HLS stream variable = v8414 depth = 9
#pragma HLS stream variable = v8415 depth = 9
#pragma HLS stream variable = v8416 depth = 9
#pragma HLS array_partition variable = v8417 complete dim = 1
#pragma HLS array_partition variable = v8417 complete dim = 2

  float v324;      // L11072
  v324 = 0.000000; // L11073
l_S_k_0_k334:
  for (int k334 = 0; k334 < 768; k334++) { // L11074
    float v8422 = v8413.read();            // v8413[k334];	// L11075
    float a324;                            // L11076
    a324 = v8422;                          // L11077
    float v8424 = v8414.read();            // v8414[k334];	// L11078
    float b324;                            // L11079
    b324 = v8424;                          // L11080
    float v8426 = a324;                    // L11081
    float v8427 = b324;                    // L11082
    float v8428 = v8426 * v8427;           // L11083
    float v8429 = v324;                    // L11084
    float v8430 = v8429 + v8428;           // L11085
    v324 = v8430;                          // L11086
    float v8431 = a324;                    // L11087
    v8415.write(v8431);                    // v8415[k334] = v8431;	// L11088
    float v8432 = b324;                    // L11089
    v8416.write(v8432);                    // v8416[k334] = v8432;	// L11090
  }
  float v8433 = v324;          // L11092
  v8417[v8418][v8419] = v8433; // L11093
}

void PE_kernel_P_5_0(hls::stream<float> &v8434 /* v8434[768] */,
                     hls::stream<float> &v8435 /* v8435[768] */,
                     hls::stream<float> &v8436 /* v8436[768] */,
                     hls::stream<float> &v8437 /* v8437[768] */,
                     float v8438[8][8], int v8439,
                     int v8440) { // L11096
#pragma HLS stream variable = v8434 depth = 9
#pragma HLS stream variable = v8435 depth = 9
#pragma HLS stream variable = v8436 depth = 9
#pragma HLS stream variable = v8437 depth = 9
#pragma HLS array_partition variable = v8438 complete dim = 1
#pragma HLS array_partition variable = v8438 complete dim = 2

  float v325;      // L11099
  v325 = 0.000000; // L11100
l_S_k_0_k335:
  for (int k335 = 0; k335 < 768; k335++) { // L11101
    float v8443 = v8434.read();            // v8434[k335];	// L11102
    float a325;                            // L11103
    a325 = v8443;                          // L11104
    float v8445 = v8435.read();            // v8435[k335];	// L11105
    float b325;                            // L11106
    b325 = v8445;                          // L11107
    float v8447 = a325;                    // L11108
    float v8448 = b325;                    // L11109
    float v8449 = v8447 * v8448;           // L11110
    float v8450 = v325;                    // L11111
    float v8451 = v8450 + v8449;           // L11112
    v325 = v8451;                          // L11113
    float v8452 = a325;                    // L11114
    v8436.write(v8452);                    // v8436[k335] = v8452;	// L11115
    float v8453 = b325;                    // L11116
    v8437.write(v8453);                    // v8437[k335] = v8453;	// L11117
  }
  float v8454 = v325;          // L11119
  v8438[v8439][v8440] = v8454; // L11120
}

void PE_kernel_P_6_0(hls::stream<float> &v8455 /* v8455[768] */,
                     hls::stream<float> &v8456 /* v8456[768] */,
                     hls::stream<float> &v8457 /* v8457[768] */,
                     hls::stream<float> &v8458 /* v8458[768] */,
                     float v8459[8][8], int v8460,
                     int v8461) { // L11123
#pragma HLS stream variable = v8455 depth = 9
#pragma HLS stream variable = v8456 depth = 9
#pragma HLS stream variable = v8457 depth = 9
#pragma HLS stream variable = v8458 depth = 9
#pragma HLS array_partition variable = v8459 complete dim = 1
#pragma HLS array_partition variable = v8459 complete dim = 2

  float v326;      // L11126
  v326 = 0.000000; // L11127
l_S_k_0_k336:
  for (int k336 = 0; k336 < 768; k336++) { // L11128
    float v8464 = v8455.read();            // v8455[k336];	// L11129
    float a326;                            // L11130
    a326 = v8464;                          // L11131
    float v8466 = v8456.read();            // v8456[k336];	// L11132
    float b326;                            // L11133
    b326 = v8466;                          // L11134
    float v8468 = a326;                    // L11135
    float v8469 = b326;                    // L11136
    float v8470 = v8468 * v8469;           // L11137
    float v8471 = v326;                    // L11138
    float v8472 = v8471 + v8470;           // L11139
    v326 = v8472;                          // L11140
    float v8473 = a326;                    // L11141
    v8457.write(v8473);                    // v8457[k336] = v8473;	// L11142
    float v8474 = b326;                    // L11143
    v8458.write(v8474);                    // v8458[k336] = v8474;	// L11144
  }
  float v8475 = v326;          // L11146
  v8459[v8460][v8461] = v8475; // L11147
}

void PE_kernel_P_7_0(hls::stream<float> &v8476 /* v8476[768] */,
                     hls::stream<float> &v8477 /* v8477[768] */,
                     hls::stream<float> &v8478 /* v8478[768] */,
                     hls::stream<float> &v8479 /* v8479[768] */,
                     float v8480[8][8], int v8481,
                     int v8482) { // L11150
#pragma HLS stream variable = v8476 depth = 9
#pragma HLS stream variable = v8477 depth = 9
#pragma HLS stream variable = v8478 depth = 9
#pragma HLS stream variable = v8479 depth = 9
#pragma HLS array_partition variable = v8480 complete dim = 1
#pragma HLS array_partition variable = v8480 complete dim = 2

  float v327;      // L11153
  v327 = 0.000000; // L11154
l_S_k_0_k337:
  for (int k337 = 0; k337 < 768; k337++) { // L11155
    float v8485 = v8476.read();            // v8476[k337];	// L11156
    float a327;                            // L11157
    a327 = v8485;                          // L11158
    float v8487 = v8477.read();            // v8477[k337];	// L11159
    float b327;                            // L11160
    b327 = v8487;                          // L11161
    float v8489 = a327;                    // L11162
    float v8490 = b327;                    // L11163
    float v8491 = v8489 * v8490;           // L11164
    float v8492 = v327;                    // L11165
    float v8493 = v8492 + v8491;           // L11166
    v327 = v8493;                          // L11167
    float v8494 = a327;                    // L11168
    v8478.write(v8494);                    // v8478[k337] = v8494;	// L11169
    float v8495 = b327;                    // L11170
    v8479.write(v8495);                    // v8479[k337] = v8495;	// L11171
  }
  float v8496 = v327;          // L11173
  v8480[v8481][v8482] = v8496; // L11174
}

void PE_kernel_P_0_1(hls::stream<float> &v8497 /* v8497[768] */,
                     hls::stream<float> &v8498 /* v8498[768] */,
                     hls::stream<float> &v8499 /* v8499[768] */,
                     hls::stream<float> &v8500 /* v8500[768] */,
                     float v8501[8][8], int v8502,
                     int v8503) { // L11177
#pragma HLS stream variable = v8497 depth = 9
#pragma HLS stream variable = v8498 depth = 9
#pragma HLS stream variable = v8499 depth = 9
#pragma HLS stream variable = v8500 depth = 9
#pragma HLS array_partition variable = v8501 complete dim = 1
#pragma HLS array_partition variable = v8501 complete dim = 2

  float v328;      // L11180
  v328 = 0.000000; // L11181
l_S_k_0_k338:
  for (int k338 = 0; k338 < 768; k338++) { // L11182
    float v8506 = v8497.read();            // v8497[k338];	// L11183
    float a328;                            // L11184
    a328 = v8506;                          // L11185
    float v8508 = v8498.read();            // v8498[k338];	// L11186
    float b328;                            // L11187
    b328 = v8508;                          // L11188
    float v8510 = a328;                    // L11189
    float v8511 = b328;                    // L11190
    float v8512 = v8510 * v8511;           // L11191
    float v8513 = v328;                    // L11192
    float v8514 = v8513 + v8512;           // L11193
    v328 = v8514;                          // L11194
    float v8515 = a328;                    // L11195
    v8499.write(v8515);                    // v8499[k338] = v8515;	// L11196
    float v8516 = b328;                    // L11197
    v8500.write(v8516);                    // v8500[k338] = v8516;	// L11198
  }
  float v8517 = v328;          // L11200
  v8501[v8502][v8503] = v8517; // L11201
}

void PE_kernel_P_1_1(hls::stream<float> &v8518 /* v8518[768] */,
                     hls::stream<float> &v8519 /* v8519[768] */,
                     hls::stream<float> &v8520 /* v8520[768] */,
                     hls::stream<float> &v8521 /* v8521[768] */,
                     float v8522[8][8], int v8523,
                     int v8524) { // L11204
#pragma HLS stream variable = v8518 depth = 9
#pragma HLS stream variable = v8519 depth = 9
#pragma HLS stream variable = v8520 depth = 9
#pragma HLS stream variable = v8521 depth = 9
#pragma HLS array_partition variable = v8522 complete dim = 1
#pragma HLS array_partition variable = v8522 complete dim = 2

  float v329;      // L11207
  v329 = 0.000000; // L11208
l_S_k_0_k339:
  for (int k339 = 0; k339 < 768; k339++) { // L11209
    float v8527 = v8518.read();            // v8518[k339];	// L11210
    float a329;                            // L11211
    a329 = v8527;                          // L11212
    float v8529 = v8519.read();            // v8519[k339];	// L11213
    float b329;                            // L11214
    b329 = v8529;                          // L11215
    float v8531 = a329;                    // L11216
    float v8532 = b329;                    // L11217
    float v8533 = v8531 * v8532;           // L11218
    float v8534 = v329;                    // L11219
    float v8535 = v8534 + v8533;           // L11220
    v329 = v8535;                          // L11221
    float v8536 = a329;                    // L11222
    v8520.write(v8536);                    // v8520[k339] = v8536;	// L11223
    float v8537 = b329;                    // L11224
    v8521.write(v8537);                    // v8521[k339] = v8537;	// L11225
  }
  float v8538 = v329;          // L11227
  v8522[v8523][v8524] = v8538; // L11228
}

void PE_kernel_P_2_1(hls::stream<float> &v8539 /* v8539[768] */,
                     hls::stream<float> &v8540 /* v8540[768] */,
                     hls::stream<float> &v8541 /* v8541[768] */,
                     hls::stream<float> &v8542 /* v8542[768] */,
                     float v8543[8][8], int v8544,
                     int v8545) { // L11231
#pragma HLS stream variable = v8539 depth = 9
#pragma HLS stream variable = v8540 depth = 9
#pragma HLS stream variable = v8541 depth = 9
#pragma HLS stream variable = v8542 depth = 9
#pragma HLS array_partition variable = v8543 complete dim = 1
#pragma HLS array_partition variable = v8543 complete dim = 2

  float v330;      // L11234
  v330 = 0.000000; // L11235
l_S_k_0_k340:
  for (int k340 = 0; k340 < 768; k340++) { // L11236
    float v8548 = v8539.read();            // v8539[k340];	// L11237
    float a330;                            // L11238
    a330 = v8548;                          // L11239
    float v8550 = v8540.read();            // v8540[k340];	// L11240
    float b330;                            // L11241
    b330 = v8550;                          // L11242
    float v8552 = a330;                    // L11243
    float v8553 = b330;                    // L11244
    float v8554 = v8552 * v8553;           // L11245
    float v8555 = v330;                    // L11246
    float v8556 = v8555 + v8554;           // L11247
    v330 = v8556;                          // L11248
    float v8557 = a330;                    // L11249
    v8541.write(v8557);                    // v8541[k340] = v8557;	// L11250
    float v8558 = b330;                    // L11251
    v8542.write(v8558);                    // v8542[k340] = v8558;	// L11252
  }
  float v8559 = v330;          // L11254
  v8543[v8544][v8545] = v8559; // L11255
}

void PE_kernel_P_3_1(hls::stream<float> &v8560 /* v8560[768] */,
                     hls::stream<float> &v8561 /* v8561[768] */,
                     hls::stream<float> &v8562 /* v8562[768] */,
                     hls::stream<float> &v8563 /* v8563[768] */,
                     float v8564[8][8], int v8565,
                     int v8566) { // L11258
#pragma HLS stream variable = v8560 depth = 9
#pragma HLS stream variable = v8561 depth = 9
#pragma HLS stream variable = v8562 depth = 9
#pragma HLS stream variable = v8563 depth = 9
#pragma HLS array_partition variable = v8564 complete dim = 1
#pragma HLS array_partition variable = v8564 complete dim = 2

  float v331;      // L11261
  v331 = 0.000000; // L11262
l_S_k_0_k341:
  for (int k341 = 0; k341 < 768; k341++) { // L11263
    float v8569 = v8560.read();            // v8560[k341];	// L11264
    float a331;                            // L11265
    a331 = v8569;                          // L11266
    float v8571 = v8561.read();            // v8561[k341];	// L11267
    float b331;                            // L11268
    b331 = v8571;                          // L11269
    float v8573 = a331;                    // L11270
    float v8574 = b331;                    // L11271
    float v8575 = v8573 * v8574;           // L11272
    float v8576 = v331;                    // L11273
    float v8577 = v8576 + v8575;           // L11274
    v331 = v8577;                          // L11275
    float v8578 = a331;                    // L11276
    v8562.write(v8578);                    // v8562[k341] = v8578;	// L11277
    float v8579 = b331;                    // L11278
    v8563.write(v8579);                    // v8563[k341] = v8579;	// L11279
  }
  float v8580 = v331;          // L11281
  v8564[v8565][v8566] = v8580; // L11282
}

void PE_kernel_P_4_1(hls::stream<float> &v8581 /* v8581[768] */,
                     hls::stream<float> &v8582 /* v8582[768] */,
                     hls::stream<float> &v8583 /* v8583[768] */,
                     hls::stream<float> &v8584 /* v8584[768] */,
                     float v8585[8][8], int v8586,
                     int v8587) { // L11285
#pragma HLS stream variable = v8581 depth = 9
#pragma HLS stream variable = v8582 depth = 9
#pragma HLS stream variable = v8583 depth = 9
#pragma HLS stream variable = v8584 depth = 9
#pragma HLS array_partition variable = v8585 complete dim = 1
#pragma HLS array_partition variable = v8585 complete dim = 2

  float v332;      // L11288
  v332 = 0.000000; // L11289
l_S_k_0_k342:
  for (int k342 = 0; k342 < 768; k342++) { // L11290
    float v8590 = v8581.read();            // v8581[k342];	// L11291
    float a332;                            // L11292
    a332 = v8590;                          // L11293
    float v8592 = v8582.read();            // v8582[k342];	// L11294
    float b332;                            // L11295
    b332 = v8592;                          // L11296
    float v8594 = a332;                    // L11297
    float v8595 = b332;                    // L11298
    float v8596 = v8594 * v8595;           // L11299
    float v8597 = v332;                    // L11300
    float v8598 = v8597 + v8596;           // L11301
    v332 = v8598;                          // L11302
    float v8599 = a332;                    // L11303
    v8583.write(v8599);                    // v8583[k342] = v8599;	// L11304
    float v8600 = b332;                    // L11305
    v8584.write(v8600);                    // v8584[k342] = v8600;	// L11306
  }
  float v8601 = v332;          // L11308
  v8585[v8586][v8587] = v8601; // L11309
}

void PE_kernel_P_5_1(hls::stream<float> &v8602 /* v8602[768] */,
                     hls::stream<float> &v8603 /* v8603[768] */,
                     hls::stream<float> &v8604 /* v8604[768] */,
                     hls::stream<float> &v8605 /* v8605[768] */,
                     float v8606[8][8], int v8607,
                     int v8608) { // L11312
#pragma HLS stream variable = v8602 depth = 9
#pragma HLS stream variable = v8603 depth = 9
#pragma HLS stream variable = v8604 depth = 9
#pragma HLS stream variable = v8605 depth = 9
#pragma HLS array_partition variable = v8606 complete dim = 1
#pragma HLS array_partition variable = v8606 complete dim = 2

  float v333;      // L11315
  v333 = 0.000000; // L11316
l_S_k_0_k343:
  for (int k343 = 0; k343 < 768; k343++) { // L11317
    float v8611 = v8602.read();            // v8602[k343];	// L11318
    float a333;                            // L11319
    a333 = v8611;                          // L11320
    float v8613 = v8603.read();            // v8603[k343];	// L11321
    float b333;                            // L11322
    b333 = v8613;                          // L11323
    float v8615 = a333;                    // L11324
    float v8616 = b333;                    // L11325
    float v8617 = v8615 * v8616;           // L11326
    float v8618 = v333;                    // L11327
    float v8619 = v8618 + v8617;           // L11328
    v333 = v8619;                          // L11329
    float v8620 = a333;                    // L11330
    v8604.write(v8620);                    // v8604[k343] = v8620;	// L11331
    float v8621 = b333;                    // L11332
    v8605.write(v8621);                    // v8605[k343] = v8621;	// L11333
  }
  float v8622 = v333;          // L11335
  v8606[v8607][v8608] = v8622; // L11336
}

void PE_kernel_P_6_1(hls::stream<float> &v8623 /* v8623[768] */,
                     hls::stream<float> &v8624 /* v8624[768] */,
                     hls::stream<float> &v8625 /* v8625[768] */,
                     hls::stream<float> &v8626 /* v8626[768] */,
                     float v8627[8][8], int v8628,
                     int v8629) { // L11339
#pragma HLS stream variable = v8623 depth = 9
#pragma HLS stream variable = v8624 depth = 9
#pragma HLS stream variable = v8625 depth = 9
#pragma HLS stream variable = v8626 depth = 9
#pragma HLS array_partition variable = v8627 complete dim = 1
#pragma HLS array_partition variable = v8627 complete dim = 2

  float v334;      // L11342
  v334 = 0.000000; // L11343
l_S_k_0_k344:
  for (int k344 = 0; k344 < 768; k344++) { // L11344
    float v8632 = v8623.read();            // v8623[k344];	// L11345
    float a334;                            // L11346
    a334 = v8632;                          // L11347
    float v8634 = v8624.read();            // v8624[k344];	// L11348
    float b334;                            // L11349
    b334 = v8634;                          // L11350
    float v8636 = a334;                    // L11351
    float v8637 = b334;                    // L11352
    float v8638 = v8636 * v8637;           // L11353
    float v8639 = v334;                    // L11354
    float v8640 = v8639 + v8638;           // L11355
    v334 = v8640;                          // L11356
    float v8641 = a334;                    // L11357
    v8625.write(v8641);                    // v8625[k344] = v8641;	// L11358
    float v8642 = b334;                    // L11359
    v8626.write(v8642);                    // v8626[k344] = v8642;	// L11360
  }
  float v8643 = v334;          // L11362
  v8627[v8628][v8629] = v8643; // L11363
}

void PE_kernel_P_7_1(hls::stream<float> &v8644 /* v8644[768] */,
                     hls::stream<float> &v8645 /* v8645[768] */,
                     hls::stream<float> &v8646 /* v8646[768] */,
                     hls::stream<float> &v8647 /* v8647[768] */,
                     float v8648[8][8], int v8649,
                     int v8650) { // L11366
#pragma HLS stream variable = v8644 depth = 9
#pragma HLS stream variable = v8645 depth = 9
#pragma HLS stream variable = v8646 depth = 9
#pragma HLS stream variable = v8647 depth = 9
#pragma HLS array_partition variable = v8648 complete dim = 1
#pragma HLS array_partition variable = v8648 complete dim = 2

  float v335;      // L11369
  v335 = 0.000000; // L11370
l_S_k_0_k345:
  for (int k345 = 0; k345 < 768; k345++) { // L11371
    float v8653 = v8644.read();            // v8644[k345];	// L11372
    float a335;                            // L11373
    a335 = v8653;                          // L11374
    float v8655 = v8645.read();            // v8645[k345];	// L11375
    float b335;                            // L11376
    b335 = v8655;                          // L11377
    float v8657 = a335;                    // L11378
    float v8658 = b335;                    // L11379
    float v8659 = v8657 * v8658;           // L11380
    float v8660 = v335;                    // L11381
    float v8661 = v8660 + v8659;           // L11382
    v335 = v8661;                          // L11383
    float v8662 = a335;                    // L11384
    v8646.write(v8662);                    // v8646[k345] = v8662;	// L11385
    float v8663 = b335;                    // L11386
    v8647.write(v8663);                    // v8647[k345] = v8663;	// L11387
  }
  float v8664 = v335;          // L11389
  v8648[v8649][v8650] = v8664; // L11390
}

void PE_kernel_P_0_2(hls::stream<float> &v8665 /* v8665[768] */,
                     hls::stream<float> &v8666 /* v8666[768] */,
                     hls::stream<float> &v8667 /* v8667[768] */,
                     hls::stream<float> &v8668 /* v8668[768] */,
                     float v8669[8][8], int v8670,
                     int v8671) { // L11393
#pragma HLS stream variable = v8665 depth = 9
#pragma HLS stream variable = v8666 depth = 9
#pragma HLS stream variable = v8667 depth = 9
#pragma HLS stream variable = v8668 depth = 9
#pragma HLS array_partition variable = v8669 complete dim = 1
#pragma HLS array_partition variable = v8669 complete dim = 2

  float v336;      // L11396
  v336 = 0.000000; // L11397
l_S_k_0_k346:
  for (int k346 = 0; k346 < 768; k346++) { // L11398
    float v8674 = v8665.read();            // v8665[k346];	// L11399
    float a336;                            // L11400
    a336 = v8674;                          // L11401
    float v8676 = v8666.read();            // v8666[k346];	// L11402
    float b336;                            // L11403
    b336 = v8676;                          // L11404
    float v8678 = a336;                    // L11405
    float v8679 = b336;                    // L11406
    float v8680 = v8678 * v8679;           // L11407
    float v8681 = v336;                    // L11408
    float v8682 = v8681 + v8680;           // L11409
    v336 = v8682;                          // L11410
    float v8683 = a336;                    // L11411
    v8667.write(v8683);                    // v8667[k346] = v8683;	// L11412
    float v8684 = b336;                    // L11413
    v8668.write(v8684);                    // v8668[k346] = v8684;	// L11414
  }
  float v8685 = v336;          // L11416
  v8669[v8670][v8671] = v8685; // L11417
}

void PE_kernel_P_1_2(hls::stream<float> &v8686 /* v8686[768] */,
                     hls::stream<float> &v8687 /* v8687[768] */,
                     hls::stream<float> &v8688 /* v8688[768] */,
                     hls::stream<float> &v8689 /* v8689[768] */,
                     float v8690[8][8], int v8691,
                     int v8692) { // L11420
#pragma HLS stream variable = v8686 depth = 9
#pragma HLS stream variable = v8687 depth = 9
#pragma HLS stream variable = v8688 depth = 9
#pragma HLS stream variable = v8689 depth = 9
#pragma HLS array_partition variable = v8690 complete dim = 1
#pragma HLS array_partition variable = v8690 complete dim = 2

  float v337;      // L11423
  v337 = 0.000000; // L11424
l_S_k_0_k347:
  for (int k347 = 0; k347 < 768; k347++) { // L11425
    float v8695 = v8686.read();            // v8686[k347];	// L11426
    float a337;                            // L11427
    a337 = v8695;                          // L11428
    float v8697 = v8687.read();            // v8687[k347];	// L11429
    float b337;                            // L11430
    b337 = v8697;                          // L11431
    float v8699 = a337;                    // L11432
    float v8700 = b337;                    // L11433
    float v8701 = v8699 * v8700;           // L11434
    float v8702 = v337;                    // L11435
    float v8703 = v8702 + v8701;           // L11436
    v337 = v8703;                          // L11437
    float v8704 = a337;                    // L11438
    v8688.write(v8704);                    // v8688[k347] = v8704;	// L11439
    float v8705 = b337;                    // L11440
    v8689.write(v8705);                    // v8689[k347] = v8705;	// L11441
  }
  float v8706 = v337;          // L11443
  v8690[v8691][v8692] = v8706; // L11444
}

void PE_kernel_P_2_2(hls::stream<float> &v8707 /* v8707[768] */,
                     hls::stream<float> &v8708 /* v8708[768] */,
                     hls::stream<float> &v8709 /* v8709[768] */,
                     hls::stream<float> &v8710 /* v8710[768] */,
                     float v8711[8][8], int v8712,
                     int v8713) { // L11447
#pragma HLS stream variable = v8707 depth = 9
#pragma HLS stream variable = v8708 depth = 9
#pragma HLS stream variable = v8709 depth = 9
#pragma HLS stream variable = v8710 depth = 9
#pragma HLS array_partition variable = v8711 complete dim = 1
#pragma HLS array_partition variable = v8711 complete dim = 2

  float v338;      // L11450
  v338 = 0.000000; // L11451
l_S_k_0_k348:
  for (int k348 = 0; k348 < 768; k348++) { // L11452
    float v8716 = v8707.read();            // v8707[k348];	// L11453
    float a338;                            // L11454
    a338 = v8716;                          // L11455
    float v8718 = v8708.read();            // v8708[k348];	// L11456
    float b338;                            // L11457
    b338 = v8718;                          // L11458
    float v8720 = a338;                    // L11459
    float v8721 = b338;                    // L11460
    float v8722 = v8720 * v8721;           // L11461
    float v8723 = v338;                    // L11462
    float v8724 = v8723 + v8722;           // L11463
    v338 = v8724;                          // L11464
    float v8725 = a338;                    // L11465
    v8709.write(v8725);                    // v8709[k348] = v8725;	// L11466
    float v8726 = b338;                    // L11467
    v8710.write(v8726);                    // v8710[k348] = v8726;	// L11468
  }
  float v8727 = v338;          // L11470
  v8711[v8712][v8713] = v8727; // L11471
}

void PE_kernel_P_3_2(hls::stream<float> &v8728 /* v8728[768] */,
                     hls::stream<float> &v8729 /* v8729[768] */,
                     hls::stream<float> &v8730 /* v8730[768] */,
                     hls::stream<float> &v8731 /* v8731[768] */,
                     float v8732[8][8], int v8733,
                     int v8734) { // L11474
#pragma HLS stream variable = v8728 depth = 9
#pragma HLS stream variable = v8729 depth = 9
#pragma HLS stream variable = v8730 depth = 9
#pragma HLS stream variable = v8731 depth = 9
#pragma HLS array_partition variable = v8732 complete dim = 1
#pragma HLS array_partition variable = v8732 complete dim = 2

  float v339;      // L11477
  v339 = 0.000000; // L11478
l_S_k_0_k349:
  for (int k349 = 0; k349 < 768; k349++) { // L11479
    float v8737 = v8728.read();            // v8728[k349];	// L11480
    float a339;                            // L11481
    a339 = v8737;                          // L11482
    float v8739 = v8729.read();            // v8729[k349];	// L11483
    float b339;                            // L11484
    b339 = v8739;                          // L11485
    float v8741 = a339;                    // L11486
    float v8742 = b339;                    // L11487
    float v8743 = v8741 * v8742;           // L11488
    float v8744 = v339;                    // L11489
    float v8745 = v8744 + v8743;           // L11490
    v339 = v8745;                          // L11491
    float v8746 = a339;                    // L11492
    v8730.write(v8746);                    // v8730[k349] = v8746;	// L11493
    float v8747 = b339;                    // L11494
    v8731.write(v8747);                    // v8731[k349] = v8747;	// L11495
  }
  float v8748 = v339;          // L11497
  v8732[v8733][v8734] = v8748; // L11498
}

void PE_kernel_P_4_2(hls::stream<float> &v8749 /* v8749[768] */,
                     hls::stream<float> &v8750 /* v8750[768] */,
                     hls::stream<float> &v8751 /* v8751[768] */,
                     hls::stream<float> &v8752 /* v8752[768] */,
                     float v8753[8][8], int v8754,
                     int v8755) { // L11501
#pragma HLS stream variable = v8749 depth = 9
#pragma HLS stream variable = v8750 depth = 9
#pragma HLS stream variable = v8751 depth = 9
#pragma HLS stream variable = v8752 depth = 9
#pragma HLS array_partition variable = v8753 complete dim = 1
#pragma HLS array_partition variable = v8753 complete dim = 2

  float v340;      // L11504
  v340 = 0.000000; // L11505
l_S_k_0_k350:
  for (int k350 = 0; k350 < 768; k350++) { // L11506
    float v8758 = v8749.read();            // v8749[k350];	// L11507
    float a340;                            // L11508
    a340 = v8758;                          // L11509
    float v8760 = v8750.read();            // v8750[k350];	// L11510
    float b340;                            // L11511
    b340 = v8760;                          // L11512
    float v8762 = a340;                    // L11513
    float v8763 = b340;                    // L11514
    float v8764 = v8762 * v8763;           // L11515
    float v8765 = v340;                    // L11516
    float v8766 = v8765 + v8764;           // L11517
    v340 = v8766;                          // L11518
    float v8767 = a340;                    // L11519
    v8751.write(v8767);                    // v8751[k350] = v8767;	// L11520
    float v8768 = b340;                    // L11521
    v8752.write(v8768);                    // v8752[k350] = v8768;	// L11522
  }
  float v8769 = v340;          // L11524
  v8753[v8754][v8755] = v8769; // L11525
}

void PE_kernel_P_5_2(hls::stream<float> &v8770 /* v8770[768] */,
                     hls::stream<float> &v8771 /* v8771[768] */,
                     hls::stream<float> &v8772 /* v8772[768] */,
                     hls::stream<float> &v8773 /* v8773[768] */,
                     float v8774[8][8], int v8775,
                     int v8776) { // L11528
#pragma HLS stream variable = v8770 depth = 9
#pragma HLS stream variable = v8771 depth = 9
#pragma HLS stream variable = v8772 depth = 9
#pragma HLS stream variable = v8773 depth = 9
#pragma HLS array_partition variable = v8774 complete dim = 1
#pragma HLS array_partition variable = v8774 complete dim = 2

  float v341;      // L11531
  v341 = 0.000000; // L11532
l_S_k_0_k351:
  for (int k351 = 0; k351 < 768; k351++) { // L11533
    float v8779 = v8770.read();            // v8770[k351];	// L11534
    float a341;                            // L11535
    a341 = v8779;                          // L11536
    float v8781 = v8771.read();            // v8771[k351];	// L11537
    float b341;                            // L11538
    b341 = v8781;                          // L11539
    float v8783 = a341;                    // L11540
    float v8784 = b341;                    // L11541
    float v8785 = v8783 * v8784;           // L11542
    float v8786 = v341;                    // L11543
    float v8787 = v8786 + v8785;           // L11544
    v341 = v8787;                          // L11545
    float v8788 = a341;                    // L11546
    v8772.write(v8788);                    // v8772[k351] = v8788;	// L11547
    float v8789 = b341;                    // L11548
    v8773.write(v8789);                    // v8773[k351] = v8789;	// L11549
  }
  float v8790 = v341;          // L11551
  v8774[v8775][v8776] = v8790; // L11552
}

void PE_kernel_P_6_2(hls::stream<float> &v8791 /* v8791[768] */,
                     hls::stream<float> &v8792 /* v8792[768] */,
                     hls::stream<float> &v8793 /* v8793[768] */,
                     hls::stream<float> &v8794 /* v8794[768] */,
                     float v8795[8][8], int v8796,
                     int v8797) { // L11555
#pragma HLS stream variable = v8791 depth = 9
#pragma HLS stream variable = v8792 depth = 9
#pragma HLS stream variable = v8793 depth = 9
#pragma HLS stream variable = v8794 depth = 9
#pragma HLS array_partition variable = v8795 complete dim = 1
#pragma HLS array_partition variable = v8795 complete dim = 2

  float v342;      // L11558
  v342 = 0.000000; // L11559
l_S_k_0_k352:
  for (int k352 = 0; k352 < 768; k352++) { // L11560
    float v8800 = v8791.read();            // v8791[k352];	// L11561
    float a342;                            // L11562
    a342 = v8800;                          // L11563
    float v8802 = v8792.read();            // v8792[k352];	// L11564
    float b342;                            // L11565
    b342 = v8802;                          // L11566
    float v8804 = a342;                    // L11567
    float v8805 = b342;                    // L11568
    float v8806 = v8804 * v8805;           // L11569
    float v8807 = v342;                    // L11570
    float v8808 = v8807 + v8806;           // L11571
    v342 = v8808;                          // L11572
    float v8809 = a342;                    // L11573
    v8793.write(v8809);                    // v8793[k352] = v8809;	// L11574
    float v8810 = b342;                    // L11575
    v8794.write(v8810);                    // v8794[k352] = v8810;	// L11576
  }
  float v8811 = v342;          // L11578
  v8795[v8796][v8797] = v8811; // L11579
}

void PE_kernel_P_7_2(hls::stream<float> &v8812 /* v8812[768] */,
                     hls::stream<float> &v8813 /* v8813[768] */,
                     hls::stream<float> &v8814 /* v8814[768] */,
                     hls::stream<float> &v8815 /* v8815[768] */,
                     float v8816[8][8], int v8817,
                     int v8818) { // L11582
#pragma HLS stream variable = v8812 depth = 9
#pragma HLS stream variable = v8813 depth = 9
#pragma HLS stream variable = v8814 depth = 9
#pragma HLS stream variable = v8815 depth = 9
#pragma HLS array_partition variable = v8816 complete dim = 1
#pragma HLS array_partition variable = v8816 complete dim = 2

  float v343;      // L11585
  v343 = 0.000000; // L11586
l_S_k_0_k353:
  for (int k353 = 0; k353 < 768; k353++) { // L11587
    float v8821 = v8812.read();            // v8812[k353];	// L11588
    float a343;                            // L11589
    a343 = v8821;                          // L11590
    float v8823 = v8813.read();            // v8813[k353];	// L11591
    float b343;                            // L11592
    b343 = v8823;                          // L11593
    float v8825 = a343;                    // L11594
    float v8826 = b343;                    // L11595
    float v8827 = v8825 * v8826;           // L11596
    float v8828 = v343;                    // L11597
    float v8829 = v8828 + v8827;           // L11598
    v343 = v8829;                          // L11599
    float v8830 = a343;                    // L11600
    v8814.write(v8830);                    // v8814[k353] = v8830;	// L11601
    float v8831 = b343;                    // L11602
    v8815.write(v8831);                    // v8815[k353] = v8831;	// L11603
  }
  float v8832 = v343;          // L11605
  v8816[v8817][v8818] = v8832; // L11606
}

void PE_kernel_P_0_3(hls::stream<float> &v8833 /* v8833[768] */,
                     hls::stream<float> &v8834 /* v8834[768] */,
                     hls::stream<float> &v8835 /* v8835[768] */,
                     hls::stream<float> &v8836 /* v8836[768] */,
                     float v8837[8][8], int v8838,
                     int v8839) { // L11609
#pragma HLS stream variable = v8833 depth = 9
#pragma HLS stream variable = v8834 depth = 9
#pragma HLS stream variable = v8835 depth = 9
#pragma HLS stream variable = v8836 depth = 9
#pragma HLS array_partition variable = v8837 complete dim = 1
#pragma HLS array_partition variable = v8837 complete dim = 2

  float v344;      // L11612
  v344 = 0.000000; // L11613
l_S_k_0_k354:
  for (int k354 = 0; k354 < 768; k354++) { // L11614
    float v8842 = v8833.read();            // v8833[k354];	// L11615
    float a344;                            // L11616
    a344 = v8842;                          // L11617
    float v8844 = v8834.read();            // v8834[k354];	// L11618
    float b344;                            // L11619
    b344 = v8844;                          // L11620
    float v8846 = a344;                    // L11621
    float v8847 = b344;                    // L11622
    float v8848 = v8846 * v8847;           // L11623
    float v8849 = v344;                    // L11624
    float v8850 = v8849 + v8848;           // L11625
    v344 = v8850;                          // L11626
    float v8851 = a344;                    // L11627
    v8835.write(v8851);                    // v8835[k354] = v8851;	// L11628
    float v8852 = b344;                    // L11629
    v8836.write(v8852);                    // v8836[k354] = v8852;	// L11630
  }
  float v8853 = v344;          // L11632
  v8837[v8838][v8839] = v8853; // L11633
}

void PE_kernel_P_1_3(hls::stream<float> &v8854 /* v8854[768] */,
                     hls::stream<float> &v8855 /* v8855[768] */,
                     hls::stream<float> &v8856 /* v8856[768] */,
                     hls::stream<float> &v8857 /* v8857[768] */,
                     float v8858[8][8], int v8859,
                     int v8860) { // L11636
#pragma HLS stream variable = v8854 depth = 9
#pragma HLS stream variable = v8855 depth = 9
#pragma HLS stream variable = v8856 depth = 9
#pragma HLS stream variable = v8857 depth = 9
#pragma HLS array_partition variable = v8858 complete dim = 1
#pragma HLS array_partition variable = v8858 complete dim = 2

  float v345;      // L11639
  v345 = 0.000000; // L11640
l_S_k_0_k355:
  for (int k355 = 0; k355 < 768; k355++) { // L11641
    float v8863 = v8854.read();            // v8854[k355];	// L11642
    float a345;                            // L11643
    a345 = v8863;                          // L11644
    float v8865 = v8855.read();            // v8855[k355];	// L11645
    float b345;                            // L11646
    b345 = v8865;                          // L11647
    float v8867 = a345;                    // L11648
    float v8868 = b345;                    // L11649
    float v8869 = v8867 * v8868;           // L11650
    float v8870 = v345;                    // L11651
    float v8871 = v8870 + v8869;           // L11652
    v345 = v8871;                          // L11653
    float v8872 = a345;                    // L11654
    v8856.write(v8872);                    // v8856[k355] = v8872;	// L11655
    float v8873 = b345;                    // L11656
    v8857.write(v8873);                    // v8857[k355] = v8873;	// L11657
  }
  float v8874 = v345;          // L11659
  v8858[v8859][v8860] = v8874; // L11660
}

void PE_kernel_P_2_3(hls::stream<float> &v8875 /* v8875[768] */,
                     hls::stream<float> &v8876 /* v8876[768] */,
                     hls::stream<float> &v8877 /* v8877[768] */,
                     hls::stream<float> &v8878 /* v8878[768] */,
                     float v8879[8][8], int v8880,
                     int v8881) { // L11663
#pragma HLS stream variable = v8875 depth = 9
#pragma HLS stream variable = v8876 depth = 9
#pragma HLS stream variable = v8877 depth = 9
#pragma HLS stream variable = v8878 depth = 9
#pragma HLS array_partition variable = v8879 complete dim = 1
#pragma HLS array_partition variable = v8879 complete dim = 2

  float v346;      // L11666
  v346 = 0.000000; // L11667
l_S_k_0_k356:
  for (int k356 = 0; k356 < 768; k356++) { // L11668
    float v8884 = v8875.read();            // v8875[k356];	// L11669
    float a346;                            // L11670
    a346 = v8884;                          // L11671
    float v8886 = v8876.read();            // v8876[k356];	// L11672
    float b346;                            // L11673
    b346 = v8886;                          // L11674
    float v8888 = a346;                    // L11675
    float v8889 = b346;                    // L11676
    float v8890 = v8888 * v8889;           // L11677
    float v8891 = v346;                    // L11678
    float v8892 = v8891 + v8890;           // L11679
    v346 = v8892;                          // L11680
    float v8893 = a346;                    // L11681
    v8877.write(v8893);                    // v8877[k356] = v8893;	// L11682
    float v8894 = b346;                    // L11683
    v8878.write(v8894);                    // v8878[k356] = v8894;	// L11684
  }
  float v8895 = v346;          // L11686
  v8879[v8880][v8881] = v8895; // L11687
}

void PE_kernel_P_3_3(hls::stream<float> &v8896 /* v8896[768] */,
                     hls::stream<float> &v8897 /* v8897[768] */,
                     hls::stream<float> &v8898 /* v8898[768] */,
                     hls::stream<float> &v8899 /* v8899[768] */,
                     float v8900[8][8], int v8901,
                     int v8902) { // L11690
#pragma HLS stream variable = v8896 depth = 9
#pragma HLS stream variable = v8897 depth = 9
#pragma HLS stream variable = v8898 depth = 9
#pragma HLS stream variable = v8899 depth = 9
#pragma HLS array_partition variable = v8900 complete dim = 1
#pragma HLS array_partition variable = v8900 complete dim = 2

  float v347;      // L11693
  v347 = 0.000000; // L11694
l_S_k_0_k357:
  for (int k357 = 0; k357 < 768; k357++) { // L11695
    float v8905 = v8896.read();            // v8896[k357];	// L11696
    float a347;                            // L11697
    a347 = v8905;                          // L11698
    float v8907 = v8897.read();            // v8897[k357];	// L11699
    float b347;                            // L11700
    b347 = v8907;                          // L11701
    float v8909 = a347;                    // L11702
    float v8910 = b347;                    // L11703
    float v8911 = v8909 * v8910;           // L11704
    float v8912 = v347;                    // L11705
    float v8913 = v8912 + v8911;           // L11706
    v347 = v8913;                          // L11707
    float v8914 = a347;                    // L11708
    v8898.write(v8914);                    // v8898[k357] = v8914;	// L11709
    float v8915 = b347;                    // L11710
    v8899.write(v8915);                    // v8899[k357] = v8915;	// L11711
  }
  float v8916 = v347;          // L11713
  v8900[v8901][v8902] = v8916; // L11714
}

void PE_kernel_P_4_3(hls::stream<float> &v8917 /* v8917[768] */,
                     hls::stream<float> &v8918 /* v8918[768] */,
                     hls::stream<float> &v8919 /* v8919[768] */,
                     hls::stream<float> &v8920 /* v8920[768] */,
                     float v8921[8][8], int v8922,
                     int v8923) { // L11717
#pragma HLS stream variable = v8917 depth = 9
#pragma HLS stream variable = v8918 depth = 9
#pragma HLS stream variable = v8919 depth = 9
#pragma HLS stream variable = v8920 depth = 9
#pragma HLS array_partition variable = v8921 complete dim = 1
#pragma HLS array_partition variable = v8921 complete dim = 2

  float v348;      // L11720
  v348 = 0.000000; // L11721
l_S_k_0_k358:
  for (int k358 = 0; k358 < 768; k358++) { // L11722
    float v8926 = v8917.read();            // v8917[k358];	// L11723
    float a348;                            // L11724
    a348 = v8926;                          // L11725
    float v8928 = v8918.read();            // v8918[k358];	// L11726
    float b348;                            // L11727
    b348 = v8928;                          // L11728
    float v8930 = a348;                    // L11729
    float v8931 = b348;                    // L11730
    float v8932 = v8930 * v8931;           // L11731
    float v8933 = v348;                    // L11732
    float v8934 = v8933 + v8932;           // L11733
    v348 = v8934;                          // L11734
    float v8935 = a348;                    // L11735
    v8919.write(v8935);                    // v8919[k358] = v8935;	// L11736
    float v8936 = b348;                    // L11737
    v8920.write(v8936);                    // v8920[k358] = v8936;	// L11738
  }
  float v8937 = v348;          // L11740
  v8921[v8922][v8923] = v8937; // L11741
}

void PE_kernel_P_5_3(hls::stream<float> &v8938 /* v8938[768] */,
                     hls::stream<float> &v8939 /* v8939[768] */,
                     hls::stream<float> &v8940 /* v8940[768] */,
                     hls::stream<float> &v8941 /* v8941[768] */,
                     float v8942[8][8], int v8943,
                     int v8944) { // L11744
#pragma HLS stream variable = v8938 depth = 9
#pragma HLS stream variable = v8939 depth = 9
#pragma HLS stream variable = v8940 depth = 9
#pragma HLS stream variable = v8941 depth = 9
#pragma HLS array_partition variable = v8942 complete dim = 1
#pragma HLS array_partition variable = v8942 complete dim = 2

  float v349;      // L11747
  v349 = 0.000000; // L11748
l_S_k_0_k359:
  for (int k359 = 0; k359 < 768; k359++) { // L11749
    float v8947 = v8938.read();            // v8938[k359];	// L11750
    float a349;                            // L11751
    a349 = v8947;                          // L11752
    float v8949 = v8939.read();            // v8939[k359];	// L11753
    float b349;                            // L11754
    b349 = v8949;                          // L11755
    float v8951 = a349;                    // L11756
    float v8952 = b349;                    // L11757
    float v8953 = v8951 * v8952;           // L11758
    float v8954 = v349;                    // L11759
    float v8955 = v8954 + v8953;           // L11760
    v349 = v8955;                          // L11761
    float v8956 = a349;                    // L11762
    v8940.write(v8956);                    // v8940[k359] = v8956;	// L11763
    float v8957 = b349;                    // L11764
    v8941.write(v8957);                    // v8941[k359] = v8957;	// L11765
  }
  float v8958 = v349;          // L11767
  v8942[v8943][v8944] = v8958; // L11768
}

void PE_kernel_P_6_3(hls::stream<float> &v8959 /* v8959[768] */,
                     hls::stream<float> &v8960 /* v8960[768] */,
                     hls::stream<float> &v8961 /* v8961[768] */,
                     hls::stream<float> &v8962 /* v8962[768] */,
                     float v8963[8][8], int v8964,
                     int v8965) { // L11771
#pragma HLS stream variable = v8959 depth = 9
#pragma HLS stream variable = v8960 depth = 9
#pragma HLS stream variable = v8961 depth = 9
#pragma HLS stream variable = v8962 depth = 9
#pragma HLS array_partition variable = v8963 complete dim = 1
#pragma HLS array_partition variable = v8963 complete dim = 2

  float v350;      // L11774
  v350 = 0.000000; // L11775
l_S_k_0_k360:
  for (int k360 = 0; k360 < 768; k360++) { // L11776
    float v8968 = v8959.read();            // v8959[k360];	// L11777
    float a350;                            // L11778
    a350 = v8968;                          // L11779
    float v8970 = v8960.read();            // v8960[k360];	// L11780
    float b350;                            // L11781
    b350 = v8970;                          // L11782
    float v8972 = a350;                    // L11783
    float v8973 = b350;                    // L11784
    float v8974 = v8972 * v8973;           // L11785
    float v8975 = v350;                    // L11786
    float v8976 = v8975 + v8974;           // L11787
    v350 = v8976;                          // L11788
    float v8977 = a350;                    // L11789
    v8961.write(v8977);                    // v8961[k360] = v8977;	// L11790
    float v8978 = b350;                    // L11791
    v8962.write(v8978);                    // v8962[k360] = v8978;	// L11792
  }
  float v8979 = v350;          // L11794
  v8963[v8964][v8965] = v8979; // L11795
}

void PE_kernel_P_7_3(hls::stream<float> &v8980 /* v8980[768] */,
                     hls::stream<float> &v8981 /* v8981[768] */,
                     hls::stream<float> &v8982 /* v8982[768] */,
                     hls::stream<float> &v8983 /* v8983[768] */,
                     float v8984[8][8], int v8985,
                     int v8986) { // L11798
#pragma HLS stream variable = v8980 depth = 9
#pragma HLS stream variable = v8981 depth = 9
#pragma HLS stream variable = v8982 depth = 9
#pragma HLS stream variable = v8983 depth = 9
#pragma HLS array_partition variable = v8984 complete dim = 1
#pragma HLS array_partition variable = v8984 complete dim = 2

  float v351;      // L11801
  v351 = 0.000000; // L11802
l_S_k_0_k361:
  for (int k361 = 0; k361 < 768; k361++) { // L11803
    float v8989 = v8980.read();            // v8980[k361];	// L11804
    float a351;                            // L11805
    a351 = v8989;                          // L11806
    float v8991 = v8981.read();            // v8981[k361];	// L11807
    float b351;                            // L11808
    b351 = v8991;                          // L11809
    float v8993 = a351;                    // L11810
    float v8994 = b351;                    // L11811
    float v8995 = v8993 * v8994;           // L11812
    float v8996 = v351;                    // L11813
    float v8997 = v8996 + v8995;           // L11814
    v351 = v8997;                          // L11815
    float v8998 = a351;                    // L11816
    v8982.write(v8998);                    // v8982[k361] = v8998;	// L11817
    float v8999 = b351;                    // L11818
    v8983.write(v8999);                    // v8983[k361] = v8999;	// L11819
  }
  float v9000 = v351;          // L11821
  v8984[v8985][v8986] = v9000; // L11822
}

void PE_kernel_P_0_4(hls::stream<float> &v9001 /* v9001[768] */,
                     hls::stream<float> &v9002 /* v9002[768] */,
                     hls::stream<float> &v9003 /* v9003[768] */,
                     hls::stream<float> &v9004 /* v9004[768] */,
                     float v9005[8][8], int v9006,
                     int v9007) { // L11825
#pragma HLS stream variable = v9001 depth = 9
#pragma HLS stream variable = v9002 depth = 9
#pragma HLS stream variable = v9003 depth = 9
#pragma HLS stream variable = v9004 depth = 9
#pragma HLS array_partition variable = v9005 complete dim = 1
#pragma HLS array_partition variable = v9005 complete dim = 2

  float v352;      // L11828
  v352 = 0.000000; // L11829
l_S_k_0_k362:
  for (int k362 = 0; k362 < 768; k362++) { // L11830
    float v9010 = v9001.read();            // v9001[k362];	// L11831
    float a352;                            // L11832
    a352 = v9010;                          // L11833
    float v9012 = v9002.read();            // v9002[k362];	// L11834
    float b352;                            // L11835
    b352 = v9012;                          // L11836
    float v9014 = a352;                    // L11837
    float v9015 = b352;                    // L11838
    float v9016 = v9014 * v9015;           // L11839
    float v9017 = v352;                    // L11840
    float v9018 = v9017 + v9016;           // L11841
    v352 = v9018;                          // L11842
    float v9019 = a352;                    // L11843
    v9003.write(v9019);                    // v9003[k362] = v9019;	// L11844
    float v9020 = b352;                    // L11845
    v9004.write(v9020);                    // v9004[k362] = v9020;	// L11846
  }
  float v9021 = v352;          // L11848
  v9005[v9006][v9007] = v9021; // L11849
}

void PE_kernel_P_1_4(hls::stream<float> &v9022 /* v9022[768] */,
                     hls::stream<float> &v9023 /* v9023[768] */,
                     hls::stream<float> &v9024 /* v9024[768] */,
                     hls::stream<float> &v9025 /* v9025[768] */,
                     float v9026[8][8], int v9027,
                     int v9028) { // L11852
#pragma HLS stream variable = v9022 depth = 9
#pragma HLS stream variable = v9023 depth = 9
#pragma HLS stream variable = v9024 depth = 9
#pragma HLS stream variable = v9025 depth = 9
#pragma HLS array_partition variable = v9026 complete dim = 1
#pragma HLS array_partition variable = v9026 complete dim = 2

  float v353;      // L11855
  v353 = 0.000000; // L11856
l_S_k_0_k363:
  for (int k363 = 0; k363 < 768; k363++) { // L11857
    float v9031 = v9022.read();            // v9022[k363];	// L11858
    float a353;                            // L11859
    a353 = v9031;                          // L11860
    float v9033 = v9023.read();            // v9023[k363];	// L11861
    float b353;                            // L11862
    b353 = v9033;                          // L11863
    float v9035 = a353;                    // L11864
    float v9036 = b353;                    // L11865
    float v9037 = v9035 * v9036;           // L11866
    float v9038 = v353;                    // L11867
    float v9039 = v9038 + v9037;           // L11868
    v353 = v9039;                          // L11869
    float v9040 = a353;                    // L11870
    v9024.write(v9040);                    // v9024[k363] = v9040;	// L11871
    float v9041 = b353;                    // L11872
    v9025.write(v9041);                    // v9025[k363] = v9041;	// L11873
  }
  float v9042 = v353;          // L11875
  v9026[v9027][v9028] = v9042; // L11876
}

void PE_kernel_P_2_4(hls::stream<float> &v9043 /* v9043[768] */,
                     hls::stream<float> &v9044 /* v9044[768] */,
                     hls::stream<float> &v9045 /* v9045[768] */,
                     hls::stream<float> &v9046 /* v9046[768] */,
                     float v9047[8][8], int v9048,
                     int v9049) { // L11879
#pragma HLS stream variable = v9043 depth = 9
#pragma HLS stream variable = v9044 depth = 9
#pragma HLS stream variable = v9045 depth = 9
#pragma HLS stream variable = v9046 depth = 9
#pragma HLS array_partition variable = v9047 complete dim = 1
#pragma HLS array_partition variable = v9047 complete dim = 2

  float v354;      // L11882
  v354 = 0.000000; // L11883
l_S_k_0_k364:
  for (int k364 = 0; k364 < 768; k364++) { // L11884
    float v9052 = v9043.read();            // v9043[k364];	// L11885
    float a354;                            // L11886
    a354 = v9052;                          // L11887
    float v9054 = v9044.read();            // v9044[k364];	// L11888
    float b354;                            // L11889
    b354 = v9054;                          // L11890
    float v9056 = a354;                    // L11891
    float v9057 = b354;                    // L11892
    float v9058 = v9056 * v9057;           // L11893
    float v9059 = v354;                    // L11894
    float v9060 = v9059 + v9058;           // L11895
    v354 = v9060;                          // L11896
    float v9061 = a354;                    // L11897
    v9045.write(v9061);                    // v9045[k364] = v9061;	// L11898
    float v9062 = b354;                    // L11899
    v9046.write(v9062);                    // v9046[k364] = v9062;	// L11900
  }
  float v9063 = v354;          // L11902
  v9047[v9048][v9049] = v9063; // L11903
}

void PE_kernel_P_3_4(hls::stream<float> &v9064 /* v9064[768] */,
                     hls::stream<float> &v9065 /* v9065[768] */,
                     hls::stream<float> &v9066 /* v9066[768] */,
                     hls::stream<float> &v9067 /* v9067[768] */,
                     float v9068[8][8], int v9069,
                     int v9070) { // L11906
#pragma HLS stream variable = v9064 depth = 9
#pragma HLS stream variable = v9065 depth = 9
#pragma HLS stream variable = v9066 depth = 9
#pragma HLS stream variable = v9067 depth = 9
#pragma HLS array_partition variable = v9068 complete dim = 1
#pragma HLS array_partition variable = v9068 complete dim = 2

  float v355;      // L11909
  v355 = 0.000000; // L11910
l_S_k_0_k365:
  for (int k365 = 0; k365 < 768; k365++) { // L11911
    float v9073 = v9064.read();            // v9064[k365];	// L11912
    float a355;                            // L11913
    a355 = v9073;                          // L11914
    float v9075 = v9065.read();            // v9065[k365];	// L11915
    float b355;                            // L11916
    b355 = v9075;                          // L11917
    float v9077 = a355;                    // L11918
    float v9078 = b355;                    // L11919
    float v9079 = v9077 * v9078;           // L11920
    float v9080 = v355;                    // L11921
    float v9081 = v9080 + v9079;           // L11922
    v355 = v9081;                          // L11923
    float v9082 = a355;                    // L11924
    v9066.write(v9082);                    // v9066[k365] = v9082;	// L11925
    float v9083 = b355;                    // L11926
    v9067.write(v9083);                    // v9067[k365] = v9083;	// L11927
  }
  float v9084 = v355;          // L11929
  v9068[v9069][v9070] = v9084; // L11930
}

void PE_kernel_P_4_4(hls::stream<float> &v9085 /* v9085[768] */,
                     hls::stream<float> &v9086 /* v9086[768] */,
                     hls::stream<float> &v9087 /* v9087[768] */,
                     hls::stream<float> &v9088 /* v9088[768] */,
                     float v9089[8][8], int v9090,
                     int v9091) { // L11933
#pragma HLS stream variable = v9085 depth = 9
#pragma HLS stream variable = v9086 depth = 9
#pragma HLS stream variable = v9087 depth = 9
#pragma HLS stream variable = v9088 depth = 9
#pragma HLS array_partition variable = v9089 complete dim = 1
#pragma HLS array_partition variable = v9089 complete dim = 2

  float v356;      // L11936
  v356 = 0.000000; // L11937
l_S_k_0_k366:
  for (int k366 = 0; k366 < 768; k366++) { // L11938
    float v9094 = v9085.read();            // v9085[k366];	// L11939
    float a356;                            // L11940
    a356 = v9094;                          // L11941
    float v9096 = v9086.read();            // v9086[k366];	// L11942
    float b356;                            // L11943
    b356 = v9096;                          // L11944
    float v9098 = a356;                    // L11945
    float v9099 = b356;                    // L11946
    float v9100 = v9098 * v9099;           // L11947
    float v9101 = v356;                    // L11948
    float v9102 = v9101 + v9100;           // L11949
    v356 = v9102;                          // L11950
    float v9103 = a356;                    // L11951
    v9087.write(v9103);                    // v9087[k366] = v9103;	// L11952
    float v9104 = b356;                    // L11953
    v9088.write(v9104);                    // v9088[k366] = v9104;	// L11954
  }
  float v9105 = v356;          // L11956
  v9089[v9090][v9091] = v9105; // L11957
}

void PE_kernel_P_5_4(hls::stream<float> &v9106 /* v9106[768] */,
                     hls::stream<float> &v9107 /* v9107[768] */,
                     hls::stream<float> &v9108 /* v9108[768] */,
                     hls::stream<float> &v9109 /* v9109[768] */,
                     float v9110[8][8], int v9111,
                     int v9112) { // L11960
#pragma HLS stream variable = v9106 depth = 9
#pragma HLS stream variable = v9107 depth = 9
#pragma HLS stream variable = v9108 depth = 9
#pragma HLS stream variable = v9109 depth = 9
#pragma HLS array_partition variable = v9110 complete dim = 1
#pragma HLS array_partition variable = v9110 complete dim = 2

  float v357;      // L11963
  v357 = 0.000000; // L11964
l_S_k_0_k367:
  for (int k367 = 0; k367 < 768; k367++) { // L11965
    float v9115 = v9106.read();            // v9106[k367];	// L11966
    float a357;                            // L11967
    a357 = v9115;                          // L11968
    float v9117 = v9107.read();            // v9107[k367];	// L11969
    float b357;                            // L11970
    b357 = v9117;                          // L11971
    float v9119 = a357;                    // L11972
    float v9120 = b357;                    // L11973
    float v9121 = v9119 * v9120;           // L11974
    float v9122 = v357;                    // L11975
    float v9123 = v9122 + v9121;           // L11976
    v357 = v9123;                          // L11977
    float v9124 = a357;                    // L11978
    v9108.write(v9124);                    // v9108[k367] = v9124;	// L11979
    float v9125 = b357;                    // L11980
    v9109.write(v9125);                    // v9109[k367] = v9125;	// L11981
  }
  float v9126 = v357;          // L11983
  v9110[v9111][v9112] = v9126; // L11984
}

void PE_kernel_P_6_4(hls::stream<float> &v9127 /* v9127[768] */,
                     hls::stream<float> &v9128 /* v9128[768] */,
                     hls::stream<float> &v9129 /* v9129[768] */,
                     hls::stream<float> &v9130 /* v9130[768] */,
                     float v9131[8][8], int v9132,
                     int v9133) { // L11987
#pragma HLS stream variable = v9127 depth = 9
#pragma HLS stream variable = v9128 depth = 9
#pragma HLS stream variable = v9129 depth = 9
#pragma HLS stream variable = v9130 depth = 9
#pragma HLS array_partition variable = v9131 complete dim = 1
#pragma HLS array_partition variable = v9131 complete dim = 2

  float v358;      // L11990
  v358 = 0.000000; // L11991
l_S_k_0_k368:
  for (int k368 = 0; k368 < 768; k368++) { // L11992
    float v9136 = v9127.read();            // v9127[k368];	// L11993
    float a358;                            // L11994
    a358 = v9136;                          // L11995
    float v9138 = v9128.read();            // v9128[k368];	// L11996
    float b358;                            // L11997
    b358 = v9138;                          // L11998
    float v9140 = a358;                    // L11999
    float v9141 = b358;                    // L12000
    float v9142 = v9140 * v9141;           // L12001
    float v9143 = v358;                    // L12002
    float v9144 = v9143 + v9142;           // L12003
    v358 = v9144;                          // L12004
    float v9145 = a358;                    // L12005
    v9129.write(v9145);                    // v9129[k368] = v9145;	// L12006
    float v9146 = b358;                    // L12007
    v9130.write(v9146);                    // v9130[k368] = v9146;	// L12008
  }
  float v9147 = v358;          // L12010
  v9131[v9132][v9133] = v9147; // L12011
}

void PE_kernel_P_7_4(hls::stream<float> &v9148 /* v9148[768] */,
                     hls::stream<float> &v9149 /* v9149[768] */,
                     hls::stream<float> &v9150 /* v9150[768] */,
                     hls::stream<float> &v9151 /* v9151[768] */,
                     float v9152[8][8], int v9153,
                     int v9154) { // L12014
#pragma HLS stream variable = v9148 depth = 9
#pragma HLS stream variable = v9149 depth = 9
#pragma HLS stream variable = v9150 depth = 9
#pragma HLS stream variable = v9151 depth = 9
#pragma HLS array_partition variable = v9152 complete dim = 1
#pragma HLS array_partition variable = v9152 complete dim = 2

  float v359;      // L12017
  v359 = 0.000000; // L12018
l_S_k_0_k369:
  for (int k369 = 0; k369 < 768; k369++) { // L12019
    float v9157 = v9148.read();            // v9148[k369];	// L12020
    float a359;                            // L12021
    a359 = v9157;                          // L12022
    float v9159 = v9149.read();            // v9149[k369];	// L12023
    float b359;                            // L12024
    b359 = v9159;                          // L12025
    float v9161 = a359;                    // L12026
    float v9162 = b359;                    // L12027
    float v9163 = v9161 * v9162;           // L12028
    float v9164 = v359;                    // L12029
    float v9165 = v9164 + v9163;           // L12030
    v359 = v9165;                          // L12031
    float v9166 = a359;                    // L12032
    v9150.write(v9166);                    // v9150[k369] = v9166;	// L12033
    float v9167 = b359;                    // L12034
    v9151.write(v9167);                    // v9151[k369] = v9167;	// L12035
  }
  float v9168 = v359;          // L12037
  v9152[v9153][v9154] = v9168; // L12038
}

void PE_kernel_P_0_5(hls::stream<float> &v9169 /* v9169[768] */,
                     hls::stream<float> &v9170 /* v9170[768] */,
                     hls::stream<float> &v9171 /* v9171[768] */,
                     hls::stream<float> &v9172 /* v9172[768] */,
                     float v9173[8][8], int v9174,
                     int v9175) { // L12041
#pragma HLS stream variable = v9169 depth = 9
#pragma HLS stream variable = v9170 depth = 9
#pragma HLS stream variable = v9171 depth = 9
#pragma HLS stream variable = v9172 depth = 9
#pragma HLS array_partition variable = v9173 complete dim = 1
#pragma HLS array_partition variable = v9173 complete dim = 2

  float v360;      // L12044
  v360 = 0.000000; // L12045
l_S_k_0_k370:
  for (int k370 = 0; k370 < 768; k370++) { // L12046
    float v9178 = v9169.read();            // v9169[k370];	// L12047
    float a360;                            // L12048
    a360 = v9178;                          // L12049
    float v9180 = v9170.read();            // v9170[k370];	// L12050
    float b360;                            // L12051
    b360 = v9180;                          // L12052
    float v9182 = a360;                    // L12053
    float v9183 = b360;                    // L12054
    float v9184 = v9182 * v9183;           // L12055
    float v9185 = v360;                    // L12056
    float v9186 = v9185 + v9184;           // L12057
    v360 = v9186;                          // L12058
    float v9187 = a360;                    // L12059
    v9171.write(v9187);                    // v9171[k370] = v9187;	// L12060
    float v9188 = b360;                    // L12061
    v9172.write(v9188);                    // v9172[k370] = v9188;	// L12062
  }
  float v9189 = v360;          // L12064
  v9173[v9174][v9175] = v9189; // L12065
}

void PE_kernel_P_1_5(hls::stream<float> &v9190 /* v9190[768] */,
                     hls::stream<float> &v9191 /* v9191[768] */,
                     hls::stream<float> &v9192 /* v9192[768] */,
                     hls::stream<float> &v9193 /* v9193[768] */,
                     float v9194[8][8], int v9195,
                     int v9196) { // L12068
#pragma HLS stream variable = v9190 depth = 9
#pragma HLS stream variable = v9191 depth = 9
#pragma HLS stream variable = v9192 depth = 9
#pragma HLS stream variable = v9193 depth = 9
#pragma HLS array_partition variable = v9194 complete dim = 1
#pragma HLS array_partition variable = v9194 complete dim = 2

  float v361;      // L12071
  v361 = 0.000000; // L12072
l_S_k_0_k371:
  for (int k371 = 0; k371 < 768; k371++) { // L12073
    float v9199 = v9190.read();            // v9190[k371];	// L12074
    float a361;                            // L12075
    a361 = v9199;                          // L12076
    float v9201 = v9191.read();            // v9191[k371];	// L12077
    float b361;                            // L12078
    b361 = v9201;                          // L12079
    float v9203 = a361;                    // L12080
    float v9204 = b361;                    // L12081
    float v9205 = v9203 * v9204;           // L12082
    float v9206 = v361;                    // L12083
    float v9207 = v9206 + v9205;           // L12084
    v361 = v9207;                          // L12085
    float v9208 = a361;                    // L12086
    v9192.write(v9208);                    // v9192[k371] = v9208;	// L12087
    float v9209 = b361;                    // L12088
    v9193.write(v9209);                    // v9193[k371] = v9209;	// L12089
  }
  float v9210 = v361;          // L12091
  v9194[v9195][v9196] = v9210; // L12092
}

void PE_kernel_P_2_5(hls::stream<float> &v9211 /* v9211[768] */,
                     hls::stream<float> &v9212 /* v9212[768] */,
                     hls::stream<float> &v9213 /* v9213[768] */,
                     hls::stream<float> &v9214 /* v9214[768] */,
                     float v9215[8][8], int v9216,
                     int v9217) { // L12095
#pragma HLS stream variable = v9211 depth = 9
#pragma HLS stream variable = v9212 depth = 9
#pragma HLS stream variable = v9213 depth = 9
#pragma HLS stream variable = v9214 depth = 9
#pragma HLS array_partition variable = v9215 complete dim = 1
#pragma HLS array_partition variable = v9215 complete dim = 2

  float v362;      // L12098
  v362 = 0.000000; // L12099
l_S_k_0_k372:
  for (int k372 = 0; k372 < 768; k372++) { // L12100
    float v9220 = v9211.read();            // v9211[k372];	// L12101
    float a362;                            // L12102
    a362 = v9220;                          // L12103
    float v9222 = v9212.read();            // v9212[k372];	// L12104
    float b362;                            // L12105
    b362 = v9222;                          // L12106
    float v9224 = a362;                    // L12107
    float v9225 = b362;                    // L12108
    float v9226 = v9224 * v9225;           // L12109
    float v9227 = v362;                    // L12110
    float v9228 = v9227 + v9226;           // L12111
    v362 = v9228;                          // L12112
    float v9229 = a362;                    // L12113
    v9213.write(v9229);                    // v9213[k372] = v9229;	// L12114
    float v9230 = b362;                    // L12115
    v9214.write(v9230);                    // v9214[k372] = v9230;	// L12116
  }
  float v9231 = v362;          // L12118
  v9215[v9216][v9217] = v9231; // L12119
}

void PE_kernel_P_3_5(hls::stream<float> &v9232 /* v9232[768] */,
                     hls::stream<float> &v9233 /* v9233[768] */,
                     hls::stream<float> &v9234 /* v9234[768] */,
                     hls::stream<float> &v9235 /* v9235[768] */,
                     float v9236[8][8], int v9237,
                     int v9238) { // L12122
#pragma HLS stream variable = v9232 depth = 9
#pragma HLS stream variable = v9233 depth = 9
#pragma HLS stream variable = v9234 depth = 9
#pragma HLS stream variable = v9235 depth = 9
#pragma HLS array_partition variable = v9236 complete dim = 1
#pragma HLS array_partition variable = v9236 complete dim = 2

  float v363;      // L12125
  v363 = 0.000000; // L12126
l_S_k_0_k373:
  for (int k373 = 0; k373 < 768; k373++) { // L12127
    float v9241 = v9232.read();            // v9232[k373];	// L12128
    float a363;                            // L12129
    a363 = v9241;                          // L12130
    float v9243 = v9233.read();            // v9233[k373];	// L12131
    float b363;                            // L12132
    b363 = v9243;                          // L12133
    float v9245 = a363;                    // L12134
    float v9246 = b363;                    // L12135
    float v9247 = v9245 * v9246;           // L12136
    float v9248 = v363;                    // L12137
    float v9249 = v9248 + v9247;           // L12138
    v363 = v9249;                          // L12139
    float v9250 = a363;                    // L12140
    v9234.write(v9250);                    // v9234[k373] = v9250;	// L12141
    float v9251 = b363;                    // L12142
    v9235.write(v9251);                    // v9235[k373] = v9251;	// L12143
  }
  float v9252 = v363;          // L12145
  v9236[v9237][v9238] = v9252; // L12146
}

void PE_kernel_P_4_5(hls::stream<float> &v9253 /* v9253[768] */,
                     hls::stream<float> &v9254 /* v9254[768] */,
                     hls::stream<float> &v9255 /* v9255[768] */,
                     hls::stream<float> &v9256 /* v9256[768] */,
                     float v9257[8][8], int v9258,
                     int v9259) { // L12149
#pragma HLS stream variable = v9253 depth = 9
#pragma HLS stream variable = v9254 depth = 9
#pragma HLS stream variable = v9255 depth = 9
#pragma HLS stream variable = v9256 depth = 9
#pragma HLS array_partition variable = v9257 complete dim = 1
#pragma HLS array_partition variable = v9257 complete dim = 2

  float v364;      // L12152
  v364 = 0.000000; // L12153
l_S_k_0_k374:
  for (int k374 = 0; k374 < 768; k374++) { // L12154
    float v9262 = v9253.read();            // v9253[k374];	// L12155
    float a364;                            // L12156
    a364 = v9262;                          // L12157
    float v9264 = v9254.read();            // v9254[k374];	// L12158
    float b364;                            // L12159
    b364 = v9264;                          // L12160
    float v9266 = a364;                    // L12161
    float v9267 = b364;                    // L12162
    float v9268 = v9266 * v9267;           // L12163
    float v9269 = v364;                    // L12164
    float v9270 = v9269 + v9268;           // L12165
    v364 = v9270;                          // L12166
    float v9271 = a364;                    // L12167
    v9255.write(v9271);                    // v9255[k374] = v9271;	// L12168
    float v9272 = b364;                    // L12169
    v9256.write(v9272);                    // v9256[k374] = v9272;	// L12170
  }
  float v9273 = v364;          // L12172
  v9257[v9258][v9259] = v9273; // L12173
}

void PE_kernel_P_5_5(hls::stream<float> &v9274 /* v9274[768] */,
                     hls::stream<float> &v9275 /* v9275[768] */,
                     hls::stream<float> &v9276 /* v9276[768] */,
                     hls::stream<float> &v9277 /* v9277[768] */,
                     float v9278[8][8], int v9279,
                     int v9280) { // L12176
#pragma HLS stream variable = v9274 depth = 9
#pragma HLS stream variable = v9275 depth = 9
#pragma HLS stream variable = v9276 depth = 9
#pragma HLS stream variable = v9277 depth = 9
#pragma HLS array_partition variable = v9278 complete dim = 1
#pragma HLS array_partition variable = v9278 complete dim = 2

  float v365;      // L12179
  v365 = 0.000000; // L12180
l_S_k_0_k375:
  for (int k375 = 0; k375 < 768; k375++) { // L12181
    float v9283 = v9274.read();            // v9274[k375];	// L12182
    float a365;                            // L12183
    a365 = v9283;                          // L12184
    float v9285 = v9275.read();            // v9275[k375];	// L12185
    float b365;                            // L12186
    b365 = v9285;                          // L12187
    float v9287 = a365;                    // L12188
    float v9288 = b365;                    // L12189
    float v9289 = v9287 * v9288;           // L12190
    float v9290 = v365;                    // L12191
    float v9291 = v9290 + v9289;           // L12192
    v365 = v9291;                          // L12193
    float v9292 = a365;                    // L12194
    v9276.write(v9292);                    // v9276[k375] = v9292;	// L12195
    float v9293 = b365;                    // L12196
    v9277.write(v9293);                    // v9277[k375] = v9293;	// L12197
  }
  float v9294 = v365;          // L12199
  v9278[v9279][v9280] = v9294; // L12200
}

void PE_kernel_P_6_5(hls::stream<float> &v9295 /* v9295[768] */,
                     hls::stream<float> &v9296 /* v9296[768] */,
                     hls::stream<float> &v9297 /* v9297[768] */,
                     hls::stream<float> &v9298 /* v9298[768] */,
                     float v9299[8][8], int v9300,
                     int v9301) { // L12203
#pragma HLS stream variable = v9295 depth = 9
#pragma HLS stream variable = v9296 depth = 9
#pragma HLS stream variable = v9297 depth = 9
#pragma HLS stream variable = v9298 depth = 9
#pragma HLS array_partition variable = v9299 complete dim = 1
#pragma HLS array_partition variable = v9299 complete dim = 2

  float v366;      // L12206
  v366 = 0.000000; // L12207
l_S_k_0_k376:
  for (int k376 = 0; k376 < 768; k376++) { // L12208
    float v9304 = v9295.read();            // v9295[k376];	// L12209
    float a366;                            // L12210
    a366 = v9304;                          // L12211
    float v9306 = v9296.read();            // v9296[k376];	// L12212
    float b366;                            // L12213
    b366 = v9306;                          // L12214
    float v9308 = a366;                    // L12215
    float v9309 = b366;                    // L12216
    float v9310 = v9308 * v9309;           // L12217
    float v9311 = v366;                    // L12218
    float v9312 = v9311 + v9310;           // L12219
    v366 = v9312;                          // L12220
    float v9313 = a366;                    // L12221
    v9297.write(v9313);                    // v9297[k376] = v9313;	// L12222
    float v9314 = b366;                    // L12223
    v9298.write(v9314);                    // v9298[k376] = v9314;	// L12224
  }
  float v9315 = v366;          // L12226
  v9299[v9300][v9301] = v9315; // L12227
}

void PE_kernel_P_7_5(hls::stream<float> &v9316 /* v9316[768] */,
                     hls::stream<float> &v9317 /* v9317[768] */,
                     hls::stream<float> &v9318 /* v9318[768] */,
                     hls::stream<float> &v9319 /* v9319[768] */,
                     float v9320[8][8], int v9321,
                     int v9322) { // L12230
#pragma HLS stream variable = v9316 depth = 9
#pragma HLS stream variable = v9317 depth = 9
#pragma HLS stream variable = v9318 depth = 9
#pragma HLS stream variable = v9319 depth = 9
#pragma HLS array_partition variable = v9320 complete dim = 1
#pragma HLS array_partition variable = v9320 complete dim = 2

  float v367;      // L12233
  v367 = 0.000000; // L12234
l_S_k_0_k377:
  for (int k377 = 0; k377 < 768; k377++) { // L12235
    float v9325 = v9316.read();            // v9316[k377];	// L12236
    float a367;                            // L12237
    a367 = v9325;                          // L12238
    float v9327 = v9317.read();            // v9317[k377];	// L12239
    float b367;                            // L12240
    b367 = v9327;                          // L12241
    float v9329 = a367;                    // L12242
    float v9330 = b367;                    // L12243
    float v9331 = v9329 * v9330;           // L12244
    float v9332 = v367;                    // L12245
    float v9333 = v9332 + v9331;           // L12246
    v367 = v9333;                          // L12247
    float v9334 = a367;                    // L12248
    v9318.write(v9334);                    // v9318[k377] = v9334;	// L12249
    float v9335 = b367;                    // L12250
    v9319.write(v9335);                    // v9319[k377] = v9335;	// L12251
  }
  float v9336 = v367;          // L12253
  v9320[v9321][v9322] = v9336; // L12254
}

void PE_kernel_P_0_6(hls::stream<float> &v9337 /* v9337[768] */,
                     hls::stream<float> &v9338 /* v9338[768] */,
                     hls::stream<float> &v9339 /* v9339[768] */,
                     hls::stream<float> &v9340 /* v9340[768] */,
                     float v9341[8][8], int v9342,
                     int v9343) { // L12257
#pragma HLS stream variable = v9337 depth = 9
#pragma HLS stream variable = v9338 depth = 9
#pragma HLS stream variable = v9339 depth = 9
#pragma HLS stream variable = v9340 depth = 9
#pragma HLS array_partition variable = v9341 complete dim = 1
#pragma HLS array_partition variable = v9341 complete dim = 2

  float v368;      // L12260
  v368 = 0.000000; // L12261
l_S_k_0_k378:
  for (int k378 = 0; k378 < 768; k378++) { // L12262
    float v9346 = v9337.read();            // v9337[k378];	// L12263
    float a368;                            // L12264
    a368 = v9346;                          // L12265
    float v9348 = v9338.read();            // v9338[k378];	// L12266
    float b368;                            // L12267
    b368 = v9348;                          // L12268
    float v9350 = a368;                    // L12269
    float v9351 = b368;                    // L12270
    float v9352 = v9350 * v9351;           // L12271
    float v9353 = v368;                    // L12272
    float v9354 = v9353 + v9352;           // L12273
    v368 = v9354;                          // L12274
    float v9355 = a368;                    // L12275
    v9339.write(v9355);                    // v9339[k378] = v9355;	// L12276
    float v9356 = b368;                    // L12277
    v9340.write(v9356);                    // v9340[k378] = v9356;	// L12278
  }
  float v9357 = v368;          // L12280
  v9341[v9342][v9343] = v9357; // L12281
}

void PE_kernel_P_1_6(hls::stream<float> &v9358 /* v9358[768] */,
                     hls::stream<float> &v9359 /* v9359[768] */,
                     hls::stream<float> &v9360 /* v9360[768] */,
                     hls::stream<float> &v9361 /* v9361[768] */,
                     float v9362[8][8], int v9363,
                     int v9364) { // L12284
#pragma HLS stream variable = v9358 depth = 9
#pragma HLS stream variable = v9359 depth = 9
#pragma HLS stream variable = v9360 depth = 9
#pragma HLS stream variable = v9361 depth = 9
#pragma HLS array_partition variable = v9362 complete dim = 1
#pragma HLS array_partition variable = v9362 complete dim = 2

  float v369;      // L12287
  v369 = 0.000000; // L12288
l_S_k_0_k379:
  for (int k379 = 0; k379 < 768; k379++) { // L12289
    float v9367 = v9358.read();            // v9358[k379];	// L12290
    float a369;                            // L12291
    a369 = v9367;                          // L12292
    float v9369 = v9359.read();            // v9359[k379];	// L12293
    float b369;                            // L12294
    b369 = v9369;                          // L12295
    float v9371 = a369;                    // L12296
    float v9372 = b369;                    // L12297
    float v9373 = v9371 * v9372;           // L12298
    float v9374 = v369;                    // L12299
    float v9375 = v9374 + v9373;           // L12300
    v369 = v9375;                          // L12301
    float v9376 = a369;                    // L12302
    v9360.write(v9376);                    // v9360[k379] = v9376;	// L12303
    float v9377 = b369;                    // L12304
    v9361.write(v9377);                    // v9361[k379] = v9377;	// L12305
  }
  float v9378 = v369;          // L12307
  v9362[v9363][v9364] = v9378; // L12308
}

void PE_kernel_P_2_6(hls::stream<float> &v9379 /* v9379[768] */,
                     hls::stream<float> &v9380 /* v9380[768] */,
                     hls::stream<float> &v9381 /* v9381[768] */,
                     hls::stream<float> &v9382 /* v9382[768] */,
                     float v9383[8][8], int v9384,
                     int v9385) { // L12311
#pragma HLS stream variable = v9379 depth = 9
#pragma HLS stream variable = v9380 depth = 9
#pragma HLS stream variable = v9381 depth = 9
#pragma HLS stream variable = v9382 depth = 9
#pragma HLS array_partition variable = v9383 complete dim = 1
#pragma HLS array_partition variable = v9383 complete dim = 2

  float v370;      // L12314
  v370 = 0.000000; // L12315
l_S_k_0_k380:
  for (int k380 = 0; k380 < 768; k380++) { // L12316
    float v9388 = v9379.read();            // v9379[k380];	// L12317
    float a370;                            // L12318
    a370 = v9388;                          // L12319
    float v9390 = v9380.read();            // v9380[k380];	// L12320
    float b370;                            // L12321
    b370 = v9390;                          // L12322
    float v9392 = a370;                    // L12323
    float v9393 = b370;                    // L12324
    float v9394 = v9392 * v9393;           // L12325
    float v9395 = v370;                    // L12326
    float v9396 = v9395 + v9394;           // L12327
    v370 = v9396;                          // L12328
    float v9397 = a370;                    // L12329
    v9381.write(v9397);                    // v9381[k380] = v9397;	// L12330
    float v9398 = b370;                    // L12331
    v9382.write(v9398);                    // v9382[k380] = v9398;	// L12332
  }
  float v9399 = v370;          // L12334
  v9383[v9384][v9385] = v9399; // L12335
}

void PE_kernel_P_3_6(hls::stream<float> &v9400 /* v9400[768] */,
                     hls::stream<float> &v9401 /* v9401[768] */,
                     hls::stream<float> &v9402 /* v9402[768] */,
                     hls::stream<float> &v9403 /* v9403[768] */,
                     float v9404[8][8], int v9405,
                     int v9406) { // L12338
#pragma HLS stream variable = v9400 depth = 9
#pragma HLS stream variable = v9401 depth = 9
#pragma HLS stream variable = v9402 depth = 9
#pragma HLS stream variable = v9403 depth = 9
#pragma HLS array_partition variable = v9404 complete dim = 1
#pragma HLS array_partition variable = v9404 complete dim = 2

  float v371;      // L12341
  v371 = 0.000000; // L12342
l_S_k_0_k381:
  for (int k381 = 0; k381 < 768; k381++) { // L12343
    float v9409 = v9400.read();            // v9400[k381];	// L12344
    float a371;                            // L12345
    a371 = v9409;                          // L12346
    float v9411 = v9401.read();            // v9401[k381];	// L12347
    float b371;                            // L12348
    b371 = v9411;                          // L12349
    float v9413 = a371;                    // L12350
    float v9414 = b371;                    // L12351
    float v9415 = v9413 * v9414;           // L12352
    float v9416 = v371;                    // L12353
    float v9417 = v9416 + v9415;           // L12354
    v371 = v9417;                          // L12355
    float v9418 = a371;                    // L12356
    v9402.write(v9418);                    // v9402[k381] = v9418;	// L12357
    float v9419 = b371;                    // L12358
    v9403.write(v9419);                    // v9403[k381] = v9419;	// L12359
  }
  float v9420 = v371;          // L12361
  v9404[v9405][v9406] = v9420; // L12362
}

void PE_kernel_P_4_6(hls::stream<float> &v9421 /* v9421[768] */,
                     hls::stream<float> &v9422 /* v9422[768] */,
                     hls::stream<float> &v9423 /* v9423[768] */,
                     hls::stream<float> &v9424 /* v9424[768] */,
                     float v9425[8][8], int v9426,
                     int v9427) { // L12365
#pragma HLS stream variable = v9421 depth = 9
#pragma HLS stream variable = v9422 depth = 9
#pragma HLS stream variable = v9423 depth = 9
#pragma HLS stream variable = v9424 depth = 9
#pragma HLS array_partition variable = v9425 complete dim = 1
#pragma HLS array_partition variable = v9425 complete dim = 2

  float v372;      // L12368
  v372 = 0.000000; // L12369
l_S_k_0_k382:
  for (int k382 = 0; k382 < 768; k382++) { // L12370
    float v9430 = v9421.read();            // v9421[k382];	// L12371
    float a372;                            // L12372
    a372 = v9430;                          // L12373
    float v9432 = v9422.read();            // v9422[k382];	// L12374
    float b372;                            // L12375
    b372 = v9432;                          // L12376
    float v9434 = a372;                    // L12377
    float v9435 = b372;                    // L12378
    float v9436 = v9434 * v9435;           // L12379
    float v9437 = v372;                    // L12380
    float v9438 = v9437 + v9436;           // L12381
    v372 = v9438;                          // L12382
    float v9439 = a372;                    // L12383
    v9423.write(v9439);                    // v9423[k382] = v9439;	// L12384
    float v9440 = b372;                    // L12385
    v9424.write(v9440);                    // v9424[k382] = v9440;	// L12386
  }
  float v9441 = v372;          // L12388
  v9425[v9426][v9427] = v9441; // L12389
}

void PE_kernel_P_5_6(hls::stream<float> &v9442 /* v9442[768] */,
                     hls::stream<float> &v9443 /* v9443[768] */,
                     hls::stream<float> &v9444 /* v9444[768] */,
                     hls::stream<float> &v9445 /* v9445[768] */,
                     float v9446[8][8], int v9447,
                     int v9448) { // L12392
#pragma HLS stream variable = v9442 depth = 9
#pragma HLS stream variable = v9443 depth = 9
#pragma HLS stream variable = v9444 depth = 9
#pragma HLS stream variable = v9445 depth = 9
#pragma HLS array_partition variable = v9446 complete dim = 1
#pragma HLS array_partition variable = v9446 complete dim = 2

  float v373;      // L12395
  v373 = 0.000000; // L12396
l_S_k_0_k383:
  for (int k383 = 0; k383 < 768; k383++) { // L12397
    float v9451 = v9442.read();            // v9442[k383];	// L12398
    float a373;                            // L12399
    a373 = v9451;                          // L12400
    float v9453 = v9443.read();            // v9443[k383];	// L12401
    float b373;                            // L12402
    b373 = v9453;                          // L12403
    float v9455 = a373;                    // L12404
    float v9456 = b373;                    // L12405
    float v9457 = v9455 * v9456;           // L12406
    float v9458 = v373;                    // L12407
    float v9459 = v9458 + v9457;           // L12408
    v373 = v9459;                          // L12409
    float v9460 = a373;                    // L12410
    v9444.write(v9460);                    // v9444[k383] = v9460;	// L12411
    float v9461 = b373;                    // L12412
    v9445.write(v9461);                    // v9445[k383] = v9461;	// L12413
  }
  float v9462 = v373;          // L12415
  v9446[v9447][v9448] = v9462; // L12416
}

void PE_kernel_P_6_6(hls::stream<float> &v9463 /* v9463[768] */,
                     hls::stream<float> &v9464 /* v9464[768] */,
                     hls::stream<float> &v9465 /* v9465[768] */,
                     hls::stream<float> &v9466 /* v9466[768] */,
                     float v9467[8][8], int v9468,
                     int v9469) { // L12419
#pragma HLS stream variable = v9463 depth = 9
#pragma HLS stream variable = v9464 depth = 9
#pragma HLS stream variable = v9465 depth = 9
#pragma HLS stream variable = v9466 depth = 9
#pragma HLS array_partition variable = v9467 complete dim = 1
#pragma HLS array_partition variable = v9467 complete dim = 2

  float v374;      // L12422
  v374 = 0.000000; // L12423
l_S_k_0_k384:
  for (int k384 = 0; k384 < 768; k384++) { // L12424
    float v9472 = v9463.read();            // v9463[k384];	// L12425
    float a374;                            // L12426
    a374 = v9472;                          // L12427
    float v9474 = v9464.read();            // v9464[k384];	// L12428
    float b374;                            // L12429
    b374 = v9474;                          // L12430
    float v9476 = a374;                    // L12431
    float v9477 = b374;                    // L12432
    float v9478 = v9476 * v9477;           // L12433
    float v9479 = v374;                    // L12434
    float v9480 = v9479 + v9478;           // L12435
    v374 = v9480;                          // L12436
    float v9481 = a374;                    // L12437
    v9465.write(v9481);                    // v9465[k384] = v9481;	// L12438
    float v9482 = b374;                    // L12439
    v9466.write(v9482);                    // v9466[k384] = v9482;	// L12440
  }
  float v9483 = v374;          // L12442
  v9467[v9468][v9469] = v9483; // L12443
}

void PE_kernel_P_7_6(hls::stream<float> &v9484 /* v9484[768] */,
                     hls::stream<float> &v9485 /* v9485[768] */,
                     hls::stream<float> &v9486 /* v9486[768] */,
                     hls::stream<float> &v9487 /* v9487[768] */,
                     float v9488[8][8], int v9489,
                     int v9490) { // L12446
#pragma HLS stream variable = v9484 depth = 9
#pragma HLS stream variable = v9485 depth = 9
#pragma HLS stream variable = v9486 depth = 9
#pragma HLS stream variable = v9487 depth = 9
#pragma HLS array_partition variable = v9488 complete dim = 1
#pragma HLS array_partition variable = v9488 complete dim = 2

  float v375;      // L12449
  v375 = 0.000000; // L12450
l_S_k_0_k385:
  for (int k385 = 0; k385 < 768; k385++) { // L12451
    float v9493 = v9484.read();            // v9484[k385];	// L12452
    float a375;                            // L12453
    a375 = v9493;                          // L12454
    float v9495 = v9485.read();            // v9485[k385];	// L12455
    float b375;                            // L12456
    b375 = v9495;                          // L12457
    float v9497 = a375;                    // L12458
    float v9498 = b375;                    // L12459
    float v9499 = v9497 * v9498;           // L12460
    float v9500 = v375;                    // L12461
    float v9501 = v9500 + v9499;           // L12462
    v375 = v9501;                          // L12463
    float v9502 = a375;                    // L12464
    v9486.write(v9502);                    // v9486[k385] = v9502;	// L12465
    float v9503 = b375;                    // L12466
    v9487.write(v9503);                    // v9487[k385] = v9503;	// L12467
  }
  float v9504 = v375;          // L12469
  v9488[v9489][v9490] = v9504; // L12470
}

void PE_kernel_P_0_7(hls::stream<float> &v9505 /* v9505[768] */,
                     hls::stream<float> &v9506 /* v9506[768] */,
                     hls::stream<float> &v9507 /* v9507[768] */,
                     hls::stream<float> &v9508 /* v9508[768] */,
                     float v9509[8][8], int v9510,
                     int v9511) { // L12473
#pragma HLS stream variable = v9505 depth = 9
#pragma HLS stream variable = v9506 depth = 9
#pragma HLS stream variable = v9507 depth = 9
#pragma HLS stream variable = v9508 depth = 9
#pragma HLS array_partition variable = v9509 complete dim = 1
#pragma HLS array_partition variable = v9509 complete dim = 2

  float v376;      // L12476
  v376 = 0.000000; // L12477
l_S_k_0_k386:
  for (int k386 = 0; k386 < 768; k386++) { // L12478
    float v9514 = v9505.read();            // v9505[k386];	// L12479
    float a376;                            // L12480
    a376 = v9514;                          // L12481
    float v9516 = v9506.read();            // v9506[k386];	// L12482
    float b376;                            // L12483
    b376 = v9516;                          // L12484
    float v9518 = a376;                    // L12485
    float v9519 = b376;                    // L12486
    float v9520 = v9518 * v9519;           // L12487
    float v9521 = v376;                    // L12488
    float v9522 = v9521 + v9520;           // L12489
    v376 = v9522;                          // L12490
    float v9523 = a376;                    // L12491
    v9507.write(v9523);                    // v9507[k386] = v9523;	// L12492
    float v9524 = b376;                    // L12493
    v9508.write(v9524);                    // v9508[k386] = v9524;	// L12494
  }
  float v9525 = v376;          // L12496
  v9509[v9510][v9511] = v9525; // L12497
}

void PE_kernel_P_1_7(hls::stream<float> &v9526 /* v9526[768] */,
                     hls::stream<float> &v9527 /* v9527[768] */,
                     hls::stream<float> &v9528 /* v9528[768] */,
                     hls::stream<float> &v9529 /* v9529[768] */,
                     float v9530[8][8], int v9531,
                     int v9532) { // L12500
#pragma HLS stream variable = v9526 depth = 9
#pragma HLS stream variable = v9527 depth = 9
#pragma HLS stream variable = v9528 depth = 9
#pragma HLS stream variable = v9529 depth = 9
#pragma HLS array_partition variable = v9530 complete dim = 1
#pragma HLS array_partition variable = v9530 complete dim = 2

  float v377;      // L12503
  v377 = 0.000000; // L12504
l_S_k_0_k387:
  for (int k387 = 0; k387 < 768; k387++) { // L12505
    float v9535 = v9526.read();            // v9526[k387];	// L12506
    float a377;                            // L12507
    a377 = v9535;                          // L12508
    float v9537 = v9527.read();            // v9527[k387];	// L12509
    float b377;                            // L12510
    b377 = v9537;                          // L12511
    float v9539 = a377;                    // L12512
    float v9540 = b377;                    // L12513
    float v9541 = v9539 * v9540;           // L12514
    float v9542 = v377;                    // L12515
    float v9543 = v9542 + v9541;           // L12516
    v377 = v9543;                          // L12517
    float v9544 = a377;                    // L12518
    v9528.write(v9544);                    // v9528[k387] = v9544;	// L12519
    float v9545 = b377;                    // L12520
    v9529.write(v9545);                    // v9529[k387] = v9545;	// L12521
  }
  float v9546 = v377;          // L12523
  v9530[v9531][v9532] = v9546; // L12524
}

void PE_kernel_P_2_7(hls::stream<float> &v9547 /* v9547[768] */,
                     hls::stream<float> &v9548 /* v9548[768] */,
                     hls::stream<float> &v9549 /* v9549[768] */,
                     hls::stream<float> &v9550 /* v9550[768] */,
                     float v9551[8][8], int v9552,
                     int v9553) { // L12527
#pragma HLS stream variable = v9547 depth = 9
#pragma HLS stream variable = v9548 depth = 9
#pragma HLS stream variable = v9549 depth = 9
#pragma HLS stream variable = v9550 depth = 9
#pragma HLS array_partition variable = v9551 complete dim = 1
#pragma HLS array_partition variable = v9551 complete dim = 2

  float v378;      // L12530
  v378 = 0.000000; // L12531
l_S_k_0_k388:
  for (int k388 = 0; k388 < 768; k388++) { // L12532
    float v9556 = v9547.read();            // v9547[k388];	// L12533
    float a378;                            // L12534
    a378 = v9556;                          // L12535
    float v9558 = v9548.read();            // v9548[k388];	// L12536
    float b378;                            // L12537
    b378 = v9558;                          // L12538
    float v9560 = a378;                    // L12539
    float v9561 = b378;                    // L12540
    float v9562 = v9560 * v9561;           // L12541
    float v9563 = v378;                    // L12542
    float v9564 = v9563 + v9562;           // L12543
    v378 = v9564;                          // L12544
    float v9565 = a378;                    // L12545
    v9549.write(v9565);                    // v9549[k388] = v9565;	// L12546
    float v9566 = b378;                    // L12547
    v9550.write(v9566);                    // v9550[k388] = v9566;	// L12548
  }
  float v9567 = v378;          // L12550
  v9551[v9552][v9553] = v9567; // L12551
}

void PE_kernel_P_3_7(hls::stream<float> &v9568 /* v9568[768] */,
                     hls::stream<float> &v9569 /* v9569[768] */,
                     hls::stream<float> &v9570 /* v9570[768] */,
                     hls::stream<float> &v9571 /* v9571[768] */,
                     float v9572[8][8], int v9573,
                     int v9574) { // L12554
#pragma HLS stream variable = v9568 depth = 9
#pragma HLS stream variable = v9569 depth = 9
#pragma HLS stream variable = v9570 depth = 9
#pragma HLS stream variable = v9571 depth = 9
#pragma HLS array_partition variable = v9572 complete dim = 1
#pragma HLS array_partition variable = v9572 complete dim = 2

  float v379;      // L12557
  v379 = 0.000000; // L12558
l_S_k_0_k389:
  for (int k389 = 0; k389 < 768; k389++) { // L12559
    float v9577 = v9568.read();            // v9568[k389];	// L12560
    float a379;                            // L12561
    a379 = v9577;                          // L12562
    float v9579 = v9569.read();            // v9569[k389];	// L12563
    float b379;                            // L12564
    b379 = v9579;                          // L12565
    float v9581 = a379;                    // L12566
    float v9582 = b379;                    // L12567
    float v9583 = v9581 * v9582;           // L12568
    float v9584 = v379;                    // L12569
    float v9585 = v9584 + v9583;           // L12570
    v379 = v9585;                          // L12571
    float v9586 = a379;                    // L12572
    v9570.write(v9586);                    // v9570[k389] = v9586;	// L12573
    float v9587 = b379;                    // L12574
    v9571.write(v9587);                    // v9571[k389] = v9587;	// L12575
  }
  float v9588 = v379;          // L12577
  v9572[v9573][v9574] = v9588; // L12578
}

void PE_kernel_P_4_7(hls::stream<float> &v9589 /* v9589[768] */,
                     hls::stream<float> &v9590 /* v9590[768] */,
                     hls::stream<float> &v9591 /* v9591[768] */,
                     hls::stream<float> &v9592 /* v9592[768] */,
                     float v9593[8][8], int v9594,
                     int v9595) { // L12581
#pragma HLS stream variable = v9589 depth = 9
#pragma HLS stream variable = v9590 depth = 9
#pragma HLS stream variable = v9591 depth = 9
#pragma HLS stream variable = v9592 depth = 9
#pragma HLS array_partition variable = v9593 complete dim = 1
#pragma HLS array_partition variable = v9593 complete dim = 2

  float v380;      // L12584
  v380 = 0.000000; // L12585
l_S_k_0_k390:
  for (int k390 = 0; k390 < 768; k390++) { // L12586
    float v9598 = v9589.read();            // v9589[k390];	// L12587
    float a380;                            // L12588
    a380 = v9598;                          // L12589
    float v9600 = v9590.read();            // v9590[k390];	// L12590
    float b380;                            // L12591
    b380 = v9600;                          // L12592
    float v9602 = a380;                    // L12593
    float v9603 = b380;                    // L12594
    float v9604 = v9602 * v9603;           // L12595
    float v9605 = v380;                    // L12596
    float v9606 = v9605 + v9604;           // L12597
    v380 = v9606;                          // L12598
    float v9607 = a380;                    // L12599
    v9591.write(v9607);                    // v9591[k390] = v9607;	// L12600
    float v9608 = b380;                    // L12601
    v9592.write(v9608);                    // v9592[k390] = v9608;	// L12602
  }
  float v9609 = v380;          // L12604
  v9593[v9594][v9595] = v9609; // L12605
}

void PE_kernel_P_5_7(hls::stream<float> &v9610 /* v9610[768] */,
                     hls::stream<float> &v9611 /* v9611[768] */,
                     hls::stream<float> &v9612 /* v9612[768] */,
                     hls::stream<float> &v9613 /* v9613[768] */,
                     float v9614[8][8], int v9615,
                     int v9616) { // L12608
#pragma HLS stream variable = v9610 depth = 9
#pragma HLS stream variable = v9611 depth = 9
#pragma HLS stream variable = v9612 depth = 9
#pragma HLS stream variable = v9613 depth = 9
#pragma HLS array_partition variable = v9614 complete dim = 1
#pragma HLS array_partition variable = v9614 complete dim = 2

  float v381;      // L12611
  v381 = 0.000000; // L12612
l_S_k_0_k391:
  for (int k391 = 0; k391 < 768; k391++) { // L12613
    float v9619 = v9610.read();            // v9610[k391];	// L12614
    float a381;                            // L12615
    a381 = v9619;                          // L12616
    float v9621 = v9611.read();            // v9611[k391];	// L12617
    float b381;                            // L12618
    b381 = v9621;                          // L12619
    float v9623 = a381;                    // L12620
    float v9624 = b381;                    // L12621
    float v9625 = v9623 * v9624;           // L12622
    float v9626 = v381;                    // L12623
    float v9627 = v9626 + v9625;           // L12624
    v381 = v9627;                          // L12625
    float v9628 = a381;                    // L12626
    v9612.write(v9628);                    // v9612[k391] = v9628;	// L12627
    float v9629 = b381;                    // L12628
    v9613.write(v9629);                    // v9613[k391] = v9629;	// L12629
  }
  float v9630 = v381;          // L12631
  v9614[v9615][v9616] = v9630; // L12632
}

void PE_kernel_P_6_7(hls::stream<float> &v9631 /* v9631[768] */,
                     hls::stream<float> &v9632 /* v9632[768] */,
                     hls::stream<float> &v9633 /* v9633[768] */,
                     hls::stream<float> &v9634 /* v9634[768] */,
                     float v9635[8][8], int v9636,
                     int v9637) { // L12635
#pragma HLS stream variable = v9631 depth = 9
#pragma HLS stream variable = v9632 depth = 9
#pragma HLS stream variable = v9633 depth = 9
#pragma HLS stream variable = v9634 depth = 9
#pragma HLS array_partition variable = v9635 complete dim = 1
#pragma HLS array_partition variable = v9635 complete dim = 2

  float v382;      // L12638
  v382 = 0.000000; // L12639
l_S_k_0_k392:
  for (int k392 = 0; k392 < 768; k392++) { // L12640
    float v9640 = v9631.read();            // v9631[k392];	// L12641
    float a382;                            // L12642
    a382 = v9640;                          // L12643
    float v9642 = v9632.read();            // v9632[k392];	// L12644
    float b382;                            // L12645
    b382 = v9642;                          // L12646
    float v9644 = a382;                    // L12647
    float v9645 = b382;                    // L12648
    float v9646 = v9644 * v9645;           // L12649
    float v9647 = v382;                    // L12650
    float v9648 = v9647 + v9646;           // L12651
    v382 = v9648;                          // L12652
    float v9649 = a382;                    // L12653
    v9633.write(v9649);                    // v9633[k392] = v9649;	// L12654
    float v9650 = b382;                    // L12655
    v9634.write(v9650);                    // v9634[k392] = v9650;	// L12656
  }
  float v9651 = v382;          // L12658
  v9635[v9636][v9637] = v9651; // L12659
}

void PE_kernel_P_7_7(hls::stream<float> &v9652 /* v9652[768] */,
                     hls::stream<float> &v9653 /* v9653[768] */,
                     hls::stream<float> &v9654 /* v9654[768] */,
                     hls::stream<float> &v9655 /* v9655[768] */,
                     float v9656[8][8], int v9657,
                     int v9658) { // L12662
#pragma HLS stream variable = v9652 depth = 9
#pragma HLS stream variable = v9653 depth = 9
#pragma HLS stream variable = v9654 depth = 9
#pragma HLS stream variable = v9655 depth = 9
#pragma HLS array_partition variable = v9656 complete dim = 1
#pragma HLS array_partition variable = v9656 complete dim = 2

  float v383;      // L12665
  v383 = 0.000000; // L12666
l_S_k_0_k393:
  for (int k393 = 0; k393 < 768; k393++) { // L12667
    float v9661 = v9652.read();            // v9652[k393];	// L12668
    float a383;                            // L12669
    a383 = v9661;                          // L12670
    float v9663 = v9653.read();            // v9653[k393];	// L12671
    float b383;                            // L12672
    b383 = v9663;                          // L12673
    float v9665 = a383;                    // L12674
    float v9666 = b383;                    // L12675
    float v9667 = v9665 * v9666;           // L12676
    float v9668 = v383;                    // L12677
    float v9669 = v9668 + v9667;           // L12678
    v383 = v9669;                          // L12679
    float v9670 = a383;                    // L12680
    v9654.write(v9670);                    // v9654[k393] = v9670;	// L12681
    float v9671 = b383;                    // L12682
    v9655.write(v9671);                    // v9655[k393] = v9671;	// L12683
  }
  float v9672 = v383;          // L12685
  v9656[v9657][v9658] = v9672; // L12686
}

void systolic_tile_P(float v9673[8][768], float v9674[768][8],
                     float v9675[8][8]) { // L12689
#pragma HLS dataflow
#pragma HLS array_partition variable = v9673 complete dim = 1

#pragma HLS array_partition variable = v9674 complete dim = 2

#pragma HLS array_partition variable = v9675 complete dim = 1
#pragma HLS array_partition variable = v9675 complete dim = 2

  hls::stream<float> A_fifo5[8][9] /* A_fifo5[8][9][768] */; // L12690
#pragma HLS stream variable = A_fifo5 depth = 9
  hls::stream<float> B_fifo5[8][9] /* B_fifo5[8][9][768] */; // L12691
#pragma HLS stream variable = B_fifo5 depth = 9
  float A_drain5[8]; // L12692
  float B_drain5[8]; // L12693
l_data_load_k394:
  for (int k394 = 0; k394 < 768; k394++) { // L12694
  l_S_m_0_m10:
    for (int m10 = 0; m10 < 8; m10++) { // L12695
      float v9682 = v9673[m10][k394];   // L12696
      A_fifo5[m10][0].write(
          v9682); // A_fifo5[m10][0][k394] = v9682;	// L12697
    }
  l_S_n_1_n10:
    for (int n10 = 0; n10 < 8; n10++) { // L12699
      float v9684 = v9674[k394][n10];   // L12700
      B_fifo5[n10][0].write(
          v9684); // B_fifo5[n10][0][k394] = v9684;	// L12701
    }
  }
  hls::stream<float> &v9685 /* v9685[768] */ = A_fifo5[0][0]; // L12705
  hls::stream<float> &v9686 /* v9686[768] */ = B_fifo5[0][0]; // L12706
  hls::stream<float> &v9687 /* v9687[768] */ = A_fifo5[0][1]; // L12712
  hls::stream<float> &v9688 /* v9688[768] */ = B_fifo5[0][1]; // L12713
  PE_kernel_P_0_0(v9685, v9686, v9687, v9688, v9675, 0, 0);   // L12714
  hls::stream<float> &v9689 /* v9689[768] */ = A_fifo5[0][1]; // L12716
  hls::stream<float> &v9690 /* v9690[768] */ = B_fifo5[1][0]; // L12717
  hls::stream<float> &v9691 /* v9691[768] */ = A_fifo5[0][2]; // L12721
  hls::stream<float> &v9692 /* v9692[768] */ = B_fifo5[1][1]; // L12722
  PE_kernel_P_1_0(v9689, v9690, v9691, v9692, v9675, 0, 1);   // L12723
  hls::stream<float> &v9693 /* v9693[768] */ = A_fifo5[0][2]; // L12725
  hls::stream<float> &v9694 /* v9694[768] */ = B_fifo5[2][0]; // L12726
  hls::stream<float> &v9695 /* v9695[768] */ = A_fifo5[0][3]; // L12730
  hls::stream<float> &v9696 /* v9696[768] */ = B_fifo5[2][1]; // L12731
  PE_kernel_P_2_0(v9693, v9694, v9695, v9696, v9675, 0, 2);   // L12732
  hls::stream<float> &v9697 /* v9697[768] */ = A_fifo5[0][3]; // L12734
  hls::stream<float> &v9698 /* v9698[768] */ = B_fifo5[3][0]; // L12735
  hls::stream<float> &v9699 /* v9699[768] */ = A_fifo5[0][4]; // L12739
  hls::stream<float> &v9700 /* v9700[768] */ = B_fifo5[3][1]; // L12740
  PE_kernel_P_3_0(v9697, v9698, v9699, v9700, v9675, 0, 3);   // L12741
  hls::stream<float> &v9701 /* v9701[768] */ = A_fifo5[0][4]; // L12743
  hls::stream<float> &v9702 /* v9702[768] */ = B_fifo5[4][0]; // L12744
  hls::stream<float> &v9703 /* v9703[768] */ = A_fifo5[0][5]; // L12748
  hls::stream<float> &v9704 /* v9704[768] */ = B_fifo5[4][1]; // L12749
  PE_kernel_P_4_0(v9701, v9702, v9703, v9704, v9675, 0, 4);   // L12750
  hls::stream<float> &v9705 /* v9705[768] */ = A_fifo5[0][5]; // L12752
  hls::stream<float> &v9706 /* v9706[768] */ = B_fifo5[5][0]; // L12753
  hls::stream<float> &v9707 /* v9707[768] */ = A_fifo5[0][6]; // L12757
  hls::stream<float> &v9708 /* v9708[768] */ = B_fifo5[5][1]; // L12758
  PE_kernel_P_5_0(v9705, v9706, v9707, v9708, v9675, 0, 5);   // L12759
  hls::stream<float> &v9709 /* v9709[768] */ = A_fifo5[0][6]; // L12761
  hls::stream<float> &v9710 /* v9710[768] */ = B_fifo5[6][0]; // L12762
  hls::stream<float> &v9711 /* v9711[768] */ = A_fifo5[0][7]; // L12766
  hls::stream<float> &v9712 /* v9712[768] */ = B_fifo5[6][1]; // L12767
  PE_kernel_P_6_0(v9709, v9710, v9711, v9712, v9675, 0, 6);   // L12768
  hls::stream<float> &v9713 /* v9713[768] */ = A_fifo5[0][7]; // L12770
  hls::stream<float> &v9714 /* v9714[768] */ = B_fifo5[7][0]; // L12771
  hls::stream<float> &v9715 /* v9715[768] */ = A_fifo5[0][8]; // L12775
  hls::stream<float> &v9716 /* v9716[768] */ = B_fifo5[7][1]; // L12776
  PE_kernel_P_7_0(v9713, v9714, v9715, v9716, v9675, 0, 7);   // L12777
  hls::stream<float> &v9717 /* v9717[768] */ = A_fifo5[1][0]; // L12778
  hls::stream<float> &v9718 /* v9718[768] */ = B_fifo5[0][1]; // L12779
  hls::stream<float> &v9719 /* v9719[768] */ = A_fifo5[1][1]; // L12780
  hls::stream<float> &v9720 /* v9720[768] */ = B_fifo5[0][2]; // L12781
  PE_kernel_P_0_1(v9717, v9718, v9719, v9720, v9675, 1, 0);   // L12782
  hls::stream<float> &v9721 /* v9721[768] */ = A_fifo5[1][1]; // L12783
  hls::stream<float> &v9722 /* v9722[768] */ = B_fifo5[1][1]; // L12784
  hls::stream<float> &v9723 /* v9723[768] */ = A_fifo5[1][2]; // L12785
  hls::stream<float> &v9724 /* v9724[768] */ = B_fifo5[1][2]; // L12786
  PE_kernel_P_1_1(v9721, v9722, v9723, v9724, v9675, 1, 1);   // L12787
  hls::stream<float> &v9725 /* v9725[768] */ = A_fifo5[1][2]; // L12788
  hls::stream<float> &v9726 /* v9726[768] */ = B_fifo5[2][1]; // L12789
  hls::stream<float> &v9727 /* v9727[768] */ = A_fifo5[1][3]; // L12790
  hls::stream<float> &v9728 /* v9728[768] */ = B_fifo5[2][2]; // L12791
  PE_kernel_P_2_1(v9725, v9726, v9727, v9728, v9675, 1, 2);   // L12792
  hls::stream<float> &v9729 /* v9729[768] */ = A_fifo5[1][3]; // L12793
  hls::stream<float> &v9730 /* v9730[768] */ = B_fifo5[3][1]; // L12794
  hls::stream<float> &v9731 /* v9731[768] */ = A_fifo5[1][4]; // L12795
  hls::stream<float> &v9732 /* v9732[768] */ = B_fifo5[3][2]; // L12796
  PE_kernel_P_3_1(v9729, v9730, v9731, v9732, v9675, 1, 3);   // L12797
  hls::stream<float> &v9733 /* v9733[768] */ = A_fifo5[1][4]; // L12798
  hls::stream<float> &v9734 /* v9734[768] */ = B_fifo5[4][1]; // L12799
  hls::stream<float> &v9735 /* v9735[768] */ = A_fifo5[1][5]; // L12800
  hls::stream<float> &v9736 /* v9736[768] */ = B_fifo5[4][2]; // L12801
  PE_kernel_P_4_1(v9733, v9734, v9735, v9736, v9675, 1, 4);   // L12802
  hls::stream<float> &v9737 /* v9737[768] */ = A_fifo5[1][5]; // L12803
  hls::stream<float> &v9738 /* v9738[768] */ = B_fifo5[5][1]; // L12804
  hls::stream<float> &v9739 /* v9739[768] */ = A_fifo5[1][6]; // L12805
  hls::stream<float> &v9740 /* v9740[768] */ = B_fifo5[5][2]; // L12806
  PE_kernel_P_5_1(v9737, v9738, v9739, v9740, v9675, 1, 5);   // L12807
  hls::stream<float> &v9741 /* v9741[768] */ = A_fifo5[1][6]; // L12808
  hls::stream<float> &v9742 /* v9742[768] */ = B_fifo5[6][1]; // L12809
  hls::stream<float> &v9743 /* v9743[768] */ = A_fifo5[1][7]; // L12810
  hls::stream<float> &v9744 /* v9744[768] */ = B_fifo5[6][2]; // L12811
  PE_kernel_P_6_1(v9741, v9742, v9743, v9744, v9675, 1, 6);   // L12812
  hls::stream<float> &v9745 /* v9745[768] */ = A_fifo5[1][7]; // L12813
  hls::stream<float> &v9746 /* v9746[768] */ = B_fifo5[7][1]; // L12814
  hls::stream<float> &v9747 /* v9747[768] */ = A_fifo5[1][8]; // L12815
  hls::stream<float> &v9748 /* v9748[768] */ = B_fifo5[7][2]; // L12816
  PE_kernel_P_7_1(v9745, v9746, v9747, v9748, v9675, 1, 7);   // L12817
  hls::stream<float> &v9749 /* v9749[768] */ = A_fifo5[2][0]; // L12818
  hls::stream<float> &v9750 /* v9750[768] */ = B_fifo5[0][2]; // L12819
  hls::stream<float> &v9751 /* v9751[768] */ = A_fifo5[2][1]; // L12820
  hls::stream<float> &v9752 /* v9752[768] */ = B_fifo5[0][3]; // L12821
  PE_kernel_P_0_2(v9749, v9750, v9751, v9752, v9675, 2, 0);   // L12822
  hls::stream<float> &v9753 /* v9753[768] */ = A_fifo5[2][1]; // L12823
  hls::stream<float> &v9754 /* v9754[768] */ = B_fifo5[1][2]; // L12824
  hls::stream<float> &v9755 /* v9755[768] */ = A_fifo5[2][2]; // L12825
  hls::stream<float> &v9756 /* v9756[768] */ = B_fifo5[1][3]; // L12826
  PE_kernel_P_1_2(v9753, v9754, v9755, v9756, v9675, 2, 1);   // L12827
  hls::stream<float> &v9757 /* v9757[768] */ = A_fifo5[2][2]; // L12828
  hls::stream<float> &v9758 /* v9758[768] */ = B_fifo5[2][2]; // L12829
  hls::stream<float> &v9759 /* v9759[768] */ = A_fifo5[2][3]; // L12830
  hls::stream<float> &v9760 /* v9760[768] */ = B_fifo5[2][3]; // L12831
  PE_kernel_P_2_2(v9757, v9758, v9759, v9760, v9675, 2, 2);   // L12832
  hls::stream<float> &v9761 /* v9761[768] */ = A_fifo5[2][3]; // L12833
  hls::stream<float> &v9762 /* v9762[768] */ = B_fifo5[3][2]; // L12834
  hls::stream<float> &v9763 /* v9763[768] */ = A_fifo5[2][4]; // L12835
  hls::stream<float> &v9764 /* v9764[768] */ = B_fifo5[3][3]; // L12836
  PE_kernel_P_3_2(v9761, v9762, v9763, v9764, v9675, 2, 3);   // L12837
  hls::stream<float> &v9765 /* v9765[768] */ = A_fifo5[2][4]; // L12838
  hls::stream<float> &v9766 /* v9766[768] */ = B_fifo5[4][2]; // L12839
  hls::stream<float> &v9767 /* v9767[768] */ = A_fifo5[2][5]; // L12840
  hls::stream<float> &v9768 /* v9768[768] */ = B_fifo5[4][3]; // L12841
  PE_kernel_P_4_2(v9765, v9766, v9767, v9768, v9675, 2, 4);   // L12842
  hls::stream<float> &v9769 /* v9769[768] */ = A_fifo5[2][5]; // L12843
  hls::stream<float> &v9770 /* v9770[768] */ = B_fifo5[5][2]; // L12844
  hls::stream<float> &v9771 /* v9771[768] */ = A_fifo5[2][6]; // L12845
  hls::stream<float> &v9772 /* v9772[768] */ = B_fifo5[5][3]; // L12846
  PE_kernel_P_5_2(v9769, v9770, v9771, v9772, v9675, 2, 5);   // L12847
  hls::stream<float> &v9773 /* v9773[768] */ = A_fifo5[2][6]; // L12848
  hls::stream<float> &v9774 /* v9774[768] */ = B_fifo5[6][2]; // L12849
  hls::stream<float> &v9775 /* v9775[768] */ = A_fifo5[2][7]; // L12850
  hls::stream<float> &v9776 /* v9776[768] */ = B_fifo5[6][3]; // L12851
  PE_kernel_P_6_2(v9773, v9774, v9775, v9776, v9675, 2, 6);   // L12852
  hls::stream<float> &v9777 /* v9777[768] */ = A_fifo5[2][7]; // L12853
  hls::stream<float> &v9778 /* v9778[768] */ = B_fifo5[7][2]; // L12854
  hls::stream<float> &v9779 /* v9779[768] */ = A_fifo5[2][8]; // L12855
  hls::stream<float> &v9780 /* v9780[768] */ = B_fifo5[7][3]; // L12856
  PE_kernel_P_7_2(v9777, v9778, v9779, v9780, v9675, 2, 7);   // L12857
  hls::stream<float> &v9781 /* v9781[768] */ = A_fifo5[3][0]; // L12858
  hls::stream<float> &v9782 /* v9782[768] */ = B_fifo5[0][3]; // L12859
  hls::stream<float> &v9783 /* v9783[768] */ = A_fifo5[3][1]; // L12860
  hls::stream<float> &v9784 /* v9784[768] */ = B_fifo5[0][4]; // L12861
  PE_kernel_P_0_3(v9781, v9782, v9783, v9784, v9675, 3, 0);   // L12862
  hls::stream<float> &v9785 /* v9785[768] */ = A_fifo5[3][1]; // L12863
  hls::stream<float> &v9786 /* v9786[768] */ = B_fifo5[1][3]; // L12864
  hls::stream<float> &v9787 /* v9787[768] */ = A_fifo5[3][2]; // L12865
  hls::stream<float> &v9788 /* v9788[768] */ = B_fifo5[1][4]; // L12866
  PE_kernel_P_1_3(v9785, v9786, v9787, v9788, v9675, 3, 1);   // L12867
  hls::stream<float> &v9789 /* v9789[768] */ = A_fifo5[3][2]; // L12868
  hls::stream<float> &v9790 /* v9790[768] */ = B_fifo5[2][3]; // L12869
  hls::stream<float> &v9791 /* v9791[768] */ = A_fifo5[3][3]; // L12870
  hls::stream<float> &v9792 /* v9792[768] */ = B_fifo5[2][4]; // L12871
  PE_kernel_P_2_3(v9789, v9790, v9791, v9792, v9675, 3, 2);   // L12872
  hls::stream<float> &v9793 /* v9793[768] */ = A_fifo5[3][3]; // L12873
  hls::stream<float> &v9794 /* v9794[768] */ = B_fifo5[3][3]; // L12874
  hls::stream<float> &v9795 /* v9795[768] */ = A_fifo5[3][4]; // L12875
  hls::stream<float> &v9796 /* v9796[768] */ = B_fifo5[3][4]; // L12876
  PE_kernel_P_3_3(v9793, v9794, v9795, v9796, v9675, 3, 3);   // L12877
  hls::stream<float> &v9797 /* v9797[768] */ = A_fifo5[3][4]; // L12878
  hls::stream<float> &v9798 /* v9798[768] */ = B_fifo5[4][3]; // L12879
  hls::stream<float> &v9799 /* v9799[768] */ = A_fifo5[3][5]; // L12880
  hls::stream<float> &v9800 /* v9800[768] */ = B_fifo5[4][4]; // L12881
  PE_kernel_P_4_3(v9797, v9798, v9799, v9800, v9675, 3, 4);   // L12882
  hls::stream<float> &v9801 /* v9801[768] */ = A_fifo5[3][5]; // L12883
  hls::stream<float> &v9802 /* v9802[768] */ = B_fifo5[5][3]; // L12884
  hls::stream<float> &v9803 /* v9803[768] */ = A_fifo5[3][6]; // L12885
  hls::stream<float> &v9804 /* v9804[768] */ = B_fifo5[5][4]; // L12886
  PE_kernel_P_5_3(v9801, v9802, v9803, v9804, v9675, 3, 5);   // L12887
  hls::stream<float> &v9805 /* v9805[768] */ = A_fifo5[3][6]; // L12888
  hls::stream<float> &v9806 /* v9806[768] */ = B_fifo5[6][3]; // L12889
  hls::stream<float> &v9807 /* v9807[768] */ = A_fifo5[3][7]; // L12890
  hls::stream<float> &v9808 /* v9808[768] */ = B_fifo5[6][4]; // L12891
  PE_kernel_P_6_3(v9805, v9806, v9807, v9808, v9675, 3, 6);   // L12892
  hls::stream<float> &v9809 /* v9809[768] */ = A_fifo5[3][7]; // L12893
  hls::stream<float> &v9810 /* v9810[768] */ = B_fifo5[7][3]; // L12894
  hls::stream<float> &v9811 /* v9811[768] */ = A_fifo5[3][8]; // L12895
  hls::stream<float> &v9812 /* v9812[768] */ = B_fifo5[7][4]; // L12896
  PE_kernel_P_7_3(v9809, v9810, v9811, v9812, v9675, 3, 7);   // L12897
  hls::stream<float> &v9813 /* v9813[768] */ = A_fifo5[4][0]; // L12898
  hls::stream<float> &v9814 /* v9814[768] */ = B_fifo5[0][4]; // L12899
  hls::stream<float> &v9815 /* v9815[768] */ = A_fifo5[4][1]; // L12900
  hls::stream<float> &v9816 /* v9816[768] */ = B_fifo5[0][5]; // L12901
  PE_kernel_P_0_4(v9813, v9814, v9815, v9816, v9675, 4, 0);   // L12902
  hls::stream<float> &v9817 /* v9817[768] */ = A_fifo5[4][1]; // L12903
  hls::stream<float> &v9818 /* v9818[768] */ = B_fifo5[1][4]; // L12904
  hls::stream<float> &v9819 /* v9819[768] */ = A_fifo5[4][2]; // L12905
  hls::stream<float> &v9820 /* v9820[768] */ = B_fifo5[1][5]; // L12906
  PE_kernel_P_1_4(v9817, v9818, v9819, v9820, v9675, 4, 1);   // L12907
  hls::stream<float> &v9821 /* v9821[768] */ = A_fifo5[4][2]; // L12908
  hls::stream<float> &v9822 /* v9822[768] */ = B_fifo5[2][4]; // L12909
  hls::stream<float> &v9823 /* v9823[768] */ = A_fifo5[4][3]; // L12910
  hls::stream<float> &v9824 /* v9824[768] */ = B_fifo5[2][5]; // L12911
  PE_kernel_P_2_4(v9821, v9822, v9823, v9824, v9675, 4, 2);   // L12912
  hls::stream<float> &v9825 /* v9825[768] */ = A_fifo5[4][3]; // L12913
  hls::stream<float> &v9826 /* v9826[768] */ = B_fifo5[3][4]; // L12914
  hls::stream<float> &v9827 /* v9827[768] */ = A_fifo5[4][4]; // L12915
  hls::stream<float> &v9828 /* v9828[768] */ = B_fifo5[3][5]; // L12916
  PE_kernel_P_3_4(v9825, v9826, v9827, v9828, v9675, 4, 3);   // L12917
  hls::stream<float> &v9829 /* v9829[768] */ = A_fifo5[4][4]; // L12918
  hls::stream<float> &v9830 /* v9830[768] */ = B_fifo5[4][4]; // L12919
  hls::stream<float> &v9831 /* v9831[768] */ = A_fifo5[4][5]; // L12920
  hls::stream<float> &v9832 /* v9832[768] */ = B_fifo5[4][5]; // L12921
  PE_kernel_P_4_4(v9829, v9830, v9831, v9832, v9675, 4, 4);   // L12922
  hls::stream<float> &v9833 /* v9833[768] */ = A_fifo5[4][5]; // L12923
  hls::stream<float> &v9834 /* v9834[768] */ = B_fifo5[5][4]; // L12924
  hls::stream<float> &v9835 /* v9835[768] */ = A_fifo5[4][6]; // L12925
  hls::stream<float> &v9836 /* v9836[768] */ = B_fifo5[5][5]; // L12926
  PE_kernel_P_5_4(v9833, v9834, v9835, v9836, v9675, 4, 5);   // L12927
  hls::stream<float> &v9837 /* v9837[768] */ = A_fifo5[4][6]; // L12928
  hls::stream<float> &v9838 /* v9838[768] */ = B_fifo5[6][4]; // L12929
  hls::stream<float> &v9839 /* v9839[768] */ = A_fifo5[4][7]; // L12930
  hls::stream<float> &v9840 /* v9840[768] */ = B_fifo5[6][5]; // L12931
  PE_kernel_P_6_4(v9837, v9838, v9839, v9840, v9675, 4, 6);   // L12932
  hls::stream<float> &v9841 /* v9841[768] */ = A_fifo5[4][7]; // L12933
  hls::stream<float> &v9842 /* v9842[768] */ = B_fifo5[7][4]; // L12934
  hls::stream<float> &v9843 /* v9843[768] */ = A_fifo5[4][8]; // L12935
  hls::stream<float> &v9844 /* v9844[768] */ = B_fifo5[7][5]; // L12936
  PE_kernel_P_7_4(v9841, v9842, v9843, v9844, v9675, 4, 7);   // L12937
  hls::stream<float> &v9845 /* v9845[768] */ = A_fifo5[5][0]; // L12938
  hls::stream<float> &v9846 /* v9846[768] */ = B_fifo5[0][5]; // L12939
  hls::stream<float> &v9847 /* v9847[768] */ = A_fifo5[5][1]; // L12940
  hls::stream<float> &v9848 /* v9848[768] */ = B_fifo5[0][6]; // L12941
  PE_kernel_P_0_5(v9845, v9846, v9847, v9848, v9675, 5, 0);   // L12942
  hls::stream<float> &v9849 /* v9849[768] */ = A_fifo5[5][1]; // L12943
  hls::stream<float> &v9850 /* v9850[768] */ = B_fifo5[1][5]; // L12944
  hls::stream<float> &v9851 /* v9851[768] */ = A_fifo5[5][2]; // L12945
  hls::stream<float> &v9852 /* v9852[768] */ = B_fifo5[1][6]; // L12946
  PE_kernel_P_1_5(v9849, v9850, v9851, v9852, v9675, 5, 1);   // L12947
  hls::stream<float> &v9853 /* v9853[768] */ = A_fifo5[5][2]; // L12948
  hls::stream<float> &v9854 /* v9854[768] */ = B_fifo5[2][5]; // L12949
  hls::stream<float> &v9855 /* v9855[768] */ = A_fifo5[5][3]; // L12950
  hls::stream<float> &v9856 /* v9856[768] */ = B_fifo5[2][6]; // L12951
  PE_kernel_P_2_5(v9853, v9854, v9855, v9856, v9675, 5, 2);   // L12952
  hls::stream<float> &v9857 /* v9857[768] */ = A_fifo5[5][3]; // L12953
  hls::stream<float> &v9858 /* v9858[768] */ = B_fifo5[3][5]; // L12954
  hls::stream<float> &v9859 /* v9859[768] */ = A_fifo5[5][4]; // L12955
  hls::stream<float> &v9860 /* v9860[768] */ = B_fifo5[3][6]; // L12956
  PE_kernel_P_3_5(v9857, v9858, v9859, v9860, v9675, 5, 3);   // L12957
  hls::stream<float> &v9861 /* v9861[768] */ = A_fifo5[5][4]; // L12958
  hls::stream<float> &v9862 /* v9862[768] */ = B_fifo5[4][5]; // L12959
  hls::stream<float> &v9863 /* v9863[768] */ = A_fifo5[5][5]; // L12960
  hls::stream<float> &v9864 /* v9864[768] */ = B_fifo5[4][6]; // L12961
  PE_kernel_P_4_5(v9861, v9862, v9863, v9864, v9675, 5, 4);   // L12962
  hls::stream<float> &v9865 /* v9865[768] */ = A_fifo5[5][5]; // L12963
  hls::stream<float> &v9866 /* v9866[768] */ = B_fifo5[5][5]; // L12964
  hls::stream<float> &v9867 /* v9867[768] */ = A_fifo5[5][6]; // L12965
  hls::stream<float> &v9868 /* v9868[768] */ = B_fifo5[5][6]; // L12966
  PE_kernel_P_5_5(v9865, v9866, v9867, v9868, v9675, 5, 5);   // L12967
  hls::stream<float> &v9869 /* v9869[768] */ = A_fifo5[5][6]; // L12968
  hls::stream<float> &v9870 /* v9870[768] */ = B_fifo5[6][5]; // L12969
  hls::stream<float> &v9871 /* v9871[768] */ = A_fifo5[5][7]; // L12970
  hls::stream<float> &v9872 /* v9872[768] */ = B_fifo5[6][6]; // L12971
  PE_kernel_P_6_5(v9869, v9870, v9871, v9872, v9675, 5, 6);   // L12972
  hls::stream<float> &v9873 /* v9873[768] */ = A_fifo5[5][7]; // L12973
  hls::stream<float> &v9874 /* v9874[768] */ = B_fifo5[7][5]; // L12974
  hls::stream<float> &v9875 /* v9875[768] */ = A_fifo5[5][8]; // L12975
  hls::stream<float> &v9876 /* v9876[768] */ = B_fifo5[7][6]; // L12976
  PE_kernel_P_7_5(v9873, v9874, v9875, v9876, v9675, 5, 7);   // L12977
  hls::stream<float> &v9877 /* v9877[768] */ = A_fifo5[6][0]; // L12978
  hls::stream<float> &v9878 /* v9878[768] */ = B_fifo5[0][6]; // L12979
  hls::stream<float> &v9879 /* v9879[768] */ = A_fifo5[6][1]; // L12980
  hls::stream<float> &v9880 /* v9880[768] */ = B_fifo5[0][7]; // L12981
  PE_kernel_P_0_6(v9877, v9878, v9879, v9880, v9675, 6, 0);   // L12982
  hls::stream<float> &v9881 /* v9881[768] */ = A_fifo5[6][1]; // L12983
  hls::stream<float> &v9882 /* v9882[768] */ = B_fifo5[1][6]; // L12984
  hls::stream<float> &v9883 /* v9883[768] */ = A_fifo5[6][2]; // L12985
  hls::stream<float> &v9884 /* v9884[768] */ = B_fifo5[1][7]; // L12986
  PE_kernel_P_1_6(v9881, v9882, v9883, v9884, v9675, 6, 1);   // L12987
  hls::stream<float> &v9885 /* v9885[768] */ = A_fifo5[6][2]; // L12988
  hls::stream<float> &v9886 /* v9886[768] */ = B_fifo5[2][6]; // L12989
  hls::stream<float> &v9887 /* v9887[768] */ = A_fifo5[6][3]; // L12990
  hls::stream<float> &v9888 /* v9888[768] */ = B_fifo5[2][7]; // L12991
  PE_kernel_P_2_6(v9885, v9886, v9887, v9888, v9675, 6, 2);   // L12992
  hls::stream<float> &v9889 /* v9889[768] */ = A_fifo5[6][3]; // L12993
  hls::stream<float> &v9890 /* v9890[768] */ = B_fifo5[3][6]; // L12994
  hls::stream<float> &v9891 /* v9891[768] */ = A_fifo5[6][4]; // L12995
  hls::stream<float> &v9892 /* v9892[768] */ = B_fifo5[3][7]; // L12996
  PE_kernel_P_3_6(v9889, v9890, v9891, v9892, v9675, 6, 3);   // L12997
  hls::stream<float> &v9893 /* v9893[768] */ = A_fifo5[6][4]; // L12998
  hls::stream<float> &v9894 /* v9894[768] */ = B_fifo5[4][6]; // L12999
  hls::stream<float> &v9895 /* v9895[768] */ = A_fifo5[6][5]; // L13000
  hls::stream<float> &v9896 /* v9896[768] */ = B_fifo5[4][7]; // L13001
  PE_kernel_P_4_6(v9893, v9894, v9895, v9896, v9675, 6, 4);   // L13002
  hls::stream<float> &v9897 /* v9897[768] */ = A_fifo5[6][5]; // L13003
  hls::stream<float> &v9898 /* v9898[768] */ = B_fifo5[5][6]; // L13004
  hls::stream<float> &v9899 /* v9899[768] */ = A_fifo5[6][6]; // L13005
  hls::stream<float> &v9900 /* v9900[768] */ = B_fifo5[5][7]; // L13006
  PE_kernel_P_5_6(v9897, v9898, v9899, v9900, v9675, 6, 5);   // L13007
  hls::stream<float> &v9901 /* v9901[768] */ = A_fifo5[6][6]; // L13008
  hls::stream<float> &v9902 /* v9902[768] */ = B_fifo5[6][6]; // L13009
  hls::stream<float> &v9903 /* v9903[768] */ = A_fifo5[6][7]; // L13010
  hls::stream<float> &v9904 /* v9904[768] */ = B_fifo5[6][7]; // L13011
  PE_kernel_P_6_6(v9901, v9902, v9903, v9904, v9675, 6, 6);   // L13012
  hls::stream<float> &v9905 /* v9905[768] */ = A_fifo5[6][7]; // L13013
  hls::stream<float> &v9906 /* v9906[768] */ = B_fifo5[7][6]; // L13014
  hls::stream<float> &v9907 /* v9907[768] */ = A_fifo5[6][8]; // L13015
  hls::stream<float> &v9908 /* v9908[768] */ = B_fifo5[7][7]; // L13016
  PE_kernel_P_7_6(v9905, v9906, v9907, v9908, v9675, 6, 7);   // L13017
  hls::stream<float> &v9909 /* v9909[768] */ = A_fifo5[7][0]; // L13018
  hls::stream<float> &v9910 /* v9910[768] */ = B_fifo5[0][7]; // L13019
  hls::stream<float> &v9911 /* v9911[768] */ = A_fifo5[7][1]; // L13020
  hls::stream<float> &v9912 /* v9912[768] */ = B_fifo5[0][8]; // L13021
  PE_kernel_P_0_7(v9909, v9910, v9911, v9912, v9675, 7, 0);   // L13022
  hls::stream<float> &v9913 /* v9913[768] */ = A_fifo5[7][1]; // L13023
  hls::stream<float> &v9914 /* v9914[768] */ = B_fifo5[1][7]; // L13024
  hls::stream<float> &v9915 /* v9915[768] */ = A_fifo5[7][2]; // L13025
  hls::stream<float> &v9916 /* v9916[768] */ = B_fifo5[1][8]; // L13026
  PE_kernel_P_1_7(v9913, v9914, v9915, v9916, v9675, 7, 1);   // L13027
  hls::stream<float> &v9917 /* v9917[768] */ = A_fifo5[7][2]; // L13028
  hls::stream<float> &v9918 /* v9918[768] */ = B_fifo5[2][7]; // L13029
  hls::stream<float> &v9919 /* v9919[768] */ = A_fifo5[7][3]; // L13030
  hls::stream<float> &v9920 /* v9920[768] */ = B_fifo5[2][8]; // L13031
  PE_kernel_P_2_7(v9917, v9918, v9919, v9920, v9675, 7, 2);   // L13032
  hls::stream<float> &v9921 /* v9921[768] */ = A_fifo5[7][3]; // L13033
  hls::stream<float> &v9922 /* v9922[768] */ = B_fifo5[3][7]; // L13034
  hls::stream<float> &v9923 /* v9923[768] */ = A_fifo5[7][4]; // L13035
  hls::stream<float> &v9924 /* v9924[768] */ = B_fifo5[3][8]; // L13036
  PE_kernel_P_3_7(v9921, v9922, v9923, v9924, v9675, 7, 3);   // L13037
  hls::stream<float> &v9925 /* v9925[768] */ = A_fifo5[7][4]; // L13038
  hls::stream<float> &v9926 /* v9926[768] */ = B_fifo5[4][7]; // L13039
  hls::stream<float> &v9927 /* v9927[768] */ = A_fifo5[7][5]; // L13040
  hls::stream<float> &v9928 /* v9928[768] */ = B_fifo5[4][8]; // L13041
  PE_kernel_P_4_7(v9925, v9926, v9927, v9928, v9675, 7, 4);   // L13042
  hls::stream<float> &v9929 /* v9929[768] */ = A_fifo5[7][5]; // L13043
  hls::stream<float> &v9930 /* v9930[768] */ = B_fifo5[5][7]; // L13044
  hls::stream<float> &v9931 /* v9931[768] */ = A_fifo5[7][6]; // L13045
  hls::stream<float> &v9932 /* v9932[768] */ = B_fifo5[5][8]; // L13046
  PE_kernel_P_5_7(v9929, v9930, v9931, v9932, v9675, 7, 5);   // L13047
  hls::stream<float> &v9933 /* v9933[768] */ = A_fifo5[7][6]; // L13048
  hls::stream<float> &v9934 /* v9934[768] */ = B_fifo5[6][7]; // L13049
  hls::stream<float> &v9935 /* v9935[768] */ = A_fifo5[7][7]; // L13050
  hls::stream<float> &v9936 /* v9936[768] */ = B_fifo5[6][8]; // L13051
  PE_kernel_P_6_7(v9933, v9934, v9935, v9936, v9675, 7, 6);   // L13052
  hls::stream<float> &v9937 /* v9937[768] */ = A_fifo5[7][7]; // L13053
  hls::stream<float> &v9938 /* v9938[768] */ = B_fifo5[7][7]; // L13054
  hls::stream<float> &v9939 /* v9939[768] */ = A_fifo5[7][8]; // L13055
  hls::stream<float> &v9940 /* v9940[768] */ = B_fifo5[7][8]; // L13056
  PE_kernel_P_7_7(v9937, v9938, v9939, v9940, v9675, 7, 7);   // L13057
l_data_drain_k395:
  for (int k395 = 0; k395 < 768; k395++) { // L13058
  l_S_m_4_m11:
    for (int m11 = 0; m11 < 8; m11++) { // L13059
      float v9943 =
          A_fifo5[m11][8].read(); // A_fifo5[m11][8][k395];	// L13060
      A_drain5[m11] = v9943;      // L13061
    }
  l_S_n_5_n11:
    for (int n11 = 0; n11 < 8; n11++) { // L13063
      float v9945 =
          B_fifo5[n11][8].read(); // B_fifo5[n11][8][k395];	// L13064
      B_drain5[n11] = v9945;      // L13065
    }
  }
}

void systolic_P(float v9946[64][768], float v9947[768][768],
                float v9948[64][768]) { // L13070
  float local_A5[8][768];               // L13071
#pragma HLS array_partition variable = local_A5 complete dim = 1

  float local_B5[768][8]; // L13072
#pragma HLS array_partition variable = local_B5 complete dim = 2

  float local_C5[8][8]; // L13073
#pragma HLS array_partition variable = local_C5 complete dim = 1
#pragma HLS array_partition variable = local_C5 complete dim = 2

l_outer_tile_mi5:
  for (int mi5 = 0; mi5 < 8; mi5++) { // L13074
  l_ni5:
    for (int ni5 = 0; ni5 < 96; ni5++) { // L13075
                                         // #pragma HLS dataflow
    l_load_A_tile_ak5:
      for (int ak5 = 0; ak5 < 768; ak5++) { // L13076
      l_ai5:
        for (int ai5 = 0; ai5 < 8; ai5++) { // L13077
#pragma HLS pipeline II = 1
          ap_int<33> v9956 = ni5;                        // L13078
          bool v9957 = v9956 == 0;                       // L13081
          if (v9957) {                                   // L13082
            float v9958 = v9946[((mi5 * 8) + ai5)][ak5]; // L13083
            local_A5[ai5][ak5] = v9958;                  // L13084
          }
        }
      }
    l_load_B_tile_bk5:
      for (int bk5 = 0; bk5 < 768; bk5++) { // L13088
      l_bj5:
        for (int bj5 = 0; bj5 < 8; bj5++) { // L13089
#pragma HLS pipeline II = 1
          float v9961 = v9947[bk5][((ni5 * 8) + bj5)]; // L13090
          local_B5[bk5][bj5] = v9961;                  // L13091
        }
      }
      systolic_tile_P(local_A5, local_B5, local_C5); // L13094
    l_store_C_tile_sj5:
      for (int sj5 = 0; sj5 < 8; sj5++) { // L13095
      l_si5:
        for (int si5 = 0; si5 < 8; si5++) { // L13096
#pragma HLS pipeline II = 1
          float v9964 = local_C5[si5][sj5];                    // L13097
          v9948[((mi5 * 8) + si5)][((ni5 * 8) + sj5)] = v9964; // L13098
        }
      }
    }
  }
}

void bias_add(float v9965[64][768], float v9966[768],
              float v9967[64][768]) { // L13105
l_S_i_j_0_i8:
  for (int i8 = 0; i8 < 64; i8++) { // L13107
  l_j7:
    for (int j7 = 0; j7 < 768; j7++) { // L13108
      float v9970 = v9965[i8][j7];     // L13109
      float v9971 = v9966[j7];         // L13110
      float v9972 = v9970 + v9971;     // L13111
      v9967[i8][j7] = v9972;           // L13112
    }
  }
}

void residual_add(float v9973[64][768], float v9974[64][768],
                  float v9975[64][768]) { // L13117
l_S_i_j_0_i9:
  for (int i9 = 0; i9 < 64; i9++) { // L13119
  l_j8:
    for (int j8 = 0; j8 < 768; j8++) { // L13120
      float v9978 = v9973[i9][j8];     // L13121
      float v9979 = v9974[i9][j8];     // L13122
      float v9980 = v9978 + v9979;     // L13123
      v9975[i9][j8] = v9980;           // L13124
    }
  }
}

void PE_kernel_ffn1_0_0(hls::stream<float> &v9981 /* v9981[768] */,
                        hls::stream<float> &v9982 /* v9982[768] */,
                        hls::stream<float> &v9983 /* v9983[768] */,
                        hls::stream<float> &v9984 /* v9984[768] */,
                        float v9985[8][8], int v9986,
                        int v9987) { // L13129
#pragma HLS stream variable = v9981 depth = 9
#pragma HLS stream variable = v9982 depth = 9
#pragma HLS stream variable = v9983 depth = 9
#pragma HLS stream variable = v9984 depth = 9
#pragma HLS array_partition variable = v9985 complete dim = 1
#pragma HLS array_partition variable = v9985 complete dim = 2

  float v384;      // L13132
  v384 = 0.000000; // L13133
l_S_k_0_k396:
  for (int k396 = 0; k396 < 768; k396++) { // L13134
    float v9990 = v9981.read();            // v9981[k396];	// L13135
    float a384;                            // L13136
    a384 = v9990;                          // L13137
    float v9992 = v9982.read();            // v9982[k396];	// L13138
    float b384;                            // L13139
    b384 = v9992;                          // L13140
    float v9994 = a384;                    // L13141
    float v9995 = b384;                    // L13142
    float v9996 = v9994 * v9995;           // L13143
    float v9997 = v384;                    // L13144
    float v9998 = v9997 + v9996;           // L13145
    v384 = v9998;                          // L13146
    float v9999 = a384;                    // L13147
    v9983.write(v9999);                    // v9983[k396] = v9999;	// L13148
    float v10000 = b384;                   // L13149
    v9984.write(v10000);                   // v9984[k396] = v10000;	// L13150
  }
  float v10001 = v384;          // L13152
  v9985[v9986][v9987] = v10001; // L13153
}

void PE_kernel_ffn1_1_0(hls::stream<float> &v10002 /* v10002[768] */,
                        hls::stream<float> &v10003 /* v10003[768] */,
                        hls::stream<float> &v10004 /* v10004[768] */,
                        hls::stream<float> &v10005 /* v10005[768] */,
                        float v10006[8][8], int v10007,
                        int v10008) { // L13156
#pragma HLS stream variable = v10002 depth = 9
#pragma HLS stream variable = v10003 depth = 9
#pragma HLS stream variable = v10004 depth = 9
#pragma HLS stream variable = v10005 depth = 9
#pragma HLS array_partition variable = v10006 complete dim = 1
#pragma HLS array_partition variable = v10006 complete dim = 2

  float v385;      // L13159
  v385 = 0.000000; // L13160
l_S_k_0_k397:
  for (int k397 = 0; k397 < 768; k397++) { // L13161
    float v10011 = v10002.read();          // v10002[k397];	// L13162
    float a385;                            // L13163
    a385 = v10011;                         // L13164
    float v10013 = v10003.read();          // v10003[k397];	// L13165
    float b385;                            // L13166
    b385 = v10013;                         // L13167
    float v10015 = a385;                   // L13168
    float v10016 = b385;                   // L13169
    float v10017 = v10015 * v10016;        // L13170
    float v10018 = v385;                   // L13171
    float v10019 = v10018 + v10017;        // L13172
    v385 = v10019;                         // L13173
    float v10020 = a385;                   // L13174
    v10004.write(v10020);                  // v10004[k397] = v10020;	// L13175
    float v10021 = b385;                   // L13176
    v10005.write(v10021);                  // v10005[k397] = v10021;	// L13177
  }
  float v10022 = v385;             // L13179
  v10006[v10007][v10008] = v10022; // L13180
}

void PE_kernel_ffn1_2_0(hls::stream<float> &v10023 /* v10023[768] */,
                        hls::stream<float> &v10024 /* v10024[768] */,
                        hls::stream<float> &v10025 /* v10025[768] */,
                        hls::stream<float> &v10026 /* v10026[768] */,
                        float v10027[8][8], int v10028,
                        int v10029) { // L13183
#pragma HLS stream variable = v10023 depth = 9
#pragma HLS stream variable = v10024 depth = 9
#pragma HLS stream variable = v10025 depth = 9
#pragma HLS stream variable = v10026 depth = 9
#pragma HLS array_partition variable = v10027 complete dim = 1
#pragma HLS array_partition variable = v10027 complete dim = 2

  float v386;      // L13186
  v386 = 0.000000; // L13187
l_S_k_0_k398:
  for (int k398 = 0; k398 < 768; k398++) { // L13188
    float v10032 = v10023.read();          // v10023[k398];	// L13189
    float a386;                            // L13190
    a386 = v10032;                         // L13191
    float v10034 = v10024.read();          // v10024[k398];	// L13192
    float b386;                            // L13193
    b386 = v10034;                         // L13194
    float v10036 = a386;                   // L13195
    float v10037 = b386;                   // L13196
    float v10038 = v10036 * v10037;        // L13197
    float v10039 = v386;                   // L13198
    float v10040 = v10039 + v10038;        // L13199
    v386 = v10040;                         // L13200
    float v10041 = a386;                   // L13201
    v10025.write(v10041);                  // v10025[k398] = v10041;	// L13202
    float v10042 = b386;                   // L13203
    v10026.write(v10042);                  // v10026[k398] = v10042;	// L13204
  }
  float v10043 = v386;             // L13206
  v10027[v10028][v10029] = v10043; // L13207
}

void PE_kernel_ffn1_3_0(hls::stream<float> &v10044 /* v10044[768] */,
                        hls::stream<float> &v10045 /* v10045[768] */,
                        hls::stream<float> &v10046 /* v10046[768] */,
                        hls::stream<float> &v10047 /* v10047[768] */,
                        float v10048[8][8], int v10049,
                        int v10050) { // L13210
#pragma HLS stream variable = v10044 depth = 9
#pragma HLS stream variable = v10045 depth = 9
#pragma HLS stream variable = v10046 depth = 9
#pragma HLS stream variable = v10047 depth = 9
#pragma HLS array_partition variable = v10048 complete dim = 1
#pragma HLS array_partition variable = v10048 complete dim = 2

  float v387;      // L13213
  v387 = 0.000000; // L13214
l_S_k_0_k399:
  for (int k399 = 0; k399 < 768; k399++) { // L13215
    float v10053 = v10044.read();          // v10044[k399];	// L13216
    float a387;                            // L13217
    a387 = v10053;                         // L13218
    float v10055 = v10045.read();          // v10045[k399];	// L13219
    float b387;                            // L13220
    b387 = v10055;                         // L13221
    float v10057 = a387;                   // L13222
    float v10058 = b387;                   // L13223
    float v10059 = v10057 * v10058;        // L13224
    float v10060 = v387;                   // L13225
    float v10061 = v10060 + v10059;        // L13226
    v387 = v10061;                         // L13227
    float v10062 = a387;                   // L13228
    v10046.write(v10062);                  // v10046[k399] = v10062;	// L13229
    float v10063 = b387;                   // L13230
    v10047.write(v10063);                  // v10047[k399] = v10063;	// L13231
  }
  float v10064 = v387;             // L13233
  v10048[v10049][v10050] = v10064; // L13234
}

void PE_kernel_ffn1_4_0(hls::stream<float> &v10065 /* v10065[768] */,
                        hls::stream<float> &v10066 /* v10066[768] */,
                        hls::stream<float> &v10067 /* v10067[768] */,
                        hls::stream<float> &v10068 /* v10068[768] */,
                        float v10069[8][8], int v10070,
                        int v10071) { // L13237
#pragma HLS stream variable = v10065 depth = 9
#pragma HLS stream variable = v10066 depth = 9
#pragma HLS stream variable = v10067 depth = 9
#pragma HLS stream variable = v10068 depth = 9
#pragma HLS array_partition variable = v10069 complete dim = 1
#pragma HLS array_partition variable = v10069 complete dim = 2

  float v388;      // L13240
  v388 = 0.000000; // L13241
l_S_k_0_k400:
  for (int k400 = 0; k400 < 768; k400++) { // L13242
    float v10074 = v10065.read();          // v10065[k400];	// L13243
    float a388;                            // L13244
    a388 = v10074;                         // L13245
    float v10076 = v10066.read();          // v10066[k400];	// L13246
    float b388;                            // L13247
    b388 = v10076;                         // L13248
    float v10078 = a388;                   // L13249
    float v10079 = b388;                   // L13250
    float v10080 = v10078 * v10079;        // L13251
    float v10081 = v388;                   // L13252
    float v10082 = v10081 + v10080;        // L13253
    v388 = v10082;                         // L13254
    float v10083 = a388;                   // L13255
    v10067.write(v10083);                  // v10067[k400] = v10083;	// L13256
    float v10084 = b388;                   // L13257
    v10068.write(v10084);                  // v10068[k400] = v10084;	// L13258
  }
  float v10085 = v388;             // L13260
  v10069[v10070][v10071] = v10085; // L13261
}

void PE_kernel_ffn1_5_0(hls::stream<float> &v10086 /* v10086[768] */,
                        hls::stream<float> &v10087 /* v10087[768] */,
                        hls::stream<float> &v10088 /* v10088[768] */,
                        hls::stream<float> &v10089 /* v10089[768] */,
                        float v10090[8][8], int v10091,
                        int v10092) { // L13264
#pragma HLS stream variable = v10086 depth = 9
#pragma HLS stream variable = v10087 depth = 9
#pragma HLS stream variable = v10088 depth = 9
#pragma HLS stream variable = v10089 depth = 9
#pragma HLS array_partition variable = v10090 complete dim = 1
#pragma HLS array_partition variable = v10090 complete dim = 2

  float v389;      // L13267
  v389 = 0.000000; // L13268
l_S_k_0_k401:
  for (int k401 = 0; k401 < 768; k401++) { // L13269
    float v10095 = v10086.read();          // v10086[k401];	// L13270
    float a389;                            // L13271
    a389 = v10095;                         // L13272
    float v10097 = v10087.read();          // v10087[k401];	// L13273
    float b389;                            // L13274
    b389 = v10097;                         // L13275
    float v10099 = a389;                   // L13276
    float v10100 = b389;                   // L13277
    float v10101 = v10099 * v10100;        // L13278
    float v10102 = v389;                   // L13279
    float v10103 = v10102 + v10101;        // L13280
    v389 = v10103;                         // L13281
    float v10104 = a389;                   // L13282
    v10088.write(v10104);                  // v10088[k401] = v10104;	// L13283
    float v10105 = b389;                   // L13284
    v10089.write(v10105);                  // v10089[k401] = v10105;	// L13285
  }
  float v10106 = v389;             // L13287
  v10090[v10091][v10092] = v10106; // L13288
}

void PE_kernel_ffn1_6_0(hls::stream<float> &v10107 /* v10107[768] */,
                        hls::stream<float> &v10108 /* v10108[768] */,
                        hls::stream<float> &v10109 /* v10109[768] */,
                        hls::stream<float> &v10110 /* v10110[768] */,
                        float v10111[8][8], int v10112,
                        int v10113) { // L13291
#pragma HLS stream variable = v10107 depth = 9
#pragma HLS stream variable = v10108 depth = 9
#pragma HLS stream variable = v10109 depth = 9
#pragma HLS stream variable = v10110 depth = 9
#pragma HLS array_partition variable = v10111 complete dim = 1
#pragma HLS array_partition variable = v10111 complete dim = 2

  float v390;      // L13294
  v390 = 0.000000; // L13295
l_S_k_0_k402:
  for (int k402 = 0; k402 < 768; k402++) { // L13296
    float v10116 = v10107.read();          // v10107[k402];	// L13297
    float a390;                            // L13298
    a390 = v10116;                         // L13299
    float v10118 = v10108.read();          // v10108[k402];	// L13300
    float b390;                            // L13301
    b390 = v10118;                         // L13302
    float v10120 = a390;                   // L13303
    float v10121 = b390;                   // L13304
    float v10122 = v10120 * v10121;        // L13305
    float v10123 = v390;                   // L13306
    float v10124 = v10123 + v10122;        // L13307
    v390 = v10124;                         // L13308
    float v10125 = a390;                   // L13309
    v10109.write(v10125);                  // v10109[k402] = v10125;	// L13310
    float v10126 = b390;                   // L13311
    v10110.write(v10126);                  // v10110[k402] = v10126;	// L13312
  }
  float v10127 = v390;             // L13314
  v10111[v10112][v10113] = v10127; // L13315
}

void PE_kernel_ffn1_7_0(hls::stream<float> &v10128 /* v10128[768] */,
                        hls::stream<float> &v10129 /* v10129[768] */,
                        hls::stream<float> &v10130 /* v10130[768] */,
                        hls::stream<float> &v10131 /* v10131[768] */,
                        float v10132[8][8], int v10133,
                        int v10134) { // L13318
#pragma HLS stream variable = v10128 depth = 9
#pragma HLS stream variable = v10129 depth = 9
#pragma HLS stream variable = v10130 depth = 9
#pragma HLS stream variable = v10131 depth = 9
#pragma HLS array_partition variable = v10132 complete dim = 1
#pragma HLS array_partition variable = v10132 complete dim = 2

  float v391;      // L13321
  v391 = 0.000000; // L13322
l_S_k_0_k403:
  for (int k403 = 0; k403 < 768; k403++) { // L13323
    float v10137 = v10128.read();          // v10128[k403];	// L13324
    float a391;                            // L13325
    a391 = v10137;                         // L13326
    float v10139 = v10129.read();          // v10129[k403];	// L13327
    float b391;                            // L13328
    b391 = v10139;                         // L13329
    float v10141 = a391;                   // L13330
    float v10142 = b391;                   // L13331
    float v10143 = v10141 * v10142;        // L13332
    float v10144 = v391;                   // L13333
    float v10145 = v10144 + v10143;        // L13334
    v391 = v10145;                         // L13335
    float v10146 = a391;                   // L13336
    v10130.write(v10146);                  // v10130[k403] = v10146;	// L13337
    float v10147 = b391;                   // L13338
    v10131.write(v10147);                  // v10131[k403] = v10147;	// L13339
  }
  float v10148 = v391;             // L13341
  v10132[v10133][v10134] = v10148; // L13342
}

void PE_kernel_ffn1_0_1(hls::stream<float> &v10149 /* v10149[768] */,
                        hls::stream<float> &v10150 /* v10150[768] */,
                        hls::stream<float> &v10151 /* v10151[768] */,
                        hls::stream<float> &v10152 /* v10152[768] */,
                        float v10153[8][8], int v10154,
                        int v10155) { // L13345
#pragma HLS stream variable = v10149 depth = 9
#pragma HLS stream variable = v10150 depth = 9
#pragma HLS stream variable = v10151 depth = 9
#pragma HLS stream variable = v10152 depth = 9
#pragma HLS array_partition variable = v10153 complete dim = 1
#pragma HLS array_partition variable = v10153 complete dim = 2

  float v392;      // L13348
  v392 = 0.000000; // L13349
l_S_k_0_k404:
  for (int k404 = 0; k404 < 768; k404++) { // L13350
    float v10158 = v10149.read();          // v10149[k404];	// L13351
    float a392;                            // L13352
    a392 = v10158;                         // L13353
    float v10160 = v10150.read();          // v10150[k404];	// L13354
    float b392;                            // L13355
    b392 = v10160;                         // L13356
    float v10162 = a392;                   // L13357
    float v10163 = b392;                   // L13358
    float v10164 = v10162 * v10163;        // L13359
    float v10165 = v392;                   // L13360
    float v10166 = v10165 + v10164;        // L13361
    v392 = v10166;                         // L13362
    float v10167 = a392;                   // L13363
    v10151.write(v10167);                  // v10151[k404] = v10167;	// L13364
    float v10168 = b392;                   // L13365
    v10152.write(v10168);                  // v10152[k404] = v10168;	// L13366
  }
  float v10169 = v392;             // L13368
  v10153[v10154][v10155] = v10169; // L13369
}

void PE_kernel_ffn1_1_1(hls::stream<float> &v10170 /* v10170[768] */,
                        hls::stream<float> &v10171 /* v10171[768] */,
                        hls::stream<float> &v10172 /* v10172[768] */,
                        hls::stream<float> &v10173 /* v10173[768] */,
                        float v10174[8][8], int v10175,
                        int v10176) { // L13372
#pragma HLS stream variable = v10170 depth = 9
#pragma HLS stream variable = v10171 depth = 9
#pragma HLS stream variable = v10172 depth = 9
#pragma HLS stream variable = v10173 depth = 9
#pragma HLS array_partition variable = v10174 complete dim = 1
#pragma HLS array_partition variable = v10174 complete dim = 2

  float v393;      // L13375
  v393 = 0.000000; // L13376
l_S_k_0_k405:
  for (int k405 = 0; k405 < 768; k405++) { // L13377
    float v10179 = v10170.read();          // v10170[k405];	// L13378
    float a393;                            // L13379
    a393 = v10179;                         // L13380
    float v10181 = v10171.read();          // v10171[k405];	// L13381
    float b393;                            // L13382
    b393 = v10181;                         // L13383
    float v10183 = a393;                   // L13384
    float v10184 = b393;                   // L13385
    float v10185 = v10183 * v10184;        // L13386
    float v10186 = v393;                   // L13387
    float v10187 = v10186 + v10185;        // L13388
    v393 = v10187;                         // L13389
    float v10188 = a393;                   // L13390
    v10172.write(v10188);                  // v10172[k405] = v10188;	// L13391
    float v10189 = b393;                   // L13392
    v10173.write(v10189);                  // v10173[k405] = v10189;	// L13393
  }
  float v10190 = v393;             // L13395
  v10174[v10175][v10176] = v10190; // L13396
}

void PE_kernel_ffn1_2_1(hls::stream<float> &v10191 /* v10191[768] */,
                        hls::stream<float> &v10192 /* v10192[768] */,
                        hls::stream<float> &v10193 /* v10193[768] */,
                        hls::stream<float> &v10194 /* v10194[768] */,
                        float v10195[8][8], int v10196,
                        int v10197) { // L13399
#pragma HLS stream variable = v10191 depth = 9
#pragma HLS stream variable = v10192 depth = 9
#pragma HLS stream variable = v10193 depth = 9
#pragma HLS stream variable = v10194 depth = 9
#pragma HLS array_partition variable = v10195 complete dim = 1
#pragma HLS array_partition variable = v10195 complete dim = 2

  float v394;      // L13402
  v394 = 0.000000; // L13403
l_S_k_0_k406:
  for (int k406 = 0; k406 < 768; k406++) { // L13404
    float v10200 = v10191.read();          // v10191[k406];	// L13405
    float a394;                            // L13406
    a394 = v10200;                         // L13407
    float v10202 = v10192.read();          // v10192[k406];	// L13408
    float b394;                            // L13409
    b394 = v10202;                         // L13410
    float v10204 = a394;                   // L13411
    float v10205 = b394;                   // L13412
    float v10206 = v10204 * v10205;        // L13413
    float v10207 = v394;                   // L13414
    float v10208 = v10207 + v10206;        // L13415
    v394 = v10208;                         // L13416
    float v10209 = a394;                   // L13417
    v10193.write(v10209);                  // v10193[k406] = v10209;	// L13418
    float v10210 = b394;                   // L13419
    v10194.write(v10210);                  // v10194[k406] = v10210;	// L13420
  }
  float v10211 = v394;             // L13422
  v10195[v10196][v10197] = v10211; // L13423
}

void PE_kernel_ffn1_3_1(hls::stream<float> &v10212 /* v10212[768] */,
                        hls::stream<float> &v10213 /* v10213[768] */,
                        hls::stream<float> &v10214 /* v10214[768] */,
                        hls::stream<float> &v10215 /* v10215[768] */,
                        float v10216[8][8], int v10217,
                        int v10218) { // L13426
#pragma HLS stream variable = v10212 depth = 9
#pragma HLS stream variable = v10213 depth = 9
#pragma HLS stream variable = v10214 depth = 9
#pragma HLS stream variable = v10215 depth = 9
#pragma HLS array_partition variable = v10216 complete dim = 1
#pragma HLS array_partition variable = v10216 complete dim = 2

  float v395;      // L13429
  v395 = 0.000000; // L13430
l_S_k_0_k407:
  for (int k407 = 0; k407 < 768; k407++) { // L13431
    float v10221 = v10212.read();          // v10212[k407];	// L13432
    float a395;                            // L13433
    a395 = v10221;                         // L13434
    float v10223 = v10213.read();          // v10213[k407];	// L13435
    float b395;                            // L13436
    b395 = v10223;                         // L13437
    float v10225 = a395;                   // L13438
    float v10226 = b395;                   // L13439
    float v10227 = v10225 * v10226;        // L13440
    float v10228 = v395;                   // L13441
    float v10229 = v10228 + v10227;        // L13442
    v395 = v10229;                         // L13443
    float v10230 = a395;                   // L13444
    v10214.write(v10230);                  // v10214[k407] = v10230;	// L13445
    float v10231 = b395;                   // L13446
    v10215.write(v10231);                  // v10215[k407] = v10231;	// L13447
  }
  float v10232 = v395;             // L13449
  v10216[v10217][v10218] = v10232; // L13450
}

void PE_kernel_ffn1_4_1(hls::stream<float> &v10233 /* v10233[768] */,
                        hls::stream<float> &v10234 /* v10234[768] */,
                        hls::stream<float> &v10235 /* v10235[768] */,
                        hls::stream<float> &v10236 /* v10236[768] */,
                        float v10237[8][8], int v10238,
                        int v10239) { // L13453
#pragma HLS stream variable = v10233 depth = 9
#pragma HLS stream variable = v10234 depth = 9
#pragma HLS stream variable = v10235 depth = 9
#pragma HLS stream variable = v10236 depth = 9
#pragma HLS array_partition variable = v10237 complete dim = 1
#pragma HLS array_partition variable = v10237 complete dim = 2

  float v396;      // L13456
  v396 = 0.000000; // L13457
l_S_k_0_k408:
  for (int k408 = 0; k408 < 768; k408++) { // L13458
    float v10242 = v10233.read();          // v10233[k408];	// L13459
    float a396;                            // L13460
    a396 = v10242;                         // L13461
    float v10244 = v10234.read();          // v10234[k408];	// L13462
    float b396;                            // L13463
    b396 = v10244;                         // L13464
    float v10246 = a396;                   // L13465
    float v10247 = b396;                   // L13466
    float v10248 = v10246 * v10247;        // L13467
    float v10249 = v396;                   // L13468
    float v10250 = v10249 + v10248;        // L13469
    v396 = v10250;                         // L13470
    float v10251 = a396;                   // L13471
    v10235.write(v10251);                  // v10235[k408] = v10251;	// L13472
    float v10252 = b396;                   // L13473
    v10236.write(v10252);                  // v10236[k408] = v10252;	// L13474
  }
  float v10253 = v396;             // L13476
  v10237[v10238][v10239] = v10253; // L13477
}

void PE_kernel_ffn1_5_1(hls::stream<float> &v10254 /* v10254[768] */,
                        hls::stream<float> &v10255 /* v10255[768] */,
                        hls::stream<float> &v10256 /* v10256[768] */,
                        hls::stream<float> &v10257 /* v10257[768] */,
                        float v10258[8][8], int v10259,
                        int v10260) { // L13480
#pragma HLS stream variable = v10254 depth = 9
#pragma HLS stream variable = v10255 depth = 9
#pragma HLS stream variable = v10256 depth = 9
#pragma HLS stream variable = v10257 depth = 9
#pragma HLS array_partition variable = v10258 complete dim = 1
#pragma HLS array_partition variable = v10258 complete dim = 2

  float v397;      // L13483
  v397 = 0.000000; // L13484
l_S_k_0_k409:
  for (int k409 = 0; k409 < 768; k409++) { // L13485
    float v10263 = v10254.read();          // v10254[k409];	// L13486
    float a397;                            // L13487
    a397 = v10263;                         // L13488
    float v10265 = v10255.read();          // v10255[k409];	// L13489
    float b397;                            // L13490
    b397 = v10265;                         // L13491
    float v10267 = a397;                   // L13492
    float v10268 = b397;                   // L13493
    float v10269 = v10267 * v10268;        // L13494
    float v10270 = v397;                   // L13495
    float v10271 = v10270 + v10269;        // L13496
    v397 = v10271;                         // L13497
    float v10272 = a397;                   // L13498
    v10256.write(v10272);                  // v10256[k409] = v10272;	// L13499
    float v10273 = b397;                   // L13500
    v10257.write(v10273);                  // v10257[k409] = v10273;	// L13501
  }
  float v10274 = v397;             // L13503
  v10258[v10259][v10260] = v10274; // L13504
}

void PE_kernel_ffn1_6_1(hls::stream<float> &v10275 /* v10275[768] */,
                        hls::stream<float> &v10276 /* v10276[768] */,
                        hls::stream<float> &v10277 /* v10277[768] */,
                        hls::stream<float> &v10278 /* v10278[768] */,
                        float v10279[8][8], int v10280,
                        int v10281) { // L13507
#pragma HLS stream variable = v10275 depth = 9
#pragma HLS stream variable = v10276 depth = 9
#pragma HLS stream variable = v10277 depth = 9
#pragma HLS stream variable = v10278 depth = 9
#pragma HLS array_partition variable = v10279 complete dim = 1
#pragma HLS array_partition variable = v10279 complete dim = 2

  float v398;      // L13510
  v398 = 0.000000; // L13511
l_S_k_0_k410:
  for (int k410 = 0; k410 < 768; k410++) { // L13512
    float v10284 = v10275.read();          // v10275[k410];	// L13513
    float a398;                            // L13514
    a398 = v10284;                         // L13515
    float v10286 = v10276.read();          // v10276[k410];	// L13516
    float b398;                            // L13517
    b398 = v10286;                         // L13518
    float v10288 = a398;                   // L13519
    float v10289 = b398;                   // L13520
    float v10290 = v10288 * v10289;        // L13521
    float v10291 = v398;                   // L13522
    float v10292 = v10291 + v10290;        // L13523
    v398 = v10292;                         // L13524
    float v10293 = a398;                   // L13525
    v10277.write(v10293);                  // v10277[k410] = v10293;	// L13526
    float v10294 = b398;                   // L13527
    v10278.write(v10294);                  // v10278[k410] = v10294;	// L13528
  }
  float v10295 = v398;             // L13530
  v10279[v10280][v10281] = v10295; // L13531
}

void PE_kernel_ffn1_7_1(hls::stream<float> &v10296 /* v10296[768] */,
                        hls::stream<float> &v10297 /* v10297[768] */,
                        hls::stream<float> &v10298 /* v10298[768] */,
                        hls::stream<float> &v10299 /* v10299[768] */,
                        float v10300[8][8], int v10301,
                        int v10302) { // L13534
#pragma HLS stream variable = v10296 depth = 9
#pragma HLS stream variable = v10297 depth = 9
#pragma HLS stream variable = v10298 depth = 9
#pragma HLS stream variable = v10299 depth = 9
#pragma HLS array_partition variable = v10300 complete dim = 1
#pragma HLS array_partition variable = v10300 complete dim = 2

  float v399;      // L13537
  v399 = 0.000000; // L13538
l_S_k_0_k411:
  for (int k411 = 0; k411 < 768; k411++) { // L13539
    float v10305 = v10296.read();          // v10296[k411];	// L13540
    float a399;                            // L13541
    a399 = v10305;                         // L13542
    float v10307 = v10297.read();          // v10297[k411];	// L13543
    float b399;                            // L13544
    b399 = v10307;                         // L13545
    float v10309 = a399;                   // L13546
    float v10310 = b399;                   // L13547
    float v10311 = v10309 * v10310;        // L13548
    float v10312 = v399;                   // L13549
    float v10313 = v10312 + v10311;        // L13550
    v399 = v10313;                         // L13551
    float v10314 = a399;                   // L13552
    v10298.write(v10314);                  // v10298[k411] = v10314;	// L13553
    float v10315 = b399;                   // L13554
    v10299.write(v10315);                  // v10299[k411] = v10315;	// L13555
  }
  float v10316 = v399;             // L13557
  v10300[v10301][v10302] = v10316; // L13558
}

void PE_kernel_ffn1_0_2(hls::stream<float> &v10317 /* v10317[768] */,
                        hls::stream<float> &v10318 /* v10318[768] */,
                        hls::stream<float> &v10319 /* v10319[768] */,
                        hls::stream<float> &v10320 /* v10320[768] */,
                        float v10321[8][8], int v10322,
                        int v10323) { // L13561
#pragma HLS stream variable = v10317 depth = 9
#pragma HLS stream variable = v10318 depth = 9
#pragma HLS stream variable = v10319 depth = 9
#pragma HLS stream variable = v10320 depth = 9
#pragma HLS array_partition variable = v10321 complete dim = 1
#pragma HLS array_partition variable = v10321 complete dim = 2

  float v400;      // L13564
  v400 = 0.000000; // L13565
l_S_k_0_k412:
  for (int k412 = 0; k412 < 768; k412++) { // L13566
    float v10326 = v10317.read();          // v10317[k412];	// L13567
    float a400;                            // L13568
    a400 = v10326;                         // L13569
    float v10328 = v10318.read();          // v10318[k412];	// L13570
    float b400;                            // L13571
    b400 = v10328;                         // L13572
    float v10330 = a400;                   // L13573
    float v10331 = b400;                   // L13574
    float v10332 = v10330 * v10331;        // L13575
    float v10333 = v400;                   // L13576
    float v10334 = v10333 + v10332;        // L13577
    v400 = v10334;                         // L13578
    float v10335 = a400;                   // L13579
    v10319.write(v10335);                  // v10319[k412] = v10335;	// L13580
    float v10336 = b400;                   // L13581
    v10320.write(v10336);                  // v10320[k412] = v10336;	// L13582
  }
  float v10337 = v400;             // L13584
  v10321[v10322][v10323] = v10337; // L13585
}

void PE_kernel_ffn1_1_2(hls::stream<float> &v10338 /* v10338[768] */,
                        hls::stream<float> &v10339 /* v10339[768] */,
                        hls::stream<float> &v10340 /* v10340[768] */,
                        hls::stream<float> &v10341 /* v10341[768] */,
                        float v10342[8][8], int v10343,
                        int v10344) { // L13588
#pragma HLS stream variable = v10338 depth = 9
#pragma HLS stream variable = v10339 depth = 9
#pragma HLS stream variable = v10340 depth = 9
#pragma HLS stream variable = v10341 depth = 9
#pragma HLS array_partition variable = v10342 complete dim = 1
#pragma HLS array_partition variable = v10342 complete dim = 2

  float v401;      // L13591
  v401 = 0.000000; // L13592
l_S_k_0_k413:
  for (int k413 = 0; k413 < 768; k413++) { // L13593
    float v10347 = v10338.read();          // v10338[k413];	// L13594
    float a401;                            // L13595
    a401 = v10347;                         // L13596
    float v10349 = v10339.read();          // v10339[k413];	// L13597
    float b401;                            // L13598
    b401 = v10349;                         // L13599
    float v10351 = a401;                   // L13600
    float v10352 = b401;                   // L13601
    float v10353 = v10351 * v10352;        // L13602
    float v10354 = v401;                   // L13603
    float v10355 = v10354 + v10353;        // L13604
    v401 = v10355;                         // L13605
    float v10356 = a401;                   // L13606
    v10340.write(v10356);                  // v10340[k413] = v10356;	// L13607
    float v10357 = b401;                   // L13608
    v10341.write(v10357);                  // v10341[k413] = v10357;	// L13609
  }
  float v10358 = v401;             // L13611
  v10342[v10343][v10344] = v10358; // L13612
}

void PE_kernel_ffn1_2_2(hls::stream<float> &v10359 /* v10359[768] */,
                        hls::stream<float> &v10360 /* v10360[768] */,
                        hls::stream<float> &v10361 /* v10361[768] */,
                        hls::stream<float> &v10362 /* v10362[768] */,
                        float v10363[8][8], int v10364,
                        int v10365) { // L13615
#pragma HLS stream variable = v10359 depth = 9
#pragma HLS stream variable = v10360 depth = 9
#pragma HLS stream variable = v10361 depth = 9
#pragma HLS stream variable = v10362 depth = 9
#pragma HLS array_partition variable = v10363 complete dim = 1
#pragma HLS array_partition variable = v10363 complete dim = 2

  float v402;      // L13618
  v402 = 0.000000; // L13619
l_S_k_0_k414:
  for (int k414 = 0; k414 < 768; k414++) { // L13620
    float v10368 = v10359.read();          // v10359[k414];	// L13621
    float a402;                            // L13622
    a402 = v10368;                         // L13623
    float v10370 = v10360.read();          // v10360[k414];	// L13624
    float b402;                            // L13625
    b402 = v10370;                         // L13626
    float v10372 = a402;                   // L13627
    float v10373 = b402;                   // L13628
    float v10374 = v10372 * v10373;        // L13629
    float v10375 = v402;                   // L13630
    float v10376 = v10375 + v10374;        // L13631
    v402 = v10376;                         // L13632
    float v10377 = a402;                   // L13633
    v10361.write(v10377);                  // v10361[k414] = v10377;	// L13634
    float v10378 = b402;                   // L13635
    v10362.write(v10378);                  // v10362[k414] = v10378;	// L13636
  }
  float v10379 = v402;             // L13638
  v10363[v10364][v10365] = v10379; // L13639
}

void PE_kernel_ffn1_3_2(hls::stream<float> &v10380 /* v10380[768] */,
                        hls::stream<float> &v10381 /* v10381[768] */,
                        hls::stream<float> &v10382 /* v10382[768] */,
                        hls::stream<float> &v10383 /* v10383[768] */,
                        float v10384[8][8], int v10385,
                        int v10386) { // L13642
#pragma HLS stream variable = v10380 depth = 9
#pragma HLS stream variable = v10381 depth = 9
#pragma HLS stream variable = v10382 depth = 9
#pragma HLS stream variable = v10383 depth = 9
#pragma HLS array_partition variable = v10384 complete dim = 1
#pragma HLS array_partition variable = v10384 complete dim = 2

  float v403;      // L13645
  v403 = 0.000000; // L13646
l_S_k_0_k415:
  for (int k415 = 0; k415 < 768; k415++) { // L13647
    float v10389 = v10380.read();          // v10380[k415];	// L13648
    float a403;                            // L13649
    a403 = v10389;                         // L13650
    float v10391 = v10381.read();          // v10381[k415];	// L13651
    float b403;                            // L13652
    b403 = v10391;                         // L13653
    float v10393 = a403;                   // L13654
    float v10394 = b403;                   // L13655
    float v10395 = v10393 * v10394;        // L13656
    float v10396 = v403;                   // L13657
    float v10397 = v10396 + v10395;        // L13658
    v403 = v10397;                         // L13659
    float v10398 = a403;                   // L13660
    v10382.write(v10398);                  // v10382[k415] = v10398;	// L13661
    float v10399 = b403;                   // L13662
    v10383.write(v10399);                  // v10383[k415] = v10399;	// L13663
  }
  float v10400 = v403;             // L13665
  v10384[v10385][v10386] = v10400; // L13666
}

void PE_kernel_ffn1_4_2(hls::stream<float> &v10401 /* v10401[768] */,
                        hls::stream<float> &v10402 /* v10402[768] */,
                        hls::stream<float> &v10403 /* v10403[768] */,
                        hls::stream<float> &v10404 /* v10404[768] */,
                        float v10405[8][8], int v10406,
                        int v10407) { // L13669
#pragma HLS stream variable = v10401 depth = 9
#pragma HLS stream variable = v10402 depth = 9
#pragma HLS stream variable = v10403 depth = 9
#pragma HLS stream variable = v10404 depth = 9
#pragma HLS array_partition variable = v10405 complete dim = 1
#pragma HLS array_partition variable = v10405 complete dim = 2

  float v404;      // L13672
  v404 = 0.000000; // L13673
l_S_k_0_k416:
  for (int k416 = 0; k416 < 768; k416++) { // L13674
    float v10410 = v10401.read();          // v10401[k416];	// L13675
    float a404;                            // L13676
    a404 = v10410;                         // L13677
    float v10412 = v10402.read();          // v10402[k416];	// L13678
    float b404;                            // L13679
    b404 = v10412;                         // L13680
    float v10414 = a404;                   // L13681
    float v10415 = b404;                   // L13682
    float v10416 = v10414 * v10415;        // L13683
    float v10417 = v404;                   // L13684
    float v10418 = v10417 + v10416;        // L13685
    v404 = v10418;                         // L13686
    float v10419 = a404;                   // L13687
    v10403.write(v10419);                  // v10403[k416] = v10419;	// L13688
    float v10420 = b404;                   // L13689
    v10404.write(v10420);                  // v10404[k416] = v10420;	// L13690
  }
  float v10421 = v404;             // L13692
  v10405[v10406][v10407] = v10421; // L13693
}

void PE_kernel_ffn1_5_2(hls::stream<float> &v10422 /* v10422[768] */,
                        hls::stream<float> &v10423 /* v10423[768] */,
                        hls::stream<float> &v10424 /* v10424[768] */,
                        hls::stream<float> &v10425 /* v10425[768] */,
                        float v10426[8][8], int v10427,
                        int v10428) { // L13696
#pragma HLS stream variable = v10422 depth = 9
#pragma HLS stream variable = v10423 depth = 9
#pragma HLS stream variable = v10424 depth = 9
#pragma HLS stream variable = v10425 depth = 9
#pragma HLS array_partition variable = v10426 complete dim = 1
#pragma HLS array_partition variable = v10426 complete dim = 2

  float v405;      // L13699
  v405 = 0.000000; // L13700
l_S_k_0_k417:
  for (int k417 = 0; k417 < 768; k417++) { // L13701
    float v10431 = v10422.read();          // v10422[k417];	// L13702
    float a405;                            // L13703
    a405 = v10431;                         // L13704
    float v10433 = v10423.read();          // v10423[k417];	// L13705
    float b405;                            // L13706
    b405 = v10433;                         // L13707
    float v10435 = a405;                   // L13708
    float v10436 = b405;                   // L13709
    float v10437 = v10435 * v10436;        // L13710
    float v10438 = v405;                   // L13711
    float v10439 = v10438 + v10437;        // L13712
    v405 = v10439;                         // L13713
    float v10440 = a405;                   // L13714
    v10424.write(v10440);                  // v10424[k417] = v10440;	// L13715
    float v10441 = b405;                   // L13716
    v10425.write(v10441);                  // v10425[k417] = v10441;	// L13717
  }
  float v10442 = v405;             // L13719
  v10426[v10427][v10428] = v10442; // L13720
}

void PE_kernel_ffn1_6_2(hls::stream<float> &v10443 /* v10443[768] */,
                        hls::stream<float> &v10444 /* v10444[768] */,
                        hls::stream<float> &v10445 /* v10445[768] */,
                        hls::stream<float> &v10446 /* v10446[768] */,
                        float v10447[8][8], int v10448,
                        int v10449) { // L13723
#pragma HLS stream variable = v10443 depth = 9
#pragma HLS stream variable = v10444 depth = 9
#pragma HLS stream variable = v10445 depth = 9
#pragma HLS stream variable = v10446 depth = 9
#pragma HLS array_partition variable = v10447 complete dim = 1
#pragma HLS array_partition variable = v10447 complete dim = 2

  float v406;      // L13726
  v406 = 0.000000; // L13727
l_S_k_0_k418:
  for (int k418 = 0; k418 < 768; k418++) { // L13728
    float v10452 = v10443.read();          // v10443[k418];	// L13729
    float a406;                            // L13730
    a406 = v10452;                         // L13731
    float v10454 = v10444.read();          // v10444[k418];	// L13732
    float b406;                            // L13733
    b406 = v10454;                         // L13734
    float v10456 = a406;                   // L13735
    float v10457 = b406;                   // L13736
    float v10458 = v10456 * v10457;        // L13737
    float v10459 = v406;                   // L13738
    float v10460 = v10459 + v10458;        // L13739
    v406 = v10460;                         // L13740
    float v10461 = a406;                   // L13741
    v10445.write(v10461);                  // v10445[k418] = v10461;	// L13742
    float v10462 = b406;                   // L13743
    v10446.write(v10462);                  // v10446[k418] = v10462;	// L13744
  }
  float v10463 = v406;             // L13746
  v10447[v10448][v10449] = v10463; // L13747
}

void PE_kernel_ffn1_7_2(hls::stream<float> &v10464 /* v10464[768] */,
                        hls::stream<float> &v10465 /* v10465[768] */,
                        hls::stream<float> &v10466 /* v10466[768] */,
                        hls::stream<float> &v10467 /* v10467[768] */,
                        float v10468[8][8], int v10469,
                        int v10470) { // L13750
#pragma HLS stream variable = v10464 depth = 9
#pragma HLS stream variable = v10465 depth = 9
#pragma HLS stream variable = v10466 depth = 9
#pragma HLS stream variable = v10467 depth = 9
#pragma HLS array_partition variable = v10468 complete dim = 1
#pragma HLS array_partition variable = v10468 complete dim = 2

  float v407;      // L13753
  v407 = 0.000000; // L13754
l_S_k_0_k419:
  for (int k419 = 0; k419 < 768; k419++) { // L13755
    float v10473 = v10464.read();          // v10464[k419];	// L13756
    float a407;                            // L13757
    a407 = v10473;                         // L13758
    float v10475 = v10465.read();          // v10465[k419];	// L13759
    float b407;                            // L13760
    b407 = v10475;                         // L13761
    float v10477 = a407;                   // L13762
    float v10478 = b407;                   // L13763
    float v10479 = v10477 * v10478;        // L13764
    float v10480 = v407;                   // L13765
    float v10481 = v10480 + v10479;        // L13766
    v407 = v10481;                         // L13767
    float v10482 = a407;                   // L13768
    v10466.write(v10482);                  // v10466[k419] = v10482;	// L13769
    float v10483 = b407;                   // L13770
    v10467.write(v10483);                  // v10467[k419] = v10483;	// L13771
  }
  float v10484 = v407;             // L13773
  v10468[v10469][v10470] = v10484; // L13774
}

void PE_kernel_ffn1_0_3(hls::stream<float> &v10485 /* v10485[768] */,
                        hls::stream<float> &v10486 /* v10486[768] */,
                        hls::stream<float> &v10487 /* v10487[768] */,
                        hls::stream<float> &v10488 /* v10488[768] */,
                        float v10489[8][8], int v10490,
                        int v10491) { // L13777
#pragma HLS stream variable = v10485 depth = 9
#pragma HLS stream variable = v10486 depth = 9
#pragma HLS stream variable = v10487 depth = 9
#pragma HLS stream variable = v10488 depth = 9
#pragma HLS array_partition variable = v10489 complete dim = 1
#pragma HLS array_partition variable = v10489 complete dim = 2

  float v408;      // L13780
  v408 = 0.000000; // L13781
l_S_k_0_k420:
  for (int k420 = 0; k420 < 768; k420++) { // L13782
    float v10494 = v10485.read();          // v10485[k420];	// L13783
    float a408;                            // L13784
    a408 = v10494;                         // L13785
    float v10496 = v10486.read();          // v10486[k420];	// L13786
    float b408;                            // L13787
    b408 = v10496;                         // L13788
    float v10498 = a408;                   // L13789
    float v10499 = b408;                   // L13790
    float v10500 = v10498 * v10499;        // L13791
    float v10501 = v408;                   // L13792
    float v10502 = v10501 + v10500;        // L13793
    v408 = v10502;                         // L13794
    float v10503 = a408;                   // L13795
    v10487.write(v10503);                  // v10487[k420] = v10503;	// L13796
    float v10504 = b408;                   // L13797
    v10488.write(v10504);                  // v10488[k420] = v10504;	// L13798
  }
  float v10505 = v408;             // L13800
  v10489[v10490][v10491] = v10505; // L13801
}

void PE_kernel_ffn1_1_3(hls::stream<float> &v10506 /* v10506[768] */,
                        hls::stream<float> &v10507 /* v10507[768] */,
                        hls::stream<float> &v10508 /* v10508[768] */,
                        hls::stream<float> &v10509 /* v10509[768] */,
                        float v10510[8][8], int v10511,
                        int v10512) { // L13804
#pragma HLS stream variable = v10506 depth = 9
#pragma HLS stream variable = v10507 depth = 9
#pragma HLS stream variable = v10508 depth = 9
#pragma HLS stream variable = v10509 depth = 9
#pragma HLS array_partition variable = v10510 complete dim = 1
#pragma HLS array_partition variable = v10510 complete dim = 2

  float v409;      // L13807
  v409 = 0.000000; // L13808
l_S_k_0_k421:
  for (int k421 = 0; k421 < 768; k421++) { // L13809
    float v10515 = v10506.read();          // v10506[k421];	// L13810
    float a409;                            // L13811
    a409 = v10515;                         // L13812
    float v10517 = v10507.read();          // v10507[k421];	// L13813
    float b409;                            // L13814
    b409 = v10517;                         // L13815
    float v10519 = a409;                   // L13816
    float v10520 = b409;                   // L13817
    float v10521 = v10519 * v10520;        // L13818
    float v10522 = v409;                   // L13819
    float v10523 = v10522 + v10521;        // L13820
    v409 = v10523;                         // L13821
    float v10524 = a409;                   // L13822
    v10508.write(v10524);                  // v10508[k421] = v10524;	// L13823
    float v10525 = b409;                   // L13824
    v10509.write(v10525);                  // v10509[k421] = v10525;	// L13825
  }
  float v10526 = v409;             // L13827
  v10510[v10511][v10512] = v10526; // L13828
}

void PE_kernel_ffn1_2_3(hls::stream<float> &v10527 /* v10527[768] */,
                        hls::stream<float> &v10528 /* v10528[768] */,
                        hls::stream<float> &v10529 /* v10529[768] */,
                        hls::stream<float> &v10530 /* v10530[768] */,
                        float v10531[8][8], int v10532,
                        int v10533) { // L13831
#pragma HLS stream variable = v10527 depth = 9
#pragma HLS stream variable = v10528 depth = 9
#pragma HLS stream variable = v10529 depth = 9
#pragma HLS stream variable = v10530 depth = 9
#pragma HLS array_partition variable = v10531 complete dim = 1
#pragma HLS array_partition variable = v10531 complete dim = 2

  float v410;      // L13834
  v410 = 0.000000; // L13835
l_S_k_0_k422:
  for (int k422 = 0; k422 < 768; k422++) { // L13836
    float v10536 = v10527.read();          // v10527[k422];	// L13837
    float a410;                            // L13838
    a410 = v10536;                         // L13839
    float v10538 = v10528.read();          // v10528[k422];	// L13840
    float b410;                            // L13841
    b410 = v10538;                         // L13842
    float v10540 = a410;                   // L13843
    float v10541 = b410;                   // L13844
    float v10542 = v10540 * v10541;        // L13845
    float v10543 = v410;                   // L13846
    float v10544 = v10543 + v10542;        // L13847
    v410 = v10544;                         // L13848
    float v10545 = a410;                   // L13849
    v10529.write(v10545);                  // v10529[k422] = v10545;	// L13850
    float v10546 = b410;                   // L13851
    v10530.write(v10546);                  // v10530[k422] = v10546;	// L13852
  }
  float v10547 = v410;             // L13854
  v10531[v10532][v10533] = v10547; // L13855
}

void PE_kernel_ffn1_3_3(hls::stream<float> &v10548 /* v10548[768] */,
                        hls::stream<float> &v10549 /* v10549[768] */,
                        hls::stream<float> &v10550 /* v10550[768] */,
                        hls::stream<float> &v10551 /* v10551[768] */,
                        float v10552[8][8], int v10553,
                        int v10554) { // L13858
#pragma HLS stream variable = v10548 depth = 9
#pragma HLS stream variable = v10549 depth = 9
#pragma HLS stream variable = v10550 depth = 9
#pragma HLS stream variable = v10551 depth = 9
#pragma HLS array_partition variable = v10552 complete dim = 1
#pragma HLS array_partition variable = v10552 complete dim = 2

  float v411;      // L13861
  v411 = 0.000000; // L13862
l_S_k_0_k423:
  for (int k423 = 0; k423 < 768; k423++) { // L13863
    float v10557 = v10548.read();          // v10548[k423];	// L13864
    float a411;                            // L13865
    a411 = v10557;                         // L13866
    float v10559 = v10549.read();          // v10549[k423];	// L13867
    float b411;                            // L13868
    b411 = v10559;                         // L13869
    float v10561 = a411;                   // L13870
    float v10562 = b411;                   // L13871
    float v10563 = v10561 * v10562;        // L13872
    float v10564 = v411;                   // L13873
    float v10565 = v10564 + v10563;        // L13874
    v411 = v10565;                         // L13875
    float v10566 = a411;                   // L13876
    v10550.write(v10566);                  // v10550[k423] = v10566;	// L13877
    float v10567 = b411;                   // L13878
    v10551.write(v10567);                  // v10551[k423] = v10567;	// L13879
  }
  float v10568 = v411;             // L13881
  v10552[v10553][v10554] = v10568; // L13882
}

void PE_kernel_ffn1_4_3(hls::stream<float> &v10569 /* v10569[768] */,
                        hls::stream<float> &v10570 /* v10570[768] */,
                        hls::stream<float> &v10571 /* v10571[768] */,
                        hls::stream<float> &v10572 /* v10572[768] */,
                        float v10573[8][8], int v10574,
                        int v10575) { // L13885
#pragma HLS stream variable = v10569 depth = 9
#pragma HLS stream variable = v10570 depth = 9
#pragma HLS stream variable = v10571 depth = 9
#pragma HLS stream variable = v10572 depth = 9
#pragma HLS array_partition variable = v10573 complete dim = 1
#pragma HLS array_partition variable = v10573 complete dim = 2

  float v412;      // L13888
  v412 = 0.000000; // L13889
l_S_k_0_k424:
  for (int k424 = 0; k424 < 768; k424++) { // L13890
    float v10578 = v10569.read();          // v10569[k424];	// L13891
    float a412;                            // L13892
    a412 = v10578;                         // L13893
    float v10580 = v10570.read();          // v10570[k424];	// L13894
    float b412;                            // L13895
    b412 = v10580;                         // L13896
    float v10582 = a412;                   // L13897
    float v10583 = b412;                   // L13898
    float v10584 = v10582 * v10583;        // L13899
    float v10585 = v412;                   // L13900
    float v10586 = v10585 + v10584;        // L13901
    v412 = v10586;                         // L13902
    float v10587 = a412;                   // L13903
    v10571.write(v10587);                  // v10571[k424] = v10587;	// L13904
    float v10588 = b412;                   // L13905
    v10572.write(v10588);                  // v10572[k424] = v10588;	// L13906
  }
  float v10589 = v412;             // L13908
  v10573[v10574][v10575] = v10589; // L13909
}

void PE_kernel_ffn1_5_3(hls::stream<float> &v10590 /* v10590[768] */,
                        hls::stream<float> &v10591 /* v10591[768] */,
                        hls::stream<float> &v10592 /* v10592[768] */,
                        hls::stream<float> &v10593 /* v10593[768] */,
                        float v10594[8][8], int v10595,
                        int v10596) { // L13912
#pragma HLS stream variable = v10590 depth = 9
#pragma HLS stream variable = v10591 depth = 9
#pragma HLS stream variable = v10592 depth = 9
#pragma HLS stream variable = v10593 depth = 9
#pragma HLS array_partition variable = v10594 complete dim = 1
#pragma HLS array_partition variable = v10594 complete dim = 2

  float v413;      // L13915
  v413 = 0.000000; // L13916
l_S_k_0_k425:
  for (int k425 = 0; k425 < 768; k425++) { // L13917
    float v10599 = v10590.read();          // v10590[k425];	// L13918
    float a413;                            // L13919
    a413 = v10599;                         // L13920
    float v10601 = v10591.read();          // v10591[k425];	// L13921
    float b413;                            // L13922
    b413 = v10601;                         // L13923
    float v10603 = a413;                   // L13924
    float v10604 = b413;                   // L13925
    float v10605 = v10603 * v10604;        // L13926
    float v10606 = v413;                   // L13927
    float v10607 = v10606 + v10605;        // L13928
    v413 = v10607;                         // L13929
    float v10608 = a413;                   // L13930
    v10592.write(v10608);                  // v10592[k425] = v10608;	// L13931
    float v10609 = b413;                   // L13932
    v10593.write(v10609);                  // v10593[k425] = v10609;	// L13933
  }
  float v10610 = v413;             // L13935
  v10594[v10595][v10596] = v10610; // L13936
}

void PE_kernel_ffn1_6_3(hls::stream<float> &v10611 /* v10611[768] */,
                        hls::stream<float> &v10612 /* v10612[768] */,
                        hls::stream<float> &v10613 /* v10613[768] */,
                        hls::stream<float> &v10614 /* v10614[768] */,
                        float v10615[8][8], int v10616,
                        int v10617) { // L13939
#pragma HLS stream variable = v10611 depth = 9
#pragma HLS stream variable = v10612 depth = 9
#pragma HLS stream variable = v10613 depth = 9
#pragma HLS stream variable = v10614 depth = 9
#pragma HLS array_partition variable = v10615 complete dim = 1
#pragma HLS array_partition variable = v10615 complete dim = 2

  float v414;      // L13942
  v414 = 0.000000; // L13943
l_S_k_0_k426:
  for (int k426 = 0; k426 < 768; k426++) { // L13944
    float v10620 = v10611.read();          // v10611[k426];	// L13945
    float a414;                            // L13946
    a414 = v10620;                         // L13947
    float v10622 = v10612.read();          // v10612[k426];	// L13948
    float b414;                            // L13949
    b414 = v10622;                         // L13950
    float v10624 = a414;                   // L13951
    float v10625 = b414;                   // L13952
    float v10626 = v10624 * v10625;        // L13953
    float v10627 = v414;                   // L13954
    float v10628 = v10627 + v10626;        // L13955
    v414 = v10628;                         // L13956
    float v10629 = a414;                   // L13957
    v10613.write(v10629);                  // v10613[k426] = v10629;	// L13958
    float v10630 = b414;                   // L13959
    v10614.write(v10630);                  // v10614[k426] = v10630;	// L13960
  }
  float v10631 = v414;             // L13962
  v10615[v10616][v10617] = v10631; // L13963
}

void PE_kernel_ffn1_7_3(hls::stream<float> &v10632 /* v10632[768] */,
                        hls::stream<float> &v10633 /* v10633[768] */,
                        hls::stream<float> &v10634 /* v10634[768] */,
                        hls::stream<float> &v10635 /* v10635[768] */,
                        float v10636[8][8], int v10637,
                        int v10638) { // L13966
#pragma HLS stream variable = v10632 depth = 9
#pragma HLS stream variable = v10633 depth = 9
#pragma HLS stream variable = v10634 depth = 9
#pragma HLS stream variable = v10635 depth = 9
#pragma HLS array_partition variable = v10636 complete dim = 1
#pragma HLS array_partition variable = v10636 complete dim = 2

  float v415;      // L13969
  v415 = 0.000000; // L13970
l_S_k_0_k427:
  for (int k427 = 0; k427 < 768; k427++) { // L13971
    float v10641 = v10632.read();          // v10632[k427];	// L13972
    float a415;                            // L13973
    a415 = v10641;                         // L13974
    float v10643 = v10633.read();          // v10633[k427];	// L13975
    float b415;                            // L13976
    b415 = v10643;                         // L13977
    float v10645 = a415;                   // L13978
    float v10646 = b415;                   // L13979
    float v10647 = v10645 * v10646;        // L13980
    float v10648 = v415;                   // L13981
    float v10649 = v10648 + v10647;        // L13982
    v415 = v10649;                         // L13983
    float v10650 = a415;                   // L13984
    v10634.write(v10650);                  // v10634[k427] = v10650;	// L13985
    float v10651 = b415;                   // L13986
    v10635.write(v10651);                  // v10635[k427] = v10651;	// L13987
  }
  float v10652 = v415;             // L13989
  v10636[v10637][v10638] = v10652; // L13990
}

void PE_kernel_ffn1_0_4(hls::stream<float> &v10653 /* v10653[768] */,
                        hls::stream<float> &v10654 /* v10654[768] */,
                        hls::stream<float> &v10655 /* v10655[768] */,
                        hls::stream<float> &v10656 /* v10656[768] */,
                        float v10657[8][8], int v10658,
                        int v10659) { // L13993
#pragma HLS stream variable = v10653 depth = 9
#pragma HLS stream variable = v10654 depth = 9
#pragma HLS stream variable = v10655 depth = 9
#pragma HLS stream variable = v10656 depth = 9
#pragma HLS array_partition variable = v10657 complete dim = 1
#pragma HLS array_partition variable = v10657 complete dim = 2

  float v416;      // L13996
  v416 = 0.000000; // L13997
l_S_k_0_k428:
  for (int k428 = 0; k428 < 768; k428++) { // L13998
    float v10662 = v10653.read();          // v10653[k428];	// L13999
    float a416;                            // L14000
    a416 = v10662;                         // L14001
    float v10664 = v10654.read();          // v10654[k428];	// L14002
    float b416;                            // L14003
    b416 = v10664;                         // L14004
    float v10666 = a416;                   // L14005
    float v10667 = b416;                   // L14006
    float v10668 = v10666 * v10667;        // L14007
    float v10669 = v416;                   // L14008
    float v10670 = v10669 + v10668;        // L14009
    v416 = v10670;                         // L14010
    float v10671 = a416;                   // L14011
    v10655.write(v10671);                  // v10655[k428] = v10671;	// L14012
    float v10672 = b416;                   // L14013
    v10656.write(v10672);                  // v10656[k428] = v10672;	// L14014
  }
  float v10673 = v416;             // L14016
  v10657[v10658][v10659] = v10673; // L14017
}

void PE_kernel_ffn1_1_4(hls::stream<float> &v10674 /* v10674[768] */,
                        hls::stream<float> &v10675 /* v10675[768] */,
                        hls::stream<float> &v10676 /* v10676[768] */,
                        hls::stream<float> &v10677 /* v10677[768] */,
                        float v10678[8][8], int v10679,
                        int v10680) { // L14020
#pragma HLS stream variable = v10674 depth = 9
#pragma HLS stream variable = v10675 depth = 9
#pragma HLS stream variable = v10676 depth = 9
#pragma HLS stream variable = v10677 depth = 9
#pragma HLS array_partition variable = v10678 complete dim = 1
#pragma HLS array_partition variable = v10678 complete dim = 2

  float v417;      // L14023
  v417 = 0.000000; // L14024
l_S_k_0_k429:
  for (int k429 = 0; k429 < 768; k429++) { // L14025
    float v10683 = v10674.read();          // v10674[k429];	// L14026
    float a417;                            // L14027
    a417 = v10683;                         // L14028
    float v10685 = v10675.read();          // v10675[k429];	// L14029
    float b417;                            // L14030
    b417 = v10685;                         // L14031
    float v10687 = a417;                   // L14032
    float v10688 = b417;                   // L14033
    float v10689 = v10687 * v10688;        // L14034
    float v10690 = v417;                   // L14035
    float v10691 = v10690 + v10689;        // L14036
    v417 = v10691;                         // L14037
    float v10692 = a417;                   // L14038
    v10676.write(v10692);                  // v10676[k429] = v10692;	// L14039
    float v10693 = b417;                   // L14040
    v10677.write(v10693);                  // v10677[k429] = v10693;	// L14041
  }
  float v10694 = v417;             // L14043
  v10678[v10679][v10680] = v10694; // L14044
}

void PE_kernel_ffn1_2_4(hls::stream<float> &v10695 /* v10695[768] */,
                        hls::stream<float> &v10696 /* v10696[768] */,
                        hls::stream<float> &v10697 /* v10697[768] */,
                        hls::stream<float> &v10698 /* v10698[768] */,
                        float v10699[8][8], int v10700,
                        int v10701) { // L14047
#pragma HLS stream variable = v10695 depth = 9
#pragma HLS stream variable = v10696 depth = 9
#pragma HLS stream variable = v10697 depth = 9
#pragma HLS stream variable = v10698 depth = 9
#pragma HLS array_partition variable = v10699 complete dim = 1
#pragma HLS array_partition variable = v10699 complete dim = 2

  float v418;      // L14050
  v418 = 0.000000; // L14051
l_S_k_0_k430:
  for (int k430 = 0; k430 < 768; k430++) { // L14052
    float v10704 = v10695.read();          // v10695[k430];	// L14053
    float a418;                            // L14054
    a418 = v10704;                         // L14055
    float v10706 = v10696.read();          // v10696[k430];	// L14056
    float b418;                            // L14057
    b418 = v10706;                         // L14058
    float v10708 = a418;                   // L14059
    float v10709 = b418;                   // L14060
    float v10710 = v10708 * v10709;        // L14061
    float v10711 = v418;                   // L14062
    float v10712 = v10711 + v10710;        // L14063
    v418 = v10712;                         // L14064
    float v10713 = a418;                   // L14065
    v10697.write(v10713);                  // v10697[k430] = v10713;	// L14066
    float v10714 = b418;                   // L14067
    v10698.write(v10714);                  // v10698[k430] = v10714;	// L14068
  }
  float v10715 = v418;             // L14070
  v10699[v10700][v10701] = v10715; // L14071
}

void PE_kernel_ffn1_3_4(hls::stream<float> &v10716 /* v10716[768] */,
                        hls::stream<float> &v10717 /* v10717[768] */,
                        hls::stream<float> &v10718 /* v10718[768] */,
                        hls::stream<float> &v10719 /* v10719[768] */,
                        float v10720[8][8], int v10721,
                        int v10722) { // L14074
#pragma HLS stream variable = v10716 depth = 9
#pragma HLS stream variable = v10717 depth = 9
#pragma HLS stream variable = v10718 depth = 9
#pragma HLS stream variable = v10719 depth = 9
#pragma HLS array_partition variable = v10720 complete dim = 1
#pragma HLS array_partition variable = v10720 complete dim = 2

  float v419;      // L14077
  v419 = 0.000000; // L14078
l_S_k_0_k431:
  for (int k431 = 0; k431 < 768; k431++) { // L14079
    float v10725 = v10716.read();          // v10716[k431];	// L14080
    float a419;                            // L14081
    a419 = v10725;                         // L14082
    float v10727 = v10717.read();          // v10717[k431];	// L14083
    float b419;                            // L14084
    b419 = v10727;                         // L14085
    float v10729 = a419;                   // L14086
    float v10730 = b419;                   // L14087
    float v10731 = v10729 * v10730;        // L14088
    float v10732 = v419;                   // L14089
    float v10733 = v10732 + v10731;        // L14090
    v419 = v10733;                         // L14091
    float v10734 = a419;                   // L14092
    v10718.write(v10734);                  // v10718[k431] = v10734;	// L14093
    float v10735 = b419;                   // L14094
    v10719.write(v10735);                  // v10719[k431] = v10735;	// L14095
  }
  float v10736 = v419;             // L14097
  v10720[v10721][v10722] = v10736; // L14098
}

void PE_kernel_ffn1_4_4(hls::stream<float> &v10737 /* v10737[768] */,
                        hls::stream<float> &v10738 /* v10738[768] */,
                        hls::stream<float> &v10739 /* v10739[768] */,
                        hls::stream<float> &v10740 /* v10740[768] */,
                        float v10741[8][8], int v10742,
                        int v10743) { // L14101
#pragma HLS stream variable = v10737 depth = 9
#pragma HLS stream variable = v10738 depth = 9
#pragma HLS stream variable = v10739 depth = 9
#pragma HLS stream variable = v10740 depth = 9
#pragma HLS array_partition variable = v10741 complete dim = 1
#pragma HLS array_partition variable = v10741 complete dim = 2

  float v420;      // L14104
  v420 = 0.000000; // L14105
l_S_k_0_k432:
  for (int k432 = 0; k432 < 768; k432++) { // L14106
    float v10746 = v10737.read();          // v10737[k432];	// L14107
    float a420;                            // L14108
    a420 = v10746;                         // L14109
    float v10748 = v10738.read();          // v10738[k432];	// L14110
    float b420;                            // L14111
    b420 = v10748;                         // L14112
    float v10750 = a420;                   // L14113
    float v10751 = b420;                   // L14114
    float v10752 = v10750 * v10751;        // L14115
    float v10753 = v420;                   // L14116
    float v10754 = v10753 + v10752;        // L14117
    v420 = v10754;                         // L14118
    float v10755 = a420;                   // L14119
    v10739.write(v10755);                  // v10739[k432] = v10755;	// L14120
    float v10756 = b420;                   // L14121
    v10740.write(v10756);                  // v10740[k432] = v10756;	// L14122
  }
  float v10757 = v420;             // L14124
  v10741[v10742][v10743] = v10757; // L14125
}

void PE_kernel_ffn1_5_4(hls::stream<float> &v10758 /* v10758[768] */,
                        hls::stream<float> &v10759 /* v10759[768] */,
                        hls::stream<float> &v10760 /* v10760[768] */,
                        hls::stream<float> &v10761 /* v10761[768] */,
                        float v10762[8][8], int v10763,
                        int v10764) { // L14128
#pragma HLS stream variable = v10758 depth = 9
#pragma HLS stream variable = v10759 depth = 9
#pragma HLS stream variable = v10760 depth = 9
#pragma HLS stream variable = v10761 depth = 9
#pragma HLS array_partition variable = v10762 complete dim = 1
#pragma HLS array_partition variable = v10762 complete dim = 2

  float v421;      // L14131
  v421 = 0.000000; // L14132
l_S_k_0_k433:
  for (int k433 = 0; k433 < 768; k433++) { // L14133
    float v10767 = v10758.read();          // v10758[k433];	// L14134
    float a421;                            // L14135
    a421 = v10767;                         // L14136
    float v10769 = v10759.read();          // v10759[k433];	// L14137
    float b421;                            // L14138
    b421 = v10769;                         // L14139
    float v10771 = a421;                   // L14140
    float v10772 = b421;                   // L14141
    float v10773 = v10771 * v10772;        // L14142
    float v10774 = v421;                   // L14143
    float v10775 = v10774 + v10773;        // L14144
    v421 = v10775;                         // L14145
    float v10776 = a421;                   // L14146
    v10760.write(v10776);                  // v10760[k433] = v10776;	// L14147
    float v10777 = b421;                   // L14148
    v10761.write(v10777);                  // v10761[k433] = v10777;	// L14149
  }
  float v10778 = v421;             // L14151
  v10762[v10763][v10764] = v10778; // L14152
}

void PE_kernel_ffn1_6_4(hls::stream<float> &v10779 /* v10779[768] */,
                        hls::stream<float> &v10780 /* v10780[768] */,
                        hls::stream<float> &v10781 /* v10781[768] */,
                        hls::stream<float> &v10782 /* v10782[768] */,
                        float v10783[8][8], int v10784,
                        int v10785) { // L14155
#pragma HLS stream variable = v10779 depth = 9
#pragma HLS stream variable = v10780 depth = 9
#pragma HLS stream variable = v10781 depth = 9
#pragma HLS stream variable = v10782 depth = 9
#pragma HLS array_partition variable = v10783 complete dim = 1
#pragma HLS array_partition variable = v10783 complete dim = 2

  float v422;      // L14158
  v422 = 0.000000; // L14159
l_S_k_0_k434:
  for (int k434 = 0; k434 < 768; k434++) { // L14160
    float v10788 = v10779.read();          // v10779[k434];	// L14161
    float a422;                            // L14162
    a422 = v10788;                         // L14163
    float v10790 = v10780.read();          // v10780[k434];	// L14164
    float b422;                            // L14165
    b422 = v10790;                         // L14166
    float v10792 = a422;                   // L14167
    float v10793 = b422;                   // L14168
    float v10794 = v10792 * v10793;        // L14169
    float v10795 = v422;                   // L14170
    float v10796 = v10795 + v10794;        // L14171
    v422 = v10796;                         // L14172
    float v10797 = a422;                   // L14173
    v10781.write(v10797);                  // v10781[k434] = v10797;	// L14174
    float v10798 = b422;                   // L14175
    v10782.write(v10798);                  // v10782[k434] = v10798;	// L14176
  }
  float v10799 = v422;             // L14178
  v10783[v10784][v10785] = v10799; // L14179
}

void PE_kernel_ffn1_7_4(hls::stream<float> &v10800 /* v10800[768] */,
                        hls::stream<float> &v10801 /* v10801[768] */,
                        hls::stream<float> &v10802 /* v10802[768] */,
                        hls::stream<float> &v10803 /* v10803[768] */,
                        float v10804[8][8], int v10805,
                        int v10806) { // L14182
#pragma HLS stream variable = v10800 depth = 9
#pragma HLS stream variable = v10801 depth = 9
#pragma HLS stream variable = v10802 depth = 9
#pragma HLS stream variable = v10803 depth = 9
#pragma HLS array_partition variable = v10804 complete dim = 1
#pragma HLS array_partition variable = v10804 complete dim = 2

  float v423;      // L14185
  v423 = 0.000000; // L14186
l_S_k_0_k435:
  for (int k435 = 0; k435 < 768; k435++) { // L14187
    float v10809 = v10800.read();          // v10800[k435];	// L14188
    float a423;                            // L14189
    a423 = v10809;                         // L14190
    float v10811 = v10801.read();          // v10801[k435];	// L14191
    float b423;                            // L14192
    b423 = v10811;                         // L14193
    float v10813 = a423;                   // L14194
    float v10814 = b423;                   // L14195
    float v10815 = v10813 * v10814;        // L14196
    float v10816 = v423;                   // L14197
    float v10817 = v10816 + v10815;        // L14198
    v423 = v10817;                         // L14199
    float v10818 = a423;                   // L14200
    v10802.write(v10818);                  // v10802[k435] = v10818;	// L14201
    float v10819 = b423;                   // L14202
    v10803.write(v10819);                  // v10803[k435] = v10819;	// L14203
  }
  float v10820 = v423;             // L14205
  v10804[v10805][v10806] = v10820; // L14206
}

void PE_kernel_ffn1_0_5(hls::stream<float> &v10821 /* v10821[768] */,
                        hls::stream<float> &v10822 /* v10822[768] */,
                        hls::stream<float> &v10823 /* v10823[768] */,
                        hls::stream<float> &v10824 /* v10824[768] */,
                        float v10825[8][8], int v10826,
                        int v10827) { // L14209
#pragma HLS stream variable = v10821 depth = 9
#pragma HLS stream variable = v10822 depth = 9
#pragma HLS stream variable = v10823 depth = 9
#pragma HLS stream variable = v10824 depth = 9
#pragma HLS array_partition variable = v10825 complete dim = 1
#pragma HLS array_partition variable = v10825 complete dim = 2

  float v424;      // L14212
  v424 = 0.000000; // L14213
l_S_k_0_k436:
  for (int k436 = 0; k436 < 768; k436++) { // L14214
    float v10830 = v10821.read();          // v10821[k436];	// L14215
    float a424;                            // L14216
    a424 = v10830;                         // L14217
    float v10832 = v10822.read();          // v10822[k436];	// L14218
    float b424;                            // L14219
    b424 = v10832;                         // L14220
    float v10834 = a424;                   // L14221
    float v10835 = b424;                   // L14222
    float v10836 = v10834 * v10835;        // L14223
    float v10837 = v424;                   // L14224
    float v10838 = v10837 + v10836;        // L14225
    v424 = v10838;                         // L14226
    float v10839 = a424;                   // L14227
    v10823.write(v10839);                  // v10823[k436] = v10839;	// L14228
    float v10840 = b424;                   // L14229
    v10824.write(v10840);                  // v10824[k436] = v10840;	// L14230
  }
  float v10841 = v424;             // L14232
  v10825[v10826][v10827] = v10841; // L14233
}

void PE_kernel_ffn1_1_5(hls::stream<float> &v10842 /* v10842[768] */,
                        hls::stream<float> &v10843 /* v10843[768] */,
                        hls::stream<float> &v10844 /* v10844[768] */,
                        hls::stream<float> &v10845 /* v10845[768] */,
                        float v10846[8][8], int v10847,
                        int v10848) { // L14236
#pragma HLS stream variable = v10842 depth = 9
#pragma HLS stream variable = v10843 depth = 9
#pragma HLS stream variable = v10844 depth = 9
#pragma HLS stream variable = v10845 depth = 9
#pragma HLS array_partition variable = v10846 complete dim = 1
#pragma HLS array_partition variable = v10846 complete dim = 2

  float v425;      // L14239
  v425 = 0.000000; // L14240
l_S_k_0_k437:
  for (int k437 = 0; k437 < 768; k437++) { // L14241
    float v10851 = v10842.read();          // v10842[k437];	// L14242
    float a425;                            // L14243
    a425 = v10851;                         // L14244
    float v10853 = v10843.read();          // v10843[k437];	// L14245
    float b425;                            // L14246
    b425 = v10853;                         // L14247
    float v10855 = a425;                   // L14248
    float v10856 = b425;                   // L14249
    float v10857 = v10855 * v10856;        // L14250
    float v10858 = v425;                   // L14251
    float v10859 = v10858 + v10857;        // L14252
    v425 = v10859;                         // L14253
    float v10860 = a425;                   // L14254
    v10844.write(v10860);                  // v10844[k437] = v10860;	// L14255
    float v10861 = b425;                   // L14256
    v10845.write(v10861);                  // v10845[k437] = v10861;	// L14257
  }
  float v10862 = v425;             // L14259
  v10846[v10847][v10848] = v10862; // L14260
}

void PE_kernel_ffn1_2_5(hls::stream<float> &v10863 /* v10863[768] */,
                        hls::stream<float> &v10864 /* v10864[768] */,
                        hls::stream<float> &v10865 /* v10865[768] */,
                        hls::stream<float> &v10866 /* v10866[768] */,
                        float v10867[8][8], int v10868,
                        int v10869) { // L14263
#pragma HLS stream variable = v10863 depth = 9
#pragma HLS stream variable = v10864 depth = 9
#pragma HLS stream variable = v10865 depth = 9
#pragma HLS stream variable = v10866 depth = 9
#pragma HLS array_partition variable = v10867 complete dim = 1
#pragma HLS array_partition variable = v10867 complete dim = 2

  float v426;      // L14266
  v426 = 0.000000; // L14267
l_S_k_0_k438:
  for (int k438 = 0; k438 < 768; k438++) { // L14268
    float v10872 = v10863.read();          // v10863[k438];	// L14269
    float a426;                            // L14270
    a426 = v10872;                         // L14271
    float v10874 = v10864.read();          // v10864[k438];	// L14272
    float b426;                            // L14273
    b426 = v10874;                         // L14274
    float v10876 = a426;                   // L14275
    float v10877 = b426;                   // L14276
    float v10878 = v10876 * v10877;        // L14277
    float v10879 = v426;                   // L14278
    float v10880 = v10879 + v10878;        // L14279
    v426 = v10880;                         // L14280
    float v10881 = a426;                   // L14281
    v10865.write(v10881);                  // v10865[k438] = v10881;	// L14282
    float v10882 = b426;                   // L14283
    v10866.write(v10882);                  // v10866[k438] = v10882;	// L14284
  }
  float v10883 = v426;             // L14286
  v10867[v10868][v10869] = v10883; // L14287
}

void PE_kernel_ffn1_3_5(hls::stream<float> &v10884 /* v10884[768] */,
                        hls::stream<float> &v10885 /* v10885[768] */,
                        hls::stream<float> &v10886 /* v10886[768] */,
                        hls::stream<float> &v10887 /* v10887[768] */,
                        float v10888[8][8], int v10889,
                        int v10890) { // L14290
#pragma HLS stream variable = v10884 depth = 9
#pragma HLS stream variable = v10885 depth = 9
#pragma HLS stream variable = v10886 depth = 9
#pragma HLS stream variable = v10887 depth = 9
#pragma HLS array_partition variable = v10888 complete dim = 1
#pragma HLS array_partition variable = v10888 complete dim = 2

  float v427;      // L14293
  v427 = 0.000000; // L14294
l_S_k_0_k439:
  for (int k439 = 0; k439 < 768; k439++) { // L14295
    float v10893 = v10884.read();          // v10884[k439];	// L14296
    float a427;                            // L14297
    a427 = v10893;                         // L14298
    float v10895 = v10885.read();          // v10885[k439];	// L14299
    float b427;                            // L14300
    b427 = v10895;                         // L14301
    float v10897 = a427;                   // L14302
    float v10898 = b427;                   // L14303
    float v10899 = v10897 * v10898;        // L14304
    float v10900 = v427;                   // L14305
    float v10901 = v10900 + v10899;        // L14306
    v427 = v10901;                         // L14307
    float v10902 = a427;                   // L14308
    v10886.write(v10902);                  // v10886[k439] = v10902;	// L14309
    float v10903 = b427;                   // L14310
    v10887.write(v10903);                  // v10887[k439] = v10903;	// L14311
  }
  float v10904 = v427;             // L14313
  v10888[v10889][v10890] = v10904; // L14314
}

void PE_kernel_ffn1_4_5(hls::stream<float> &v10905 /* v10905[768] */,
                        hls::stream<float> &v10906 /* v10906[768] */,
                        hls::stream<float> &v10907 /* v10907[768] */,
                        hls::stream<float> &v10908 /* v10908[768] */,
                        float v10909[8][8], int v10910,
                        int v10911) { // L14317
#pragma HLS stream variable = v10905 depth = 9
#pragma HLS stream variable = v10906 depth = 9
#pragma HLS stream variable = v10907 depth = 9
#pragma HLS stream variable = v10908 depth = 9
#pragma HLS array_partition variable = v10909 complete dim = 1
#pragma HLS array_partition variable = v10909 complete dim = 2

  float v428;      // L14320
  v428 = 0.000000; // L14321
l_S_k_0_k440:
  for (int k440 = 0; k440 < 768; k440++) { // L14322
    float v10914 = v10905.read();          // v10905[k440];	// L14323
    float a428;                            // L14324
    a428 = v10914;                         // L14325
    float v10916 = v10906.read();          // v10906[k440];	// L14326
    float b428;                            // L14327
    b428 = v10916;                         // L14328
    float v10918 = a428;                   // L14329
    float v10919 = b428;                   // L14330
    float v10920 = v10918 * v10919;        // L14331
    float v10921 = v428;                   // L14332
    float v10922 = v10921 + v10920;        // L14333
    v428 = v10922;                         // L14334
    float v10923 = a428;                   // L14335
    v10907.write(v10923);                  // v10907[k440] = v10923;	// L14336
    float v10924 = b428;                   // L14337
    v10908.write(v10924);                  // v10908[k440] = v10924;	// L14338
  }
  float v10925 = v428;             // L14340
  v10909[v10910][v10911] = v10925; // L14341
}

void PE_kernel_ffn1_5_5(hls::stream<float> &v10926 /* v10926[768] */,
                        hls::stream<float> &v10927 /* v10927[768] */,
                        hls::stream<float> &v10928 /* v10928[768] */,
                        hls::stream<float> &v10929 /* v10929[768] */,
                        float v10930[8][8], int v10931,
                        int v10932) { // L14344
#pragma HLS stream variable = v10926 depth = 9
#pragma HLS stream variable = v10927 depth = 9
#pragma HLS stream variable = v10928 depth = 9
#pragma HLS stream variable = v10929 depth = 9
#pragma HLS array_partition variable = v10930 complete dim = 1
#pragma HLS array_partition variable = v10930 complete dim = 2

  float v429;      // L14347
  v429 = 0.000000; // L14348
l_S_k_0_k441:
  for (int k441 = 0; k441 < 768; k441++) { // L14349
    float v10935 = v10926.read();          // v10926[k441];	// L14350
    float a429;                            // L14351
    a429 = v10935;                         // L14352
    float v10937 = v10927.read();          // v10927[k441];	// L14353
    float b429;                            // L14354
    b429 = v10937;                         // L14355
    float v10939 = a429;                   // L14356
    float v10940 = b429;                   // L14357
    float v10941 = v10939 * v10940;        // L14358
    float v10942 = v429;                   // L14359
    float v10943 = v10942 + v10941;        // L14360
    v429 = v10943;                         // L14361
    float v10944 = a429;                   // L14362
    v10928.write(v10944);                  // v10928[k441] = v10944;	// L14363
    float v10945 = b429;                   // L14364
    v10929.write(v10945);                  // v10929[k441] = v10945;	// L14365
  }
  float v10946 = v429;             // L14367
  v10930[v10931][v10932] = v10946; // L14368
}

void PE_kernel_ffn1_6_5(hls::stream<float> &v10947 /* v10947[768] */,
                        hls::stream<float> &v10948 /* v10948[768] */,
                        hls::stream<float> &v10949 /* v10949[768] */,
                        hls::stream<float> &v10950 /* v10950[768] */,
                        float v10951[8][8], int v10952,
                        int v10953) { // L14371
#pragma HLS stream variable = v10947 depth = 9
#pragma HLS stream variable = v10948 depth = 9
#pragma HLS stream variable = v10949 depth = 9
#pragma HLS stream variable = v10950 depth = 9
#pragma HLS array_partition variable = v10951 complete dim = 1
#pragma HLS array_partition variable = v10951 complete dim = 2

  float v430;      // L14374
  v430 = 0.000000; // L14375
l_S_k_0_k442:
  for (int k442 = 0; k442 < 768; k442++) { // L14376
    float v10956 = v10947.read();          // v10947[k442];	// L14377
    float a430;                            // L14378
    a430 = v10956;                         // L14379
    float v10958 = v10948.read();          // v10948[k442];	// L14380
    float b430;                            // L14381
    b430 = v10958;                         // L14382
    float v10960 = a430;                   // L14383
    float v10961 = b430;                   // L14384
    float v10962 = v10960 * v10961;        // L14385
    float v10963 = v430;                   // L14386
    float v10964 = v10963 + v10962;        // L14387
    v430 = v10964;                         // L14388
    float v10965 = a430;                   // L14389
    v10949.write(v10965);                  // v10949[k442] = v10965;	// L14390
    float v10966 = b430;                   // L14391
    v10950.write(v10966);                  // v10950[k442] = v10966;	// L14392
  }
  float v10967 = v430;             // L14394
  v10951[v10952][v10953] = v10967; // L14395
}

void PE_kernel_ffn1_7_5(hls::stream<float> &v10968 /* v10968[768] */,
                        hls::stream<float> &v10969 /* v10969[768] */,
                        hls::stream<float> &v10970 /* v10970[768] */,
                        hls::stream<float> &v10971 /* v10971[768] */,
                        float v10972[8][8], int v10973,
                        int v10974) { // L14398
#pragma HLS stream variable = v10968 depth = 9
#pragma HLS stream variable = v10969 depth = 9
#pragma HLS stream variable = v10970 depth = 9
#pragma HLS stream variable = v10971 depth = 9
#pragma HLS array_partition variable = v10972 complete dim = 1
#pragma HLS array_partition variable = v10972 complete dim = 2

  float v431;      // L14401
  v431 = 0.000000; // L14402
l_S_k_0_k443:
  for (int k443 = 0; k443 < 768; k443++) { // L14403
    float v10977 = v10968.read();          // v10968[k443];	// L14404
    float a431;                            // L14405
    a431 = v10977;                         // L14406
    float v10979 = v10969.read();          // v10969[k443];	// L14407
    float b431;                            // L14408
    b431 = v10979;                         // L14409
    float v10981 = a431;                   // L14410
    float v10982 = b431;                   // L14411
    float v10983 = v10981 * v10982;        // L14412
    float v10984 = v431;                   // L14413
    float v10985 = v10984 + v10983;        // L14414
    v431 = v10985;                         // L14415
    float v10986 = a431;                   // L14416
    v10970.write(v10986);                  // v10970[k443] = v10986;	// L14417
    float v10987 = b431;                   // L14418
    v10971.write(v10987);                  // v10971[k443] = v10987;	// L14419
  }
  float v10988 = v431;             // L14421
  v10972[v10973][v10974] = v10988; // L14422
}

void PE_kernel_ffn1_0_6(hls::stream<float> &v10989 /* v10989[768] */,
                        hls::stream<float> &v10990 /* v10990[768] */,
                        hls::stream<float> &v10991 /* v10991[768] */,
                        hls::stream<float> &v10992 /* v10992[768] */,
                        float v10993[8][8], int v10994,
                        int v10995) { // L14425
#pragma HLS stream variable = v10989 depth = 9
#pragma HLS stream variable = v10990 depth = 9
#pragma HLS stream variable = v10991 depth = 9
#pragma HLS stream variable = v10992 depth = 9
#pragma HLS array_partition variable = v10993 complete dim = 1
#pragma HLS array_partition variable = v10993 complete dim = 2

  float v432;      // L14428
  v432 = 0.000000; // L14429
l_S_k_0_k444:
  for (int k444 = 0; k444 < 768; k444++) { // L14430
    float v10998 = v10989.read();          // v10989[k444];	// L14431
    float a432;                            // L14432
    a432 = v10998;                         // L14433
    float v11000 = v10990.read();          // v10990[k444];	// L14434
    float b432;                            // L14435
    b432 = v11000;                         // L14436
    float v11002 = a432;                   // L14437
    float v11003 = b432;                   // L14438
    float v11004 = v11002 * v11003;        // L14439
    float v11005 = v432;                   // L14440
    float v11006 = v11005 + v11004;        // L14441
    v432 = v11006;                         // L14442
    float v11007 = a432;                   // L14443
    v10991.write(v11007);                  // v10991[k444] = v11007;	// L14444
    float v11008 = b432;                   // L14445
    v10992.write(v11008);                  // v10992[k444] = v11008;	// L14446
  }
  float v11009 = v432;             // L14448
  v10993[v10994][v10995] = v11009; // L14449
}

void PE_kernel_ffn1_1_6(hls::stream<float> &v11010 /* v11010[768] */,
                        hls::stream<float> &v11011 /* v11011[768] */,
                        hls::stream<float> &v11012 /* v11012[768] */,
                        hls::stream<float> &v11013 /* v11013[768] */,
                        float v11014[8][8], int v11015,
                        int v11016) { // L14452
#pragma HLS stream variable = v11010 depth = 9
#pragma HLS stream variable = v11011 depth = 9
#pragma HLS stream variable = v11012 depth = 9
#pragma HLS stream variable = v11013 depth = 9
#pragma HLS array_partition variable = v11014 complete dim = 1
#pragma HLS array_partition variable = v11014 complete dim = 2

  float v433;      // L14455
  v433 = 0.000000; // L14456
l_S_k_0_k445:
  for (int k445 = 0; k445 < 768; k445++) { // L14457
    float v11019 = v11010.read();          // v11010[k445];	// L14458
    float a433;                            // L14459
    a433 = v11019;                         // L14460
    float v11021 = v11011.read();          // v11011[k445];	// L14461
    float b433;                            // L14462
    b433 = v11021;                         // L14463
    float v11023 = a433;                   // L14464
    float v11024 = b433;                   // L14465
    float v11025 = v11023 * v11024;        // L14466
    float v11026 = v433;                   // L14467
    float v11027 = v11026 + v11025;        // L14468
    v433 = v11027;                         // L14469
    float v11028 = a433;                   // L14470
    v11012.write(v11028);                  // v11012[k445] = v11028;	// L14471
    float v11029 = b433;                   // L14472
    v11013.write(v11029);                  // v11013[k445] = v11029;	// L14473
  }
  float v11030 = v433;             // L14475
  v11014[v11015][v11016] = v11030; // L14476
}

void PE_kernel_ffn1_2_6(hls::stream<float> &v11031 /* v11031[768] */,
                        hls::stream<float> &v11032 /* v11032[768] */,
                        hls::stream<float> &v11033 /* v11033[768] */,
                        hls::stream<float> &v11034 /* v11034[768] */,
                        float v11035[8][8], int v11036,
                        int v11037) { // L14479
#pragma HLS stream variable = v11031 depth = 9
#pragma HLS stream variable = v11032 depth = 9
#pragma HLS stream variable = v11033 depth = 9
#pragma HLS stream variable = v11034 depth = 9
#pragma HLS array_partition variable = v11035 complete dim = 1
#pragma HLS array_partition variable = v11035 complete dim = 2

  float v434;      // L14482
  v434 = 0.000000; // L14483
l_S_k_0_k446:
  for (int k446 = 0; k446 < 768; k446++) { // L14484
    float v11040 = v11031.read();          // v11031[k446];	// L14485
    float a434;                            // L14486
    a434 = v11040;                         // L14487
    float v11042 = v11032.read();          // v11032[k446];	// L14488
    float b434;                            // L14489
    b434 = v11042;                         // L14490
    float v11044 = a434;                   // L14491
    float v11045 = b434;                   // L14492
    float v11046 = v11044 * v11045;        // L14493
    float v11047 = v434;                   // L14494
    float v11048 = v11047 + v11046;        // L14495
    v434 = v11048;                         // L14496
    float v11049 = a434;                   // L14497
    v11033.write(v11049);                  // v11033[k446] = v11049;	// L14498
    float v11050 = b434;                   // L14499
    v11034.write(v11050);                  // v11034[k446] = v11050;	// L14500
  }
  float v11051 = v434;             // L14502
  v11035[v11036][v11037] = v11051; // L14503
}

void PE_kernel_ffn1_3_6(hls::stream<float> &v11052 /* v11052[768] */,
                        hls::stream<float> &v11053 /* v11053[768] */,
                        hls::stream<float> &v11054 /* v11054[768] */,
                        hls::stream<float> &v11055 /* v11055[768] */,
                        float v11056[8][8], int v11057,
                        int v11058) { // L14506
#pragma HLS stream variable = v11052 depth = 9
#pragma HLS stream variable = v11053 depth = 9
#pragma HLS stream variable = v11054 depth = 9
#pragma HLS stream variable = v11055 depth = 9
#pragma HLS array_partition variable = v11056 complete dim = 1
#pragma HLS array_partition variable = v11056 complete dim = 2

  float v435;      // L14509
  v435 = 0.000000; // L14510
l_S_k_0_k447:
  for (int k447 = 0; k447 < 768; k447++) { // L14511
    float v11061 = v11052.read();          // v11052[k447];	// L14512
    float a435;                            // L14513
    a435 = v11061;                         // L14514
    float v11063 = v11053.read();          // v11053[k447];	// L14515
    float b435;                            // L14516
    b435 = v11063;                         // L14517
    float v11065 = a435;                   // L14518
    float v11066 = b435;                   // L14519
    float v11067 = v11065 * v11066;        // L14520
    float v11068 = v435;                   // L14521
    float v11069 = v11068 + v11067;        // L14522
    v435 = v11069;                         // L14523
    float v11070 = a435;                   // L14524
    v11054.write(v11070);                  // v11054[k447] = v11070;	// L14525
    float v11071 = b435;                   // L14526
    v11055.write(v11071);                  // v11055[k447] = v11071;	// L14527
  }
  float v11072 = v435;             // L14529
  v11056[v11057][v11058] = v11072; // L14530
}

void PE_kernel_ffn1_4_6(hls::stream<float> &v11073 /* v11073[768] */,
                        hls::stream<float> &v11074 /* v11074[768] */,
                        hls::stream<float> &v11075 /* v11075[768] */,
                        hls::stream<float> &v11076 /* v11076[768] */,
                        float v11077[8][8], int v11078,
                        int v11079) { // L14533
#pragma HLS stream variable = v11073 depth = 9
#pragma HLS stream variable = v11074 depth = 9
#pragma HLS stream variable = v11075 depth = 9
#pragma HLS stream variable = v11076 depth = 9
#pragma HLS array_partition variable = v11077 complete dim = 1
#pragma HLS array_partition variable = v11077 complete dim = 2

  float v436;      // L14536
  v436 = 0.000000; // L14537
l_S_k_0_k448:
  for (int k448 = 0; k448 < 768; k448++) { // L14538
    float v11082 = v11073.read();          // v11073[k448];	// L14539
    float a436;                            // L14540
    a436 = v11082;                         // L14541
    float v11084 = v11074.read();          // v11074[k448];	// L14542
    float b436;                            // L14543
    b436 = v11084;                         // L14544
    float v11086 = a436;                   // L14545
    float v11087 = b436;                   // L14546
    float v11088 = v11086 * v11087;        // L14547
    float v11089 = v436;                   // L14548
    float v11090 = v11089 + v11088;        // L14549
    v436 = v11090;                         // L14550
    float v11091 = a436;                   // L14551
    v11075.write(v11091);                  // v11075[k448] = v11091;	// L14552
    float v11092 = b436;                   // L14553
    v11076.write(v11092);                  // v11076[k448] = v11092;	// L14554
  }
  float v11093 = v436;             // L14556
  v11077[v11078][v11079] = v11093; // L14557
}

void PE_kernel_ffn1_5_6(hls::stream<float> &v11094 /* v11094[768] */,
                        hls::stream<float> &v11095 /* v11095[768] */,
                        hls::stream<float> &v11096 /* v11096[768] */,
                        hls::stream<float> &v11097 /* v11097[768] */,
                        float v11098[8][8], int v11099,
                        int v11100) { // L14560
#pragma HLS stream variable = v11094 depth = 9
#pragma HLS stream variable = v11095 depth = 9
#pragma HLS stream variable = v11096 depth = 9
#pragma HLS stream variable = v11097 depth = 9
#pragma HLS array_partition variable = v11098 complete dim = 1
#pragma HLS array_partition variable = v11098 complete dim = 2

  float v437;      // L14563
  v437 = 0.000000; // L14564
l_S_k_0_k449:
  for (int k449 = 0; k449 < 768; k449++) { // L14565
    float v11103 = v11094.read();          // v11094[k449];	// L14566
    float a437;                            // L14567
    a437 = v11103;                         // L14568
    float v11105 = v11095.read();          // v11095[k449];	// L14569
    float b437;                            // L14570
    b437 = v11105;                         // L14571
    float v11107 = a437;                   // L14572
    float v11108 = b437;                   // L14573
    float v11109 = v11107 * v11108;        // L14574
    float v11110 = v437;                   // L14575
    float v11111 = v11110 + v11109;        // L14576
    v437 = v11111;                         // L14577
    float v11112 = a437;                   // L14578
    v11096.write(v11112);                  // v11096[k449] = v11112;	// L14579
    float v11113 = b437;                   // L14580
    v11097.write(v11113);                  // v11097[k449] = v11113;	// L14581
  }
  float v11114 = v437;             // L14583
  v11098[v11099][v11100] = v11114; // L14584
}

void PE_kernel_ffn1_6_6(hls::stream<float> &v11115 /* v11115[768] */,
                        hls::stream<float> &v11116 /* v11116[768] */,
                        hls::stream<float> &v11117 /* v11117[768] */,
                        hls::stream<float> &v11118 /* v11118[768] */,
                        float v11119[8][8], int v11120,
                        int v11121) { // L14587
#pragma HLS stream variable = v11115 depth = 9
#pragma HLS stream variable = v11116 depth = 9
#pragma HLS stream variable = v11117 depth = 9
#pragma HLS stream variable = v11118 depth = 9
#pragma HLS array_partition variable = v11119 complete dim = 1
#pragma HLS array_partition variable = v11119 complete dim = 2

  float v438;      // L14590
  v438 = 0.000000; // L14591
l_S_k_0_k450:
  for (int k450 = 0; k450 < 768; k450++) { // L14592
    float v11124 = v11115.read();          // v11115[k450];	// L14593
    float a438;                            // L14594
    a438 = v11124;                         // L14595
    float v11126 = v11116.read();          // v11116[k450];	// L14596
    float b438;                            // L14597
    b438 = v11126;                         // L14598
    float v11128 = a438;                   // L14599
    float v11129 = b438;                   // L14600
    float v11130 = v11128 * v11129;        // L14601
    float v11131 = v438;                   // L14602
    float v11132 = v11131 + v11130;        // L14603
    v438 = v11132;                         // L14604
    float v11133 = a438;                   // L14605
    v11117.write(v11133);                  // v11117[k450] = v11133;	// L14606
    float v11134 = b438;                   // L14607
    v11118.write(v11134);                  // v11118[k450] = v11134;	// L14608
  }
  float v11135 = v438;             // L14610
  v11119[v11120][v11121] = v11135; // L14611
}

void PE_kernel_ffn1_7_6(hls::stream<float> &v11136 /* v11136[768] */,
                        hls::stream<float> &v11137 /* v11137[768] */,
                        hls::stream<float> &v11138 /* v11138[768] */,
                        hls::stream<float> &v11139 /* v11139[768] */,
                        float v11140[8][8], int v11141,
                        int v11142) { // L14614
#pragma HLS stream variable = v11136 depth = 9
#pragma HLS stream variable = v11137 depth = 9
#pragma HLS stream variable = v11138 depth = 9
#pragma HLS stream variable = v11139 depth = 9
#pragma HLS array_partition variable = v11140 complete dim = 1
#pragma HLS array_partition variable = v11140 complete dim = 2

  float v439;      // L14617
  v439 = 0.000000; // L14618
l_S_k_0_k451:
  for (int k451 = 0; k451 < 768; k451++) { // L14619
    float v11145 = v11136.read();          // v11136[k451];	// L14620
    float a439;                            // L14621
    a439 = v11145;                         // L14622
    float v11147 = v11137.read();          // v11137[k451];	// L14623
    float b439;                            // L14624
    b439 = v11147;                         // L14625
    float v11149 = a439;                   // L14626
    float v11150 = b439;                   // L14627
    float v11151 = v11149 * v11150;        // L14628
    float v11152 = v439;                   // L14629
    float v11153 = v11152 + v11151;        // L14630
    v439 = v11153;                         // L14631
    float v11154 = a439;                   // L14632
    v11138.write(v11154);                  // v11138[k451] = v11154;	// L14633
    float v11155 = b439;                   // L14634
    v11139.write(v11155);                  // v11139[k451] = v11155;	// L14635
  }
  float v11156 = v439;             // L14637
  v11140[v11141][v11142] = v11156; // L14638
}

void PE_kernel_ffn1_0_7(hls::stream<float> &v11157 /* v11157[768] */,
                        hls::stream<float> &v11158 /* v11158[768] */,
                        hls::stream<float> &v11159 /* v11159[768] */,
                        hls::stream<float> &v11160 /* v11160[768] */,
                        float v11161[8][8], int v11162,
                        int v11163) { // L14641
#pragma HLS stream variable = v11157 depth = 9
#pragma HLS stream variable = v11158 depth = 9
#pragma HLS stream variable = v11159 depth = 9
#pragma HLS stream variable = v11160 depth = 9
#pragma HLS array_partition variable = v11161 complete dim = 1
#pragma HLS array_partition variable = v11161 complete dim = 2

  float v440;      // L14644
  v440 = 0.000000; // L14645
l_S_k_0_k452:
  for (int k452 = 0; k452 < 768; k452++) { // L14646
    float v11166 = v11157.read();          // v11157[k452];	// L14647
    float a440;                            // L14648
    a440 = v11166;                         // L14649
    float v11168 = v11158.read();          // v11158[k452];	// L14650
    float b440;                            // L14651
    b440 = v11168;                         // L14652
    float v11170 = a440;                   // L14653
    float v11171 = b440;                   // L14654
    float v11172 = v11170 * v11171;        // L14655
    float v11173 = v440;                   // L14656
    float v11174 = v11173 + v11172;        // L14657
    v440 = v11174;                         // L14658
    float v11175 = a440;                   // L14659
    v11159.write(v11175);                  // v11159[k452] = v11175;	// L14660
    float v11176 = b440;                   // L14661
    v11160.write(v11176);                  // v11160[k452] = v11176;	// L14662
  }
  float v11177 = v440;             // L14664
  v11161[v11162][v11163] = v11177; // L14665
}

void PE_kernel_ffn1_1_7(hls::stream<float> &v11178 /* v11178[768] */,
                        hls::stream<float> &v11179 /* v11179[768] */,
                        hls::stream<float> &v11180 /* v11180[768] */,
                        hls::stream<float> &v11181 /* v11181[768] */,
                        float v11182[8][8], int v11183,
                        int v11184) { // L14668
#pragma HLS stream variable = v11178 depth = 9
#pragma HLS stream variable = v11179 depth = 9
#pragma HLS stream variable = v11180 depth = 9
#pragma HLS stream variable = v11181 depth = 9
#pragma HLS array_partition variable = v11182 complete dim = 1
#pragma HLS array_partition variable = v11182 complete dim = 2

  float v441;      // L14671
  v441 = 0.000000; // L14672
l_S_k_0_k453:
  for (int k453 = 0; k453 < 768; k453++) { // L14673
    float v11187 = v11178.read();          // v11178[k453];	// L14674
    float a441;                            // L14675
    a441 = v11187;                         // L14676
    float v11189 = v11179.read();          // v11179[k453];	// L14677
    float b441;                            // L14678
    b441 = v11189;                         // L14679
    float v11191 = a441;                   // L14680
    float v11192 = b441;                   // L14681
    float v11193 = v11191 * v11192;        // L14682
    float v11194 = v441;                   // L14683
    float v11195 = v11194 + v11193;        // L14684
    v441 = v11195;                         // L14685
    float v11196 = a441;                   // L14686
    v11180.write(v11196);                  // v11180[k453] = v11196;	// L14687
    float v11197 = b441;                   // L14688
    v11181.write(v11197);                  // v11181[k453] = v11197;	// L14689
  }
  float v11198 = v441;             // L14691
  v11182[v11183][v11184] = v11198; // L14692
}

void PE_kernel_ffn1_2_7(hls::stream<float> &v11199 /* v11199[768] */,
                        hls::stream<float> &v11200 /* v11200[768] */,
                        hls::stream<float> &v11201 /* v11201[768] */,
                        hls::stream<float> &v11202 /* v11202[768] */,
                        float v11203[8][8], int v11204,
                        int v11205) { // L14695
#pragma HLS stream variable = v11199 depth = 9
#pragma HLS stream variable = v11200 depth = 9
#pragma HLS stream variable = v11201 depth = 9
#pragma HLS stream variable = v11202 depth = 9
#pragma HLS array_partition variable = v11203 complete dim = 1
#pragma HLS array_partition variable = v11203 complete dim = 2

  float v442;      // L14698
  v442 = 0.000000; // L14699
l_S_k_0_k454:
  for (int k454 = 0; k454 < 768; k454++) { // L14700
    float v11208 = v11199.read();          // v11199[k454];	// L14701
    float a442;                            // L14702
    a442 = v11208;                         // L14703
    float v11210 = v11200.read();          // v11200[k454];	// L14704
    float b442;                            // L14705
    b442 = v11210;                         // L14706
    float v11212 = a442;                   // L14707
    float v11213 = b442;                   // L14708
    float v11214 = v11212 * v11213;        // L14709
    float v11215 = v442;                   // L14710
    float v11216 = v11215 + v11214;        // L14711
    v442 = v11216;                         // L14712
    float v11217 = a442;                   // L14713
    v11201.write(v11217);                  // v11201[k454] = v11217;	// L14714
    float v11218 = b442;                   // L14715
    v11202.write(v11218);                  // v11202[k454] = v11218;	// L14716
  }
  float v11219 = v442;             // L14718
  v11203[v11204][v11205] = v11219; // L14719
}

void PE_kernel_ffn1_3_7(hls::stream<float> &v11220 /* v11220[768] */,
                        hls::stream<float> &v11221 /* v11221[768] */,
                        hls::stream<float> &v11222 /* v11222[768] */,
                        hls::stream<float> &v11223 /* v11223[768] */,
                        float v11224[8][8], int v11225,
                        int v11226) { // L14722
#pragma HLS stream variable = v11220 depth = 9
#pragma HLS stream variable = v11221 depth = 9
#pragma HLS stream variable = v11222 depth = 9
#pragma HLS stream variable = v11223 depth = 9
#pragma HLS array_partition variable = v11224 complete dim = 1
#pragma HLS array_partition variable = v11224 complete dim = 2

  float v443;      // L14725
  v443 = 0.000000; // L14726
l_S_k_0_k455:
  for (int k455 = 0; k455 < 768; k455++) { // L14727
    float v11229 = v11220.read();          // v11220[k455];	// L14728
    float a443;                            // L14729
    a443 = v11229;                         // L14730
    float v11231 = v11221.read();          // v11221[k455];	// L14731
    float b443;                            // L14732
    b443 = v11231;                         // L14733
    float v11233 = a443;                   // L14734
    float v11234 = b443;                   // L14735
    float v11235 = v11233 * v11234;        // L14736
    float v11236 = v443;                   // L14737
    float v11237 = v11236 + v11235;        // L14738
    v443 = v11237;                         // L14739
    float v11238 = a443;                   // L14740
    v11222.write(v11238);                  // v11222[k455] = v11238;	// L14741
    float v11239 = b443;                   // L14742
    v11223.write(v11239);                  // v11223[k455] = v11239;	// L14743
  }
  float v11240 = v443;             // L14745
  v11224[v11225][v11226] = v11240; // L14746
}

void PE_kernel_ffn1_4_7(hls::stream<float> &v11241 /* v11241[768] */,
                        hls::stream<float> &v11242 /* v11242[768] */,
                        hls::stream<float> &v11243 /* v11243[768] */,
                        hls::stream<float> &v11244 /* v11244[768] */,
                        float v11245[8][8], int v11246,
                        int v11247) { // L14749
#pragma HLS stream variable = v11241 depth = 9
#pragma HLS stream variable = v11242 depth = 9
#pragma HLS stream variable = v11243 depth = 9
#pragma HLS stream variable = v11244 depth = 9
#pragma HLS array_partition variable = v11245 complete dim = 1
#pragma HLS array_partition variable = v11245 complete dim = 2

  float v444;      // L14752
  v444 = 0.000000; // L14753
l_S_k_0_k456:
  for (int k456 = 0; k456 < 768; k456++) { // L14754
    float v11250 = v11241.read();          // v11241[k456];	// L14755
    float a444;                            // L14756
    a444 = v11250;                         // L14757
    float v11252 = v11242.read();          // v11242[k456];	// L14758
    float b444;                            // L14759
    b444 = v11252;                         // L14760
    float v11254 = a444;                   // L14761
    float v11255 = b444;                   // L14762
    float v11256 = v11254 * v11255;        // L14763
    float v11257 = v444;                   // L14764
    float v11258 = v11257 + v11256;        // L14765
    v444 = v11258;                         // L14766
    float v11259 = a444;                   // L14767
    v11243.write(v11259);                  // v11243[k456] = v11259;	// L14768
    float v11260 = b444;                   // L14769
    v11244.write(v11260);                  // v11244[k456] = v11260;	// L14770
  }
  float v11261 = v444;             // L14772
  v11245[v11246][v11247] = v11261; // L14773
}

void PE_kernel_ffn1_5_7(hls::stream<float> &v11262 /* v11262[768] */,
                        hls::stream<float> &v11263 /* v11263[768] */,
                        hls::stream<float> &v11264 /* v11264[768] */,
                        hls::stream<float> &v11265 /* v11265[768] */,
                        float v11266[8][8], int v11267,
                        int v11268) { // L14776
#pragma HLS stream variable = v11262 depth = 9
#pragma HLS stream variable = v11263 depth = 9
#pragma HLS stream variable = v11264 depth = 9
#pragma HLS stream variable = v11265 depth = 9
#pragma HLS array_partition variable = v11266 complete dim = 1
#pragma HLS array_partition variable = v11266 complete dim = 2

  float v445;      // L14779
  v445 = 0.000000; // L14780
l_S_k_0_k457:
  for (int k457 = 0; k457 < 768; k457++) { // L14781
    float v11271 = v11262.read();          // v11262[k457];	// L14782
    float a445;                            // L14783
    a445 = v11271;                         // L14784
    float v11273 = v11263.read();          // v11263[k457];	// L14785
    float b445;                            // L14786
    b445 = v11273;                         // L14787
    float v11275 = a445;                   // L14788
    float v11276 = b445;                   // L14789
    float v11277 = v11275 * v11276;        // L14790
    float v11278 = v445;                   // L14791
    float v11279 = v11278 + v11277;        // L14792
    v445 = v11279;                         // L14793
    float v11280 = a445;                   // L14794
    v11264.write(v11280);                  // v11264[k457] = v11280;	// L14795
    float v11281 = b445;                   // L14796
    v11265.write(v11281);                  // v11265[k457] = v11281;	// L14797
  }
  float v11282 = v445;             // L14799
  v11266[v11267][v11268] = v11282; // L14800
}

void PE_kernel_ffn1_6_7(hls::stream<float> &v11283 /* v11283[768] */,
                        hls::stream<float> &v11284 /* v11284[768] */,
                        hls::stream<float> &v11285 /* v11285[768] */,
                        hls::stream<float> &v11286 /* v11286[768] */,
                        float v11287[8][8], int v11288,
                        int v11289) { // L14803
#pragma HLS stream variable = v11283 depth = 9
#pragma HLS stream variable = v11284 depth = 9
#pragma HLS stream variable = v11285 depth = 9
#pragma HLS stream variable = v11286 depth = 9
#pragma HLS array_partition variable = v11287 complete dim = 1
#pragma HLS array_partition variable = v11287 complete dim = 2

  float v446;      // L14806
  v446 = 0.000000; // L14807
l_S_k_0_k458:
  for (int k458 = 0; k458 < 768; k458++) { // L14808
    float v11292 = v11283.read();          // v11283[k458];	// L14809
    float a446;                            // L14810
    a446 = v11292;                         // L14811
    float v11294 = v11284.read();          // v11284[k458];	// L14812
    float b446;                            // L14813
    b446 = v11294;                         // L14814
    float v11296 = a446;                   // L14815
    float v11297 = b446;                   // L14816
    float v11298 = v11296 * v11297;        // L14817
    float v11299 = v446;                   // L14818
    float v11300 = v11299 + v11298;        // L14819
    v446 = v11300;                         // L14820
    float v11301 = a446;                   // L14821
    v11285.write(v11301);                  // v11285[k458] = v11301;	// L14822
    float v11302 = b446;                   // L14823
    v11286.write(v11302);                  // v11286[k458] = v11302;	// L14824
  }
  float v11303 = v446;             // L14826
  v11287[v11288][v11289] = v11303; // L14827
}

void PE_kernel_ffn1_7_7(hls::stream<float> &v11304 /* v11304[768] */,
                        hls::stream<float> &v11305 /* v11305[768] */,
                        hls::stream<float> &v11306 /* v11306[768] */,
                        hls::stream<float> &v11307 /* v11307[768] */,
                        float v11308[8][8], int v11309,
                        int v11310) { // L14830
#pragma HLS stream variable = v11304 depth = 9
#pragma HLS stream variable = v11305 depth = 9
#pragma HLS stream variable = v11306 depth = 9
#pragma HLS stream variable = v11307 depth = 9
#pragma HLS array_partition variable = v11308 complete dim = 1
#pragma HLS array_partition variable = v11308 complete dim = 2

  float v447;      // L14833
  v447 = 0.000000; // L14834
l_S_k_0_k459:
  for (int k459 = 0; k459 < 768; k459++) { // L14835
    float v11313 = v11304.read();          // v11304[k459];	// L14836
    float a447;                            // L14837
    a447 = v11313;                         // L14838
    float v11315 = v11305.read();          // v11305[k459];	// L14839
    float b447;                            // L14840
    b447 = v11315;                         // L14841
    float v11317 = a447;                   // L14842
    float v11318 = b447;                   // L14843
    float v11319 = v11317 * v11318;        // L14844
    float v11320 = v447;                   // L14845
    float v11321 = v11320 + v11319;        // L14846
    v447 = v11321;                         // L14847
    float v11322 = a447;                   // L14848
    v11306.write(v11322);                  // v11306[k459] = v11322;	// L14849
    float v11323 = b447;                   // L14850
    v11307.write(v11323);                  // v11307[k459] = v11323;	// L14851
  }
  float v11324 = v447;             // L14853
  v11308[v11309][v11310] = v11324; // L14854
}

void systolic_tile_ffn1(float v11325[8][768], float v11326[768][8],
                        float v11327[8][8]) { // L14857
#pragma HLS dataflow
#pragma HLS array_partition variable = v11325 complete dim = 1

#pragma HLS array_partition variable = v11326 complete dim = 2

#pragma HLS array_partition variable = v11327 complete dim = 1
#pragma HLS array_partition variable = v11327 complete dim = 2

  hls::stream<float> A_fifo6[8][9] /* A_fifo6[8][9][768] */; // L14858
#pragma HLS stream variable = A_fifo6 depth = 9
  hls::stream<float> B_fifo6[8][9] /* B_fifo6[8][9][768] */; // L14859
#pragma HLS stream variable = B_fifo6 depth = 9
  float A_drain6[8]; // L14860
  float B_drain6[8]; // L14861
l_data_load_k460:
  for (int k460 = 0; k460 < 768; k460++) { // L14862
  l_S_m_0_m12:
    for (int m12 = 0; m12 < 8; m12++) { // L14863
      float v11334 = v11325[m12][k460]; // L14864
      A_fifo6[m12][0].write(
          v11334); // A_fifo6[m12][0][k460] = v11334;	// L14865
    }
  l_S_n_1_n12:
    for (int n12 = 0; n12 < 8; n12++) { // L14867
      float v11336 = v11326[k460][n12]; // L14868
      B_fifo6[n12][0].write(
          v11336); // B_fifo6[n12][0][k460] = v11336;	// L14869
    }
  }
  hls::stream<float> &v11337 /* v11337[768] */ = A_fifo6[0][0];     // L14873
  hls::stream<float> &v11338 /* v11338[768] */ = B_fifo6[0][0];     // L14874
  hls::stream<float> &v11339 /* v11339[768] */ = A_fifo6[0][1];     // L14880
  hls::stream<float> &v11340 /* v11340[768] */ = B_fifo6[0][1];     // L14881
  PE_kernel_ffn1_0_0(v11337, v11338, v11339, v11340, v11327, 0, 0); // L14882
  hls::stream<float> &v11341 /* v11341[768] */ = A_fifo6[0][1];     // L14884
  hls::stream<float> &v11342 /* v11342[768] */ = B_fifo6[1][0];     // L14885
  hls::stream<float> &v11343 /* v11343[768] */ = A_fifo6[0][2];     // L14889
  hls::stream<float> &v11344 /* v11344[768] */ = B_fifo6[1][1];     // L14890
  PE_kernel_ffn1_1_0(v11341, v11342, v11343, v11344, v11327, 0, 1); // L14891
  hls::stream<float> &v11345 /* v11345[768] */ = A_fifo6[0][2];     // L14893
  hls::stream<float> &v11346 /* v11346[768] */ = B_fifo6[2][0];     // L14894
  hls::stream<float> &v11347 /* v11347[768] */ = A_fifo6[0][3];     // L14898
  hls::stream<float> &v11348 /* v11348[768] */ = B_fifo6[2][1];     // L14899
  PE_kernel_ffn1_2_0(v11345, v11346, v11347, v11348, v11327, 0, 2); // L14900
  hls::stream<float> &v11349 /* v11349[768] */ = A_fifo6[0][3];     // L14902
  hls::stream<float> &v11350 /* v11350[768] */ = B_fifo6[3][0];     // L14903
  hls::stream<float> &v11351 /* v11351[768] */ = A_fifo6[0][4];     // L14907
  hls::stream<float> &v11352 /* v11352[768] */ = B_fifo6[3][1];     // L14908
  PE_kernel_ffn1_3_0(v11349, v11350, v11351, v11352, v11327, 0, 3); // L14909
  hls::stream<float> &v11353 /* v11353[768] */ = A_fifo6[0][4];     // L14911
  hls::stream<float> &v11354 /* v11354[768] */ = B_fifo6[4][0];     // L14912
  hls::stream<float> &v11355 /* v11355[768] */ = A_fifo6[0][5];     // L14916
  hls::stream<float> &v11356 /* v11356[768] */ = B_fifo6[4][1];     // L14917
  PE_kernel_ffn1_4_0(v11353, v11354, v11355, v11356, v11327, 0, 4); // L14918
  hls::stream<float> &v11357 /* v11357[768] */ = A_fifo6[0][5];     // L14920
  hls::stream<float> &v11358 /* v11358[768] */ = B_fifo6[5][0];     // L14921
  hls::stream<float> &v11359 /* v11359[768] */ = A_fifo6[0][6];     // L14925
  hls::stream<float> &v11360 /* v11360[768] */ = B_fifo6[5][1];     // L14926
  PE_kernel_ffn1_5_0(v11357, v11358, v11359, v11360, v11327, 0, 5); // L14927
  hls::stream<float> &v11361 /* v11361[768] */ = A_fifo6[0][6];     // L14929
  hls::stream<float> &v11362 /* v11362[768] */ = B_fifo6[6][0];     // L14930
  hls::stream<float> &v11363 /* v11363[768] */ = A_fifo6[0][7];     // L14934
  hls::stream<float> &v11364 /* v11364[768] */ = B_fifo6[6][1];     // L14935
  PE_kernel_ffn1_6_0(v11361, v11362, v11363, v11364, v11327, 0, 6); // L14936
  hls::stream<float> &v11365 /* v11365[768] */ = A_fifo6[0][7];     // L14938
  hls::stream<float> &v11366 /* v11366[768] */ = B_fifo6[7][0];     // L14939
  hls::stream<float> &v11367 /* v11367[768] */ = A_fifo6[0][8];     // L14943
  hls::stream<float> &v11368 /* v11368[768] */ = B_fifo6[7][1];     // L14944
  PE_kernel_ffn1_7_0(v11365, v11366, v11367, v11368, v11327, 0, 7); // L14945
  hls::stream<float> &v11369 /* v11369[768] */ = A_fifo6[1][0];     // L14946
  hls::stream<float> &v11370 /* v11370[768] */ = B_fifo6[0][1];     // L14947
  hls::stream<float> &v11371 /* v11371[768] */ = A_fifo6[1][1];     // L14948
  hls::stream<float> &v11372 /* v11372[768] */ = B_fifo6[0][2];     // L14949
  PE_kernel_ffn1_0_1(v11369, v11370, v11371, v11372, v11327, 1, 0); // L14950
  hls::stream<float> &v11373 /* v11373[768] */ = A_fifo6[1][1];     // L14951
  hls::stream<float> &v11374 /* v11374[768] */ = B_fifo6[1][1];     // L14952
  hls::stream<float> &v11375 /* v11375[768] */ = A_fifo6[1][2];     // L14953
  hls::stream<float> &v11376 /* v11376[768] */ = B_fifo6[1][2];     // L14954
  PE_kernel_ffn1_1_1(v11373, v11374, v11375, v11376, v11327, 1, 1); // L14955
  hls::stream<float> &v11377 /* v11377[768] */ = A_fifo6[1][2];     // L14956
  hls::stream<float> &v11378 /* v11378[768] */ = B_fifo6[2][1];     // L14957
  hls::stream<float> &v11379 /* v11379[768] */ = A_fifo6[1][3];     // L14958
  hls::stream<float> &v11380 /* v11380[768] */ = B_fifo6[2][2];     // L14959
  PE_kernel_ffn1_2_1(v11377, v11378, v11379, v11380, v11327, 1, 2); // L14960
  hls::stream<float> &v11381 /* v11381[768] */ = A_fifo6[1][3];     // L14961
  hls::stream<float> &v11382 /* v11382[768] */ = B_fifo6[3][1];     // L14962
  hls::stream<float> &v11383 /* v11383[768] */ = A_fifo6[1][4];     // L14963
  hls::stream<float> &v11384 /* v11384[768] */ = B_fifo6[3][2];     // L14964
  PE_kernel_ffn1_3_1(v11381, v11382, v11383, v11384, v11327, 1, 3); // L14965
  hls::stream<float> &v11385 /* v11385[768] */ = A_fifo6[1][4];     // L14966
  hls::stream<float> &v11386 /* v11386[768] */ = B_fifo6[4][1];     // L14967
  hls::stream<float> &v11387 /* v11387[768] */ = A_fifo6[1][5];     // L14968
  hls::stream<float> &v11388 /* v11388[768] */ = B_fifo6[4][2];     // L14969
  PE_kernel_ffn1_4_1(v11385, v11386, v11387, v11388, v11327, 1, 4); // L14970
  hls::stream<float> &v11389 /* v11389[768] */ = A_fifo6[1][5];     // L14971
  hls::stream<float> &v11390 /* v11390[768] */ = B_fifo6[5][1];     // L14972
  hls::stream<float> &v11391 /* v11391[768] */ = A_fifo6[1][6];     // L14973
  hls::stream<float> &v11392 /* v11392[768] */ = B_fifo6[5][2];     // L14974
  PE_kernel_ffn1_5_1(v11389, v11390, v11391, v11392, v11327, 1, 5); // L14975
  hls::stream<float> &v11393 /* v11393[768] */ = A_fifo6[1][6];     // L14976
  hls::stream<float> &v11394 /* v11394[768] */ = B_fifo6[6][1];     // L14977
  hls::stream<float> &v11395 /* v11395[768] */ = A_fifo6[1][7];     // L14978
  hls::stream<float> &v11396 /* v11396[768] */ = B_fifo6[6][2];     // L14979
  PE_kernel_ffn1_6_1(v11393, v11394, v11395, v11396, v11327, 1, 6); // L14980
  hls::stream<float> &v11397 /* v11397[768] */ = A_fifo6[1][7];     // L14981
  hls::stream<float> &v11398 /* v11398[768] */ = B_fifo6[7][1];     // L14982
  hls::stream<float> &v11399 /* v11399[768] */ = A_fifo6[1][8];     // L14983
  hls::stream<float> &v11400 /* v11400[768] */ = B_fifo6[7][2];     // L14984
  PE_kernel_ffn1_7_1(v11397, v11398, v11399, v11400, v11327, 1, 7); // L14985
  hls::stream<float> &v11401 /* v11401[768] */ = A_fifo6[2][0];     // L14986
  hls::stream<float> &v11402 /* v11402[768] */ = B_fifo6[0][2];     // L14987
  hls::stream<float> &v11403 /* v11403[768] */ = A_fifo6[2][1];     // L14988
  hls::stream<float> &v11404 /* v11404[768] */ = B_fifo6[0][3];     // L14989
  PE_kernel_ffn1_0_2(v11401, v11402, v11403, v11404, v11327, 2, 0); // L14990
  hls::stream<float> &v11405 /* v11405[768] */ = A_fifo6[2][1];     // L14991
  hls::stream<float> &v11406 /* v11406[768] */ = B_fifo6[1][2];     // L14992
  hls::stream<float> &v11407 /* v11407[768] */ = A_fifo6[2][2];     // L14993
  hls::stream<float> &v11408 /* v11408[768] */ = B_fifo6[1][3];     // L14994
  PE_kernel_ffn1_1_2(v11405, v11406, v11407, v11408, v11327, 2, 1); // L14995
  hls::stream<float> &v11409 /* v11409[768] */ = A_fifo6[2][2];     // L14996
  hls::stream<float> &v11410 /* v11410[768] */ = B_fifo6[2][2];     // L14997
  hls::stream<float> &v11411 /* v11411[768] */ = A_fifo6[2][3];     // L14998
  hls::stream<float> &v11412 /* v11412[768] */ = B_fifo6[2][3];     // L14999
  PE_kernel_ffn1_2_2(v11409, v11410, v11411, v11412, v11327, 2, 2); // L15000
  hls::stream<float> &v11413 /* v11413[768] */ = A_fifo6[2][3];     // L15001
  hls::stream<float> &v11414 /* v11414[768] */ = B_fifo6[3][2];     // L15002
  hls::stream<float> &v11415 /* v11415[768] */ = A_fifo6[2][4];     // L15003
  hls::stream<float> &v11416 /* v11416[768] */ = B_fifo6[3][3];     // L15004
  PE_kernel_ffn1_3_2(v11413, v11414, v11415, v11416, v11327, 2, 3); // L15005
  hls::stream<float> &v11417 /* v11417[768] */ = A_fifo6[2][4];     // L15006
  hls::stream<float> &v11418 /* v11418[768] */ = B_fifo6[4][2];     // L15007
  hls::stream<float> &v11419 /* v11419[768] */ = A_fifo6[2][5];     // L15008
  hls::stream<float> &v11420 /* v11420[768] */ = B_fifo6[4][3];     // L15009
  PE_kernel_ffn1_4_2(v11417, v11418, v11419, v11420, v11327, 2, 4); // L15010
  hls::stream<float> &v11421 /* v11421[768] */ = A_fifo6[2][5];     // L15011
  hls::stream<float> &v11422 /* v11422[768] */ = B_fifo6[5][2];     // L15012
  hls::stream<float> &v11423 /* v11423[768] */ = A_fifo6[2][6];     // L15013
  hls::stream<float> &v11424 /* v11424[768] */ = B_fifo6[5][3];     // L15014
  PE_kernel_ffn1_5_2(v11421, v11422, v11423, v11424, v11327, 2, 5); // L15015
  hls::stream<float> &v11425 /* v11425[768] */ = A_fifo6[2][6];     // L15016
  hls::stream<float> &v11426 /* v11426[768] */ = B_fifo6[6][2];     // L15017
  hls::stream<float> &v11427 /* v11427[768] */ = A_fifo6[2][7];     // L15018
  hls::stream<float> &v11428 /* v11428[768] */ = B_fifo6[6][3];     // L15019
  PE_kernel_ffn1_6_2(v11425, v11426, v11427, v11428, v11327, 2, 6); // L15020
  hls::stream<float> &v11429 /* v11429[768] */ = A_fifo6[2][7];     // L15021
  hls::stream<float> &v11430 /* v11430[768] */ = B_fifo6[7][2];     // L15022
  hls::stream<float> &v11431 /* v11431[768] */ = A_fifo6[2][8];     // L15023
  hls::stream<float> &v11432 /* v11432[768] */ = B_fifo6[7][3];     // L15024
  PE_kernel_ffn1_7_2(v11429, v11430, v11431, v11432, v11327, 2, 7); // L15025
  hls::stream<float> &v11433 /* v11433[768] */ = A_fifo6[3][0];     // L15026
  hls::stream<float> &v11434 /* v11434[768] */ = B_fifo6[0][3];     // L15027
  hls::stream<float> &v11435 /* v11435[768] */ = A_fifo6[3][1];     // L15028
  hls::stream<float> &v11436 /* v11436[768] */ = B_fifo6[0][4];     // L15029
  PE_kernel_ffn1_0_3(v11433, v11434, v11435, v11436, v11327, 3, 0); // L15030
  hls::stream<float> &v11437 /* v11437[768] */ = A_fifo6[3][1];     // L15031
  hls::stream<float> &v11438 /* v11438[768] */ = B_fifo6[1][3];     // L15032
  hls::stream<float> &v11439 /* v11439[768] */ = A_fifo6[3][2];     // L15033
  hls::stream<float> &v11440 /* v11440[768] */ = B_fifo6[1][4];     // L15034
  PE_kernel_ffn1_1_3(v11437, v11438, v11439, v11440, v11327, 3, 1); // L15035
  hls::stream<float> &v11441 /* v11441[768] */ = A_fifo6[3][2];     // L15036
  hls::stream<float> &v11442 /* v11442[768] */ = B_fifo6[2][3];     // L15037
  hls::stream<float> &v11443 /* v11443[768] */ = A_fifo6[3][3];     // L15038
  hls::stream<float> &v11444 /* v11444[768] */ = B_fifo6[2][4];     // L15039
  PE_kernel_ffn1_2_3(v11441, v11442, v11443, v11444, v11327, 3, 2); // L15040
  hls::stream<float> &v11445 /* v11445[768] */ = A_fifo6[3][3];     // L15041
  hls::stream<float> &v11446 /* v11446[768] */ = B_fifo6[3][3];     // L15042
  hls::stream<float> &v11447 /* v11447[768] */ = A_fifo6[3][4];     // L15043
  hls::stream<float> &v11448 /* v11448[768] */ = B_fifo6[3][4];     // L15044
  PE_kernel_ffn1_3_3(v11445, v11446, v11447, v11448, v11327, 3, 3); // L15045
  hls::stream<float> &v11449 /* v11449[768] */ = A_fifo6[3][4];     // L15046
  hls::stream<float> &v11450 /* v11450[768] */ = B_fifo6[4][3];     // L15047
  hls::stream<float> &v11451 /* v11451[768] */ = A_fifo6[3][5];     // L15048
  hls::stream<float> &v11452 /* v11452[768] */ = B_fifo6[4][4];     // L15049
  PE_kernel_ffn1_4_3(v11449, v11450, v11451, v11452, v11327, 3, 4); // L15050
  hls::stream<float> &v11453 /* v11453[768] */ = A_fifo6[3][5];     // L15051
  hls::stream<float> &v11454 /* v11454[768] */ = B_fifo6[5][3];     // L15052
  hls::stream<float> &v11455 /* v11455[768] */ = A_fifo6[3][6];     // L15053
  hls::stream<float> &v11456 /* v11456[768] */ = B_fifo6[5][4];     // L15054
  PE_kernel_ffn1_5_3(v11453, v11454, v11455, v11456, v11327, 3, 5); // L15055
  hls::stream<float> &v11457 /* v11457[768] */ = A_fifo6[3][6];     // L15056
  hls::stream<float> &v11458 /* v11458[768] */ = B_fifo6[6][3];     // L15057
  hls::stream<float> &v11459 /* v11459[768] */ = A_fifo6[3][7];     // L15058
  hls::stream<float> &v11460 /* v11460[768] */ = B_fifo6[6][4];     // L15059
  PE_kernel_ffn1_6_3(v11457, v11458, v11459, v11460, v11327, 3, 6); // L15060
  hls::stream<float> &v11461 /* v11461[768] */ = A_fifo6[3][7];     // L15061
  hls::stream<float> &v11462 /* v11462[768] */ = B_fifo6[7][3];     // L15062
  hls::stream<float> &v11463 /* v11463[768] */ = A_fifo6[3][8];     // L15063
  hls::stream<float> &v11464 /* v11464[768] */ = B_fifo6[7][4];     // L15064
  PE_kernel_ffn1_7_3(v11461, v11462, v11463, v11464, v11327, 3, 7); // L15065
  hls::stream<float> &v11465 /* v11465[768] */ = A_fifo6[4][0];     // L15066
  hls::stream<float> &v11466 /* v11466[768] */ = B_fifo6[0][4];     // L15067
  hls::stream<float> &v11467 /* v11467[768] */ = A_fifo6[4][1];     // L15068
  hls::stream<float> &v11468 /* v11468[768] */ = B_fifo6[0][5];     // L15069
  PE_kernel_ffn1_0_4(v11465, v11466, v11467, v11468, v11327, 4, 0); // L15070
  hls::stream<float> &v11469 /* v11469[768] */ = A_fifo6[4][1];     // L15071
  hls::stream<float> &v11470 /* v11470[768] */ = B_fifo6[1][4];     // L15072
  hls::stream<float> &v11471 /* v11471[768] */ = A_fifo6[4][2];     // L15073
  hls::stream<float> &v11472 /* v11472[768] */ = B_fifo6[1][5];     // L15074
  PE_kernel_ffn1_1_4(v11469, v11470, v11471, v11472, v11327, 4, 1); // L15075
  hls::stream<float> &v11473 /* v11473[768] */ = A_fifo6[4][2];     // L15076
  hls::stream<float> &v11474 /* v11474[768] */ = B_fifo6[2][4];     // L15077
  hls::stream<float> &v11475 /* v11475[768] */ = A_fifo6[4][3];     // L15078
  hls::stream<float> &v11476 /* v11476[768] */ = B_fifo6[2][5];     // L15079
  PE_kernel_ffn1_2_4(v11473, v11474, v11475, v11476, v11327, 4, 2); // L15080
  hls::stream<float> &v11477 /* v11477[768] */ = A_fifo6[4][3];     // L15081
  hls::stream<float> &v11478 /* v11478[768] */ = B_fifo6[3][4];     // L15082
  hls::stream<float> &v11479 /* v11479[768] */ = A_fifo6[4][4];     // L15083
  hls::stream<float> &v11480 /* v11480[768] */ = B_fifo6[3][5];     // L15084
  PE_kernel_ffn1_3_4(v11477, v11478, v11479, v11480, v11327, 4, 3); // L15085
  hls::stream<float> &v11481 /* v11481[768] */ = A_fifo6[4][4];     // L15086
  hls::stream<float> &v11482 /* v11482[768] */ = B_fifo6[4][4];     // L15087
  hls::stream<float> &v11483 /* v11483[768] */ = A_fifo6[4][5];     // L15088
  hls::stream<float> &v11484 /* v11484[768] */ = B_fifo6[4][5];     // L15089
  PE_kernel_ffn1_4_4(v11481, v11482, v11483, v11484, v11327, 4, 4); // L15090
  hls::stream<float> &v11485 /* v11485[768] */ = A_fifo6[4][5];     // L15091
  hls::stream<float> &v11486 /* v11486[768] */ = B_fifo6[5][4];     // L15092
  hls::stream<float> &v11487 /* v11487[768] */ = A_fifo6[4][6];     // L15093
  hls::stream<float> &v11488 /* v11488[768] */ = B_fifo6[5][5];     // L15094
  PE_kernel_ffn1_5_4(v11485, v11486, v11487, v11488, v11327, 4, 5); // L15095
  hls::stream<float> &v11489 /* v11489[768] */ = A_fifo6[4][6];     // L15096
  hls::stream<float> &v11490 /* v11490[768] */ = B_fifo6[6][4];     // L15097
  hls::stream<float> &v11491 /* v11491[768] */ = A_fifo6[4][7];     // L15098
  hls::stream<float> &v11492 /* v11492[768] */ = B_fifo6[6][5];     // L15099
  PE_kernel_ffn1_6_4(v11489, v11490, v11491, v11492, v11327, 4, 6); // L15100
  hls::stream<float> &v11493 /* v11493[768] */ = A_fifo6[4][7];     // L15101
  hls::stream<float> &v11494 /* v11494[768] */ = B_fifo6[7][4];     // L15102
  hls::stream<float> &v11495 /* v11495[768] */ = A_fifo6[4][8];     // L15103
  hls::stream<float> &v11496 /* v11496[768] */ = B_fifo6[7][5];     // L15104
  PE_kernel_ffn1_7_4(v11493, v11494, v11495, v11496, v11327, 4, 7); // L15105
  hls::stream<float> &v11497 /* v11497[768] */ = A_fifo6[5][0];     // L15106
  hls::stream<float> &v11498 /* v11498[768] */ = B_fifo6[0][5];     // L15107
  hls::stream<float> &v11499 /* v11499[768] */ = A_fifo6[5][1];     // L15108
  hls::stream<float> &v11500 /* v11500[768] */ = B_fifo6[0][6];     // L15109
  PE_kernel_ffn1_0_5(v11497, v11498, v11499, v11500, v11327, 5, 0); // L15110
  hls::stream<float> &v11501 /* v11501[768] */ = A_fifo6[5][1];     // L15111
  hls::stream<float> &v11502 /* v11502[768] */ = B_fifo6[1][5];     // L15112
  hls::stream<float> &v11503 /* v11503[768] */ = A_fifo6[5][2];     // L15113
  hls::stream<float> &v11504 /* v11504[768] */ = B_fifo6[1][6];     // L15114
  PE_kernel_ffn1_1_5(v11501, v11502, v11503, v11504, v11327, 5, 1); // L15115
  hls::stream<float> &v11505 /* v11505[768] */ = A_fifo6[5][2];     // L15116
  hls::stream<float> &v11506 /* v11506[768] */ = B_fifo6[2][5];     // L15117
  hls::stream<float> &v11507 /* v11507[768] */ = A_fifo6[5][3];     // L15118
  hls::stream<float> &v11508 /* v11508[768] */ = B_fifo6[2][6];     // L15119
  PE_kernel_ffn1_2_5(v11505, v11506, v11507, v11508, v11327, 5, 2); // L15120
  hls::stream<float> &v11509 /* v11509[768] */ = A_fifo6[5][3];     // L15121
  hls::stream<float> &v11510 /* v11510[768] */ = B_fifo6[3][5];     // L15122
  hls::stream<float> &v11511 /* v11511[768] */ = A_fifo6[5][4];     // L15123
  hls::stream<float> &v11512 /* v11512[768] */ = B_fifo6[3][6];     // L15124
  PE_kernel_ffn1_3_5(v11509, v11510, v11511, v11512, v11327, 5, 3); // L15125
  hls::stream<float> &v11513 /* v11513[768] */ = A_fifo6[5][4];     // L15126
  hls::stream<float> &v11514 /* v11514[768] */ = B_fifo6[4][5];     // L15127
  hls::stream<float> &v11515 /* v11515[768] */ = A_fifo6[5][5];     // L15128
  hls::stream<float> &v11516 /* v11516[768] */ = B_fifo6[4][6];     // L15129
  PE_kernel_ffn1_4_5(v11513, v11514, v11515, v11516, v11327, 5, 4); // L15130
  hls::stream<float> &v11517 /* v11517[768] */ = A_fifo6[5][5];     // L15131
  hls::stream<float> &v11518 /* v11518[768] */ = B_fifo6[5][5];     // L15132
  hls::stream<float> &v11519 /* v11519[768] */ = A_fifo6[5][6];     // L15133
  hls::stream<float> &v11520 /* v11520[768] */ = B_fifo6[5][6];     // L15134
  PE_kernel_ffn1_5_5(v11517, v11518, v11519, v11520, v11327, 5, 5); // L15135
  hls::stream<float> &v11521 /* v11521[768] */ = A_fifo6[5][6];     // L15136
  hls::stream<float> &v11522 /* v11522[768] */ = B_fifo6[6][5];     // L15137
  hls::stream<float> &v11523 /* v11523[768] */ = A_fifo6[5][7];     // L15138
  hls::stream<float> &v11524 /* v11524[768] */ = B_fifo6[6][6];     // L15139
  PE_kernel_ffn1_6_5(v11521, v11522, v11523, v11524, v11327, 5, 6); // L15140
  hls::stream<float> &v11525 /* v11525[768] */ = A_fifo6[5][7];     // L15141
  hls::stream<float> &v11526 /* v11526[768] */ = B_fifo6[7][5];     // L15142
  hls::stream<float> &v11527 /* v11527[768] */ = A_fifo6[5][8];     // L15143
  hls::stream<float> &v11528 /* v11528[768] */ = B_fifo6[7][6];     // L15144
  PE_kernel_ffn1_7_5(v11525, v11526, v11527, v11528, v11327, 5, 7); // L15145
  hls::stream<float> &v11529 /* v11529[768] */ = A_fifo6[6][0];     // L15146
  hls::stream<float> &v11530 /* v11530[768] */ = B_fifo6[0][6];     // L15147
  hls::stream<float> &v11531 /* v11531[768] */ = A_fifo6[6][1];     // L15148
  hls::stream<float> &v11532 /* v11532[768] */ = B_fifo6[0][7];     // L15149
  PE_kernel_ffn1_0_6(v11529, v11530, v11531, v11532, v11327, 6, 0); // L15150
  hls::stream<float> &v11533 /* v11533[768] */ = A_fifo6[6][1];     // L15151
  hls::stream<float> &v11534 /* v11534[768] */ = B_fifo6[1][6];     // L15152
  hls::stream<float> &v11535 /* v11535[768] */ = A_fifo6[6][2];     // L15153
  hls::stream<float> &v11536 /* v11536[768] */ = B_fifo6[1][7];     // L15154
  PE_kernel_ffn1_1_6(v11533, v11534, v11535, v11536, v11327, 6, 1); // L15155
  hls::stream<float> &v11537 /* v11537[768] */ = A_fifo6[6][2];     // L15156
  hls::stream<float> &v11538 /* v11538[768] */ = B_fifo6[2][6];     // L15157
  hls::stream<float> &v11539 /* v11539[768] */ = A_fifo6[6][3];     // L15158
  hls::stream<float> &v11540 /* v11540[768] */ = B_fifo6[2][7];     // L15159
  PE_kernel_ffn1_2_6(v11537, v11538, v11539, v11540, v11327, 6, 2); // L15160
  hls::stream<float> &v11541 /* v11541[768] */ = A_fifo6[6][3];     // L15161
  hls::stream<float> &v11542 /* v11542[768] */ = B_fifo6[3][6];     // L15162
  hls::stream<float> &v11543 /* v11543[768] */ = A_fifo6[6][4];     // L15163
  hls::stream<float> &v11544 /* v11544[768] */ = B_fifo6[3][7];     // L15164
  PE_kernel_ffn1_3_6(v11541, v11542, v11543, v11544, v11327, 6, 3); // L15165
  hls::stream<float> &v11545 /* v11545[768] */ = A_fifo6[6][4];     // L15166
  hls::stream<float> &v11546 /* v11546[768] */ = B_fifo6[4][6];     // L15167
  hls::stream<float> &v11547 /* v11547[768] */ = A_fifo6[6][5];     // L15168
  hls::stream<float> &v11548 /* v11548[768] */ = B_fifo6[4][7];     // L15169
  PE_kernel_ffn1_4_6(v11545, v11546, v11547, v11548, v11327, 6, 4); // L15170
  hls::stream<float> &v11549 /* v11549[768] */ = A_fifo6[6][5];     // L15171
  hls::stream<float> &v11550 /* v11550[768] */ = B_fifo6[5][6];     // L15172
  hls::stream<float> &v11551 /* v11551[768] */ = A_fifo6[6][6];     // L15173
  hls::stream<float> &v11552 /* v11552[768] */ = B_fifo6[5][7];     // L15174
  PE_kernel_ffn1_5_6(v11549, v11550, v11551, v11552, v11327, 6, 5); // L15175
  hls::stream<float> &v11553 /* v11553[768] */ = A_fifo6[6][6];     // L15176
  hls::stream<float> &v11554 /* v11554[768] */ = B_fifo6[6][6];     // L15177
  hls::stream<float> &v11555 /* v11555[768] */ = A_fifo6[6][7];     // L15178
  hls::stream<float> &v11556 /* v11556[768] */ = B_fifo6[6][7];     // L15179
  PE_kernel_ffn1_6_6(v11553, v11554, v11555, v11556, v11327, 6, 6); // L15180
  hls::stream<float> &v11557 /* v11557[768] */ = A_fifo6[6][7];     // L15181
  hls::stream<float> &v11558 /* v11558[768] */ = B_fifo6[7][6];     // L15182
  hls::stream<float> &v11559 /* v11559[768] */ = A_fifo6[6][8];     // L15183
  hls::stream<float> &v11560 /* v11560[768] */ = B_fifo6[7][7];     // L15184
  PE_kernel_ffn1_7_6(v11557, v11558, v11559, v11560, v11327, 6, 7); // L15185
  hls::stream<float> &v11561 /* v11561[768] */ = A_fifo6[7][0];     // L15186
  hls::stream<float> &v11562 /* v11562[768] */ = B_fifo6[0][7];     // L15187
  hls::stream<float> &v11563 /* v11563[768] */ = A_fifo6[7][1];     // L15188
  hls::stream<float> &v11564 /* v11564[768] */ = B_fifo6[0][8];     // L15189
  PE_kernel_ffn1_0_7(v11561, v11562, v11563, v11564, v11327, 7, 0); // L15190
  hls::stream<float> &v11565 /* v11565[768] */ = A_fifo6[7][1];     // L15191
  hls::stream<float> &v11566 /* v11566[768] */ = B_fifo6[1][7];     // L15192
  hls::stream<float> &v11567 /* v11567[768] */ = A_fifo6[7][2];     // L15193
  hls::stream<float> &v11568 /* v11568[768] */ = B_fifo6[1][8];     // L15194
  PE_kernel_ffn1_1_7(v11565, v11566, v11567, v11568, v11327, 7, 1); // L15195
  hls::stream<float> &v11569 /* v11569[768] */ = A_fifo6[7][2];     // L15196
  hls::stream<float> &v11570 /* v11570[768] */ = B_fifo6[2][7];     // L15197
  hls::stream<float> &v11571 /* v11571[768] */ = A_fifo6[7][3];     // L15198
  hls::stream<float> &v11572 /* v11572[768] */ = B_fifo6[2][8];     // L15199
  PE_kernel_ffn1_2_7(v11569, v11570, v11571, v11572, v11327, 7, 2); // L15200
  hls::stream<float> &v11573 /* v11573[768] */ = A_fifo6[7][3];     // L15201
  hls::stream<float> &v11574 /* v11574[768] */ = B_fifo6[3][7];     // L15202
  hls::stream<float> &v11575 /* v11575[768] */ = A_fifo6[7][4];     // L15203
  hls::stream<float> &v11576 /* v11576[768] */ = B_fifo6[3][8];     // L15204
  PE_kernel_ffn1_3_7(v11573, v11574, v11575, v11576, v11327, 7, 3); // L15205
  hls::stream<float> &v11577 /* v11577[768] */ = A_fifo6[7][4];     // L15206
  hls::stream<float> &v11578 /* v11578[768] */ = B_fifo6[4][7];     // L15207
  hls::stream<float> &v11579 /* v11579[768] */ = A_fifo6[7][5];     // L15208
  hls::stream<float> &v11580 /* v11580[768] */ = B_fifo6[4][8];     // L15209
  PE_kernel_ffn1_4_7(v11577, v11578, v11579, v11580, v11327, 7, 4); // L15210
  hls::stream<float> &v11581 /* v11581[768] */ = A_fifo6[7][5];     // L15211
  hls::stream<float> &v11582 /* v11582[768] */ = B_fifo6[5][7];     // L15212
  hls::stream<float> &v11583 /* v11583[768] */ = A_fifo6[7][6];     // L15213
  hls::stream<float> &v11584 /* v11584[768] */ = B_fifo6[5][8];     // L15214
  PE_kernel_ffn1_5_7(v11581, v11582, v11583, v11584, v11327, 7, 5); // L15215
  hls::stream<float> &v11585 /* v11585[768] */ = A_fifo6[7][6];     // L15216
  hls::stream<float> &v11586 /* v11586[768] */ = B_fifo6[6][7];     // L15217
  hls::stream<float> &v11587 /* v11587[768] */ = A_fifo6[7][7];     // L15218
  hls::stream<float> &v11588 /* v11588[768] */ = B_fifo6[6][8];     // L15219
  PE_kernel_ffn1_6_7(v11585, v11586, v11587, v11588, v11327, 7, 6); // L15220
  hls::stream<float> &v11589 /* v11589[768] */ = A_fifo6[7][7];     // L15221
  hls::stream<float> &v11590 /* v11590[768] */ = B_fifo6[7][7];     // L15222
  hls::stream<float> &v11591 /* v11591[768] */ = A_fifo6[7][8];     // L15223
  hls::stream<float> &v11592 /* v11592[768] */ = B_fifo6[7][8];     // L15224
  PE_kernel_ffn1_7_7(v11589, v11590, v11591, v11592, v11327, 7, 7); // L15225
l_data_drain_k461:
  for (int k461 = 0; k461 < 768; k461++) { // L15226
  l_S_m_4_m13:
    for (int m13 = 0; m13 < 8; m13++) { // L15227
      float v11595 =
          A_fifo6[m13][8].read(); // A_fifo6[m13][8][k461];	// L15228
      A_drain6[m13] = v11595;     // L15229
    }
  l_S_n_5_n13:
    for (int n13 = 0; n13 < 8; n13++) { // L15231
      float v11597 =
          B_fifo6[n13][8].read(); // B_fifo6[n13][8][k461];	// L15232
      B_drain6[n13] = v11597;     // L15233
    }
  }
}

void systolic_ffn1(float v11598[64][768], float v11599[768][3072],
                   float v11600[64][3072]) { // L15238
  float local_A6[8][768];                    // L15239
#pragma HLS array_partition variable = local_A6 complete dim = 1

  float local_B6[768][8]; // L15240
#pragma HLS array_partition variable = local_B6 complete dim = 2

  float local_C6[8][8]; // L15241
#pragma HLS array_partition variable = local_C6 complete dim = 1
#pragma HLS array_partition variable = local_C6 complete dim = 2

l_outer_tile_mi6:
  for (int mi6 = 0; mi6 < 8; mi6++) { // L15242
  l_ni6:
    for (int ni6 = 0; ni6 < 384; ni6++) { // L15243
                                          // #pragma HLS dataflow
    l_load_A_tile_ak6:
      for (int ak6 = 0; ak6 < 768; ak6++) { // L15244
      l_ai6:
        for (int ai6 = 0; ai6 < 8; ai6++) { // L15245
#pragma HLS pipeline II = 1
          ap_int<33> v11608 = ni6;                         // L15246
          bool v11609 = v11608 == 0;                       // L15249
          if (v11609) {                                    // L15250
            float v11610 = v11598[((mi6 * 8) + ai6)][ak6]; // L15251
            local_A6[ai6][ak6] = v11610;                   // L15252
          }
        }
      }
    l_load_B_tile_bk6:
      for (int bk6 = 0; bk6 < 768; bk6++) { // L15256
      l_bj6:
        for (int bj6 = 0; bj6 < 8; bj6++) { // L15257
#pragma HLS pipeline II = 1
          float v11613 = v11599[bk6][((ni6 * 8) + bj6)]; // L15258
          local_B6[bk6][bj6] = v11613;                   // L15259
        }
      }
      systolic_tile_ffn1(local_A6, local_B6, local_C6); // L15262
    l_store_C_tile_sj6:
      for (int sj6 = 0; sj6 < 8; sj6++) { // L15263
      l_si6:
        for (int si6 = 0; si6 < 8; si6++) { // L15264
#pragma HLS pipeline II = 1
          float v11616 = local_C6[si6][sj6];                     // L15265
          v11600[((mi6 * 8) + si6)][((ni6 * 8) + sj6)] = v11616; // L15266
        }
      }
    }
  }
}

void bias_add_1(float v11617[64][3072], float v11618[3072],
                float v11619[64][3072]) { // L15273
l_S_i_j_0_i10:
  for (int i10 = 0; i10 < 64; i10++) { // L15275
  l_j9:
    for (int j9 = 0; j9 < 3072; j9++) { // L15276
      float v11622 = v11617[i10][j9];   // L15277
      float v11623 = v11618[j9];        // L15278
      float v11624 = v11622 + v11623;   // L15279
      v11619[i10][j9] = v11624;         // L15280
    }
  }
}

void GeLU(float v11625[64][3072],
          float v11626[64][3072]) { // L15285
l_gelu_i11:
  for (int i11 = 0; i11 < 64; i11++) { // L15287
  l_j10:
    for (int j10 = 0; j10 < 3072; j10++) {  // L15288
      float v11629 = v11625[i11][j10];      // L15289
      float v11630 = v11629 * 0.500000;     // L15291
      float v11631 = pow(v11629, 3.000000); // L15293
      float v11632 = v11631 * 0.044715;     // L15295
      float v11633 = v11629 + v11632;       // L15296
      float v11634 = v11633 * 0.797885;     // L15298
      float v11635 = tanh(v11634);          // L15299
      float v11636 = v11635 + 1.000000;     // L15301
      float v11637 = v11630 * v11636;       // L15302
      v11626[i11][j10] = v11637;            // L15303
    }
  }
}

void PE_kernel_ffn2_0_0(hls::stream<float> &v11638 /* v11638[3072] */,
                        hls::stream<float> &v11639 /* v11639[3072] */,
                        hls::stream<float> &v11640 /* v11640[3072] */,
                        hls::stream<float> &v11641 /* v11641[3072] */,
                        float v11642[8][8], int v11643,
                        int v11644) { // L15308
#pragma HLS stream variable = v11638 depth = 9
#pragma HLS stream variable = v11639 depth = 9
#pragma HLS stream variable = v11640 depth = 9
#pragma HLS stream variable = v11641 depth = 9
#pragma HLS array_partition variable = v11642 complete dim = 1
#pragma HLS array_partition variable = v11642 complete dim = 2

  float v448;      // L15311
  v448 = 0.000000; // L15312
l_S_k_0_k462:
  for (int k462 = 0; k462 < 3072; k462++) { // L15313
    float v11647 = v11638.read();           // v11638[k462];	// L15314
    float a448;                             // L15315
    a448 = v11647;                          // L15316
    float v11649 = v11639.read();           // v11639[k462];	// L15317
    float b448;                             // L15318
    b448 = v11649;                          // L15319
    float v11651 = a448;                    // L15320
    float v11652 = b448;                    // L15321
    float v11653 = v11651 * v11652;         // L15322
    float v11654 = v448;                    // L15323
    float v11655 = v11654 + v11653;         // L15324
    v448 = v11655;                          // L15325
    float v11656 = a448;                    // L15326
    v11640.write(v11656);                   // v11640[k462] = v11656;	// L15327
    float v11657 = b448;                    // L15328
    v11641.write(v11657);                   // v11641[k462] = v11657;	// L15329
  }
  float v11658 = v448;             // L15331
  v11642[v11643][v11644] = v11658; // L15332
}

void PE_kernel_ffn2_1_0(hls::stream<float> &v11659 /* v11659[3072] */,
                        hls::stream<float> &v11660 /* v11660[3072] */,
                        hls::stream<float> &v11661 /* v11661[3072] */,
                        hls::stream<float> &v11662 /* v11662[3072] */,
                        float v11663[8][8], int v11664,
                        int v11665) { // L15335
#pragma HLS stream variable = v11659 depth = 9
#pragma HLS stream variable = v11660 depth = 9
#pragma HLS stream variable = v11661 depth = 9
#pragma HLS stream variable = v11662 depth = 9
#pragma HLS array_partition variable = v11663 complete dim = 1
#pragma HLS array_partition variable = v11663 complete dim = 2

  float v449;      // L15338
  v449 = 0.000000; // L15339
l_S_k_0_k463:
  for (int k463 = 0; k463 < 3072; k463++) { // L15340
    float v11668 = v11659.read();           // v11659[k463];	// L15341
    float a449;                             // L15342
    a449 = v11668;                          // L15343
    float v11670 = v11660.read();           // v11660[k463];	// L15344
    float b449;                             // L15345
    b449 = v11670;                          // L15346
    float v11672 = a449;                    // L15347
    float v11673 = b449;                    // L15348
    float v11674 = v11672 * v11673;         // L15349
    float v11675 = v449;                    // L15350
    float v11676 = v11675 + v11674;         // L15351
    v449 = v11676;                          // L15352
    float v11677 = a449;                    // L15353
    v11661.write(v11677);                   // v11661[k463] = v11677;	// L15354
    float v11678 = b449;                    // L15355
    v11662.write(v11678);                   // v11662[k463] = v11678;	// L15356
  }
  float v11679 = v449;             // L15358
  v11663[v11664][v11665] = v11679; // L15359
}

void PE_kernel_ffn2_2_0(hls::stream<float> &v11680 /* v11680[3072] */,
                        hls::stream<float> &v11681 /* v11681[3072] */,
                        hls::stream<float> &v11682 /* v11682[3072] */,
                        hls::stream<float> &v11683 /* v11683[3072] */,
                        float v11684[8][8], int v11685,
                        int v11686) { // L15362
#pragma HLS stream variable = v11680 depth = 9
#pragma HLS stream variable = v11681 depth = 9
#pragma HLS stream variable = v11682 depth = 9
#pragma HLS stream variable = v11683 depth = 9
#pragma HLS array_partition variable = v11684 complete dim = 1
#pragma HLS array_partition variable = v11684 complete dim = 2

  float v450;      // L15365
  v450 = 0.000000; // L15366
l_S_k_0_k464:
  for (int k464 = 0; k464 < 3072; k464++) { // L15367
    float v11689 = v11680.read();           // v11680[k464];	// L15368
    float a450;                             // L15369
    a450 = v11689;                          // L15370
    float v11691 = v11681.read();           // v11681[k464];	// L15371
    float b450;                             // L15372
    b450 = v11691;                          // L15373
    float v11693 = a450;                    // L15374
    float v11694 = b450;                    // L15375
    float v11695 = v11693 * v11694;         // L15376
    float v11696 = v450;                    // L15377
    float v11697 = v11696 + v11695;         // L15378
    v450 = v11697;                          // L15379
    float v11698 = a450;                    // L15380
    v11682.write(v11698);                   // v11682[k464] = v11698;	// L15381
    float v11699 = b450;                    // L15382
    v11683.write(v11699);                   // v11683[k464] = v11699;	// L15383
  }
  float v11700 = v450;             // L15385
  v11684[v11685][v11686] = v11700; // L15386
}

void PE_kernel_ffn2_3_0(hls::stream<float> &v11701 /* v11701[3072] */,
                        hls::stream<float> &v11702 /* v11702[3072] */,
                        hls::stream<float> &v11703 /* v11703[3072] */,
                        hls::stream<float> &v11704 /* v11704[3072] */,
                        float v11705[8][8], int v11706,
                        int v11707) { // L15389
#pragma HLS stream variable = v11701 depth = 9
#pragma HLS stream variable = v11702 depth = 9
#pragma HLS stream variable = v11703 depth = 9
#pragma HLS stream variable = v11704 depth = 9
#pragma HLS array_partition variable = v11705 complete dim = 1
#pragma HLS array_partition variable = v11705 complete dim = 2

  float v451;      // L15392
  v451 = 0.000000; // L15393
l_S_k_0_k465:
  for (int k465 = 0; k465 < 3072; k465++) { // L15394
    float v11710 = v11701.read();           // v11701[k465];	// L15395
    float a451;                             // L15396
    a451 = v11710;                          // L15397
    float v11712 = v11702.read();           // v11702[k465];	// L15398
    float b451;                             // L15399
    b451 = v11712;                          // L15400
    float v11714 = a451;                    // L15401
    float v11715 = b451;                    // L15402
    float v11716 = v11714 * v11715;         // L15403
    float v11717 = v451;                    // L15404
    float v11718 = v11717 + v11716;         // L15405
    v451 = v11718;                          // L15406
    float v11719 = a451;                    // L15407
    v11703.write(v11719);                   // v11703[k465] = v11719;	// L15408
    float v11720 = b451;                    // L15409
    v11704.write(v11720);                   // v11704[k465] = v11720;	// L15410
  }
  float v11721 = v451;             // L15412
  v11705[v11706][v11707] = v11721; // L15413
}

void PE_kernel_ffn2_4_0(hls::stream<float> &v11722 /* v11722[3072] */,
                        hls::stream<float> &v11723 /* v11723[3072] */,
                        hls::stream<float> &v11724 /* v11724[3072] */,
                        hls::stream<float> &v11725 /* v11725[3072] */,
                        float v11726[8][8], int v11727,
                        int v11728) { // L15416
#pragma HLS stream variable = v11722 depth = 9
#pragma HLS stream variable = v11723 depth = 9
#pragma HLS stream variable = v11724 depth = 9
#pragma HLS stream variable = v11725 depth = 9
#pragma HLS array_partition variable = v11726 complete dim = 1
#pragma HLS array_partition variable = v11726 complete dim = 2

  float v452;      // L15419
  v452 = 0.000000; // L15420
l_S_k_0_k466:
  for (int k466 = 0; k466 < 3072; k466++) { // L15421
    float v11731 = v11722.read();           // v11722[k466];	// L15422
    float a452;                             // L15423
    a452 = v11731;                          // L15424
    float v11733 = v11723.read();           // v11723[k466];	// L15425
    float b452;                             // L15426
    b452 = v11733;                          // L15427
    float v11735 = a452;                    // L15428
    float v11736 = b452;                    // L15429
    float v11737 = v11735 * v11736;         // L15430
    float v11738 = v452;                    // L15431
    float v11739 = v11738 + v11737;         // L15432
    v452 = v11739;                          // L15433
    float v11740 = a452;                    // L15434
    v11724.write(v11740);                   // v11724[k466] = v11740;	// L15435
    float v11741 = b452;                    // L15436
    v11725.write(v11741);                   // v11725[k466] = v11741;	// L15437
  }
  float v11742 = v452;             // L15439
  v11726[v11727][v11728] = v11742; // L15440
}

void PE_kernel_ffn2_5_0(hls::stream<float> &v11743 /* v11743[3072] */,
                        hls::stream<float> &v11744 /* v11744[3072] */,
                        hls::stream<float> &v11745 /* v11745[3072] */,
                        hls::stream<float> &v11746 /* v11746[3072] */,
                        float v11747[8][8], int v11748,
                        int v11749) { // L15443
#pragma HLS stream variable = v11743 depth = 9
#pragma HLS stream variable = v11744 depth = 9
#pragma HLS stream variable = v11745 depth = 9
#pragma HLS stream variable = v11746 depth = 9
#pragma HLS array_partition variable = v11747 complete dim = 1
#pragma HLS array_partition variable = v11747 complete dim = 2

  float v453;      // L15446
  v453 = 0.000000; // L15447
l_S_k_0_k467:
  for (int k467 = 0; k467 < 3072; k467++) { // L15448
    float v11752 = v11743.read();           // v11743[k467];	// L15449
    float a453;                             // L15450
    a453 = v11752;                          // L15451
    float v11754 = v11744.read();           // v11744[k467];	// L15452
    float b453;                             // L15453
    b453 = v11754;                          // L15454
    float v11756 = a453;                    // L15455
    float v11757 = b453;                    // L15456
    float v11758 = v11756 * v11757;         // L15457
    float v11759 = v453;                    // L15458
    float v11760 = v11759 + v11758;         // L15459
    v453 = v11760;                          // L15460
    float v11761 = a453;                    // L15461
    v11745.write(v11761);                   // v11745[k467] = v11761;	// L15462
    float v11762 = b453;                    // L15463
    v11746.write(v11762);                   // v11746[k467] = v11762;	// L15464
  }
  float v11763 = v453;             // L15466
  v11747[v11748][v11749] = v11763; // L15467
}

void PE_kernel_ffn2_6_0(hls::stream<float> &v11764 /* v11764[3072] */,
                        hls::stream<float> &v11765 /* v11765[3072] */,
                        hls::stream<float> &v11766 /* v11766[3072] */,
                        hls::stream<float> &v11767 /* v11767[3072] */,
                        float v11768[8][8], int v11769,
                        int v11770) { // L15470
#pragma HLS stream variable = v11764 depth = 9
#pragma HLS stream variable = v11765 depth = 9
#pragma HLS stream variable = v11766 depth = 9
#pragma HLS stream variable = v11767 depth = 9
#pragma HLS array_partition variable = v11768 complete dim = 1
#pragma HLS array_partition variable = v11768 complete dim = 2

  float v454;      // L15473
  v454 = 0.000000; // L15474
l_S_k_0_k468:
  for (int k468 = 0; k468 < 3072; k468++) { // L15475
    float v11773 = v11764.read();           // v11764[k468];	// L15476
    float a454;                             // L15477
    a454 = v11773;                          // L15478
    float v11775 = v11765.read();           // v11765[k468];	// L15479
    float b454;                             // L15480
    b454 = v11775;                          // L15481
    float v11777 = a454;                    // L15482
    float v11778 = b454;                    // L15483
    float v11779 = v11777 * v11778;         // L15484
    float v11780 = v454;                    // L15485
    float v11781 = v11780 + v11779;         // L15486
    v454 = v11781;                          // L15487
    float v11782 = a454;                    // L15488
    v11766.write(v11782);                   // v11766[k468] = v11782;	// L15489
    float v11783 = b454;                    // L15490
    v11767.write(v11783);                   // v11767[k468] = v11783;	// L15491
  }
  float v11784 = v454;             // L15493
  v11768[v11769][v11770] = v11784; // L15494
}

void PE_kernel_ffn2_7_0(hls::stream<float> &v11785 /* v11785[3072] */,
                        hls::stream<float> &v11786 /* v11786[3072] */,
                        hls::stream<float> &v11787 /* v11787[3072] */,
                        hls::stream<float> &v11788 /* v11788[3072] */,
                        float v11789[8][8], int v11790,
                        int v11791) { // L15497
#pragma HLS stream variable = v11785 depth = 9
#pragma HLS stream variable = v11786 depth = 9
#pragma HLS stream variable = v11787 depth = 9
#pragma HLS stream variable = v11788 depth = 9
#pragma HLS array_partition variable = v11789 complete dim = 1
#pragma HLS array_partition variable = v11789 complete dim = 2

  float v455;      // L15500
  v455 = 0.000000; // L15501
l_S_k_0_k469:
  for (int k469 = 0; k469 < 3072; k469++) { // L15502
    float v11794 = v11785.read();           // v11785[k469];	// L15503
    float a455;                             // L15504
    a455 = v11794;                          // L15505
    float v11796 = v11786.read();           // v11786[k469];	// L15506
    float b455;                             // L15507
    b455 = v11796;                          // L15508
    float v11798 = a455;                    // L15509
    float v11799 = b455;                    // L15510
    float v11800 = v11798 * v11799;         // L15511
    float v11801 = v455;                    // L15512
    float v11802 = v11801 + v11800;         // L15513
    v455 = v11802;                          // L15514
    float v11803 = a455;                    // L15515
    v11787.write(v11803);                   // v11787[k469] = v11803;	// L15516
    float v11804 = b455;                    // L15517
    v11788.write(v11804);                   // v11788[k469] = v11804;	// L15518
  }
  float v11805 = v455;             // L15520
  v11789[v11790][v11791] = v11805; // L15521
}

void PE_kernel_ffn2_0_1(hls::stream<float> &v11806 /* v11806[3072] */,
                        hls::stream<float> &v11807 /* v11807[3072] */,
                        hls::stream<float> &v11808 /* v11808[3072] */,
                        hls::stream<float> &v11809 /* v11809[3072] */,
                        float v11810[8][8], int v11811,
                        int v11812) { // L15524
#pragma HLS stream variable = v11806 depth = 9
#pragma HLS stream variable = v11807 depth = 9
#pragma HLS stream variable = v11808 depth = 9
#pragma HLS stream variable = v11809 depth = 9
#pragma HLS array_partition variable = v11810 complete dim = 1
#pragma HLS array_partition variable = v11810 complete dim = 2

  float v456;      // L15527
  v456 = 0.000000; // L15528
l_S_k_0_k470:
  for (int k470 = 0; k470 < 3072; k470++) { // L15529
    float v11815 = v11806.read();           // v11806[k470];	// L15530
    float a456;                             // L15531
    a456 = v11815;                          // L15532
    float v11817 = v11807.read();           // v11807[k470];	// L15533
    float b456;                             // L15534
    b456 = v11817;                          // L15535
    float v11819 = a456;                    // L15536
    float v11820 = b456;                    // L15537
    float v11821 = v11819 * v11820;         // L15538
    float v11822 = v456;                    // L15539
    float v11823 = v11822 + v11821;         // L15540
    v456 = v11823;                          // L15541
    float v11824 = a456;                    // L15542
    v11808.write(v11824);                   // v11808[k470] = v11824;	// L15543
    float v11825 = b456;                    // L15544
    v11809.write(v11825);                   // v11809[k470] = v11825;	// L15545
  }
  float v11826 = v456;             // L15547
  v11810[v11811][v11812] = v11826; // L15548
}

void PE_kernel_ffn2_1_1(hls::stream<float> &v11827 /* v11827[3072] */,
                        hls::stream<float> &v11828 /* v11828[3072] */,
                        hls::stream<float> &v11829 /* v11829[3072] */,
                        hls::stream<float> &v11830 /* v11830[3072] */,
                        float v11831[8][8], int v11832,
                        int v11833) { // L15551
#pragma HLS stream variable = v11827 depth = 9
#pragma HLS stream variable = v11828 depth = 9
#pragma HLS stream variable = v11829 depth = 9
#pragma HLS stream variable = v11830 depth = 9
#pragma HLS array_partition variable = v11831 complete dim = 1
#pragma HLS array_partition variable = v11831 complete dim = 2

  float v457;      // L15554
  v457 = 0.000000; // L15555
l_S_k_0_k471:
  for (int k471 = 0; k471 < 3072; k471++) { // L15556
    float v11836 = v11827.read();           // v11827[k471];	// L15557
    float a457;                             // L15558
    a457 = v11836;                          // L15559
    float v11838 = v11828.read();           // v11828[k471];	// L15560
    float b457;                             // L15561
    b457 = v11838;                          // L15562
    float v11840 = a457;                    // L15563
    float v11841 = b457;                    // L15564
    float v11842 = v11840 * v11841;         // L15565
    float v11843 = v457;                    // L15566
    float v11844 = v11843 + v11842;         // L15567
    v457 = v11844;                          // L15568
    float v11845 = a457;                    // L15569
    v11829.write(v11845);                   // v11829[k471] = v11845;	// L15570
    float v11846 = b457;                    // L15571
    v11830.write(v11846);                   // v11830[k471] = v11846;	// L15572
  }
  float v11847 = v457;             // L15574
  v11831[v11832][v11833] = v11847; // L15575
}

void PE_kernel_ffn2_2_1(hls::stream<float> &v11848 /* v11848[3072] */,
                        hls::stream<float> &v11849 /* v11849[3072] */,
                        hls::stream<float> &v11850 /* v11850[3072] */,
                        hls::stream<float> &v11851 /* v11851[3072] */,
                        float v11852[8][8], int v11853,
                        int v11854) { // L15578
#pragma HLS stream variable = v11848 depth = 9
#pragma HLS stream variable = v11849 depth = 9
#pragma HLS stream variable = v11850 depth = 9
#pragma HLS stream variable = v11851 depth = 9
#pragma HLS array_partition variable = v11852 complete dim = 1
#pragma HLS array_partition variable = v11852 complete dim = 2

  float v458;      // L15581
  v458 = 0.000000; // L15582
l_S_k_0_k472:
  for (int k472 = 0; k472 < 3072; k472++) { // L15583
    float v11857 = v11848.read();           // v11848[k472];	// L15584
    float a458;                             // L15585
    a458 = v11857;                          // L15586
    float v11859 = v11849.read();           // v11849[k472];	// L15587
    float b458;                             // L15588
    b458 = v11859;                          // L15589
    float v11861 = a458;                    // L15590
    float v11862 = b458;                    // L15591
    float v11863 = v11861 * v11862;         // L15592
    float v11864 = v458;                    // L15593
    float v11865 = v11864 + v11863;         // L15594
    v458 = v11865;                          // L15595
    float v11866 = a458;                    // L15596
    v11850.write(v11866);                   // v11850[k472] = v11866;	// L15597
    float v11867 = b458;                    // L15598
    v11851.write(v11867);                   // v11851[k472] = v11867;	// L15599
  }
  float v11868 = v458;             // L15601
  v11852[v11853][v11854] = v11868; // L15602
}

void PE_kernel_ffn2_3_1(hls::stream<float> &v11869 /* v11869[3072] */,
                        hls::stream<float> &v11870 /* v11870[3072] */,
                        hls::stream<float> &v11871 /* v11871[3072] */,
                        hls::stream<float> &v11872 /* v11872[3072] */,
                        float v11873[8][8], int v11874,
                        int v11875) { // L15605
#pragma HLS stream variable = v11869 depth = 9
#pragma HLS stream variable = v11870 depth = 9
#pragma HLS stream variable = v11871 depth = 9
#pragma HLS stream variable = v11872 depth = 9
#pragma HLS array_partition variable = v11873 complete dim = 1
#pragma HLS array_partition variable = v11873 complete dim = 2

  float v459;      // L15608
  v459 = 0.000000; // L15609
l_S_k_0_k473:
  for (int k473 = 0; k473 < 3072; k473++) { // L15610
    float v11878 = v11869.read();           // v11869[k473];	// L15611
    float a459;                             // L15612
    a459 = v11878;                          // L15613
    float v11880 = v11870.read();           // v11870[k473];	// L15614
    float b459;                             // L15615
    b459 = v11880;                          // L15616
    float v11882 = a459;                    // L15617
    float v11883 = b459;                    // L15618
    float v11884 = v11882 * v11883;         // L15619
    float v11885 = v459;                    // L15620
    float v11886 = v11885 + v11884;         // L15621
    v459 = v11886;                          // L15622
    float v11887 = a459;                    // L15623
    v11871.write(v11887);                   // v11871[k473] = v11887;	// L15624
    float v11888 = b459;                    // L15625
    v11872.write(v11888);                   // v11872[k473] = v11888;	// L15626
  }
  float v11889 = v459;             // L15628
  v11873[v11874][v11875] = v11889; // L15629
}

void PE_kernel_ffn2_4_1(hls::stream<float> &v11890 /* v11890[3072] */,
                        hls::stream<float> &v11891 /* v11891[3072] */,
                        hls::stream<float> &v11892 /* v11892[3072] */,
                        hls::stream<float> &v11893 /* v11893[3072] */,
                        float v11894[8][8], int v11895,
                        int v11896) { // L15632
#pragma HLS stream variable = v11890 depth = 9
#pragma HLS stream variable = v11891 depth = 9
#pragma HLS stream variable = v11892 depth = 9
#pragma HLS stream variable = v11893 depth = 9
#pragma HLS array_partition variable = v11894 complete dim = 1
#pragma HLS array_partition variable = v11894 complete dim = 2

  float v460;      // L15635
  v460 = 0.000000; // L15636
l_S_k_0_k474:
  for (int k474 = 0; k474 < 3072; k474++) { // L15637
    float v11899 = v11890.read();           // v11890[k474];	// L15638
    float a460;                             // L15639
    a460 = v11899;                          // L15640
    float v11901 = v11891.read();           // v11891[k474];	// L15641
    float b460;                             // L15642
    b460 = v11901;                          // L15643
    float v11903 = a460;                    // L15644
    float v11904 = b460;                    // L15645
    float v11905 = v11903 * v11904;         // L15646
    float v11906 = v460;                    // L15647
    float v11907 = v11906 + v11905;         // L15648
    v460 = v11907;                          // L15649
    float v11908 = a460;                    // L15650
    v11892.write(v11908);                   // v11892[k474] = v11908;	// L15651
    float v11909 = b460;                    // L15652
    v11893.write(v11909);                   // v11893[k474] = v11909;	// L15653
  }
  float v11910 = v460;             // L15655
  v11894[v11895][v11896] = v11910; // L15656
}

void PE_kernel_ffn2_5_1(hls::stream<float> &v11911 /* v11911[3072] */,
                        hls::stream<float> &v11912 /* v11912[3072] */,
                        hls::stream<float> &v11913 /* v11913[3072] */,
                        hls::stream<float> &v11914 /* v11914[3072] */,
                        float v11915[8][8], int v11916,
                        int v11917) { // L15659
#pragma HLS stream variable = v11911 depth = 9
#pragma HLS stream variable = v11912 depth = 9
#pragma HLS stream variable = v11913 depth = 9
#pragma HLS stream variable = v11914 depth = 9
#pragma HLS array_partition variable = v11915 complete dim = 1
#pragma HLS array_partition variable = v11915 complete dim = 2

  float v461;      // L15662
  v461 = 0.000000; // L15663
l_S_k_0_k475:
  for (int k475 = 0; k475 < 3072; k475++) { // L15664
    float v11920 = v11911.read();           // v11911[k475];	// L15665
    float a461;                             // L15666
    a461 = v11920;                          // L15667
    float v11922 = v11912.read();           // v11912[k475];	// L15668
    float b461;                             // L15669
    b461 = v11922;                          // L15670
    float v11924 = a461;                    // L15671
    float v11925 = b461;                    // L15672
    float v11926 = v11924 * v11925;         // L15673
    float v11927 = v461;                    // L15674
    float v11928 = v11927 + v11926;         // L15675
    v461 = v11928;                          // L15676
    float v11929 = a461;                    // L15677
    v11913.write(v11929);                   // v11913[k475] = v11929;	// L15678
    float v11930 = b461;                    // L15679
    v11914.write(v11930);                   // v11914[k475] = v11930;	// L15680
  }
  float v11931 = v461;             // L15682
  v11915[v11916][v11917] = v11931; // L15683
}

void PE_kernel_ffn2_6_1(hls::stream<float> &v11932 /* v11932[3072] */,
                        hls::stream<float> &v11933 /* v11933[3072] */,
                        hls::stream<float> &v11934 /* v11934[3072] */,
                        hls::stream<float> &v11935 /* v11935[3072] */,
                        float v11936[8][8], int v11937,
                        int v11938) { // L15686
#pragma HLS stream variable = v11932 depth = 9
#pragma HLS stream variable = v11933 depth = 9
#pragma HLS stream variable = v11934 depth = 9
#pragma HLS stream variable = v11935 depth = 9
#pragma HLS array_partition variable = v11936 complete dim = 1
#pragma HLS array_partition variable = v11936 complete dim = 2

  float v462;      // L15689
  v462 = 0.000000; // L15690
l_S_k_0_k476:
  for (int k476 = 0; k476 < 3072; k476++) { // L15691
    float v11941 = v11932.read();           // v11932[k476];	// L15692
    float a462;                             // L15693
    a462 = v11941;                          // L15694
    float v11943 = v11933.read();           // v11933[k476];	// L15695
    float b462;                             // L15696
    b462 = v11943;                          // L15697
    float v11945 = a462;                    // L15698
    float v11946 = b462;                    // L15699
    float v11947 = v11945 * v11946;         // L15700
    float v11948 = v462;                    // L15701
    float v11949 = v11948 + v11947;         // L15702
    v462 = v11949;                          // L15703
    float v11950 = a462;                    // L15704
    v11934.write(v11950);                   // v11934[k476] = v11950;	// L15705
    float v11951 = b462;                    // L15706
    v11935.write(v11951);                   // v11935[k476] = v11951;	// L15707
  }
  float v11952 = v462;             // L15709
  v11936[v11937][v11938] = v11952; // L15710
}

void PE_kernel_ffn2_7_1(hls::stream<float> &v11953 /* v11953[3072] */,
                        hls::stream<float> &v11954 /* v11954[3072] */,
                        hls::stream<float> &v11955 /* v11955[3072] */,
                        hls::stream<float> &v11956 /* v11956[3072] */,
                        float v11957[8][8], int v11958,
                        int v11959) { // L15713
#pragma HLS stream variable = v11953 depth = 9
#pragma HLS stream variable = v11954 depth = 9
#pragma HLS stream variable = v11955 depth = 9
#pragma HLS stream variable = v11956 depth = 9
#pragma HLS array_partition variable = v11957 complete dim = 1
#pragma HLS array_partition variable = v11957 complete dim = 2

  float v463;      // L15716
  v463 = 0.000000; // L15717
l_S_k_0_k477:
  for (int k477 = 0; k477 < 3072; k477++) { // L15718
    float v11962 = v11953.read();           // v11953[k477];	// L15719
    float a463;                             // L15720
    a463 = v11962;                          // L15721
    float v11964 = v11954.read();           // v11954[k477];	// L15722
    float b463;                             // L15723
    b463 = v11964;                          // L15724
    float v11966 = a463;                    // L15725
    float v11967 = b463;                    // L15726
    float v11968 = v11966 * v11967;         // L15727
    float v11969 = v463;                    // L15728
    float v11970 = v11969 + v11968;         // L15729
    v463 = v11970;                          // L15730
    float v11971 = a463;                    // L15731
    v11955.write(v11971);                   // v11955[k477] = v11971;	// L15732
    float v11972 = b463;                    // L15733
    v11956.write(v11972);                   // v11956[k477] = v11972;	// L15734
  }
  float v11973 = v463;             // L15736
  v11957[v11958][v11959] = v11973; // L15737
}

void PE_kernel_ffn2_0_2(hls::stream<float> &v11974 /* v11974[3072] */,
                        hls::stream<float> &v11975 /* v11975[3072] */,
                        hls::stream<float> &v11976 /* v11976[3072] */,
                        hls::stream<float> &v11977 /* v11977[3072] */,
                        float v11978[8][8], int v11979,
                        int v11980) { // L15740
#pragma HLS stream variable = v11974 depth = 9
#pragma HLS stream variable = v11975 depth = 9
#pragma HLS stream variable = v11976 depth = 9
#pragma HLS stream variable = v11977 depth = 9
#pragma HLS array_partition variable = v11978 complete dim = 1
#pragma HLS array_partition variable = v11978 complete dim = 2

  float v464;      // L15743
  v464 = 0.000000; // L15744
l_S_k_0_k478:
  for (int k478 = 0; k478 < 3072; k478++) { // L15745
    float v11983 = v11974.read();           // v11974[k478];	// L15746
    float a464;                             // L15747
    a464 = v11983;                          // L15748
    float v11985 = v11975.read();           // v11975[k478];	// L15749
    float b464;                             // L15750
    b464 = v11985;                          // L15751
    float v11987 = a464;                    // L15752
    float v11988 = b464;                    // L15753
    float v11989 = v11987 * v11988;         // L15754
    float v11990 = v464;                    // L15755
    float v11991 = v11990 + v11989;         // L15756
    v464 = v11991;                          // L15757
    float v11992 = a464;                    // L15758
    v11976.write(v11992);                   // v11976[k478] = v11992;	// L15759
    float v11993 = b464;                    // L15760
    v11977.write(v11993);                   // v11977[k478] = v11993;	// L15761
  }
  float v11994 = v464;             // L15763
  v11978[v11979][v11980] = v11994; // L15764
}

void PE_kernel_ffn2_1_2(hls::stream<float> &v11995 /* v11995[3072] */,
                        hls::stream<float> &v11996 /* v11996[3072] */,
                        hls::stream<float> &v11997 /* v11997[3072] */,
                        hls::stream<float> &v11998 /* v11998[3072] */,
                        float v11999[8][8], int v12000,
                        int v12001) { // L15767
#pragma HLS stream variable = v11995 depth = 9
#pragma HLS stream variable = v11996 depth = 9
#pragma HLS stream variable = v11997 depth = 9
#pragma HLS stream variable = v11998 depth = 9
#pragma HLS array_partition variable = v11999 complete dim = 1
#pragma HLS array_partition variable = v11999 complete dim = 2

  float v465;      // L15770
  v465 = 0.000000; // L15771
l_S_k_0_k479:
  for (int k479 = 0; k479 < 3072; k479++) { // L15772
    float v12004 = v11995.read();           // v11995[k479];	// L15773
    float a465;                             // L15774
    a465 = v12004;                          // L15775
    float v12006 = v11996.read();           // v11996[k479];	// L15776
    float b465;                             // L15777
    b465 = v12006;                          // L15778
    float v12008 = a465;                    // L15779
    float v12009 = b465;                    // L15780
    float v12010 = v12008 * v12009;         // L15781
    float v12011 = v465;                    // L15782
    float v12012 = v12011 + v12010;         // L15783
    v465 = v12012;                          // L15784
    float v12013 = a465;                    // L15785
    v11997.write(v12013);                   // v11997[k479] = v12013;	// L15786
    float v12014 = b465;                    // L15787
    v11998.write(v12014);                   // v11998[k479] = v12014;	// L15788
  }
  float v12015 = v465;             // L15790
  v11999[v12000][v12001] = v12015; // L15791
}

void PE_kernel_ffn2_2_2(hls::stream<float> &v12016 /* v12016[3072] */,
                        hls::stream<float> &v12017 /* v12017[3072] */,
                        hls::stream<float> &v12018 /* v12018[3072] */,
                        hls::stream<float> &v12019 /* v12019[3072] */,
                        float v12020[8][8], int v12021,
                        int v12022) { // L15794
#pragma HLS stream variable = v12016 depth = 9
#pragma HLS stream variable = v12017 depth = 9
#pragma HLS stream variable = v12018 depth = 9
#pragma HLS stream variable = v12019 depth = 9
#pragma HLS array_partition variable = v12020 complete dim = 1
#pragma HLS array_partition variable = v12020 complete dim = 2

  float v466;      // L15797
  v466 = 0.000000; // L15798
l_S_k_0_k480:
  for (int k480 = 0; k480 < 3072; k480++) { // L15799
    float v12025 = v12016.read();           // v12016[k480];	// L15800
    float a466;                             // L15801
    a466 = v12025;                          // L15802
    float v12027 = v12017.read();           // v12017[k480];	// L15803
    float b466;                             // L15804
    b466 = v12027;                          // L15805
    float v12029 = a466;                    // L15806
    float v12030 = b466;                    // L15807
    float v12031 = v12029 * v12030;         // L15808
    float v12032 = v466;                    // L15809
    float v12033 = v12032 + v12031;         // L15810
    v466 = v12033;                          // L15811
    float v12034 = a466;                    // L15812
    v12018.write(v12034);                   // v12018[k480] = v12034;	// L15813
    float v12035 = b466;                    // L15814
    v12019.write(v12035);                   // v12019[k480] = v12035;	// L15815
  }
  float v12036 = v466;             // L15817
  v12020[v12021][v12022] = v12036; // L15818
}

void PE_kernel_ffn2_3_2(hls::stream<float> &v12037 /* v12037[3072] */,
                        hls::stream<float> &v12038 /* v12038[3072] */,
                        hls::stream<float> &v12039 /* v12039[3072] */,
                        hls::stream<float> &v12040 /* v12040[3072] */,
                        float v12041[8][8], int v12042,
                        int v12043) { // L15821
#pragma HLS stream variable = v12037 depth = 9
#pragma HLS stream variable = v12038 depth = 9
#pragma HLS stream variable = v12039 depth = 9
#pragma HLS stream variable = v12040 depth = 9
#pragma HLS array_partition variable = v12041 complete dim = 1
#pragma HLS array_partition variable = v12041 complete dim = 2

  float v467;      // L15824
  v467 = 0.000000; // L15825
l_S_k_0_k481:
  for (int k481 = 0; k481 < 3072; k481++) { // L15826
    float v12046 = v12037.read();           // v12037[k481];	// L15827
    float a467;                             // L15828
    a467 = v12046;                          // L15829
    float v12048 = v12038.read();           // v12038[k481];	// L15830
    float b467;                             // L15831
    b467 = v12048;                          // L15832
    float v12050 = a467;                    // L15833
    float v12051 = b467;                    // L15834
    float v12052 = v12050 * v12051;         // L15835
    float v12053 = v467;                    // L15836
    float v12054 = v12053 + v12052;         // L15837
    v467 = v12054;                          // L15838
    float v12055 = a467;                    // L15839
    v12039.write(v12055);                   // v12039[k481] = v12055;	// L15840
    float v12056 = b467;                    // L15841
    v12040.write(v12056);                   // v12040[k481] = v12056;	// L15842
  }
  float v12057 = v467;             // L15844
  v12041[v12042][v12043] = v12057; // L15845
}

void PE_kernel_ffn2_4_2(hls::stream<float> &v12058 /* v12058[3072] */,
                        hls::stream<float> &v12059 /* v12059[3072] */,
                        hls::stream<float> &v12060 /* v12060[3072] */,
                        hls::stream<float> &v12061 /* v12061[3072] */,
                        float v12062[8][8], int v12063,
                        int v12064) { // L15848
#pragma HLS stream variable = v12058 depth = 9
#pragma HLS stream variable = v12059 depth = 9
#pragma HLS stream variable = v12060 depth = 9
#pragma HLS stream variable = v12061 depth = 9
#pragma HLS array_partition variable = v12062 complete dim = 1
#pragma HLS array_partition variable = v12062 complete dim = 2

  float v468;      // L15851
  v468 = 0.000000; // L15852
l_S_k_0_k482:
  for (int k482 = 0; k482 < 3072; k482++) { // L15853
    float v12067 = v12058.read();           // v12058[k482];	// L15854
    float a468;                             // L15855
    a468 = v12067;                          // L15856
    float v12069 = v12059.read();           // v12059[k482];	// L15857
    float b468;                             // L15858
    b468 = v12069;                          // L15859
    float v12071 = a468;                    // L15860
    float v12072 = b468;                    // L15861
    float v12073 = v12071 * v12072;         // L15862
    float v12074 = v468;                    // L15863
    float v12075 = v12074 + v12073;         // L15864
    v468 = v12075;                          // L15865
    float v12076 = a468;                    // L15866
    v12060.write(v12076);                   // v12060[k482] = v12076;	// L15867
    float v12077 = b468;                    // L15868
    v12061.write(v12077);                   // v12061[k482] = v12077;	// L15869
  }
  float v12078 = v468;             // L15871
  v12062[v12063][v12064] = v12078; // L15872
}

void PE_kernel_ffn2_5_2(hls::stream<float> &v12079 /* v12079[3072] */,
                        hls::stream<float> &v12080 /* v12080[3072] */,
                        hls::stream<float> &v12081 /* v12081[3072] */,
                        hls::stream<float> &v12082 /* v12082[3072] */,
                        float v12083[8][8], int v12084,
                        int v12085) { // L15875
#pragma HLS stream variable = v12079 depth = 9
#pragma HLS stream variable = v12080 depth = 9
#pragma HLS stream variable = v12081 depth = 9
#pragma HLS stream variable = v12082 depth = 9
#pragma HLS array_partition variable = v12083 complete dim = 1
#pragma HLS array_partition variable = v12083 complete dim = 2

  float v469;      // L15878
  v469 = 0.000000; // L15879
l_S_k_0_k483:
  for (int k483 = 0; k483 < 3072; k483++) { // L15880
    float v12088 = v12079.read();           // v12079[k483];	// L15881
    float a469;                             // L15882
    a469 = v12088;                          // L15883
    float v12090 = v12080.read();           // v12080[k483];	// L15884
    float b469;                             // L15885
    b469 = v12090;                          // L15886
    float v12092 = a469;                    // L15887
    float v12093 = b469;                    // L15888
    float v12094 = v12092 * v12093;         // L15889
    float v12095 = v469;                    // L15890
    float v12096 = v12095 + v12094;         // L15891
    v469 = v12096;                          // L15892
    float v12097 = a469;                    // L15893
    v12081.write(v12097);                   // v12081[k483] = v12097;	// L15894
    float v12098 = b469;                    // L15895
    v12082.write(v12098);                   // v12082[k483] = v12098;	// L15896
  }
  float v12099 = v469;             // L15898
  v12083[v12084][v12085] = v12099; // L15899
}

void PE_kernel_ffn2_6_2(hls::stream<float> &v12100 /* v12100[3072] */,
                        hls::stream<float> &v12101 /* v12101[3072] */,
                        hls::stream<float> &v12102 /* v12102[3072] */,
                        hls::stream<float> &v12103 /* v12103[3072] */,
                        float v12104[8][8], int v12105,
                        int v12106) { // L15902
#pragma HLS stream variable = v12100 depth = 9
#pragma HLS stream variable = v12101 depth = 9
#pragma HLS stream variable = v12102 depth = 9
#pragma HLS stream variable = v12103 depth = 9
#pragma HLS array_partition variable = v12104 complete dim = 1
#pragma HLS array_partition variable = v12104 complete dim = 2

  float v470;      // L15905
  v470 = 0.000000; // L15906
l_S_k_0_k484:
  for (int k484 = 0; k484 < 3072; k484++) { // L15907
    float v12109 = v12100.read();           // v12100[k484];	// L15908
    float a470;                             // L15909
    a470 = v12109;                          // L15910
    float v12111 = v12101.read();           // v12101[k484];	// L15911
    float b470;                             // L15912
    b470 = v12111;                          // L15913
    float v12113 = a470;                    // L15914
    float v12114 = b470;                    // L15915
    float v12115 = v12113 * v12114;         // L15916
    float v12116 = v470;                    // L15917
    float v12117 = v12116 + v12115;         // L15918
    v470 = v12117;                          // L15919
    float v12118 = a470;                    // L15920
    v12102.write(v12118);                   // v12102[k484] = v12118;	// L15921
    float v12119 = b470;                    // L15922
    v12103.write(v12119);                   // v12103[k484] = v12119;	// L15923
  }
  float v12120 = v470;             // L15925
  v12104[v12105][v12106] = v12120; // L15926
}

void PE_kernel_ffn2_7_2(hls::stream<float> &v12121 /* v12121[3072] */,
                        hls::stream<float> &v12122 /* v12122[3072] */,
                        hls::stream<float> &v12123 /* v12123[3072] */,
                        hls::stream<float> &v12124 /* v12124[3072] */,
                        float v12125[8][8], int v12126,
                        int v12127) { // L15929
#pragma HLS stream variable = v12121 depth = 9
#pragma HLS stream variable = v12122 depth = 9
#pragma HLS stream variable = v12123 depth = 9
#pragma HLS stream variable = v12124 depth = 9
#pragma HLS array_partition variable = v12125 complete dim = 1
#pragma HLS array_partition variable = v12125 complete dim = 2

  float v471;      // L15932
  v471 = 0.000000; // L15933
l_S_k_0_k485:
  for (int k485 = 0; k485 < 3072; k485++) { // L15934
    float v12130 = v12121.read();           // v12121[k485];	// L15935
    float a471;                             // L15936
    a471 = v12130;                          // L15937
    float v12132 = v12122.read();           // v12122[k485];	// L15938
    float b471;                             // L15939
    b471 = v12132;                          // L15940
    float v12134 = a471;                    // L15941
    float v12135 = b471;                    // L15942
    float v12136 = v12134 * v12135;         // L15943
    float v12137 = v471;                    // L15944
    float v12138 = v12137 + v12136;         // L15945
    v471 = v12138;                          // L15946
    float v12139 = a471;                    // L15947
    v12123.write(v12139);                   // v12123[k485] = v12139;	// L15948
    float v12140 = b471;                    // L15949
    v12124.write(v12140);                   // v12124[k485] = v12140;	// L15950
  }
  float v12141 = v471;             // L15952
  v12125[v12126][v12127] = v12141; // L15953
}

void PE_kernel_ffn2_0_3(hls::stream<float> &v12142 /* v12142[3072] */,
                        hls::stream<float> &v12143 /* v12143[3072] */,
                        hls::stream<float> &v12144 /* v12144[3072] */,
                        hls::stream<float> &v12145 /* v12145[3072] */,
                        float v12146[8][8], int v12147,
                        int v12148) { // L15956
#pragma HLS stream variable = v12142 depth = 9
#pragma HLS stream variable = v12143 depth = 9
#pragma HLS stream variable = v12144 depth = 9
#pragma HLS stream variable = v12145 depth = 9
#pragma HLS array_partition variable = v12146 complete dim = 1
#pragma HLS array_partition variable = v12146 complete dim = 2

  float v472;      // L15959
  v472 = 0.000000; // L15960
l_S_k_0_k486:
  for (int k486 = 0; k486 < 3072; k486++) { // L15961
    float v12151 = v12142.read();           // v12142[k486];	// L15962
    float a472;                             // L15963
    a472 = v12151;                          // L15964
    float v12153 = v12143.read();           // v12143[k486];	// L15965
    float b472;                             // L15966
    b472 = v12153;                          // L15967
    float v12155 = a472;                    // L15968
    float v12156 = b472;                    // L15969
    float v12157 = v12155 * v12156;         // L15970
    float v12158 = v472;                    // L15971
    float v12159 = v12158 + v12157;         // L15972
    v472 = v12159;                          // L15973
    float v12160 = a472;                    // L15974
    v12144.write(v12160);                   // v12144[k486] = v12160;	// L15975
    float v12161 = b472;                    // L15976
    v12145.write(v12161);                   // v12145[k486] = v12161;	// L15977
  }
  float v12162 = v472;             // L15979
  v12146[v12147][v12148] = v12162; // L15980
}

void PE_kernel_ffn2_1_3(hls::stream<float> &v12163 /* v12163[3072] */,
                        hls::stream<float> &v12164 /* v12164[3072] */,
                        hls::stream<float> &v12165 /* v12165[3072] */,
                        hls::stream<float> &v12166 /* v12166[3072] */,
                        float v12167[8][8], int v12168,
                        int v12169) { // L15983
#pragma HLS stream variable = v12163 depth = 9
#pragma HLS stream variable = v12164 depth = 9
#pragma HLS stream variable = v12165 depth = 9
#pragma HLS stream variable = v12166 depth = 9
#pragma HLS array_partition variable = v12167 complete dim = 1
#pragma HLS array_partition variable = v12167 complete dim = 2

  float v473;      // L15986
  v473 = 0.000000; // L15987
l_S_k_0_k487:
  for (int k487 = 0; k487 < 3072; k487++) { // L15988
    float v12172 = v12163.read();           // v12163[k487];	// L15989
    float a473;                             // L15990
    a473 = v12172;                          // L15991
    float v12174 = v12164.read();           // v12164[k487];	// L15992
    float b473;                             // L15993
    b473 = v12174;                          // L15994
    float v12176 = a473;                    // L15995
    float v12177 = b473;                    // L15996
    float v12178 = v12176 * v12177;         // L15997
    float v12179 = v473;                    // L15998
    float v12180 = v12179 + v12178;         // L15999
    v473 = v12180;                          // L16000
    float v12181 = a473;                    // L16001
    v12165.write(v12181);                   // v12165[k487] = v12181;	// L16002
    float v12182 = b473;                    // L16003
    v12166.write(v12182);                   // v12166[k487] = v12182;	// L16004
  }
  float v12183 = v473;             // L16006
  v12167[v12168][v12169] = v12183; // L16007
}

void PE_kernel_ffn2_2_3(hls::stream<float> &v12184 /* v12184[3072] */,
                        hls::stream<float> &v12185 /* v12185[3072] */,
                        hls::stream<float> &v12186 /* v12186[3072] */,
                        hls::stream<float> &v12187 /* v12187[3072] */,
                        float v12188[8][8], int v12189,
                        int v12190) { // L16010
#pragma HLS stream variable = v12184 depth = 9
#pragma HLS stream variable = v12185 depth = 9
#pragma HLS stream variable = v12186 depth = 9
#pragma HLS stream variable = v12187 depth = 9
#pragma HLS array_partition variable = v12188 complete dim = 1
#pragma HLS array_partition variable = v12188 complete dim = 2

  float v474;      // L16013
  v474 = 0.000000; // L16014
l_S_k_0_k488:
  for (int k488 = 0; k488 < 3072; k488++) { // L16015
    float v12193 = v12184.read();           // v12184[k488];	// L16016
    float a474;                             // L16017
    a474 = v12193;                          // L16018
    float v12195 = v12185.read();           // v12185[k488];	// L16019
    float b474;                             // L16020
    b474 = v12195;                          // L16021
    float v12197 = a474;                    // L16022
    float v12198 = b474;                    // L16023
    float v12199 = v12197 * v12198;         // L16024
    float v12200 = v474;                    // L16025
    float v12201 = v12200 + v12199;         // L16026
    v474 = v12201;                          // L16027
    float v12202 = a474;                    // L16028
    v12186.write(v12202);                   // v12186[k488] = v12202;	// L16029
    float v12203 = b474;                    // L16030
    v12187.write(v12203);                   // v12187[k488] = v12203;	// L16031
  }
  float v12204 = v474;             // L16033
  v12188[v12189][v12190] = v12204; // L16034
}

void PE_kernel_ffn2_3_3(hls::stream<float> &v12205 /* v12205[3072] */,
                        hls::stream<float> &v12206 /* v12206[3072] */,
                        hls::stream<float> &v12207 /* v12207[3072] */,
                        hls::stream<float> &v12208 /* v12208[3072] */,
                        float v12209[8][8], int v12210,
                        int v12211) { // L16037
#pragma HLS stream variable = v12205 depth = 9
#pragma HLS stream variable = v12206 depth = 9
#pragma HLS stream variable = v12207 depth = 9
#pragma HLS stream variable = v12208 depth = 9
#pragma HLS array_partition variable = v12209 complete dim = 1
#pragma HLS array_partition variable = v12209 complete dim = 2

  float v475;      // L16040
  v475 = 0.000000; // L16041
l_S_k_0_k489:
  for (int k489 = 0; k489 < 3072; k489++) { // L16042
    float v12214 = v12205.read();           // v12205[k489];	// L16043
    float a475;                             // L16044
    a475 = v12214;                          // L16045
    float v12216 = v12206.read();           // v12206[k489];	// L16046
    float b475;                             // L16047
    b475 = v12216;                          // L16048
    float v12218 = a475;                    // L16049
    float v12219 = b475;                    // L16050
    float v12220 = v12218 * v12219;         // L16051
    float v12221 = v475;                    // L16052
    float v12222 = v12221 + v12220;         // L16053
    v475 = v12222;                          // L16054
    float v12223 = a475;                    // L16055
    v12207.write(v12223);                   // v12207[k489] = v12223;	// L16056
    float v12224 = b475;                    // L16057
    v12208.write(v12224);                   // v12208[k489] = v12224;	// L16058
  }
  float v12225 = v475;             // L16060
  v12209[v12210][v12211] = v12225; // L16061
}

void PE_kernel_ffn2_4_3(hls::stream<float> &v12226 /* v12226[3072] */,
                        hls::stream<float> &v12227 /* v12227[3072] */,
                        hls::stream<float> &v12228 /* v12228[3072] */,
                        hls::stream<float> &v12229 /* v12229[3072] */,
                        float v12230[8][8], int v12231,
                        int v12232) { // L16064
#pragma HLS stream variable = v12226 depth = 9
#pragma HLS stream variable = v12227 depth = 9
#pragma HLS stream variable = v12228 depth = 9
#pragma HLS stream variable = v12229 depth = 9
#pragma HLS array_partition variable = v12230 complete dim = 1
#pragma HLS array_partition variable = v12230 complete dim = 2

  float v476;      // L16067
  v476 = 0.000000; // L16068
l_S_k_0_k490:
  for (int k490 = 0; k490 < 3072; k490++) { // L16069
    float v12235 = v12226.read();           // v12226[k490];	// L16070
    float a476;                             // L16071
    a476 = v12235;                          // L16072
    float v12237 = v12227.read();           // v12227[k490];	// L16073
    float b476;                             // L16074
    b476 = v12237;                          // L16075
    float v12239 = a476;                    // L16076
    float v12240 = b476;                    // L16077
    float v12241 = v12239 * v12240;         // L16078
    float v12242 = v476;                    // L16079
    float v12243 = v12242 + v12241;         // L16080
    v476 = v12243;                          // L16081
    float v12244 = a476;                    // L16082
    v12228.write(v12244);                   // v12228[k490] = v12244;	// L16083
    float v12245 = b476;                    // L16084
    v12229.write(v12245);                   // v12229[k490] = v12245;	// L16085
  }
  float v12246 = v476;             // L16087
  v12230[v12231][v12232] = v12246; // L16088
}

void PE_kernel_ffn2_5_3(hls::stream<float> &v12247 /* v12247[3072] */,
                        hls::stream<float> &v12248 /* v12248[3072] */,
                        hls::stream<float> &v12249 /* v12249[3072] */,
                        hls::stream<float> &v12250 /* v12250[3072] */,
                        float v12251[8][8], int v12252,
                        int v12253) { // L16091
#pragma HLS stream variable = v12247 depth = 9
#pragma HLS stream variable = v12248 depth = 9
#pragma HLS stream variable = v12249 depth = 9
#pragma HLS stream variable = v12250 depth = 9
#pragma HLS array_partition variable = v12251 complete dim = 1
#pragma HLS array_partition variable = v12251 complete dim = 2

  float v477;      // L16094
  v477 = 0.000000; // L16095
l_S_k_0_k491:
  for (int k491 = 0; k491 < 3072; k491++) { // L16096
    float v12256 = v12247.read();           // v12247[k491];	// L16097
    float a477;                             // L16098
    a477 = v12256;                          // L16099
    float v12258 = v12248.read();           // v12248[k491];	// L16100
    float b477;                             // L16101
    b477 = v12258;                          // L16102
    float v12260 = a477;                    // L16103
    float v12261 = b477;                    // L16104
    float v12262 = v12260 * v12261;         // L16105
    float v12263 = v477;                    // L16106
    float v12264 = v12263 + v12262;         // L16107
    v477 = v12264;                          // L16108
    float v12265 = a477;                    // L16109
    v12249.write(v12265);                   // v12249[k491] = v12265;	// L16110
    float v12266 = b477;                    // L16111
    v12250.write(v12266);                   // v12250[k491] = v12266;	// L16112
  }
  float v12267 = v477;             // L16114
  v12251[v12252][v12253] = v12267; // L16115
}

void PE_kernel_ffn2_6_3(hls::stream<float> &v12268 /* v12268[3072] */,
                        hls::stream<float> &v12269 /* v12269[3072] */,
                        hls::stream<float> &v12270 /* v12270[3072] */,
                        hls::stream<float> &v12271 /* v12271[3072] */,
                        float v12272[8][8], int v12273,
                        int v12274) { // L16118
#pragma HLS stream variable = v12268 depth = 9
#pragma HLS stream variable = v12269 depth = 9
#pragma HLS stream variable = v12270 depth = 9
#pragma HLS stream variable = v12271 depth = 9
#pragma HLS array_partition variable = v12272 complete dim = 1
#pragma HLS array_partition variable = v12272 complete dim = 2

  float v478;      // L16121
  v478 = 0.000000; // L16122
l_S_k_0_k492:
  for (int k492 = 0; k492 < 3072; k492++) { // L16123
    float v12277 = v12268.read();           // v12268[k492];	// L16124
    float a478;                             // L16125
    a478 = v12277;                          // L16126
    float v12279 = v12269.read();           // v12269[k492];	// L16127
    float b478;                             // L16128
    b478 = v12279;                          // L16129
    float v12281 = a478;                    // L16130
    float v12282 = b478;                    // L16131
    float v12283 = v12281 * v12282;         // L16132
    float v12284 = v478;                    // L16133
    float v12285 = v12284 + v12283;         // L16134
    v478 = v12285;                          // L16135
    float v12286 = a478;                    // L16136
    v12270.write(v12286);                   // v12270[k492] = v12286;	// L16137
    float v12287 = b478;                    // L16138
    v12271.write(v12287);                   // v12271[k492] = v12287;	// L16139
  }
  float v12288 = v478;             // L16141
  v12272[v12273][v12274] = v12288; // L16142
}

void PE_kernel_ffn2_7_3(hls::stream<float> &v12289 /* v12289[3072] */,
                        hls::stream<float> &v12290 /* v12290[3072] */,
                        hls::stream<float> &v12291 /* v12291[3072] */,
                        hls::stream<float> &v12292 /* v12292[3072] */,
                        float v12293[8][8], int v12294,
                        int v12295) { // L16145
#pragma HLS stream variable = v12289 depth = 9
#pragma HLS stream variable = v12290 depth = 9
#pragma HLS stream variable = v12291 depth = 9
#pragma HLS stream variable = v12292 depth = 9
#pragma HLS array_partition variable = v12293 complete dim = 1
#pragma HLS array_partition variable = v12293 complete dim = 2

  float v479;      // L16148
  v479 = 0.000000; // L16149
l_S_k_0_k493:
  for (int k493 = 0; k493 < 3072; k493++) { // L16150
    float v12298 = v12289.read();           // v12289[k493];	// L16151
    float a479;                             // L16152
    a479 = v12298;                          // L16153
    float v12300 = v12290.read();           // v12290[k493];	// L16154
    float b479;                             // L16155
    b479 = v12300;                          // L16156
    float v12302 = a479;                    // L16157
    float v12303 = b479;                    // L16158
    float v12304 = v12302 * v12303;         // L16159
    float v12305 = v479;                    // L16160
    float v12306 = v12305 + v12304;         // L16161
    v479 = v12306;                          // L16162
    float v12307 = a479;                    // L16163
    v12291.write(v12307);                   // v12291[k493] = v12307;	// L16164
    float v12308 = b479;                    // L16165
    v12292.write(v12308);                   // v12292[k493] = v12308;	// L16166
  }
  float v12309 = v479;             // L16168
  v12293[v12294][v12295] = v12309; // L16169
}

void PE_kernel_ffn2_0_4(hls::stream<float> &v12310 /* v12310[3072] */,
                        hls::stream<float> &v12311 /* v12311[3072] */,
                        hls::stream<float> &v12312 /* v12312[3072] */,
                        hls::stream<float> &v12313 /* v12313[3072] */,
                        float v12314[8][8], int v12315,
                        int v12316) { // L16172
#pragma HLS stream variable = v12310 depth = 9
#pragma HLS stream variable = v12311 depth = 9
#pragma HLS stream variable = v12312 depth = 9
#pragma HLS stream variable = v12313 depth = 9
#pragma HLS array_partition variable = v12314 complete dim = 1
#pragma HLS array_partition variable = v12314 complete dim = 2

  float v480;      // L16175
  v480 = 0.000000; // L16176
l_S_k_0_k494:
  for (int k494 = 0; k494 < 3072; k494++) { // L16177
    float v12319 = v12310.read();           // v12310[k494];	// L16178
    float a480;                             // L16179
    a480 = v12319;                          // L16180
    float v12321 = v12311.read();           // v12311[k494];	// L16181
    float b480;                             // L16182
    b480 = v12321;                          // L16183
    float v12323 = a480;                    // L16184
    float v12324 = b480;                    // L16185
    float v12325 = v12323 * v12324;         // L16186
    float v12326 = v480;                    // L16187
    float v12327 = v12326 + v12325;         // L16188
    v480 = v12327;                          // L16189
    float v12328 = a480;                    // L16190
    v12312.write(v12328);                   // v12312[k494] = v12328;	// L16191
    float v12329 = b480;                    // L16192
    v12313.write(v12329);                   // v12313[k494] = v12329;	// L16193
  }
  float v12330 = v480;             // L16195
  v12314[v12315][v12316] = v12330; // L16196
}

void PE_kernel_ffn2_1_4(hls::stream<float> &v12331 /* v12331[3072] */,
                        hls::stream<float> &v12332 /* v12332[3072] */,
                        hls::stream<float> &v12333 /* v12333[3072] */,
                        hls::stream<float> &v12334 /* v12334[3072] */,
                        float v12335[8][8], int v12336,
                        int v12337) { // L16199
#pragma HLS stream variable = v12331 depth = 9
#pragma HLS stream variable = v12332 depth = 9
#pragma HLS stream variable = v12333 depth = 9
#pragma HLS stream variable = v12334 depth = 9
#pragma HLS array_partition variable = v12335 complete dim = 1
#pragma HLS array_partition variable = v12335 complete dim = 2

  float v481;      // L16202
  v481 = 0.000000; // L16203
l_S_k_0_k495:
  for (int k495 = 0; k495 < 3072; k495++) { // L16204
    float v12340 = v12331.read();           // v12331[k495];	// L16205
    float a481;                             // L16206
    a481 = v12340;                          // L16207
    float v12342 = v12332.read();           // v12332[k495];	// L16208
    float b481;                             // L16209
    b481 = v12342;                          // L16210
    float v12344 = a481;                    // L16211
    float v12345 = b481;                    // L16212
    float v12346 = v12344 * v12345;         // L16213
    float v12347 = v481;                    // L16214
    float v12348 = v12347 + v12346;         // L16215
    v481 = v12348;                          // L16216
    float v12349 = a481;                    // L16217
    v12333.write(v12349);                   // v12333[k495] = v12349;	// L16218
    float v12350 = b481;                    // L16219
    v12334.write(v12350);                   // v12334[k495] = v12350;	// L16220
  }
  float v12351 = v481;             // L16222
  v12335[v12336][v12337] = v12351; // L16223
}

void PE_kernel_ffn2_2_4(hls::stream<float> &v12352 /* v12352[3072] */,
                        hls::stream<float> &v12353 /* v12353[3072] */,
                        hls::stream<float> &v12354 /* v12354[3072] */,
                        hls::stream<float> &v12355 /* v12355[3072] */,
                        float v12356[8][8], int v12357,
                        int v12358) { // L16226
#pragma HLS stream variable = v12352 depth = 9
#pragma HLS stream variable = v12353 depth = 9
#pragma HLS stream variable = v12354 depth = 9
#pragma HLS stream variable = v12355 depth = 9
#pragma HLS array_partition variable = v12356 complete dim = 1
#pragma HLS array_partition variable = v12356 complete dim = 2

  float v482;      // L16229
  v482 = 0.000000; // L16230
l_S_k_0_k496:
  for (int k496 = 0; k496 < 3072; k496++) { // L16231
    float v12361 = v12352.read();           // v12352[k496];	// L16232
    float a482;                             // L16233
    a482 = v12361;                          // L16234
    float v12363 = v12353.read();           // v12353[k496];	// L16235
    float b482;                             // L16236
    b482 = v12363;                          // L16237
    float v12365 = a482;                    // L16238
    float v12366 = b482;                    // L16239
    float v12367 = v12365 * v12366;         // L16240
    float v12368 = v482;                    // L16241
    float v12369 = v12368 + v12367;         // L16242
    v482 = v12369;                          // L16243
    float v12370 = a482;                    // L16244
    v12354.write(v12370);                   // v12354[k496] = v12370;	// L16245
    float v12371 = b482;                    // L16246
    v12355.write(v12371);                   // v12355[k496] = v12371;	// L16247
  }
  float v12372 = v482;             // L16249
  v12356[v12357][v12358] = v12372; // L16250
}

void PE_kernel_ffn2_3_4(hls::stream<float> &v12373 /* v12373[3072] */,
                        hls::stream<float> &v12374 /* v12374[3072] */,
                        hls::stream<float> &v12375 /* v12375[3072] */,
                        hls::stream<float> &v12376 /* v12376[3072] */,
                        float v12377[8][8], int v12378,
                        int v12379) { // L16253
#pragma HLS stream variable = v12373 depth = 9
#pragma HLS stream variable = v12374 depth = 9
#pragma HLS stream variable = v12375 depth = 9
#pragma HLS stream variable = v12376 depth = 9
#pragma HLS array_partition variable = v12377 complete dim = 1
#pragma HLS array_partition variable = v12377 complete dim = 2

  float v483;      // L16256
  v483 = 0.000000; // L16257
l_S_k_0_k497:
  for (int k497 = 0; k497 < 3072; k497++) { // L16258
    float v12382 = v12373.read();           // v12373[k497];	// L16259
    float a483;                             // L16260
    a483 = v12382;                          // L16261
    float v12384 = v12374.read();           // v12374[k497];	// L16262
    float b483;                             // L16263
    b483 = v12384;                          // L16264
    float v12386 = a483;                    // L16265
    float v12387 = b483;                    // L16266
    float v12388 = v12386 * v12387;         // L16267
    float v12389 = v483;                    // L16268
    float v12390 = v12389 + v12388;         // L16269
    v483 = v12390;                          // L16270
    float v12391 = a483;                    // L16271
    v12375.write(v12391);                   // v12375[k497] = v12391;	// L16272
    float v12392 = b483;                    // L16273
    v12376.write(v12392);                   // v12376[k497] = v12392;	// L16274
  }
  float v12393 = v483;             // L16276
  v12377[v12378][v12379] = v12393; // L16277
}

void PE_kernel_ffn2_4_4(hls::stream<float> &v12394 /* v12394[3072] */,
                        hls::stream<float> &v12395 /* v12395[3072] */,
                        hls::stream<float> &v12396 /* v12396[3072] */,
                        hls::stream<float> &v12397 /* v12397[3072] */,
                        float v12398[8][8], int v12399,
                        int v12400) { // L16280
#pragma HLS stream variable = v12394 depth = 9
#pragma HLS stream variable = v12395 depth = 9
#pragma HLS stream variable = v12396 depth = 9
#pragma HLS stream variable = v12397 depth = 9
#pragma HLS array_partition variable = v12398 complete dim = 1
#pragma HLS array_partition variable = v12398 complete dim = 2

  float v484;      // L16283
  v484 = 0.000000; // L16284
l_S_k_0_k498:
  for (int k498 = 0; k498 < 3072; k498++) { // L16285
    float v12403 = v12394.read();           // v12394[k498];	// L16286
    float a484;                             // L16287
    a484 = v12403;                          // L16288
    float v12405 = v12395.read();           // v12395[k498];	// L16289
    float b484;                             // L16290
    b484 = v12405;                          // L16291
    float v12407 = a484;                    // L16292
    float v12408 = b484;                    // L16293
    float v12409 = v12407 * v12408;         // L16294
    float v12410 = v484;                    // L16295
    float v12411 = v12410 + v12409;         // L16296
    v484 = v12411;                          // L16297
    float v12412 = a484;                    // L16298
    v12396.write(v12412);                   // v12396[k498] = v12412;	// L16299
    float v12413 = b484;                    // L16300
    v12397.write(v12413);                   // v12397[k498] = v12413;	// L16301
  }
  float v12414 = v484;             // L16303
  v12398[v12399][v12400] = v12414; // L16304
}

void PE_kernel_ffn2_5_4(hls::stream<float> &v12415 /* v12415[3072] */,
                        hls::stream<float> &v12416 /* v12416[3072] */,
                        hls::stream<float> &v12417 /* v12417[3072] */,
                        hls::stream<float> &v12418 /* v12418[3072] */,
                        float v12419[8][8], int v12420,
                        int v12421) { // L16307
#pragma HLS stream variable = v12415 depth = 9
#pragma HLS stream variable = v12416 depth = 9
#pragma HLS stream variable = v12417 depth = 9
#pragma HLS stream variable = v12418 depth = 9
#pragma HLS array_partition variable = v12419 complete dim = 1
#pragma HLS array_partition variable = v12419 complete dim = 2

  float v485;      // L16310
  v485 = 0.000000; // L16311
l_S_k_0_k499:
  for (int k499 = 0; k499 < 3072; k499++) { // L16312
    float v12424 = v12415.read();           // v12415[k499];	// L16313
    float a485;                             // L16314
    a485 = v12424;                          // L16315
    float v12426 = v12416.read();           // v12416[k499];	// L16316
    float b485;                             // L16317
    b485 = v12426;                          // L16318
    float v12428 = a485;                    // L16319
    float v12429 = b485;                    // L16320
    float v12430 = v12428 * v12429;         // L16321
    float v12431 = v485;                    // L16322
    float v12432 = v12431 + v12430;         // L16323
    v485 = v12432;                          // L16324
    float v12433 = a485;                    // L16325
    v12417.write(v12433);                   // v12417[k499] = v12433;	// L16326
    float v12434 = b485;                    // L16327
    v12418.write(v12434);                   // v12418[k499] = v12434;	// L16328
  }
  float v12435 = v485;             // L16330
  v12419[v12420][v12421] = v12435; // L16331
}

void PE_kernel_ffn2_6_4(hls::stream<float> &v12436 /* v12436[3072] */,
                        hls::stream<float> &v12437 /* v12437[3072] */,
                        hls::stream<float> &v12438 /* v12438[3072] */,
                        hls::stream<float> &v12439 /* v12439[3072] */,
                        float v12440[8][8], int v12441,
                        int v12442) { // L16334
#pragma HLS stream variable = v12436 depth = 9
#pragma HLS stream variable = v12437 depth = 9
#pragma HLS stream variable = v12438 depth = 9
#pragma HLS stream variable = v12439 depth = 9
#pragma HLS array_partition variable = v12440 complete dim = 1
#pragma HLS array_partition variable = v12440 complete dim = 2

  float v486;      // L16337
  v486 = 0.000000; // L16338
l_S_k_0_k500:
  for (int k500 = 0; k500 < 3072; k500++) { // L16339
    float v12445 = v12436.read();           // v12436[k500];	// L16340
    float a486;                             // L16341
    a486 = v12445;                          // L16342
    float v12447 = v12437.read();           // v12437[k500];	// L16343
    float b486;                             // L16344
    b486 = v12447;                          // L16345
    float v12449 = a486;                    // L16346
    float v12450 = b486;                    // L16347
    float v12451 = v12449 * v12450;         // L16348
    float v12452 = v486;                    // L16349
    float v12453 = v12452 + v12451;         // L16350
    v486 = v12453;                          // L16351
    float v12454 = a486;                    // L16352
    v12438.write(v12454);                   // v12438[k500] = v12454;	// L16353
    float v12455 = b486;                    // L16354
    v12439.write(v12455);                   // v12439[k500] = v12455;	// L16355
  }
  float v12456 = v486;             // L16357
  v12440[v12441][v12442] = v12456; // L16358
}

void PE_kernel_ffn2_7_4(hls::stream<float> &v12457 /* v12457[3072] */,
                        hls::stream<float> &v12458 /* v12458[3072] */,
                        hls::stream<float> &v12459 /* v12459[3072] */,
                        hls::stream<float> &v12460 /* v12460[3072] */,
                        float v12461[8][8], int v12462,
                        int v12463) { // L16361
#pragma HLS stream variable = v12457 depth = 9
#pragma HLS stream variable = v12458 depth = 9
#pragma HLS stream variable = v12459 depth = 9
#pragma HLS stream variable = v12460 depth = 9
#pragma HLS array_partition variable = v12461 complete dim = 1
#pragma HLS array_partition variable = v12461 complete dim = 2

  float v487;      // L16364
  v487 = 0.000000; // L16365
l_S_k_0_k501:
  for (int k501 = 0; k501 < 3072; k501++) { // L16366
    float v12466 = v12457.read();           // v12457[k501];	// L16367
    float a487;                             // L16368
    a487 = v12466;                          // L16369
    float v12468 = v12458.read();           // v12458[k501];	// L16370
    float b487;                             // L16371
    b487 = v12468;                          // L16372
    float v12470 = a487;                    // L16373
    float v12471 = b487;                    // L16374
    float v12472 = v12470 * v12471;         // L16375
    float v12473 = v487;                    // L16376
    float v12474 = v12473 + v12472;         // L16377
    v487 = v12474;                          // L16378
    float v12475 = a487;                    // L16379
    v12459.write(v12475);                   // v12459[k501] = v12475;	// L16380
    float v12476 = b487;                    // L16381
    v12460.write(v12476);                   // v12460[k501] = v12476;	// L16382
  }
  float v12477 = v487;             // L16384
  v12461[v12462][v12463] = v12477; // L16385
}

void PE_kernel_ffn2_0_5(hls::stream<float> &v12478 /* v12478[3072] */,
                        hls::stream<float> &v12479 /* v12479[3072] */,
                        hls::stream<float> &v12480 /* v12480[3072] */,
                        hls::stream<float> &v12481 /* v12481[3072] */,
                        float v12482[8][8], int v12483,
                        int v12484) { // L16388
#pragma HLS stream variable = v12478 depth = 9
#pragma HLS stream variable = v12479 depth = 9
#pragma HLS stream variable = v12480 depth = 9
#pragma HLS stream variable = v12481 depth = 9
#pragma HLS array_partition variable = v12482 complete dim = 1
#pragma HLS array_partition variable = v12482 complete dim = 2

  float v488;      // L16391
  v488 = 0.000000; // L16392
l_S_k_0_k502:
  for (int k502 = 0; k502 < 3072; k502++) { // L16393
    float v12487 = v12478.read();           // v12478[k502];	// L16394
    float a488;                             // L16395
    a488 = v12487;                          // L16396
    float v12489 = v12479.read();           // v12479[k502];	// L16397
    float b488;                             // L16398
    b488 = v12489;                          // L16399
    float v12491 = a488;                    // L16400
    float v12492 = b488;                    // L16401
    float v12493 = v12491 * v12492;         // L16402
    float v12494 = v488;                    // L16403
    float v12495 = v12494 + v12493;         // L16404
    v488 = v12495;                          // L16405
    float v12496 = a488;                    // L16406
    v12480.write(v12496);                   // v12480[k502] = v12496;	// L16407
    float v12497 = b488;                    // L16408
    v12481.write(v12497);                   // v12481[k502] = v12497;	// L16409
  }
  float v12498 = v488;             // L16411
  v12482[v12483][v12484] = v12498; // L16412
}

void PE_kernel_ffn2_1_5(hls::stream<float> &v12499 /* v12499[3072] */,
                        hls::stream<float> &v12500 /* v12500[3072] */,
                        hls::stream<float> &v12501 /* v12501[3072] */,
                        hls::stream<float> &v12502 /* v12502[3072] */,
                        float v12503[8][8], int v12504,
                        int v12505) { // L16415
#pragma HLS stream variable = v12499 depth = 9
#pragma HLS stream variable = v12500 depth = 9
#pragma HLS stream variable = v12501 depth = 9
#pragma HLS stream variable = v12502 depth = 9
#pragma HLS array_partition variable = v12503 complete dim = 1
#pragma HLS array_partition variable = v12503 complete dim = 2

  float v489;      // L16418
  v489 = 0.000000; // L16419
l_S_k_0_k503:
  for (int k503 = 0; k503 < 3072; k503++) { // L16420
    float v12508 = v12499.read();           // v12499[k503];	// L16421
    float a489;                             // L16422
    a489 = v12508;                          // L16423
    float v12510 = v12500.read();           // v12500[k503];	// L16424
    float b489;                             // L16425
    b489 = v12510;                          // L16426
    float v12512 = a489;                    // L16427
    float v12513 = b489;                    // L16428
    float v12514 = v12512 * v12513;         // L16429
    float v12515 = v489;                    // L16430
    float v12516 = v12515 + v12514;         // L16431
    v489 = v12516;                          // L16432
    float v12517 = a489;                    // L16433
    v12501.write(v12517);                   // v12501[k503] = v12517;	// L16434
    float v12518 = b489;                    // L16435
    v12502.write(v12518);                   // v12502[k503] = v12518;	// L16436
  }
  float v12519 = v489;             // L16438
  v12503[v12504][v12505] = v12519; // L16439
}

void PE_kernel_ffn2_2_5(hls::stream<float> &v12520 /* v12520[3072] */,
                        hls::stream<float> &v12521 /* v12521[3072] */,
                        hls::stream<float> &v12522 /* v12522[3072] */,
                        hls::stream<float> &v12523 /* v12523[3072] */,
                        float v12524[8][8], int v12525,
                        int v12526) { // L16442
#pragma HLS stream variable = v12520 depth = 9
#pragma HLS stream variable = v12521 depth = 9
#pragma HLS stream variable = v12522 depth = 9
#pragma HLS stream variable = v12523 depth = 9
#pragma HLS array_partition variable = v12524 complete dim = 1
#pragma HLS array_partition variable = v12524 complete dim = 2

  float v490;      // L16445
  v490 = 0.000000; // L16446
l_S_k_0_k504:
  for (int k504 = 0; k504 < 3072; k504++) { // L16447
    float v12529 = v12520.read();           // v12520[k504];	// L16448
    float a490;                             // L16449
    a490 = v12529;                          // L16450
    float v12531 = v12521.read();           // v12521[k504];	// L16451
    float b490;                             // L16452
    b490 = v12531;                          // L16453
    float v12533 = a490;                    // L16454
    float v12534 = b490;                    // L16455
    float v12535 = v12533 * v12534;         // L16456
    float v12536 = v490;                    // L16457
    float v12537 = v12536 + v12535;         // L16458
    v490 = v12537;                          // L16459
    float v12538 = a490;                    // L16460
    v12522.write(v12538);                   // v12522[k504] = v12538;	// L16461
    float v12539 = b490;                    // L16462
    v12523.write(v12539);                   // v12523[k504] = v12539;	// L16463
  }
  float v12540 = v490;             // L16465
  v12524[v12525][v12526] = v12540; // L16466
}

void PE_kernel_ffn2_3_5(hls::stream<float> &v12541 /* v12541[3072] */,
                        hls::stream<float> &v12542 /* v12542[3072] */,
                        hls::stream<float> &v12543 /* v12543[3072] */,
                        hls::stream<float> &v12544 /* v12544[3072] */,
                        float v12545[8][8], int v12546,
                        int v12547) { // L16469
#pragma HLS stream variable = v12541 depth = 9
#pragma HLS stream variable = v12542 depth = 9
#pragma HLS stream variable = v12543 depth = 9
#pragma HLS stream variable = v12544 depth = 9
#pragma HLS array_partition variable = v12545 complete dim = 1
#pragma HLS array_partition variable = v12545 complete dim = 2

  float v491;      // L16472
  v491 = 0.000000; // L16473
l_S_k_0_k505:
  for (int k505 = 0; k505 < 3072; k505++) { // L16474
    float v12550 = v12541.read();           // v12541[k505];	// L16475
    float a491;                             // L16476
    a491 = v12550;                          // L16477
    float v12552 = v12542.read();           // v12542[k505];	// L16478
    float b491;                             // L16479
    b491 = v12552;                          // L16480
    float v12554 = a491;                    // L16481
    float v12555 = b491;                    // L16482
    float v12556 = v12554 * v12555;         // L16483
    float v12557 = v491;                    // L16484
    float v12558 = v12557 + v12556;         // L16485
    v491 = v12558;                          // L16486
    float v12559 = a491;                    // L16487
    v12543.write(v12559);                   // v12543[k505] = v12559;	// L16488
    float v12560 = b491;                    // L16489
    v12544.write(v12560);                   // v12544[k505] = v12560;	// L16490
  }
  float v12561 = v491;             // L16492
  v12545[v12546][v12547] = v12561; // L16493
}

void PE_kernel_ffn2_4_5(hls::stream<float> &v12562 /* v12562[3072] */,
                        hls::stream<float> &v12563 /* v12563[3072] */,
                        hls::stream<float> &v12564 /* v12564[3072] */,
                        hls::stream<float> &v12565 /* v12565[3072] */,
                        float v12566[8][8], int v12567,
                        int v12568) { // L16496
#pragma HLS stream variable = v12562 depth = 9
#pragma HLS stream variable = v12563 depth = 9
#pragma HLS stream variable = v12564 depth = 9
#pragma HLS stream variable = v12565 depth = 9
#pragma HLS array_partition variable = v12566 complete dim = 1
#pragma HLS array_partition variable = v12566 complete dim = 2

  float v492;      // L16499
  v492 = 0.000000; // L16500
l_S_k_0_k506:
  for (int k506 = 0; k506 < 3072; k506++) { // L16501
    float v12571 = v12562.read();           // v12562[k506];	// L16502
    float a492;                             // L16503
    a492 = v12571;                          // L16504
    float v12573 = v12563.read();           // v12563[k506];	// L16505
    float b492;                             // L16506
    b492 = v12573;                          // L16507
    float v12575 = a492;                    // L16508
    float v12576 = b492;                    // L16509
    float v12577 = v12575 * v12576;         // L16510
    float v12578 = v492;                    // L16511
    float v12579 = v12578 + v12577;         // L16512
    v492 = v12579;                          // L16513
    float v12580 = a492;                    // L16514
    v12564.write(v12580);                   // v12564[k506] = v12580;	// L16515
    float v12581 = b492;                    // L16516
    v12565.write(v12581);                   // v12565[k506] = v12581;	// L16517
  }
  float v12582 = v492;             // L16519
  v12566[v12567][v12568] = v12582; // L16520
}

void PE_kernel_ffn2_5_5(hls::stream<float> &v12583 /* v12583[3072] */,
                        hls::stream<float> &v12584 /* v12584[3072] */,
                        hls::stream<float> &v12585 /* v12585[3072] */,
                        hls::stream<float> &v12586 /* v12586[3072] */,
                        float v12587[8][8], int v12588,
                        int v12589) { // L16523
#pragma HLS stream variable = v12583 depth = 9
#pragma HLS stream variable = v12584 depth = 9
#pragma HLS stream variable = v12585 depth = 9
#pragma HLS stream variable = v12586 depth = 9
#pragma HLS array_partition variable = v12587 complete dim = 1
#pragma HLS array_partition variable = v12587 complete dim = 2

  float v493;      // L16526
  v493 = 0.000000; // L16527
l_S_k_0_k507:
  for (int k507 = 0; k507 < 3072; k507++) { // L16528
    float v12592 = v12583.read();           // v12583[k507];	// L16529
    float a493;                             // L16530
    a493 = v12592;                          // L16531
    float v12594 = v12584.read();           // v12584[k507];	// L16532
    float b493;                             // L16533
    b493 = v12594;                          // L16534
    float v12596 = a493;                    // L16535
    float v12597 = b493;                    // L16536
    float v12598 = v12596 * v12597;         // L16537
    float v12599 = v493;                    // L16538
    float v12600 = v12599 + v12598;         // L16539
    v493 = v12600;                          // L16540
    float v12601 = a493;                    // L16541
    v12585.write(v12601);                   // v12585[k507] = v12601;	// L16542
    float v12602 = b493;                    // L16543
    v12586.write(v12602);                   // v12586[k507] = v12602;	// L16544
  }
  float v12603 = v493;             // L16546
  v12587[v12588][v12589] = v12603; // L16547
}

void PE_kernel_ffn2_6_5(hls::stream<float> &v12604 /* v12604[3072] */,
                        hls::stream<float> &v12605 /* v12605[3072] */,
                        hls::stream<float> &v12606 /* v12606[3072] */,
                        hls::stream<float> &v12607 /* v12607[3072] */,
                        float v12608[8][8], int v12609,
                        int v12610) { // L16550
#pragma HLS stream variable = v12604 depth = 9
#pragma HLS stream variable = v12605 depth = 9
#pragma HLS stream variable = v12606 depth = 9
#pragma HLS stream variable = v12607 depth = 9
#pragma HLS array_partition variable = v12608 complete dim = 1
#pragma HLS array_partition variable = v12608 complete dim = 2

  float v494;      // L16553
  v494 = 0.000000; // L16554
l_S_k_0_k508:
  for (int k508 = 0; k508 < 3072; k508++) { // L16555
    float v12613 = v12604.read();           // v12604[k508];	// L16556
    float a494;                             // L16557
    a494 = v12613;                          // L16558
    float v12615 = v12605.read();           // v12605[k508];	// L16559
    float b494;                             // L16560
    b494 = v12615;                          // L16561
    float v12617 = a494;                    // L16562
    float v12618 = b494;                    // L16563
    float v12619 = v12617 * v12618;         // L16564
    float v12620 = v494;                    // L16565
    float v12621 = v12620 + v12619;         // L16566
    v494 = v12621;                          // L16567
    float v12622 = a494;                    // L16568
    v12606.write(v12622);                   // v12606[k508] = v12622;	// L16569
    float v12623 = b494;                    // L16570
    v12607.write(v12623);                   // v12607[k508] = v12623;	// L16571
  }
  float v12624 = v494;             // L16573
  v12608[v12609][v12610] = v12624; // L16574
}

void PE_kernel_ffn2_7_5(hls::stream<float> &v12625 /* v12625[3072] */,
                        hls::stream<float> &v12626 /* v12626[3072] */,
                        hls::stream<float> &v12627 /* v12627[3072] */,
                        hls::stream<float> &v12628 /* v12628[3072] */,
                        float v12629[8][8], int v12630,
                        int v12631) { // L16577
#pragma HLS stream variable = v12625 depth = 9
#pragma HLS stream variable = v12626 depth = 9
#pragma HLS stream variable = v12627 depth = 9
#pragma HLS stream variable = v12628 depth = 9
#pragma HLS array_partition variable = v12629 complete dim = 1
#pragma HLS array_partition variable = v12629 complete dim = 2

  float v495;      // L16580
  v495 = 0.000000; // L16581
l_S_k_0_k509:
  for (int k509 = 0; k509 < 3072; k509++) { // L16582
    float v12634 = v12625.read();           // v12625[k509];	// L16583
    float a495;                             // L16584
    a495 = v12634;                          // L16585
    float v12636 = v12626.read();           // v12626[k509];	// L16586
    float b495;                             // L16587
    b495 = v12636;                          // L16588
    float v12638 = a495;                    // L16589
    float v12639 = b495;                    // L16590
    float v12640 = v12638 * v12639;         // L16591
    float v12641 = v495;                    // L16592
    float v12642 = v12641 + v12640;         // L16593
    v495 = v12642;                          // L16594
    float v12643 = a495;                    // L16595
    v12627.write(v12643);                   // v12627[k509] = v12643;	// L16596
    float v12644 = b495;                    // L16597
    v12628.write(v12644);                   // v12628[k509] = v12644;	// L16598
  }
  float v12645 = v495;             // L16600
  v12629[v12630][v12631] = v12645; // L16601
}

void PE_kernel_ffn2_0_6(hls::stream<float> &v12646 /* v12646[3072] */,
                        hls::stream<float> &v12647 /* v12647[3072] */,
                        hls::stream<float> &v12648 /* v12648[3072] */,
                        hls::stream<float> &v12649 /* v12649[3072] */,
                        float v12650[8][8], int v12651,
                        int v12652) { // L16604
#pragma HLS stream variable = v12646 depth = 9
#pragma HLS stream variable = v12647 depth = 9
#pragma HLS stream variable = v12648 depth = 9
#pragma HLS stream variable = v12649 depth = 9
#pragma HLS array_partition variable = v12650 complete dim = 1
#pragma HLS array_partition variable = v12650 complete dim = 2

  float v496;      // L16607
  v496 = 0.000000; // L16608
l_S_k_0_k510:
  for (int k510 = 0; k510 < 3072; k510++) { // L16609
    float v12655 = v12646.read();           // v12646[k510];	// L16610
    float a496;                             // L16611
    a496 = v12655;                          // L16612
    float v12657 = v12647.read();           // v12647[k510];	// L16613
    float b496;                             // L16614
    b496 = v12657;                          // L16615
    float v12659 = a496;                    // L16616
    float v12660 = b496;                    // L16617
    float v12661 = v12659 * v12660;         // L16618
    float v12662 = v496;                    // L16619
    float v12663 = v12662 + v12661;         // L16620
    v496 = v12663;                          // L16621
    float v12664 = a496;                    // L16622
    v12648.write(v12664);                   // v12648[k510] = v12664;	// L16623
    float v12665 = b496;                    // L16624
    v12649.write(v12665);                   // v12649[k510] = v12665;	// L16625
  }
  float v12666 = v496;             // L16627
  v12650[v12651][v12652] = v12666; // L16628
}

void PE_kernel_ffn2_1_6(hls::stream<float> &v12667 /* v12667[3072] */,
                        hls::stream<float> &v12668 /* v12668[3072] */,
                        hls::stream<float> &v12669 /* v12669[3072] */,
                        hls::stream<float> &v12670 /* v12670[3072] */,
                        float v12671[8][8], int v12672,
                        int v12673) { // L16631
#pragma HLS stream variable = v12667 depth = 9
#pragma HLS stream variable = v12668 depth = 9
#pragma HLS stream variable = v12669 depth = 9
#pragma HLS stream variable = v12670 depth = 9
#pragma HLS array_partition variable = v12671 complete dim = 1
#pragma HLS array_partition variable = v12671 complete dim = 2

  float v497;      // L16634
  v497 = 0.000000; // L16635
l_S_k_0_k511:
  for (int k511 = 0; k511 < 3072; k511++) { // L16636
    float v12676 = v12667.read();           // v12667[k511];	// L16637
    float a497;                             // L16638
    a497 = v12676;                          // L16639
    float v12678 = v12668.read();           // v12668[k511];	// L16640
    float b497;                             // L16641
    b497 = v12678;                          // L16642
    float v12680 = a497;                    // L16643
    float v12681 = b497;                    // L16644
    float v12682 = v12680 * v12681;         // L16645
    float v12683 = v497;                    // L16646
    float v12684 = v12683 + v12682;         // L16647
    v497 = v12684;                          // L16648
    float v12685 = a497;                    // L16649
    v12669.write(v12685);                   // v12669[k511] = v12685;	// L16650
    float v12686 = b497;                    // L16651
    v12670.write(v12686);                   // v12670[k511] = v12686;	// L16652
  }
  float v12687 = v497;             // L16654
  v12671[v12672][v12673] = v12687; // L16655
}

void PE_kernel_ffn2_2_6(hls::stream<float> &v12688 /* v12688[3072] */,
                        hls::stream<float> &v12689 /* v12689[3072] */,
                        hls::stream<float> &v12690 /* v12690[3072] */,
                        hls::stream<float> &v12691 /* v12691[3072] */,
                        float v12692[8][8], int v12693,
                        int v12694) { // L16658
#pragma HLS stream variable = v12688 depth = 9
#pragma HLS stream variable = v12689 depth = 9
#pragma HLS stream variable = v12690 depth = 9
#pragma HLS stream variable = v12691 depth = 9
#pragma HLS array_partition variable = v12692 complete dim = 1
#pragma HLS array_partition variable = v12692 complete dim = 2

  float v498;      // L16661
  v498 = 0.000000; // L16662
l_S_k_0_k512:
  for (int k512 = 0; k512 < 3072; k512++) { // L16663
    float v12697 = v12688.read();           // v12688[k512];	// L16664
    float a498;                             // L16665
    a498 = v12697;                          // L16666
    float v12699 = v12689.read();           // v12689[k512];	// L16667
    float b498;                             // L16668
    b498 = v12699;                          // L16669
    float v12701 = a498;                    // L16670
    float v12702 = b498;                    // L16671
    float v12703 = v12701 * v12702;         // L16672
    float v12704 = v498;                    // L16673
    float v12705 = v12704 + v12703;         // L16674
    v498 = v12705;                          // L16675
    float v12706 = a498;                    // L16676
    v12690.write(v12706);                   // v12690[k512] = v12706;	// L16677
    float v12707 = b498;                    // L16678
    v12691.write(v12707);                   // v12691[k512] = v12707;	// L16679
  }
  float v12708 = v498;             // L16681
  v12692[v12693][v12694] = v12708; // L16682
}

void PE_kernel_ffn2_3_6(hls::stream<float> &v12709 /* v12709[3072] */,
                        hls::stream<float> &v12710 /* v12710[3072] */,
                        hls::stream<float> &v12711 /* v12711[3072] */,
                        hls::stream<float> &v12712 /* v12712[3072] */,
                        float v12713[8][8], int v12714,
                        int v12715) { // L16685
#pragma HLS stream variable = v12709 depth = 9
#pragma HLS stream variable = v12710 depth = 9
#pragma HLS stream variable = v12711 depth = 9
#pragma HLS stream variable = v12712 depth = 9
#pragma HLS array_partition variable = v12713 complete dim = 1
#pragma HLS array_partition variable = v12713 complete dim = 2

  float v499;      // L16688
  v499 = 0.000000; // L16689
l_S_k_0_k513:
  for (int k513 = 0; k513 < 3072; k513++) { // L16690
    float v12718 = v12709.read();           // v12709[k513];	// L16691
    float a499;                             // L16692
    a499 = v12718;                          // L16693
    float v12720 = v12710.read();           // v12710[k513];	// L16694
    float b499;                             // L16695
    b499 = v12720;                          // L16696
    float v12722 = a499;                    // L16697
    float v12723 = b499;                    // L16698
    float v12724 = v12722 * v12723;         // L16699
    float v12725 = v499;                    // L16700
    float v12726 = v12725 + v12724;         // L16701
    v499 = v12726;                          // L16702
    float v12727 = a499;                    // L16703
    v12711.write(v12727);                   // v12711[k513] = v12727;	// L16704
    float v12728 = b499;                    // L16705
    v12712.write(v12728);                   // v12712[k513] = v12728;	// L16706
  }
  float v12729 = v499;             // L16708
  v12713[v12714][v12715] = v12729; // L16709
}

void PE_kernel_ffn2_4_6(hls::stream<float> &v12730 /* v12730[3072] */,
                        hls::stream<float> &v12731 /* v12731[3072] */,
                        hls::stream<float> &v12732 /* v12732[3072] */,
                        hls::stream<float> &v12733 /* v12733[3072] */,
                        float v12734[8][8], int v12735,
                        int v12736) { // L16712
#pragma HLS stream variable = v12730 depth = 9
#pragma HLS stream variable = v12731 depth = 9
#pragma HLS stream variable = v12732 depth = 9
#pragma HLS stream variable = v12733 depth = 9
#pragma HLS array_partition variable = v12734 complete dim = 1
#pragma HLS array_partition variable = v12734 complete dim = 2

  float v500;      // L16715
  v500 = 0.000000; // L16716
l_S_k_0_k514:
  for (int k514 = 0; k514 < 3072; k514++) { // L16717
    float v12739 = v12730.read();           // v12730[k514];	// L16718
    float a500;                             // L16719
    a500 = v12739;                          // L16720
    float v12741 = v12731.read();           // v12731[k514];	// L16721
    float b500;                             // L16722
    b500 = v12741;                          // L16723
    float v12743 = a500;                    // L16724
    float v12744 = b500;                    // L16725
    float v12745 = v12743 * v12744;         // L16726
    float v12746 = v500;                    // L16727
    float v12747 = v12746 + v12745;         // L16728
    v500 = v12747;                          // L16729
    float v12748 = a500;                    // L16730
    v12732.write(v12748);                   // v12732[k514] = v12748;	// L16731
    float v12749 = b500;                    // L16732
    v12733.write(v12749);                   // v12733[k514] = v12749;	// L16733
  }
  float v12750 = v500;             // L16735
  v12734[v12735][v12736] = v12750; // L16736
}

void PE_kernel_ffn2_5_6(hls::stream<float> &v12751 /* v12751[3072] */,
                        hls::stream<float> &v12752 /* v12752[3072] */,
                        hls::stream<float> &v12753 /* v12753[3072] */,
                        hls::stream<float> &v12754 /* v12754[3072] */,
                        float v12755[8][8], int v12756,
                        int v12757) { // L16739
#pragma HLS stream variable = v12751 depth = 9
#pragma HLS stream variable = v12752 depth = 9
#pragma HLS stream variable = v12753 depth = 9
#pragma HLS stream variable = v12754 depth = 9
#pragma HLS array_partition variable = v12755 complete dim = 1
#pragma HLS array_partition variable = v12755 complete dim = 2

  float v501;      // L16742
  v501 = 0.000000; // L16743
l_S_k_0_k515:
  for (int k515 = 0; k515 < 3072; k515++) { // L16744
    float v12760 = v12751.read();           // v12751[k515];	// L16745
    float a501;                             // L16746
    a501 = v12760;                          // L16747
    float v12762 = v12752.read();           // v12752[k515];	// L16748
    float b501;                             // L16749
    b501 = v12762;                          // L16750
    float v12764 = a501;                    // L16751
    float v12765 = b501;                    // L16752
    float v12766 = v12764 * v12765;         // L16753
    float v12767 = v501;                    // L16754
    float v12768 = v12767 + v12766;         // L16755
    v501 = v12768;                          // L16756
    float v12769 = a501;                    // L16757
    v12753.write(v12769);                   // v12753[k515] = v12769;	// L16758
    float v12770 = b501;                    // L16759
    v12754.write(v12770);                   // v12754[k515] = v12770;	// L16760
  }
  float v12771 = v501;             // L16762
  v12755[v12756][v12757] = v12771; // L16763
}

void PE_kernel_ffn2_6_6(hls::stream<float> &v12772 /* v12772[3072] */,
                        hls::stream<float> &v12773 /* v12773[3072] */,
                        hls::stream<float> &v12774 /* v12774[3072] */,
                        hls::stream<float> &v12775 /* v12775[3072] */,
                        float v12776[8][8], int v12777,
                        int v12778) { // L16766
#pragma HLS stream variable = v12772 depth = 9
#pragma HLS stream variable = v12773 depth = 9
#pragma HLS stream variable = v12774 depth = 9
#pragma HLS stream variable = v12775 depth = 9
#pragma HLS array_partition variable = v12776 complete dim = 1
#pragma HLS array_partition variable = v12776 complete dim = 2

  float v502;      // L16769
  v502 = 0.000000; // L16770
l_S_k_0_k516:
  for (int k516 = 0; k516 < 3072; k516++) { // L16771
    float v12781 = v12772.read();           // v12772[k516];	// L16772
    float a502;                             // L16773
    a502 = v12781;                          // L16774
    float v12783 = v12773.read();           // v12773[k516];	// L16775
    float b502;                             // L16776
    b502 = v12783;                          // L16777
    float v12785 = a502;                    // L16778
    float v12786 = b502;                    // L16779
    float v12787 = v12785 * v12786;         // L16780
    float v12788 = v502;                    // L16781
    float v12789 = v12788 + v12787;         // L16782
    v502 = v12789;                          // L16783
    float v12790 = a502;                    // L16784
    v12774.write(v12790);                   // v12774[k516] = v12790;	// L16785
    float v12791 = b502;                    // L16786
    v12775.write(v12791);                   // v12775[k516] = v12791;	// L16787
  }
  float v12792 = v502;             // L16789
  v12776[v12777][v12778] = v12792; // L16790
}

void PE_kernel_ffn2_7_6(hls::stream<float> &v12793 /* v12793[3072] */,
                        hls::stream<float> &v12794 /* v12794[3072] */,
                        hls::stream<float> &v12795 /* v12795[3072] */,
                        hls::stream<float> &v12796 /* v12796[3072] */,
                        float v12797[8][8], int v12798,
                        int v12799) { // L16793
#pragma HLS stream variable = v12793 depth = 9
#pragma HLS stream variable = v12794 depth = 9
#pragma HLS stream variable = v12795 depth = 9
#pragma HLS stream variable = v12796 depth = 9
#pragma HLS array_partition variable = v12797 complete dim = 1
#pragma HLS array_partition variable = v12797 complete dim = 2

  float v503;      // L16796
  v503 = 0.000000; // L16797
l_S_k_0_k517:
  for (int k517 = 0; k517 < 3072; k517++) { // L16798
    float v12802 = v12793.read();           // v12793[k517];	// L16799
    float a503;                             // L16800
    a503 = v12802;                          // L16801
    float v12804 = v12794.read();           // v12794[k517];	// L16802
    float b503;                             // L16803
    b503 = v12804;                          // L16804
    float v12806 = a503;                    // L16805
    float v12807 = b503;                    // L16806
    float v12808 = v12806 * v12807;         // L16807
    float v12809 = v503;                    // L16808
    float v12810 = v12809 + v12808;         // L16809
    v503 = v12810;                          // L16810
    float v12811 = a503;                    // L16811
    v12795.write(v12811);                   // v12795[k517] = v12811;	// L16812
    float v12812 = b503;                    // L16813
    v12796.write(v12812);                   // v12796[k517] = v12812;	// L16814
  }
  float v12813 = v503;             // L16816
  v12797[v12798][v12799] = v12813; // L16817
}

void PE_kernel_ffn2_0_7(hls::stream<float> &v12814 /* v12814[3072] */,
                        hls::stream<float> &v12815 /* v12815[3072] */,
                        hls::stream<float> &v12816 /* v12816[3072] */,
                        hls::stream<float> &v12817 /* v12817[3072] */,
                        float v12818[8][8], int v12819,
                        int v12820) { // L16820
#pragma HLS stream variable = v12814 depth = 9
#pragma HLS stream variable = v12815 depth = 9
#pragma HLS stream variable = v12816 depth = 9
#pragma HLS stream variable = v12817 depth = 9
#pragma HLS array_partition variable = v12818 complete dim = 1
#pragma HLS array_partition variable = v12818 complete dim = 2

  float v504;      // L16823
  v504 = 0.000000; // L16824
l_S_k_0_k518:
  for (int k518 = 0; k518 < 3072; k518++) { // L16825
    float v12823 = v12814.read();           // v12814[k518];	// L16826
    float a504;                             // L16827
    a504 = v12823;                          // L16828
    float v12825 = v12815.read();           // v12815[k518];	// L16829
    float b504;                             // L16830
    b504 = v12825;                          // L16831
    float v12827 = a504;                    // L16832
    float v12828 = b504;                    // L16833
    float v12829 = v12827 * v12828;         // L16834
    float v12830 = v504;                    // L16835
    float v12831 = v12830 + v12829;         // L16836
    v504 = v12831;                          // L16837
    float v12832 = a504;                    // L16838
    v12816.write(v12832);                   // v12816[k518] = v12832;	// L16839
    float v12833 = b504;                    // L16840
    v12817.write(v12833);                   // v12817[k518] = v12833;	// L16841
  }
  float v12834 = v504;             // L16843
  v12818[v12819][v12820] = v12834; // L16844
}

void PE_kernel_ffn2_1_7(hls::stream<float> &v12835 /* v12835[3072] */,
                        hls::stream<float> &v12836 /* v12836[3072] */,
                        hls::stream<float> &v12837 /* v12837[3072] */,
                        hls::stream<float> &v12838 /* v12838[3072] */,
                        float v12839[8][8], int v12840,
                        int v12841) { // L16847
#pragma HLS stream variable = v12835 depth = 9
#pragma HLS stream variable = v12836 depth = 9
#pragma HLS stream variable = v12837 depth = 9
#pragma HLS stream variable = v12838 depth = 9
#pragma HLS array_partition variable = v12839 complete dim = 1
#pragma HLS array_partition variable = v12839 complete dim = 2

  float v505;      // L16850
  v505 = 0.000000; // L16851
l_S_k_0_k519:
  for (int k519 = 0; k519 < 3072; k519++) { // L16852
    float v12844 = v12835.read();           // v12835[k519];	// L16853
    float a505;                             // L16854
    a505 = v12844;                          // L16855
    float v12846 = v12836.read();           // v12836[k519];	// L16856
    float b505;                             // L16857
    b505 = v12846;                          // L16858
    float v12848 = a505;                    // L16859
    float v12849 = b505;                    // L16860
    float v12850 = v12848 * v12849;         // L16861
    float v12851 = v505;                    // L16862
    float v12852 = v12851 + v12850;         // L16863
    v505 = v12852;                          // L16864
    float v12853 = a505;                    // L16865
    v12837.write(v12853);                   // v12837[k519] = v12853;	// L16866
    float v12854 = b505;                    // L16867
    v12838.write(v12854);                   // v12838[k519] = v12854;	// L16868
  }
  float v12855 = v505;             // L16870
  v12839[v12840][v12841] = v12855; // L16871
}

void PE_kernel_ffn2_2_7(hls::stream<float> &v12856 /* v12856[3072] */,
                        hls::stream<float> &v12857 /* v12857[3072] */,
                        hls::stream<float> &v12858 /* v12858[3072] */,
                        hls::stream<float> &v12859 /* v12859[3072] */,
                        float v12860[8][8], int v12861,
                        int v12862) { // L16874
#pragma HLS stream variable = v12856 depth = 9
#pragma HLS stream variable = v12857 depth = 9
#pragma HLS stream variable = v12858 depth = 9
#pragma HLS stream variable = v12859 depth = 9
#pragma HLS array_partition variable = v12860 complete dim = 1
#pragma HLS array_partition variable = v12860 complete dim = 2

  float v506;      // L16877
  v506 = 0.000000; // L16878
l_S_k_0_k520:
  for (int k520 = 0; k520 < 3072; k520++) { // L16879
    float v12865 = v12856.read();           // v12856[k520];	// L16880
    float a506;                             // L16881
    a506 = v12865;                          // L16882
    float v12867 = v12857.read();           // v12857[k520];	// L16883
    float b506;                             // L16884
    b506 = v12867;                          // L16885
    float v12869 = a506;                    // L16886
    float v12870 = b506;                    // L16887
    float v12871 = v12869 * v12870;         // L16888
    float v12872 = v506;                    // L16889
    float v12873 = v12872 + v12871;         // L16890
    v506 = v12873;                          // L16891
    float v12874 = a506;                    // L16892
    v12858.write(v12874);                   // v12858[k520] = v12874;	// L16893
    float v12875 = b506;                    // L16894
    v12859.write(v12875);                   // v12859[k520] = v12875;	// L16895
  }
  float v12876 = v506;             // L16897
  v12860[v12861][v12862] = v12876; // L16898
}

void PE_kernel_ffn2_3_7(hls::stream<float> &v12877 /* v12877[3072] */,
                        hls::stream<float> &v12878 /* v12878[3072] */,
                        hls::stream<float> &v12879 /* v12879[3072] */,
                        hls::stream<float> &v12880 /* v12880[3072] */,
                        float v12881[8][8], int v12882,
                        int v12883) { // L16901
#pragma HLS stream variable = v12877 depth = 9
#pragma HLS stream variable = v12878 depth = 9
#pragma HLS stream variable = v12879 depth = 9
#pragma HLS stream variable = v12880 depth = 9
#pragma HLS array_partition variable = v12881 complete dim = 1
#pragma HLS array_partition variable = v12881 complete dim = 2

  float v507;      // L16904
  v507 = 0.000000; // L16905
l_S_k_0_k521:
  for (int k521 = 0; k521 < 3072; k521++) { // L16906
    float v12886 = v12877.read();           // v12877[k521];	// L16907
    float a507;                             // L16908
    a507 = v12886;                          // L16909
    float v12888 = v12878.read();           // v12878[k521];	// L16910
    float b507;                             // L16911
    b507 = v12888;                          // L16912
    float v12890 = a507;                    // L16913
    float v12891 = b507;                    // L16914
    float v12892 = v12890 * v12891;         // L16915
    float v12893 = v507;                    // L16916
    float v12894 = v12893 + v12892;         // L16917
    v507 = v12894;                          // L16918
    float v12895 = a507;                    // L16919
    v12879.write(v12895);                   // v12879[k521] = v12895;	// L16920
    float v12896 = b507;                    // L16921
    v12880.write(v12896);                   // v12880[k521] = v12896;	// L16922
  }
  float v12897 = v507;             // L16924
  v12881[v12882][v12883] = v12897; // L16925
}

void PE_kernel_ffn2_4_7(hls::stream<float> &v12898 /* v12898[3072] */,
                        hls::stream<float> &v12899 /* v12899[3072] */,
                        hls::stream<float> &v12900 /* v12900[3072] */,
                        hls::stream<float> &v12901 /* v12901[3072] */,
                        float v12902[8][8], int v12903,
                        int v12904) { // L16928
#pragma HLS stream variable = v12898 depth = 9
#pragma HLS stream variable = v12899 depth = 9
#pragma HLS stream variable = v12900 depth = 9
#pragma HLS stream variable = v12901 depth = 9
#pragma HLS array_partition variable = v12902 complete dim = 1
#pragma HLS array_partition variable = v12902 complete dim = 2

  float v508;      // L16931
  v508 = 0.000000; // L16932
l_S_k_0_k522:
  for (int k522 = 0; k522 < 3072; k522++) { // L16933
    float v12907 = v12898.read();           // v12898[k522];	// L16934
    float a508;                             // L16935
    a508 = v12907;                          // L16936
    float v12909 = v12899.read();           // v12899[k522];	// L16937
    float b508;                             // L16938
    b508 = v12909;                          // L16939
    float v12911 = a508;                    // L16940
    float v12912 = b508;                    // L16941
    float v12913 = v12911 * v12912;         // L16942
    float v12914 = v508;                    // L16943
    float v12915 = v12914 + v12913;         // L16944
    v508 = v12915;                          // L16945
    float v12916 = a508;                    // L16946
    v12900.write(v12916);                   // v12900[k522] = v12916;	// L16947
    float v12917 = b508;                    // L16948
    v12901.write(v12917);                   // v12901[k522] = v12917;	// L16949
  }
  float v12918 = v508;             // L16951
  v12902[v12903][v12904] = v12918; // L16952
}

void PE_kernel_ffn2_5_7(hls::stream<float> &v12919 /* v12919[3072] */,
                        hls::stream<float> &v12920 /* v12920[3072] */,
                        hls::stream<float> &v12921 /* v12921[3072] */,
                        hls::stream<float> &v12922 /* v12922[3072] */,
                        float v12923[8][8], int v12924,
                        int v12925) { // L16955
#pragma HLS stream variable = v12919 depth = 9
#pragma HLS stream variable = v12920 depth = 9
#pragma HLS stream variable = v12921 depth = 9
#pragma HLS stream variable = v12922 depth = 9
#pragma HLS array_partition variable = v12923 complete dim = 1
#pragma HLS array_partition variable = v12923 complete dim = 2

  float v509;      // L16958
  v509 = 0.000000; // L16959
l_S_k_0_k523:
  for (int k523 = 0; k523 < 3072; k523++) { // L16960
    float v12928 = v12919.read();           // v12919[k523];	// L16961
    float a509;                             // L16962
    a509 = v12928;                          // L16963
    float v12930 = v12920.read();           // v12920[k523];	// L16964
    float b509;                             // L16965
    b509 = v12930;                          // L16966
    float v12932 = a509;                    // L16967
    float v12933 = b509;                    // L16968
    float v12934 = v12932 * v12933;         // L16969
    float v12935 = v509;                    // L16970
    float v12936 = v12935 + v12934;         // L16971
    v509 = v12936;                          // L16972
    float v12937 = a509;                    // L16973
    v12921.write(v12937);                   // v12921[k523] = v12937;	// L16974
    float v12938 = b509;                    // L16975
    v12922.write(v12938);                   // v12922[k523] = v12938;	// L16976
  }
  float v12939 = v509;             // L16978
  v12923[v12924][v12925] = v12939; // L16979
}

void PE_kernel_ffn2_6_7(hls::stream<float> &v12940 /* v12940[3072] */,
                        hls::stream<float> &v12941 /* v12941[3072] */,
                        hls::stream<float> &v12942 /* v12942[3072] */,
                        hls::stream<float> &v12943 /* v12943[3072] */,
                        float v12944[8][8], int v12945,
                        int v12946) { // L16982
#pragma HLS stream variable = v12940 depth = 9
#pragma HLS stream variable = v12941 depth = 9
#pragma HLS stream variable = v12942 depth = 9
#pragma HLS stream variable = v12943 depth = 9
#pragma HLS array_partition variable = v12944 complete dim = 1
#pragma HLS array_partition variable = v12944 complete dim = 2

  float v510;      // L16985
  v510 = 0.000000; // L16986
l_S_k_0_k524:
  for (int k524 = 0; k524 < 3072; k524++) { // L16987
    float v12949 = v12940.read();           // v12940[k524];	// L16988
    float a510;                             // L16989
    a510 = v12949;                          // L16990
    float v12951 = v12941.read();           // v12941[k524];	// L16991
    float b510;                             // L16992
    b510 = v12951;                          // L16993
    float v12953 = a510;                    // L16994
    float v12954 = b510;                    // L16995
    float v12955 = v12953 * v12954;         // L16996
    float v12956 = v510;                    // L16997
    float v12957 = v12956 + v12955;         // L16998
    v510 = v12957;                          // L16999
    float v12958 = a510;                    // L17000
    v12942.write(v12958);                   // v12942[k524] = v12958;	// L17001
    float v12959 = b510;                    // L17002
    v12943.write(v12959);                   // v12943[k524] = v12959;	// L17003
  }
  float v12960 = v510;             // L17005
  v12944[v12945][v12946] = v12960; // L17006
}

void PE_kernel_ffn2_7_7(hls::stream<float> &v12961 /* v12961[3072] */,
                        hls::stream<float> &v12962 /* v12962[3072] */,
                        hls::stream<float> &v12963 /* v12963[3072] */,
                        hls::stream<float> &v12964 /* v12964[3072] */,
                        float v12965[8][8], int v12966,
                        int v12967) { // L17009
#pragma HLS stream variable = v12961 depth = 9
#pragma HLS stream variable = v12962 depth = 9
#pragma HLS stream variable = v12963 depth = 9
#pragma HLS stream variable = v12964 depth = 9
#pragma HLS array_partition variable = v12965 complete dim = 1
#pragma HLS array_partition variable = v12965 complete dim = 2

  float v511;      // L17012
  v511 = 0.000000; // L17013
l_S_k_0_k525:
  for (int k525 = 0; k525 < 3072; k525++) { // L17014
    float v12970 = v12961.read();           // v12961[k525];	// L17015
    float a511;                             // L17016
    a511 = v12970;                          // L17017
    float v12972 = v12962.read();           // v12962[k525];	// L17018
    float b511;                             // L17019
    b511 = v12972;                          // L17020
    float v12974 = a511;                    // L17021
    float v12975 = b511;                    // L17022
    float v12976 = v12974 * v12975;         // L17023
    float v12977 = v511;                    // L17024
    float v12978 = v12977 + v12976;         // L17025
    v511 = v12978;                          // L17026
    float v12979 = a511;                    // L17027
    v12963.write(v12979);                   // v12963[k525] = v12979;	// L17028
    float v12980 = b511;                    // L17029
    v12964.write(v12980);                   // v12964[k525] = v12980;	// L17030
  }
  float v12981 = v511;             // L17032
  v12965[v12966][v12967] = v12981; // L17033
}

void systolic_tile_ffn2(float v12982[8][3072], float v12983[3072][8],
                        float v12984[8][8]) { // L17036
#pragma HLS dataflow
#pragma HLS array_partition variable = v12982 complete dim = 1

#pragma HLS array_partition variable = v12983 complete dim = 2

#pragma HLS array_partition variable = v12984 complete dim = 1
#pragma HLS array_partition variable = v12984 complete dim = 2

  hls::stream<float> A_fifo7[8][9] /* A_fifo7[8][9][3072] */; // L17037
#pragma HLS stream variable = A_fifo7 depth = 9
  hls::stream<float> B_fifo7[8][9] /* B_fifo7[8][9][3072] */; // L17038
#pragma HLS stream variable = B_fifo7 depth = 9
  float A_drain7[8]; // L17039
  float B_drain7[8]; // L17040
l_data_load_k526:
  for (int k526 = 0; k526 < 3072; k526++) { // L17041
  l_S_m_0_m14:
    for (int m14 = 0; m14 < 8; m14++) { // L17042
      float v12991 = v12982[m14][k526]; // L17043
      A_fifo7[m14][0].write(
          v12991); // A_fifo7[m14][0][k526] = v12991;	// L17044
    }
  l_S_n_1_n14:
    for (int n14 = 0; n14 < 8; n14++) { // L17046
      float v12993 = v12983[k526][n14]; // L17047
      B_fifo7[n14][0].write(
          v12993); // B_fifo7[n14][0][k526] = v12993;	// L17048
    }
  }
  hls::stream<float> &v12994 /* v12994[3072] */ = A_fifo7[0][0];    // L17052
  hls::stream<float> &v12995 /* v12995[3072] */ = B_fifo7[0][0];    // L17053
  hls::stream<float> &v12996 /* v12996[3072] */ = A_fifo7[0][1];    // L17059
  hls::stream<float> &v12997 /* v12997[3072] */ = B_fifo7[0][1];    // L17060
  PE_kernel_ffn2_0_0(v12994, v12995, v12996, v12997, v12984, 0, 0); // L17061
  hls::stream<float> &v12998 /* v12998[3072] */ = A_fifo7[0][1];    // L17063
  hls::stream<float> &v12999 /* v12999[3072] */ = B_fifo7[1][0];    // L17064
  hls::stream<float> &v13000 /* v13000[3072] */ = A_fifo7[0][2];    // L17068
  hls::stream<float> &v13001 /* v13001[3072] */ = B_fifo7[1][1];    // L17069
  PE_kernel_ffn2_1_0(v12998, v12999, v13000, v13001, v12984, 0, 1); // L17070
  hls::stream<float> &v13002 /* v13002[3072] */ = A_fifo7[0][2];    // L17072
  hls::stream<float> &v13003 /* v13003[3072] */ = B_fifo7[2][0];    // L17073
  hls::stream<float> &v13004 /* v13004[3072] */ = A_fifo7[0][3];    // L17077
  hls::stream<float> &v13005 /* v13005[3072] */ = B_fifo7[2][1];    // L17078
  PE_kernel_ffn2_2_0(v13002, v13003, v13004, v13005, v12984, 0, 2); // L17079
  hls::stream<float> &v13006 /* v13006[3072] */ = A_fifo7[0][3];    // L17081
  hls::stream<float> &v13007 /* v13007[3072] */ = B_fifo7[3][0];    // L17082
  hls::stream<float> &v13008 /* v13008[3072] */ = A_fifo7[0][4];    // L17086
  hls::stream<float> &v13009 /* v13009[3072] */ = B_fifo7[3][1];    // L17087
  PE_kernel_ffn2_3_0(v13006, v13007, v13008, v13009, v12984, 0, 3); // L17088
  hls::stream<float> &v13010 /* v13010[3072] */ = A_fifo7[0][4];    // L17090
  hls::stream<float> &v13011 /* v13011[3072] */ = B_fifo7[4][0];    // L17091
  hls::stream<float> &v13012 /* v13012[3072] */ = A_fifo7[0][5];    // L17095
  hls::stream<float> &v13013 /* v13013[3072] */ = B_fifo7[4][1];    // L17096
  PE_kernel_ffn2_4_0(v13010, v13011, v13012, v13013, v12984, 0, 4); // L17097
  hls::stream<float> &v13014 /* v13014[3072] */ = A_fifo7[0][5];    // L17099
  hls::stream<float> &v13015 /* v13015[3072] */ = B_fifo7[5][0];    // L17100
  hls::stream<float> &v13016 /* v13016[3072] */ = A_fifo7[0][6];    // L17104
  hls::stream<float> &v13017 /* v13017[3072] */ = B_fifo7[5][1];    // L17105
  PE_kernel_ffn2_5_0(v13014, v13015, v13016, v13017, v12984, 0, 5); // L17106
  hls::stream<float> &v13018 /* v13018[3072] */ = A_fifo7[0][6];    // L17108
  hls::stream<float> &v13019 /* v13019[3072] */ = B_fifo7[6][0];    // L17109
  hls::stream<float> &v13020 /* v13020[3072] */ = A_fifo7[0][7];    // L17113
  hls::stream<float> &v13021 /* v13021[3072] */ = B_fifo7[6][1];    // L17114
  PE_kernel_ffn2_6_0(v13018, v13019, v13020, v13021, v12984, 0, 6); // L17115
  hls::stream<float> &v13022 /* v13022[3072] */ = A_fifo7[0][7];    // L17117
  hls::stream<float> &v13023 /* v13023[3072] */ = B_fifo7[7][0];    // L17118
  hls::stream<float> &v13024 /* v13024[3072] */ = A_fifo7[0][8];    // L17122
  hls::stream<float> &v13025 /* v13025[3072] */ = B_fifo7[7][1];    // L17123
  PE_kernel_ffn2_7_0(v13022, v13023, v13024, v13025, v12984, 0, 7); // L17124
  hls::stream<float> &v13026 /* v13026[3072] */ = A_fifo7[1][0];    // L17125
  hls::stream<float> &v13027 /* v13027[3072] */ = B_fifo7[0][1];    // L17126
  hls::stream<float> &v13028 /* v13028[3072] */ = A_fifo7[1][1];    // L17127
  hls::stream<float> &v13029 /* v13029[3072] */ = B_fifo7[0][2];    // L17128
  PE_kernel_ffn2_0_1(v13026, v13027, v13028, v13029, v12984, 1, 0); // L17129
  hls::stream<float> &v13030 /* v13030[3072] */ = A_fifo7[1][1];    // L17130
  hls::stream<float> &v13031 /* v13031[3072] */ = B_fifo7[1][1];    // L17131
  hls::stream<float> &v13032 /* v13032[3072] */ = A_fifo7[1][2];    // L17132
  hls::stream<float> &v13033 /* v13033[3072] */ = B_fifo7[1][2];    // L17133
  PE_kernel_ffn2_1_1(v13030, v13031, v13032, v13033, v12984, 1, 1); // L17134
  hls::stream<float> &v13034 /* v13034[3072] */ = A_fifo7[1][2];    // L17135
  hls::stream<float> &v13035 /* v13035[3072] */ = B_fifo7[2][1];    // L17136
  hls::stream<float> &v13036 /* v13036[3072] */ = A_fifo7[1][3];    // L17137
  hls::stream<float> &v13037 /* v13037[3072] */ = B_fifo7[2][2];    // L17138
  PE_kernel_ffn2_2_1(v13034, v13035, v13036, v13037, v12984, 1, 2); // L17139
  hls::stream<float> &v13038 /* v13038[3072] */ = A_fifo7[1][3];    // L17140
  hls::stream<float> &v13039 /* v13039[3072] */ = B_fifo7[3][1];    // L17141
  hls::stream<float> &v13040 /* v13040[3072] */ = A_fifo7[1][4];    // L17142
  hls::stream<float> &v13041 /* v13041[3072] */ = B_fifo7[3][2];    // L17143
  PE_kernel_ffn2_3_1(v13038, v13039, v13040, v13041, v12984, 1, 3); // L17144
  hls::stream<float> &v13042 /* v13042[3072] */ = A_fifo7[1][4];    // L17145
  hls::stream<float> &v13043 /* v13043[3072] */ = B_fifo7[4][1];    // L17146
  hls::stream<float> &v13044 /* v13044[3072] */ = A_fifo7[1][5];    // L17147
  hls::stream<float> &v13045 /* v13045[3072] */ = B_fifo7[4][2];    // L17148
  PE_kernel_ffn2_4_1(v13042, v13043, v13044, v13045, v12984, 1, 4); // L17149
  hls::stream<float> &v13046 /* v13046[3072] */ = A_fifo7[1][5];    // L17150
  hls::stream<float> &v13047 /* v13047[3072] */ = B_fifo7[5][1];    // L17151
  hls::stream<float> &v13048 /* v13048[3072] */ = A_fifo7[1][6];    // L17152
  hls::stream<float> &v13049 /* v13049[3072] */ = B_fifo7[5][2];    // L17153
  PE_kernel_ffn2_5_1(v13046, v13047, v13048, v13049, v12984, 1, 5); // L17154
  hls::stream<float> &v13050 /* v13050[3072] */ = A_fifo7[1][6];    // L17155
  hls::stream<float> &v13051 /* v13051[3072] */ = B_fifo7[6][1];    // L17156
  hls::stream<float> &v13052 /* v13052[3072] */ = A_fifo7[1][7];    // L17157
  hls::stream<float> &v13053 /* v13053[3072] */ = B_fifo7[6][2];    // L17158
  PE_kernel_ffn2_6_1(v13050, v13051, v13052, v13053, v12984, 1, 6); // L17159
  hls::stream<float> &v13054 /* v13054[3072] */ = A_fifo7[1][7];    // L17160
  hls::stream<float> &v13055 /* v13055[3072] */ = B_fifo7[7][1];    // L17161
  hls::stream<float> &v13056 /* v13056[3072] */ = A_fifo7[1][8];    // L17162
  hls::stream<float> &v13057 /* v13057[3072] */ = B_fifo7[7][2];    // L17163
  PE_kernel_ffn2_7_1(v13054, v13055, v13056, v13057, v12984, 1, 7); // L17164
  hls::stream<float> &v13058 /* v13058[3072] */ = A_fifo7[2][0];    // L17165
  hls::stream<float> &v13059 /* v13059[3072] */ = B_fifo7[0][2];    // L17166
  hls::stream<float> &v13060 /* v13060[3072] */ = A_fifo7[2][1];    // L17167
  hls::stream<float> &v13061 /* v13061[3072] */ = B_fifo7[0][3];    // L17168
  PE_kernel_ffn2_0_2(v13058, v13059, v13060, v13061, v12984, 2, 0); // L17169
  hls::stream<float> &v13062 /* v13062[3072] */ = A_fifo7[2][1];    // L17170
  hls::stream<float> &v13063 /* v13063[3072] */ = B_fifo7[1][2];    // L17171
  hls::stream<float> &v13064 /* v13064[3072] */ = A_fifo7[2][2];    // L17172
  hls::stream<float> &v13065 /* v13065[3072] */ = B_fifo7[1][3];    // L17173
  PE_kernel_ffn2_1_2(v13062, v13063, v13064, v13065, v12984, 2, 1); // L17174
  hls::stream<float> &v13066 /* v13066[3072] */ = A_fifo7[2][2];    // L17175
  hls::stream<float> &v13067 /* v13067[3072] */ = B_fifo7[2][2];    // L17176
  hls::stream<float> &v13068 /* v13068[3072] */ = A_fifo7[2][3];    // L17177
  hls::stream<float> &v13069 /* v13069[3072] */ = B_fifo7[2][3];    // L17178
  PE_kernel_ffn2_2_2(v13066, v13067, v13068, v13069, v12984, 2, 2); // L17179
  hls::stream<float> &v13070 /* v13070[3072] */ = A_fifo7[2][3];    // L17180
  hls::stream<float> &v13071 /* v13071[3072] */ = B_fifo7[3][2];    // L17181
  hls::stream<float> &v13072 /* v13072[3072] */ = A_fifo7[2][4];    // L17182
  hls::stream<float> &v13073 /* v13073[3072] */ = B_fifo7[3][3];    // L17183
  PE_kernel_ffn2_3_2(v13070, v13071, v13072, v13073, v12984, 2, 3); // L17184
  hls::stream<float> &v13074 /* v13074[3072] */ = A_fifo7[2][4];    // L17185
  hls::stream<float> &v13075 /* v13075[3072] */ = B_fifo7[4][2];    // L17186
  hls::stream<float> &v13076 /* v13076[3072] */ = A_fifo7[2][5];    // L17187
  hls::stream<float> &v13077 /* v13077[3072] */ = B_fifo7[4][3];    // L17188
  PE_kernel_ffn2_4_2(v13074, v13075, v13076, v13077, v12984, 2, 4); // L17189
  hls::stream<float> &v13078 /* v13078[3072] */ = A_fifo7[2][5];    // L17190
  hls::stream<float> &v13079 /* v13079[3072] */ = B_fifo7[5][2];    // L17191
  hls::stream<float> &v13080 /* v13080[3072] */ = A_fifo7[2][6];    // L17192
  hls::stream<float> &v13081 /* v13081[3072] */ = B_fifo7[5][3];    // L17193
  PE_kernel_ffn2_5_2(v13078, v13079, v13080, v13081, v12984, 2, 5); // L17194
  hls::stream<float> &v13082 /* v13082[3072] */ = A_fifo7[2][6];    // L17195
  hls::stream<float> &v13083 /* v13083[3072] */ = B_fifo7[6][2];    // L17196
  hls::stream<float> &v13084 /* v13084[3072] */ = A_fifo7[2][7];    // L17197
  hls::stream<float> &v13085 /* v13085[3072] */ = B_fifo7[6][3];    // L17198
  PE_kernel_ffn2_6_2(v13082, v13083, v13084, v13085, v12984, 2, 6); // L17199
  hls::stream<float> &v13086 /* v13086[3072] */ = A_fifo7[2][7];    // L17200
  hls::stream<float> &v13087 /* v13087[3072] */ = B_fifo7[7][2];    // L17201
  hls::stream<float> &v13088 /* v13088[3072] */ = A_fifo7[2][8];    // L17202
  hls::stream<float> &v13089 /* v13089[3072] */ = B_fifo7[7][3];    // L17203
  PE_kernel_ffn2_7_2(v13086, v13087, v13088, v13089, v12984, 2, 7); // L17204
  hls::stream<float> &v13090 /* v13090[3072] */ = A_fifo7[3][0];    // L17205
  hls::stream<float> &v13091 /* v13091[3072] */ = B_fifo7[0][3];    // L17206
  hls::stream<float> &v13092 /* v13092[3072] */ = A_fifo7[3][1];    // L17207
  hls::stream<float> &v13093 /* v13093[3072] */ = B_fifo7[0][4];    // L17208
  PE_kernel_ffn2_0_3(v13090, v13091, v13092, v13093, v12984, 3, 0); // L17209
  hls::stream<float> &v13094 /* v13094[3072] */ = A_fifo7[3][1];    // L17210
  hls::stream<float> &v13095 /* v13095[3072] */ = B_fifo7[1][3];    // L17211
  hls::stream<float> &v13096 /* v13096[3072] */ = A_fifo7[3][2];    // L17212
  hls::stream<float> &v13097 /* v13097[3072] */ = B_fifo7[1][4];    // L17213
  PE_kernel_ffn2_1_3(v13094, v13095, v13096, v13097, v12984, 3, 1); // L17214
  hls::stream<float> &v13098 /* v13098[3072] */ = A_fifo7[3][2];    // L17215
  hls::stream<float> &v13099 /* v13099[3072] */ = B_fifo7[2][3];    // L17216
  hls::stream<float> &v13100 /* v13100[3072] */ = A_fifo7[3][3];    // L17217
  hls::stream<float> &v13101 /* v13101[3072] */ = B_fifo7[2][4];    // L17218
  PE_kernel_ffn2_2_3(v13098, v13099, v13100, v13101, v12984, 3, 2); // L17219
  hls::stream<float> &v13102 /* v13102[3072] */ = A_fifo7[3][3];    // L17220
  hls::stream<float> &v13103 /* v13103[3072] */ = B_fifo7[3][3];    // L17221
  hls::stream<float> &v13104 /* v13104[3072] */ = A_fifo7[3][4];    // L17222
  hls::stream<float> &v13105 /* v13105[3072] */ = B_fifo7[3][4];    // L17223
  PE_kernel_ffn2_3_3(v13102, v13103, v13104, v13105, v12984, 3, 3); // L17224
  hls::stream<float> &v13106 /* v13106[3072] */ = A_fifo7[3][4];    // L17225
  hls::stream<float> &v13107 /* v13107[3072] */ = B_fifo7[4][3];    // L17226
  hls::stream<float> &v13108 /* v13108[3072] */ = A_fifo7[3][5];    // L17227
  hls::stream<float> &v13109 /* v13109[3072] */ = B_fifo7[4][4];    // L17228
  PE_kernel_ffn2_4_3(v13106, v13107, v13108, v13109, v12984, 3, 4); // L17229
  hls::stream<float> &v13110 /* v13110[3072] */ = A_fifo7[3][5];    // L17230
  hls::stream<float> &v13111 /* v13111[3072] */ = B_fifo7[5][3];    // L17231
  hls::stream<float> &v13112 /* v13112[3072] */ = A_fifo7[3][6];    // L17232
  hls::stream<float> &v13113 /* v13113[3072] */ = B_fifo7[5][4];    // L17233
  PE_kernel_ffn2_5_3(v13110, v13111, v13112, v13113, v12984, 3, 5); // L17234
  hls::stream<float> &v13114 /* v13114[3072] */ = A_fifo7[3][6];    // L17235
  hls::stream<float> &v13115 /* v13115[3072] */ = B_fifo7[6][3];    // L17236
  hls::stream<float> &v13116 /* v13116[3072] */ = A_fifo7[3][7];    // L17237
  hls::stream<float> &v13117 /* v13117[3072] */ = B_fifo7[6][4];    // L17238
  PE_kernel_ffn2_6_3(v13114, v13115, v13116, v13117, v12984, 3, 6); // L17239
  hls::stream<float> &v13118 /* v13118[3072] */ = A_fifo7[3][7];    // L17240
  hls::stream<float> &v13119 /* v13119[3072] */ = B_fifo7[7][3];    // L17241
  hls::stream<float> &v13120 /* v13120[3072] */ = A_fifo7[3][8];    // L17242
  hls::stream<float> &v13121 /* v13121[3072] */ = B_fifo7[7][4];    // L17243
  PE_kernel_ffn2_7_3(v13118, v13119, v13120, v13121, v12984, 3, 7); // L17244
  hls::stream<float> &v13122 /* v13122[3072] */ = A_fifo7[4][0];    // L17245
  hls::stream<float> &v13123 /* v13123[3072] */ = B_fifo7[0][4];    // L17246
  hls::stream<float> &v13124 /* v13124[3072] */ = A_fifo7[4][1];    // L17247
  hls::stream<float> &v13125 /* v13125[3072] */ = B_fifo7[0][5];    // L17248
  PE_kernel_ffn2_0_4(v13122, v13123, v13124, v13125, v12984, 4, 0); // L17249
  hls::stream<float> &v13126 /* v13126[3072] */ = A_fifo7[4][1];    // L17250
  hls::stream<float> &v13127 /* v13127[3072] */ = B_fifo7[1][4];    // L17251
  hls::stream<float> &v13128 /* v13128[3072] */ = A_fifo7[4][2];    // L17252
  hls::stream<float> &v13129 /* v13129[3072] */ = B_fifo7[1][5];    // L17253
  PE_kernel_ffn2_1_4(v13126, v13127, v13128, v13129, v12984, 4, 1); // L17254
  hls::stream<float> &v13130 /* v13130[3072] */ = A_fifo7[4][2];    // L17255
  hls::stream<float> &v13131 /* v13131[3072] */ = B_fifo7[2][4];    // L17256
  hls::stream<float> &v13132 /* v13132[3072] */ = A_fifo7[4][3];    // L17257
  hls::stream<float> &v13133 /* v13133[3072] */ = B_fifo7[2][5];    // L17258
  PE_kernel_ffn2_2_4(v13130, v13131, v13132, v13133, v12984, 4, 2); // L17259
  hls::stream<float> &v13134 /* v13134[3072] */ = A_fifo7[4][3];    // L17260
  hls::stream<float> &v13135 /* v13135[3072] */ = B_fifo7[3][4];    // L17261
  hls::stream<float> &v13136 /* v13136[3072] */ = A_fifo7[4][4];    // L17262
  hls::stream<float> &v13137 /* v13137[3072] */ = B_fifo7[3][5];    // L17263
  PE_kernel_ffn2_3_4(v13134, v13135, v13136, v13137, v12984, 4, 3); // L17264
  hls::stream<float> &v13138 /* v13138[3072] */ = A_fifo7[4][4];    // L17265
  hls::stream<float> &v13139 /* v13139[3072] */ = B_fifo7[4][4];    // L17266
  hls::stream<float> &v13140 /* v13140[3072] */ = A_fifo7[4][5];    // L17267
  hls::stream<float> &v13141 /* v13141[3072] */ = B_fifo7[4][5];    // L17268
  PE_kernel_ffn2_4_4(v13138, v13139, v13140, v13141, v12984, 4, 4); // L17269
  hls::stream<float> &v13142 /* v13142[3072] */ = A_fifo7[4][5];    // L17270
  hls::stream<float> &v13143 /* v13143[3072] */ = B_fifo7[5][4];    // L17271
  hls::stream<float> &v13144 /* v13144[3072] */ = A_fifo7[4][6];    // L17272
  hls::stream<float> &v13145 /* v13145[3072] */ = B_fifo7[5][5];    // L17273
  PE_kernel_ffn2_5_4(v13142, v13143, v13144, v13145, v12984, 4, 5); // L17274
  hls::stream<float> &v13146 /* v13146[3072] */ = A_fifo7[4][6];    // L17275
  hls::stream<float> &v13147 /* v13147[3072] */ = B_fifo7[6][4];    // L17276
  hls::stream<float> &v13148 /* v13148[3072] */ = A_fifo7[4][7];    // L17277
  hls::stream<float> &v13149 /* v13149[3072] */ = B_fifo7[6][5];    // L17278
  PE_kernel_ffn2_6_4(v13146, v13147, v13148, v13149, v12984, 4, 6); // L17279
  hls::stream<float> &v13150 /* v13150[3072] */ = A_fifo7[4][7];    // L17280
  hls::stream<float> &v13151 /* v13151[3072] */ = B_fifo7[7][4];    // L17281
  hls::stream<float> &v13152 /* v13152[3072] */ = A_fifo7[4][8];    // L17282
  hls::stream<float> &v13153 /* v13153[3072] */ = B_fifo7[7][5];    // L17283
  PE_kernel_ffn2_7_4(v13150, v13151, v13152, v13153, v12984, 4, 7); // L17284
  hls::stream<float> &v13154 /* v13154[3072] */ = A_fifo7[5][0];    // L17285
  hls::stream<float> &v13155 /* v13155[3072] */ = B_fifo7[0][5];    // L17286
  hls::stream<float> &v13156 /* v13156[3072] */ = A_fifo7[5][1];    // L17287
  hls::stream<float> &v13157 /* v13157[3072] */ = B_fifo7[0][6];    // L17288
  PE_kernel_ffn2_0_5(v13154, v13155, v13156, v13157, v12984, 5, 0); // L17289
  hls::stream<float> &v13158 /* v13158[3072] */ = A_fifo7[5][1];    // L17290
  hls::stream<float> &v13159 /* v13159[3072] */ = B_fifo7[1][5];    // L17291
  hls::stream<float> &v13160 /* v13160[3072] */ = A_fifo7[5][2];    // L17292
  hls::stream<float> &v13161 /* v13161[3072] */ = B_fifo7[1][6];    // L17293
  PE_kernel_ffn2_1_5(v13158, v13159, v13160, v13161, v12984, 5, 1); // L17294
  hls::stream<float> &v13162 /* v13162[3072] */ = A_fifo7[5][2];    // L17295
  hls::stream<float> &v13163 /* v13163[3072] */ = B_fifo7[2][5];    // L17296
  hls::stream<float> &v13164 /* v13164[3072] */ = A_fifo7[5][3];    // L17297
  hls::stream<float> &v13165 /* v13165[3072] */ = B_fifo7[2][6];    // L17298
  PE_kernel_ffn2_2_5(v13162, v13163, v13164, v13165, v12984, 5, 2); // L17299
  hls::stream<float> &v13166 /* v13166[3072] */ = A_fifo7[5][3];    // L17300
  hls::stream<float> &v13167 /* v13167[3072] */ = B_fifo7[3][5];    // L17301
  hls::stream<float> &v13168 /* v13168[3072] */ = A_fifo7[5][4];    // L17302
  hls::stream<float> &v13169 /* v13169[3072] */ = B_fifo7[3][6];    // L17303
  PE_kernel_ffn2_3_5(v13166, v13167, v13168, v13169, v12984, 5, 3); // L17304
  hls::stream<float> &v13170 /* v13170[3072] */ = A_fifo7[5][4];    // L17305
  hls::stream<float> &v13171 /* v13171[3072] */ = B_fifo7[4][5];    // L17306
  hls::stream<float> &v13172 /* v13172[3072] */ = A_fifo7[5][5];    // L17307
  hls::stream<float> &v13173 /* v13173[3072] */ = B_fifo7[4][6];    // L17308
  PE_kernel_ffn2_4_5(v13170, v13171, v13172, v13173, v12984, 5, 4); // L17309
  hls::stream<float> &v13174 /* v13174[3072] */ = A_fifo7[5][5];    // L17310
  hls::stream<float> &v13175 /* v13175[3072] */ = B_fifo7[5][5];    // L17311
  hls::stream<float> &v13176 /* v13176[3072] */ = A_fifo7[5][6];    // L17312
  hls::stream<float> &v13177 /* v13177[3072] */ = B_fifo7[5][6];    // L17313
  PE_kernel_ffn2_5_5(v13174, v13175, v13176, v13177, v12984, 5, 5); // L17314
  hls::stream<float> &v13178 /* v13178[3072] */ = A_fifo7[5][6];    // L17315
  hls::stream<float> &v13179 /* v13179[3072] */ = B_fifo7[6][5];    // L17316
  hls::stream<float> &v13180 /* v13180[3072] */ = A_fifo7[5][7];    // L17317
  hls::stream<float> &v13181 /* v13181[3072] */ = B_fifo7[6][6];    // L17318
  PE_kernel_ffn2_6_5(v13178, v13179, v13180, v13181, v12984, 5, 6); // L17319
  hls::stream<float> &v13182 /* v13182[3072] */ = A_fifo7[5][7];    // L17320
  hls::stream<float> &v13183 /* v13183[3072] */ = B_fifo7[7][5];    // L17321
  hls::stream<float> &v13184 /* v13184[3072] */ = A_fifo7[5][8];    // L17322
  hls::stream<float> &v13185 /* v13185[3072] */ = B_fifo7[7][6];    // L17323
  PE_kernel_ffn2_7_5(v13182, v13183, v13184, v13185, v12984, 5, 7); // L17324
  hls::stream<float> &v13186 /* v13186[3072] */ = A_fifo7[6][0];    // L17325
  hls::stream<float> &v13187 /* v13187[3072] */ = B_fifo7[0][6];    // L17326
  hls::stream<float> &v13188 /* v13188[3072] */ = A_fifo7[6][1];    // L17327
  hls::stream<float> &v13189 /* v13189[3072] */ = B_fifo7[0][7];    // L17328
  PE_kernel_ffn2_0_6(v13186, v13187, v13188, v13189, v12984, 6, 0); // L17329
  hls::stream<float> &v13190 /* v13190[3072] */ = A_fifo7[6][1];    // L17330
  hls::stream<float> &v13191 /* v13191[3072] */ = B_fifo7[1][6];    // L17331
  hls::stream<float> &v13192 /* v13192[3072] */ = A_fifo7[6][2];    // L17332
  hls::stream<float> &v13193 /* v13193[3072] */ = B_fifo7[1][7];    // L17333
  PE_kernel_ffn2_1_6(v13190, v13191, v13192, v13193, v12984, 6, 1); // L17334
  hls::stream<float> &v13194 /* v13194[3072] */ = A_fifo7[6][2];    // L17335
  hls::stream<float> &v13195 /* v13195[3072] */ = B_fifo7[2][6];    // L17336
  hls::stream<float> &v13196 /* v13196[3072] */ = A_fifo7[6][3];    // L17337
  hls::stream<float> &v13197 /* v13197[3072] */ = B_fifo7[2][7];    // L17338
  PE_kernel_ffn2_2_6(v13194, v13195, v13196, v13197, v12984, 6, 2); // L17339
  hls::stream<float> &v13198 /* v13198[3072] */ = A_fifo7[6][3];    // L17340
  hls::stream<float> &v13199 /* v13199[3072] */ = B_fifo7[3][6];    // L17341
  hls::stream<float> &v13200 /* v13200[3072] */ = A_fifo7[6][4];    // L17342
  hls::stream<float> &v13201 /* v13201[3072] */ = B_fifo7[3][7];    // L17343
  PE_kernel_ffn2_3_6(v13198, v13199, v13200, v13201, v12984, 6, 3); // L17344
  hls::stream<float> &v13202 /* v13202[3072] */ = A_fifo7[6][4];    // L17345
  hls::stream<float> &v13203 /* v13203[3072] */ = B_fifo7[4][6];    // L17346
  hls::stream<float> &v13204 /* v13204[3072] */ = A_fifo7[6][5];    // L17347
  hls::stream<float> &v13205 /* v13205[3072] */ = B_fifo7[4][7];    // L17348
  PE_kernel_ffn2_4_6(v13202, v13203, v13204, v13205, v12984, 6, 4); // L17349
  hls::stream<float> &v13206 /* v13206[3072] */ = A_fifo7[6][5];    // L17350
  hls::stream<float> &v13207 /* v13207[3072] */ = B_fifo7[5][6];    // L17351
  hls::stream<float> &v13208 /* v13208[3072] */ = A_fifo7[6][6];    // L17352
  hls::stream<float> &v13209 /* v13209[3072] */ = B_fifo7[5][7];    // L17353
  PE_kernel_ffn2_5_6(v13206, v13207, v13208, v13209, v12984, 6, 5); // L17354
  hls::stream<float> &v13210 /* v13210[3072] */ = A_fifo7[6][6];    // L17355
  hls::stream<float> &v13211 /* v13211[3072] */ = B_fifo7[6][6];    // L17356
  hls::stream<float> &v13212 /* v13212[3072] */ = A_fifo7[6][7];    // L17357
  hls::stream<float> &v13213 /* v13213[3072] */ = B_fifo7[6][7];    // L17358
  PE_kernel_ffn2_6_6(v13210, v13211, v13212, v13213, v12984, 6, 6); // L17359
  hls::stream<float> &v13214 /* v13214[3072] */ = A_fifo7[6][7];    // L17360
  hls::stream<float> &v13215 /* v13215[3072] */ = B_fifo7[7][6];    // L17361
  hls::stream<float> &v13216 /* v13216[3072] */ = A_fifo7[6][8];    // L17362
  hls::stream<float> &v13217 /* v13217[3072] */ = B_fifo7[7][7];    // L17363
  PE_kernel_ffn2_7_6(v13214, v13215, v13216, v13217, v12984, 6, 7); // L17364
  hls::stream<float> &v13218 /* v13218[3072] */ = A_fifo7[7][0];    // L17365
  hls::stream<float> &v13219 /* v13219[3072] */ = B_fifo7[0][7];    // L17366
  hls::stream<float> &v13220 /* v13220[3072] */ = A_fifo7[7][1];    // L17367
  hls::stream<float> &v13221 /* v13221[3072] */ = B_fifo7[0][8];    // L17368
  PE_kernel_ffn2_0_7(v13218, v13219, v13220, v13221, v12984, 7, 0); // L17369
  hls::stream<float> &v13222 /* v13222[3072] */ = A_fifo7[7][1];    // L17370
  hls::stream<float> &v13223 /* v13223[3072] */ = B_fifo7[1][7];    // L17371
  hls::stream<float> &v13224 /* v13224[3072] */ = A_fifo7[7][2];    // L17372
  hls::stream<float> &v13225 /* v13225[3072] */ = B_fifo7[1][8];    // L17373
  PE_kernel_ffn2_1_7(v13222, v13223, v13224, v13225, v12984, 7, 1); // L17374
  hls::stream<float> &v13226 /* v13226[3072] */ = A_fifo7[7][2];    // L17375
  hls::stream<float> &v13227 /* v13227[3072] */ = B_fifo7[2][7];    // L17376
  hls::stream<float> &v13228 /* v13228[3072] */ = A_fifo7[7][3];    // L17377
  hls::stream<float> &v13229 /* v13229[3072] */ = B_fifo7[2][8];    // L17378
  PE_kernel_ffn2_2_7(v13226, v13227, v13228, v13229, v12984, 7, 2); // L17379
  hls::stream<float> &v13230 /* v13230[3072] */ = A_fifo7[7][3];    // L17380
  hls::stream<float> &v13231 /* v13231[3072] */ = B_fifo7[3][7];    // L17381
  hls::stream<float> &v13232 /* v13232[3072] */ = A_fifo7[7][4];    // L17382
  hls::stream<float> &v13233 /* v13233[3072] */ = B_fifo7[3][8];    // L17383
  PE_kernel_ffn2_3_7(v13230, v13231, v13232, v13233, v12984, 7, 3); // L17384
  hls::stream<float> &v13234 /* v13234[3072] */ = A_fifo7[7][4];    // L17385
  hls::stream<float> &v13235 /* v13235[3072] */ = B_fifo7[4][7];    // L17386
  hls::stream<float> &v13236 /* v13236[3072] */ = A_fifo7[7][5];    // L17387
  hls::stream<float> &v13237 /* v13237[3072] */ = B_fifo7[4][8];    // L17388
  PE_kernel_ffn2_4_7(v13234, v13235, v13236, v13237, v12984, 7, 4); // L17389
  hls::stream<float> &v13238 /* v13238[3072] */ = A_fifo7[7][5];    // L17390
  hls::stream<float> &v13239 /* v13239[3072] */ = B_fifo7[5][7];    // L17391
  hls::stream<float> &v13240 /* v13240[3072] */ = A_fifo7[7][6];    // L17392
  hls::stream<float> &v13241 /* v13241[3072] */ = B_fifo7[5][8];    // L17393
  PE_kernel_ffn2_5_7(v13238, v13239, v13240, v13241, v12984, 7, 5); // L17394
  hls::stream<float> &v13242 /* v13242[3072] */ = A_fifo7[7][6];    // L17395
  hls::stream<float> &v13243 /* v13243[3072] */ = B_fifo7[6][7];    // L17396
  hls::stream<float> &v13244 /* v13244[3072] */ = A_fifo7[7][7];    // L17397
  hls::stream<float> &v13245 /* v13245[3072] */ = B_fifo7[6][8];    // L17398
  PE_kernel_ffn2_6_7(v13242, v13243, v13244, v13245, v12984, 7, 6); // L17399
  hls::stream<float> &v13246 /* v13246[3072] */ = A_fifo7[7][7];    // L17400
  hls::stream<float> &v13247 /* v13247[3072] */ = B_fifo7[7][7];    // L17401
  hls::stream<float> &v13248 /* v13248[3072] */ = A_fifo7[7][8];    // L17402
  hls::stream<float> &v13249 /* v13249[3072] */ = B_fifo7[7][8];    // L17403
  PE_kernel_ffn2_7_7(v13246, v13247, v13248, v13249, v12984, 7, 7); // L17404
l_data_drain_k527:
  for (int k527 = 0; k527 < 3072; k527++) { // L17405
  l_S_m_4_m15:
    for (int m15 = 0; m15 < 8; m15++) { // L17406
      float v13252 =
          A_fifo7[m15][8].read(); // A_fifo7[m15][8][k527];	// L17407
      A_drain7[m15] = v13252;     // L17408
    }
  l_S_n_5_n15:
    for (int n15 = 0; n15 < 8; n15++) { // L17410
      float v13254 =
          B_fifo7[n15][8].read(); // B_fifo7[n15][8][k527];	// L17411
      B_drain7[n15] = v13254;     // L17412
    }
  }
}

void systolic_ffn2(float v13255[64][3072], float v13256[3072][768],
                   float v13257[64][768]) { // L17417
  float local_A7[8][3072];                  // L17418
#pragma HLS array_partition variable = local_A7 complete dim = 1

  float local_B7[3072][8]; // L17419
#pragma HLS array_partition variable = local_B7 complete dim = 2

  float local_C7[8][8]; // L17420
#pragma HLS array_partition variable = local_C7 complete dim = 1
#pragma HLS array_partition variable = local_C7 complete dim = 2

l_outer_tile_mi7:
  for (int mi7 = 0; mi7 < 8; mi7++) { // L17421
  l_ni7:
    for (int ni7 = 0; ni7 < 96; ni7++) { // L17422
                                         // #pragma HLS dataflow
    l_load_A_tile_ak7:
      for (int ak7 = 0; ak7 < 3072; ak7++) { // L17423
      l_ai7:
        for (int ai7 = 0; ai7 < 8; ai7++) { // L17424
#pragma HLS pipeline II = 1
          ap_int<33> v13265 = ni7;                         // L17425
          bool v13266 = v13265 == 0;                       // L17428
          if (v13266) {                                    // L17429
            float v13267 = v13255[((mi7 * 8) + ai7)][ak7]; // L17430
            local_A7[ai7][ak7] = v13267;                   // L17431
          }
        }
      }
    l_load_B_tile_bk7:
      for (int bk7 = 0; bk7 < 3072; bk7++) { // L17435
      l_bj7:
        for (int bj7 = 0; bj7 < 8; bj7++) { // L17436
#pragma HLS pipeline II = 1
          float v13270 = v13256[bk7][((ni7 * 8) + bj7)]; // L17437
          local_B7[bk7][bj7] = v13270;                   // L17438
        }
      }
      systolic_tile_ffn2(local_A7, local_B7, local_C7); // L17441
    l_store_C_tile_sj7:
      for (int sj7 = 0; sj7 < 8; sj7++) { // L17442
      l_si7:
        for (int si7 = 0; si7 < 8; si7++) { // L17443
#pragma HLS pipeline II = 1
          float v13273 = local_C7[si7][sj7];                     // L17444
          v13257[((mi7 * 8) + si7)][((ni7 * 8) + sj7)] = v13273; // L17445
        }
      }
    }
  }
}

void GPTNEOLayer(float *v13274, float *v13275, float *v13276, float *v13277,
                 float *v13278, float *v13279, float *v13280, float *v13281,
                 float *v13282, float *v13283, float *v13284, float *v13285,
                 float *v13286, float *v13287, int32_t *v13288,
                 float *v13289) { // L17452
#pragma HLS interface m_axi port = v13274 offset = slave bundle = gmem0
#pragma HLS interface m_axi port = v13275 offset = slave bundle = gmem1
#pragma HLS interface m_axi port = v13276 offset = slave bundle = gmem2
#pragma HLS interface m_axi port = v13277 offset = slave bundle = gmem3
#pragma HLS interface m_axi port = v13278 offset = slave bundle = gmem4
#pragma HLS interface m_axi port = v13279 offset = slave bundle = gmem5
#pragma HLS interface m_axi port = v13280 offset = slave bundle = gmem6
#pragma HLS interface m_axi port = v13281 offset = slave bundle = gmem7
#pragma HLS interface m_axi port = v13282 offset = slave bundle = gmem8
#pragma HLS interface m_axi port = v13283 offset = slave bundle = gmem9
#pragma HLS interface m_axi port = v13284 offset = slave bundle = gmem10
#pragma HLS interface m_axi port = v13285 offset = slave bundle = gmem11
#pragma HLS interface m_axi port = v13286 offset = slave bundle = gmem12
#pragma HLS interface m_axi port = v13287 offset = slave bundle = gmem13
#pragma HLS interface m_axi port = v13288 offset = slave bundle = gmem14
#pragma HLS interface m_axi port = v13289 offset = slave bundle = gmem15
  float buf0[64][768]; //
l_S_buf0_buf0_l_0:
  for (int buf0_l_0 = 0; buf0_l_0 < 64; buf0_l_0++) { //
  l_buf0_l_1:
    for (int buf0_l_1 = 0; buf0_l_1 < 768; buf0_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13293 = v13274[((buf0_l_0 * 768) + buf0_l_1)]; //
      buf0[buf0_l_0][buf0_l_1] = v13293;                    //
    }
  }
  float buf1[768]; //
l_S_buf1_buf1_l_0:
  for (int buf1_l_0 = 0; buf1_l_0 < 768; buf1_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13296 = v13275[buf1_l_0]; //
    buf1[buf1_l_0] = v13296;         //
  }
  float buf2[768]; //
l_S_buf2_buf2_l_0:
  for (int buf2_l_0 = 0; buf2_l_0 < 768; buf2_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13299 = v13276[buf2_l_0]; //
    buf2[buf2_l_0] = v13299;         //
  }
  float buf3[768][768]; //
l_S_buf3_buf3_l_0:
  for (int buf3_l_0 = 0; buf3_l_0 < 768; buf3_l_0++) { //
  l_buf3_l_1:
    for (int buf3_l_1 = 0; buf3_l_1 < 768; buf3_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13303 = v13277[((buf3_l_0 * 768) + buf3_l_1)]; //
      buf3[buf3_l_0][buf3_l_1] = v13303;                    //
    }
  }
  float buf4[768][768]; //
l_S_buf4_buf4_l_0:
  for (int buf4_l_0 = 0; buf4_l_0 < 768; buf4_l_0++) { //
  l_buf4_l_1:
    for (int buf4_l_1 = 0; buf4_l_1 < 768; buf4_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13307 = v13278[((buf4_l_0 * 768) + buf4_l_1)]; //
      buf4[buf4_l_0][buf4_l_1] = v13307;                    //
    }
  }
  float buf5[768][768]; //
l_S_buf5_buf5_l_0:
  for (int buf5_l_0 = 0; buf5_l_0 < 768; buf5_l_0++) { //
  l_buf5_l_1:
    for (int buf5_l_1 = 0; buf5_l_1 < 768; buf5_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13311 = v13279[((buf5_l_0 * 768) + buf5_l_1)]; //
      buf5[buf5_l_0][buf5_l_1] = v13311;                    //
    }
  }
  float buf6[768][768]; //
l_S_buf6_buf6_l_0:
  for (int buf6_l_0 = 0; buf6_l_0 < 768; buf6_l_0++) { //
  l_buf6_l_1:
    for (int buf6_l_1 = 0; buf6_l_1 < 768; buf6_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13315 = v13280[((buf6_l_0 * 768) + buf6_l_1)]; //
      buf6[buf6_l_0][buf6_l_1] = v13315;                    //
    }
  }
  float buf7[768]; //
l_S_buf7_buf7_l_0:
  for (int buf7_l_0 = 0; buf7_l_0 < 768; buf7_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13318 = v13281[buf7_l_0]; //
    buf7[buf7_l_0] = v13318;         //
  }
  float buf8[768]; //
l_S_buf8_buf8_l_0:
  for (int buf8_l_0 = 0; buf8_l_0 < 768; buf8_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13321 = v13282[buf8_l_0]; //
    buf8[buf8_l_0] = v13321;         //
  }
  float buf9[768]; //
l_S_buf9_buf9_l_0:
  for (int buf9_l_0 = 0; buf9_l_0 < 768; buf9_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13324 = v13283[buf9_l_0]; //
    buf9[buf9_l_0] = v13324;         //
  }
  float buf10[768][3072]; //
l_S_buf10_buf10_l_0:
  for (int buf10_l_0 = 0; buf10_l_0 < 768; buf10_l_0++) { //
  l_buf10_l_1:
    for (int buf10_l_1 = 0; buf10_l_1 < 3072; buf10_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13328 = v13284[((buf10_l_0 * 3072) + buf10_l_1)]; //
      buf10[buf10_l_0][buf10_l_1] = v13328;                    //
    }
  }
  float buf11[3072]; //
l_S_buf11_buf11_l_0:
  for (int buf11_l_0 = 0; buf11_l_0 < 3072; buf11_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13331 = v13285[buf11_l_0]; //
    buf11[buf11_l_0] = v13331;        //
  }
  float buf12[3072][768]; //
l_S_buf12_buf12_l_0:
  for (int buf12_l_0 = 0; buf12_l_0 < 3072; buf12_l_0++) { //
  l_buf12_l_1:
    for (int buf12_l_1 = 0; buf12_l_1 < 768; buf12_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13335 = v13286[((buf12_l_0 * 768) + buf12_l_1)]; //
      buf12[buf12_l_0][buf12_l_1] = v13335;                   //
    }
  }
  float buf13[768]; //
l_S_buf13_buf13_l_0:
  for (int buf13_l_0 = 0; buf13_l_0 < 768; buf13_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    float v13338 = v13287[buf13_l_0]; //
    buf13[buf13_l_0] = v13338;        //
  }
  int32_t buf14[2]; //
l_S_buf14_buf14_l_0:
  for (int buf14_l_0 = 0; buf14_l_0 < 2; buf14_l_0++) { //
#pragma HLS pipeline II = 1 rewind
    int32_t v13341 = v13288[buf14_l_0]; //
    buf14[buf14_l_0] = v13341;          //
  }
  float v13342[64][768];
  layer_norm(buf0, buf1, buf2, v13342);            // L17453
  float Q[64][768];                                // L17456
  for (int v13344 = 0; v13344 < 64; v13344++) {    // L17457
    for (int v13345 = 0; v13345 < 768; v13345++) { // L17457
      Q[v13344][v13345] = 0.000000;                // L17457
    }
  }
  float K[64][768];                                // L17458
  for (int v13347 = 0; v13347 < 64; v13347++) {    // L17459
    for (int v13348 = 0; v13348 < 768; v13348++) { // L17459
      K[v13347][v13348] = 0.000000;                // L17459
    }
  }
  float V[64][768];                                // L17460
  for (int v13350 = 0; v13350 < 64; v13350++) {    // L17461
    for (int v13351 = 0; v13351 < 768; v13351++) { // L17461
      V[v13350][v13351] = 0.000000;                // L17461
    }
  }
  systolic_Q(v13342, buf3, Q); // L17462
  systolic_K(v13342, buf4, K); // L17463
  systolic_V(v13342, buf5, V); // L17464
  float v13352[64][768];
  masked_casual_sdp(Q, K, V, buf14, v13352);       // L17465
  float O_proj[64][768];                           // L17466
  for (int v13354 = 0; v13354 < 64; v13354++) {    // L17467
    for (int v13355 = 0; v13355 < 768; v13355++) { // L17467
      O_proj[v13354][v13355] = 0.000000;           // L17467
    }
  }
  systolic_P(v13352, buf6, O_proj); // L17468
  float v13356[64][768];
  bias_add(O_proj, buf7, v13356); // L17469
  float v13357[64][768];
  residual_add(buf0, v13356, v13357); // L17470
  float v13358[64][768];
  layer_norm(v13357, buf8, buf9, v13358);           // L17471
  float mlp1[64][3072];                             // L17472
  for (int v13360 = 0; v13360 < 64; v13360++) {     // L17473
    for (int v13361 = 0; v13361 < 3072; v13361++) { // L17473
      mlp1[v13360][v13361] = 0.000000;              // L17473
    }
  }
  systolic_ffn1(v13358, buf10, mlp1); // L17474
  float v13362[64][3072];
  bias_add_1(mlp1, buf11, v13362); // L17475
  float v13363[64][3072];
  GeLU(v13362, v13363);                            // L17476
  float mlp2[64][768];                             // L17477
  for (int v13365 = 0; v13365 < 64; v13365++) {    // L17478
    for (int v13366 = 0; v13366 < 768; v13366++) { // L17478
      mlp2[v13365][v13366] = 0.000000;             // L17478
    }
  }
  systolic_ffn2(v13363, buf12, mlp2); // L17479
  float v13367[64][768];
  bias_add(mlp2, buf13, v13367); // L17480
  float v13368[64][768];
  residual_add(v13357, v13367, v13368); // L17481
l_S_result15_result15_l_0:
  for (int result15_l_0 = 0; result15_l_0 < 64; result15_l_0++) { //
  l_result15_l_1:
    for (int result15_l_1 = 0; result15_l_1 < 768; result15_l_1++) { //
#pragma HLS pipeline II = 1 rewind
      float v13371 = v13368[result15_l_0][result15_l_1];      //
      v13289[((result15_l_0 * 768) + result15_l_1)] = v13371; //
    }
  }
}

} // extern "C"
